//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PortablePairBase : Portable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PortablePairBase(global::System.IntPtr cPtr, bool cMemoryOwn) : base(yarpPINVOKE.PortablePairBase_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PortablePairBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PortablePairBase() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_PortablePairBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static bool readPair(ConnectionReader connection, Portable head, Portable body) {
    bool ret = yarpPINVOKE.PortablePairBase_readPair(ConnectionReader.getCPtr(connection), Portable.getCPtr(head), Portable.getCPtr(body));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool writePair(ConnectionWriter connection, Portable head, Portable body) {
    bool ret = yarpPINVOKE.PortablePairBase_writePair(ConnectionWriter.getCPtr(connection), Portable.getCPtr(head), Portable.getCPtr(body));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
