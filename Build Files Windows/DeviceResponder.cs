//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class DeviceResponder : PortReader {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal DeviceResponder(global::System.IntPtr cPtr, bool cMemoryOwn) : base(yarpPINVOKE.DeviceResponder_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DeviceResponder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DeviceResponder() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_DeviceResponder(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public DeviceResponder() : this(yarpPINVOKE.new_DeviceResponder(), true) {
  }

  public void addUsage(string txt, string explain) {
    yarpPINVOKE.DeviceResponder_addUsage__SWIG_0(swigCPtr, txt, explain);
  }

  public void addUsage(string txt) {
    yarpPINVOKE.DeviceResponder_addUsage__SWIG_1(swigCPtr, txt);
  }

  public void addUsage(Bottle bot, string explain) {
    yarpPINVOKE.DeviceResponder_addUsage__SWIG_2(swigCPtr, Bottle.getCPtr(bot), explain);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addUsage(Bottle bot) {
    yarpPINVOKE.DeviceResponder_addUsage__SWIG_3(swigCPtr, Bottle.getCPtr(bot));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool respond(Bottle command, Bottle reply) {
    bool ret = yarpPINVOKE.DeviceResponder_respond(swigCPtr, Bottle.getCPtr(command), Bottle.getCPtr(reply));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool read(ConnectionReader connection) {
    bool ret = yarpPINVOKE.DeviceResponder_read(swigCPtr, ConnectionReader.getCPtr(connection));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new void onRead(Bottle v) {
    yarpPINVOKE.DeviceResponder_onRead(swigCPtr, Bottle.getCPtr(v));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void makeUsage() {
    yarpPINVOKE.DeviceResponder_makeUsage(swigCPtr);
  }

  public void attach(TypedReaderBottle source) {
    yarpPINVOKE.DeviceResponder_attach(swigCPtr, TypedReaderBottle.getCPtr(source));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

}
