//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class TypedReaderImageRgba : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TypedReaderImageRgba(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TypedReaderImageRgba obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TypedReaderImageRgba() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_TypedReaderImageRgba(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public new void setStrict(bool strict) {
    yarpPINVOKE.TypedReaderImageRgba_setStrict__SWIG_0(swigCPtr, strict);
  }

  public new void setStrict() {
    yarpPINVOKE.TypedReaderImageRgba_setStrict__SWIG_1(swigCPtr);
  }

  public new ImageRgba read(bool shouldWait) {
    global::System.IntPtr cPtr = yarpPINVOKE.TypedReaderImageRgba_read__SWIG_0(swigCPtr, shouldWait);
    ImageRgba ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImageRgba(cPtr, false);
    return ret;
  }

  public new ImageRgba read() {
    global::System.IntPtr cPtr = yarpPINVOKE.TypedReaderImageRgba_read__SWIG_1(swigCPtr);
    ImageRgba ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImageRgba(cPtr, false);
    return ret;
  }

  public virtual void interrupt() {
    yarpPINVOKE.TypedReaderImageRgba_interrupt(swigCPtr);
  }

  public new ImageRgba lastRead() {
    global::System.IntPtr cPtr = yarpPINVOKE.TypedReaderImageRgba_lastRead(swigCPtr);
    ImageRgba ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImageRgba(cPtr, false);
    return ret;
  }

  public new bool isClosed() {
    bool ret = yarpPINVOKE.TypedReaderImageRgba_isClosed(swigCPtr);
    return ret;
  }

  public new void useCallback(TypedReaderCallbackImageRgba callback) {
    yarpPINVOKE.TypedReaderImageRgba_useCallback(swigCPtr, TypedReaderCallbackImageRgba.getCPtr(callback));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void disableCallback() {
    yarpPINVOKE.TypedReaderImageRgba_disableCallback(swigCPtr);
  }

  public new int getPendingReads() {
    int ret = yarpPINVOKE.TypedReaderImageRgba_getPendingReads(swigCPtr);
    return ret;
  }

  public virtual string getName() {
    string ret = yarpPINVOKE.TypedReaderImageRgba_getName(swigCPtr);
    return ret;
  }

  public new void setReplier(PortReader reader) {
    yarpPINVOKE.TypedReaderImageRgba_setReplier(swigCPtr, PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual System.IntPtr acquire() { return yarpPINVOKE.TypedReaderImageRgba_acquire(swigCPtr); }

  public virtual void release(System.IntPtr handle) {
    yarpPINVOKE.TypedReaderImageRgba_release(swigCPtr, handle);
  }

  public new void setTargetPeriod(double period) {
    yarpPINVOKE.TypedReaderImageRgba_setTargetPeriod(swigCPtr, period);
  }

}
