/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IRemoteCalibrator : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IRemoteCalibrator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IRemoteCalibrator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IRemoteCalibrator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_IRemoteCalibrator(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual bool setCalibratorDevice(IRemoteCalibrator dev) {
    bool ret = yarpPINVOKE.IRemoteCalibrator_setCalibratorDevice(swigCPtr, IRemoteCalibrator.getCPtr(dev));
    return ret;
  }

  public virtual IRemoteCalibrator getCalibratorDevice() {
    IntPtr cPtr = yarpPINVOKE.IRemoteCalibrator_getCalibratorDevice(swigCPtr);
    IRemoteCalibrator ret = (cPtr == IntPtr.Zero) ? null : new IRemoteCalibrator(cPtr, false);
    return ret;
  }

  public virtual bool isCalibratorDevicePresent(SWIGTYPE_p_bool isCalib) {
    bool ret = yarpPINVOKE.IRemoteCalibrator_isCalibratorDevicePresent(swigCPtr, SWIGTYPE_p_bool.getCPtr(isCalib));
    return ret;
  }

  public virtual void releaseCalibratorDevice() {
    yarpPINVOKE.IRemoteCalibrator_releaseCalibratorDevice(swigCPtr);
  }

  public virtual bool calibrateSingleJoint(int j) {
    bool ret = yarpPINVOKE.IRemoteCalibrator_calibrateSingleJoint(swigCPtr, j);
    return ret;
  }

  public virtual bool calibrateWholePart() {
    bool ret = yarpPINVOKE.IRemoteCalibrator_calibrateWholePart(swigCPtr);
    return ret;
  }

  public virtual bool homingSingleJoint(int j) {
    bool ret = yarpPINVOKE.IRemoteCalibrator_homingSingleJoint(swigCPtr, j);
    return ret;
  }

  public virtual bool homingWholePart() {
    bool ret = yarpPINVOKE.IRemoteCalibrator_homingWholePart(swigCPtr);
    return ret;
  }

  public virtual bool parkSingleJoint(int j, bool _wait) {
    bool ret = yarpPINVOKE.IRemoteCalibrator_parkSingleJoint__SWIG_0(swigCPtr, j, _wait);
    return ret;
  }

  public virtual bool parkSingleJoint(int j) {
    bool ret = yarpPINVOKE.IRemoteCalibrator_parkSingleJoint__SWIG_1(swigCPtr, j);
    return ret;
  }

  public virtual bool parkWholePart() {
    bool ret = yarpPINVOKE.IRemoteCalibrator_parkWholePart(swigCPtr);
    return ret;
  }

  public virtual bool quitCalibrate() {
    bool ret = yarpPINVOKE.IRemoteCalibrator_quitCalibrate(swigCPtr);
    return ret;
  }

  public virtual bool quitPark() {
    bool ret = yarpPINVOKE.IRemoteCalibrator_quitPark(swigCPtr);
    return ret;
  }

}
