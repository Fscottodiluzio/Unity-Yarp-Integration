/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class RateThread : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RateThread(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RateThread obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RateThread() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_RateThread(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual bool threadInit() {
    bool ret = yarpPINVOKE.RateThread_threadInit(swigCPtr);
    return ret;
  }

  public virtual void threadRelease() {
    yarpPINVOKE.RateThread_threadRelease(swigCPtr);
  }

  public virtual void run() {
    yarpPINVOKE.RateThread_run(swigCPtr);
  }

  public bool start() {
    bool ret = yarpPINVOKE.RateThread_start(swigCPtr);
    return ret;
  }

  public bool step() {
    bool ret = yarpPINVOKE.RateThread_step(swigCPtr);
    return ret;
  }

  public void stop() {
    yarpPINVOKE.RateThread_stop(swigCPtr);
  }

  public void askToStop() {
    yarpPINVOKE.RateThread_askToStop(swigCPtr);
  }

  public bool isRunning() {
    bool ret = yarpPINVOKE.RateThread_isRunning(swigCPtr);
    return ret;
  }

  public bool isSuspended() {
    bool ret = yarpPINVOKE.RateThread_isSuspended(swigCPtr);
    return ret;
  }

  public bool setRate(int period) {
    bool ret = yarpPINVOKE.RateThread_setRate(swigCPtr, period);
    return ret;
  }

  public double getRate() {
    double ret = yarpPINVOKE.RateThread_getRate(swigCPtr);
    return ret;
  }

  public void suspend() {
    yarpPINVOKE.RateThread_suspend(swigCPtr);
  }

  public void resume() {
    yarpPINVOKE.RateThread_resume(swigCPtr);
  }

  public void resetStat() {
    yarpPINVOKE.RateThread_resetStat(swigCPtr);
  }

  public double getEstPeriod() {
    double ret = yarpPINVOKE.RateThread_getEstPeriod__SWIG_0(swigCPtr);
    return ret;
  }

  public void getEstPeriod(SWIGTYPE_p_double av, SWIGTYPE_p_double std) {
    yarpPINVOKE.RateThread_getEstPeriod__SWIG_1(swigCPtr, SWIGTYPE_p_double.getCPtr(av), SWIGTYPE_p_double.getCPtr(std));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getIterations() {
    uint ret = yarpPINVOKE.RateThread_getIterations(swigCPtr);
    return ret;
  }

  public double getEstUsed() {
    double ret = yarpPINVOKE.RateThread_getEstUsed__SWIG_0(swigCPtr);
    return ret;
  }

  public void getEstUsed(SWIGTYPE_p_double av, SWIGTYPE_p_double std) {
    yarpPINVOKE.RateThread_getEstUsed__SWIG_1(swigCPtr, SWIGTYPE_p_double.getCPtr(av), SWIGTYPE_p_double.getCPtr(std));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void beforeStart() {
    yarpPINVOKE.RateThread_beforeStart(swigCPtr);
  }

  public virtual void afterStart(bool success) {
    yarpPINVOKE.RateThread_afterStart(swigCPtr, success);
  }

  public int setPriority(int priority, int policy) {
    int ret = yarpPINVOKE.RateThread_setPriority__SWIG_0(swigCPtr, priority, policy);
    return ret;
  }

  public int setPriority(int priority) {
    int ret = yarpPINVOKE.RateThread_setPriority__SWIG_1(swigCPtr, priority);
    return ret;
  }

  public int getPriority() {
    int ret = yarpPINVOKE.RateThread_getPriority(swigCPtr);
    return ret;
  }

  public int getPolicy() {
    int ret = yarpPINVOKE.RateThread_getPolicy(swigCPtr);
    return ret;
  }

}
