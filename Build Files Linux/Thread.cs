/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Thread : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Thread(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Thread obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Thread() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_Thread(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Thread() : this(yarpPINVOKE.new_Thread(), true) {
    SwigDirectorConnect();
  }

  public virtual void run() {
    yarpPINVOKE.Thread_run(swigCPtr);
  }

  public virtual void onStop() {
    if (SwigDerivedClassHasMethod("onStop", swigMethodTypes1)) yarpPINVOKE.Thread_onStopSwigExplicitThread(swigCPtr); else yarpPINVOKE.Thread_onStop(swigCPtr);
  }

  public bool start() {
    bool ret = yarpPINVOKE.Thread_start(swigCPtr);
    return ret;
  }

  public bool stop() {
    bool ret = yarpPINVOKE.Thread_stop(swigCPtr);
    return ret;
  }

  public virtual void beforeStart() {
    if (SwigDerivedClassHasMethod("beforeStart", swigMethodTypes2)) yarpPINVOKE.Thread_beforeStartSwigExplicitThread(swigCPtr); else yarpPINVOKE.Thread_beforeStart(swigCPtr);
  }

  public virtual void afterStart(bool success) {
    if (SwigDerivedClassHasMethod("afterStart", swigMethodTypes3)) yarpPINVOKE.Thread_afterStartSwigExplicitThread(swigCPtr, success); else yarpPINVOKE.Thread_afterStart(swigCPtr, success);
  }

  public virtual bool threadInit() {
    bool ret = (SwigDerivedClassHasMethod("threadInit", swigMethodTypes4) ? yarpPINVOKE.Thread_threadInitSwigExplicitThread(swigCPtr) : yarpPINVOKE.Thread_threadInit(swigCPtr));
    return ret;
  }

  public virtual void threadRelease() {
    if (SwigDerivedClassHasMethod("threadRelease", swigMethodTypes5)) yarpPINVOKE.Thread_threadReleaseSwigExplicitThread(swigCPtr); else yarpPINVOKE.Thread_threadRelease(swigCPtr);
  }

  public bool isStopping() {
    bool ret = yarpPINVOKE.Thread_isStopping(swigCPtr);
    return ret;
  }

  public bool isRunning() {
    bool ret = yarpPINVOKE.Thread_isRunning(swigCPtr);
    return ret;
  }

  public void setOptions(int stackSize) {
    yarpPINVOKE.Thread_setOptions__SWIG_0(swigCPtr, stackSize);
  }

  public void setOptions() {
    yarpPINVOKE.Thread_setOptions__SWIG_1(swigCPtr);
  }

  public static int getCount() {
    int ret = yarpPINVOKE.Thread_getCount();
    return ret;
  }

  public int getKey() {
    int ret = yarpPINVOKE.Thread_getKey(swigCPtr);
    return ret;
  }

  public static int getKeyOfCaller() {
    int ret = yarpPINVOKE.Thread_getKeyOfCaller();
    return ret;
  }

  public int setPriority(int priority, int policy) {
    int ret = yarpPINVOKE.Thread_setPriority__SWIG_0(swigCPtr, priority, policy);
    return ret;
  }

  public int setPriority(int priority) {
    int ret = yarpPINVOKE.Thread_setPriority__SWIG_1(swigCPtr, priority);
    return ret;
  }

  public int getPriority() {
    int ret = yarpPINVOKE.Thread_getPriority(swigCPtr);
    return ret;
  }

  public int getPolicy() {
    int ret = yarpPINVOKE.Thread_getPolicy(swigCPtr);
    return ret;
  }

  public static void setDefaultStackSize(int stackSize) {
    yarpPINVOKE.Thread_setDefaultStackSize(stackSize);
  }

  public bool join(double seconds) {
    bool ret = yarpPINVOKE.Thread_join__SWIG_0(swigCPtr, seconds);
    return ret;
  }

  public bool join() {
    bool ret = yarpPINVOKE.Thread_join__SWIG_1(swigCPtr);
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("run", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateThread_0(SwigDirectorrun);
    if (SwigDerivedClassHasMethod("onStop", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateThread_1(SwigDirectoronStop);
    if (SwigDerivedClassHasMethod("beforeStart", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateThread_2(SwigDirectorbeforeStart);
    if (SwigDerivedClassHasMethod("afterStart", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateThread_3(SwigDirectorafterStart);
    if (SwigDerivedClassHasMethod("threadInit", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateThread_4(SwigDirectorthreadInit);
    if (SwigDerivedClassHasMethod("threadRelease", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateThread_5(SwigDirectorthreadRelease);
    yarpPINVOKE.Thread_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Thread));
    return hasDerivedMethod;
  }

  private void SwigDirectorrun() {
    run();
  }

  private void SwigDirectoronStop() {
    onStop();
  }

  private void SwigDirectorbeforeStart() {
    beforeStart();
  }

  private void SwigDirectorafterStart(bool success) {
    afterStart(success);
  }

  private bool SwigDirectorthreadInit() {
    return threadInit();
  }

  private void SwigDirectorthreadRelease() {
    threadRelease();
  }

  public delegate void SwigDelegateThread_0();
  public delegate void SwigDelegateThread_1();
  public delegate void SwigDelegateThread_2();
  public delegate void SwigDelegateThread_3(bool success);
  public delegate bool SwigDelegateThread_4();
  public delegate void SwigDelegateThread_5();

  private SwigDelegateThread_0 swigDelegate0;
  private SwigDelegateThread_1 swigDelegate1;
  private SwigDelegateThread_2 swigDelegate2;
  private SwigDelegateThread_3 swigDelegate3;
  private SwigDelegateThread_4 swigDelegate4;
  private SwigDelegateThread_5 swigDelegate5;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] {  };
  private static Type[] swigMethodTypes2 = new Type[] {  };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes4 = new Type[] {  };
  private static Type[] swigMethodTypes5 = new Type[] {  };
}
