//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Contact : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Contact(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Contact obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Contact() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_Contact(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Contact(string hostName, int port) : this(yarpPINVOKE.new_Contact__SWIG_0(hostName, port), true) {
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Contact empty() {
    Contact ret = new Contact(yarpPINVOKE.Contact_empty(), true);
    return ret;
  }

  public static Contact invalid() {
    Contact ret = new Contact(yarpPINVOKE.Contact_invalid(), true);
    return ret;
  }

  public static Contact byName(string name) {
    Contact ret = new Contact(yarpPINVOKE.Contact_byName(name), true);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Contact byCarrier(string carrier) {
    Contact ret = new Contact(yarpPINVOKE.Contact_byCarrier(carrier), true);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Contact byConfig(SWIGTYPE_p_Searchable config) {
    Contact ret = new Contact(yarpPINVOKE.Contact_byConfig(SWIGTYPE_p_Searchable.getCPtr(config)), true);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Contact addCarrier(string carrier) {
    Contact ret = new Contact(yarpPINVOKE.Contact_addCarrier(swigCPtr, carrier), true);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Contact addHost(string host) {
    Contact ret = new Contact(yarpPINVOKE.Contact_addHost(swigCPtr, host), true);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Contact addPort(int portnumber) {
    Contact ret = new Contact(yarpPINVOKE.Contact_addPort(swigCPtr, portnumber), true);
    return ret;
  }

  public static Contact bySocket(string carrier, string host, int portNumber) {
    Contact ret = new Contact(yarpPINVOKE.Contact_bySocket(carrier, host, portNumber), true);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Contact addSocket(string carrier, string host, int portNumber) {
    Contact ret = new Contact(yarpPINVOKE.Contact_addSocket(swigCPtr, carrier, host, portNumber), true);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Contact addNested(SWIGTYPE_p_NestedContact nc) {
    Contact ret = new Contact(yarpPINVOKE.Contact_addNested(swigCPtr, SWIGTYPE_p_NestedContact.getCPtr(nc)), true);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Contact addName(string name) {
    Contact ret = new Contact(yarpPINVOKE.Contact_addName(swigCPtr, name), true);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string convertHostToIp(string name) {
    string ret = yarpPINVOKE.Contact_convertHostToIp(name);
    return ret;
  }

  public Contact(Contact alt) : this(yarpPINVOKE.new_Contact__SWIG_1(Contact.getCPtr(alt)), true) {
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = yarpPINVOKE.Contact_getName(swigCPtr);
    return ret;
  }

  public string getHost() {
    string ret = yarpPINVOKE.Contact_getHost(swigCPtr);
    return ret;
  }

  public string getCarrier() {
    string ret = yarpPINVOKE.Contact_getCarrier(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_NestedContact getNested() {
    SWIGTYPE_p_NestedContact ret = new SWIGTYPE_p_NestedContact(yarpPINVOKE.Contact_getNested(swigCPtr), false);
    return ret;
  }

  public int getPort() {
    int ret = yarpPINVOKE.Contact_getPort(swigCPtr);
    return ret;
  }

  public new string toString_c() {
    string ret = yarpPINVOKE.Contact_toString_c(swigCPtr);
    return ret;
  }

  public string toURI() {
    string ret = yarpPINVOKE.Contact_toURI(swigCPtr);
    return ret;
  }

  public static Contact fromString(string txt) {
    Contact ret = new Contact(yarpPINVOKE.Contact_fromString(txt), true);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isValid() {
    bool ret = yarpPINVOKE.Contact_isValid(swigCPtr);
    return ret;
  }

  public Contact() : this(yarpPINVOKE.new_Contact__SWIG_2(), true) {
  }

  public bool hasTimeout() {
    bool ret = yarpPINVOKE.Contact_hasTimeout(swigCPtr);
    return ret;
  }

  public void setTimeout(float timeout) {
    yarpPINVOKE.Contact_setTimeout(swigCPtr, timeout);
  }

  public void setNested(SWIGTYPE_p_yarp__os__NestedContact flavor) {
    yarpPINVOKE.Contact_setNested(swigCPtr, SWIGTYPE_p_yarp__os__NestedContact.getCPtr(flavor));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTimeout() {
    float ret = yarpPINVOKE.Contact_getTimeout(swigCPtr);
    return ret;
  }

  public string getRegName() {
    string ret = yarpPINVOKE.Contact_getRegName(swigCPtr);
    return ret;
  }

  public void setHost(string host) {
    yarpPINVOKE.Contact_setHost(swigCPtr, host);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPort(int port) {
    yarpPINVOKE.Contact_setPort(swigCPtr, port);
  }

}
