/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_yarp_WRAP_H_
#define SWIG_yarp_WRAP_H_

class SwigDirector_PortReader : public yarp::os::PortReader, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_PortReader(JNIEnv *jenv);
    virtual ~SwigDirector_PortReader();
    virtual bool read(yarp::os::ConnectionReader &reader);
    virtual Type getReadType();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_Thread : public yarp::os::Thread, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Thread(JNIEnv *jenv);
    virtual ~SwigDirector_Thread();
    virtual void run();
    virtual void onStop();
    virtual void beforeStart();
    virtual void afterStart(bool success);
    virtual bool threadInit();
    virtual void threadRelease();
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};

class SwigDirector_RFModule : public yarp::os::RFModule, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RFModule(JNIEnv *jenv);
    virtual ~SwigDirector_RFModule();
    virtual double getPeriod();
    virtual bool updateModule();
    virtual int runModule();
    virtual int runModule(yarp::os::ResourceFinder &rf);
    virtual bool configure(yarp::os::ResourceFinder &rf);
    virtual bool respond(yarp::os::Bottle const &command, yarp::os::Bottle &reply);
    virtual bool attach(yarp::os::Port &source);
    virtual bool attach(yarp::os::RpcServer &source);
    virtual bool interruptModule();
    virtual bool close();
public:
    bool swig_overrides(int n) {
      return (n < 10 ? swig_override[n] : false);
    }
protected:
    bool swig_override[10];
};

class SwigDirector_PropertyCallback : public yarp::os::TypedReaderCallback< Property >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_PropertyCallback(JNIEnv *jenv);
    virtual ~SwigDirector_PropertyCallback();
    virtual void onRead(yarp::os::Property &datum);
    virtual void onRead(yarp::os::Property &datum, yarp::os::TypedReader< yarp::os::Property > const &reader);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_BottleCallback : public yarp::os::TypedReaderCallback< Bottle >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_BottleCallback(JNIEnv *jenv);
    virtual ~SwigDirector_BottleCallback();
    virtual void onRead(yarp::os::Bottle &datum);
    virtual void onRead(yarp::os::Bottle &datum, yarp::os::TypedReader< yarp::os::Bottle > const &reader);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};


#endif
