/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class RpcServer : AbstractContactable {
  private HandleRef swigCPtr;

  internal RpcServer(IntPtr cPtr, bool cMemoryOwn) : base(yarpPINVOKE.RpcServer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RpcServer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RpcServer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_RpcServer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new bool open() {
    bool ret = yarpPINVOKE.RpcServer_open_SWIG_0_0(swigCPtr);
    return ret;
  }

  public override bool open(string name) {
    bool ret = yarpPINVOKE.RpcServer_open_SWIG_0_1(swigCPtr, name);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool open(Contact contact, bool registerName) {
    bool ret = yarpPINVOKE.RpcServer_open_SWIG_0_2(swigCPtr, Contact.getCPtr(contact), registerName);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool open(Contact contact) {
    bool ret = yarpPINVOKE.RpcServer_open_SWIG_0_3(swigCPtr, Contact.getCPtr(contact));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RpcServer() : this(yarpPINVOKE.new_RpcServer(), true) {
  }

  public new bool write(PortWriter writer, PortWriter callback) {
    bool ret = yarpPINVOKE.RpcServer_write__SWIG_0(swigCPtr, PortWriter.getCPtr(writer), PortWriter.getCPtr(callback));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(PortWriter writer) {
    bool ret = yarpPINVOKE.RpcServer_write__SWIG_1(swigCPtr, PortWriter.getCPtr(writer));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(PortWriter writer, PortReader reader, PortWriter callback) {
    bool ret = yarpPINVOKE.RpcServer_write__SWIG_2(swigCPtr, PortWriter.getCPtr(writer), PortReader.getCPtr(reader), PortWriter.getCPtr(callback));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(PortWriter writer, PortReader reader) {
    bool ret = yarpPINVOKE.RpcServer_write__SWIG_3(swigCPtr, PortWriter.getCPtr(writer), PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool read(PortReader reader, bool willReply) {
    bool ret = yarpPINVOKE.RpcServer_read__SWIG_0(swigCPtr, PortReader.getCPtr(reader), willReply);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool read(PortReader reader) {
    bool ret = yarpPINVOKE.RpcServer_read__SWIG_1(swigCPtr, PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setInputMode(bool expectInput) {
    yarpPINVOKE.RpcServer_setInputMode(swigCPtr, expectInput);
  }

  public override void setOutputMode(bool expectOutput) {
    yarpPINVOKE.RpcServer_setOutputMode(swigCPtr, expectOutput);
  }

  public override void setRpcMode(bool expectRpc) {
    yarpPINVOKE.RpcServer_setRpcMode(swigCPtr, expectRpc);
  }

  public override Port asPort() {
    Port ret = new Port(yarpPINVOKE.RpcServer_asPort__SWIG_0(swigCPtr), false);
    return ret;
  }

}
