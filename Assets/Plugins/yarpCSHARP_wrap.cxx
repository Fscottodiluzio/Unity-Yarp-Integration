/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_yarp(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_yarp(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_yarp(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



// missing in some old versions of swig
#include <stddef.h>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <string>


#define _SEARCH_H // strange perl clash
// careful shuffling to deal with perl clash on seed name
#ifdef seed
#define seed_c seed
#undef seed
#endif
#include <yarp/os/Random.h>
#ifdef seed_c
#define seed seed_c
#endif

// Bring in the header files that are important to us
#include <vector>
#include <yarp/os/all.h>
#include <yarp/sig/all.h>
#include <yarp/dev/all.h>


// Sometimes ACE redefines main() - we don't want that
#ifdef main
#undef main
#endif

// Bring in the main important namespace
using namespace yarp::os;
using namespace yarp::sig;
using namespace yarp::sig::file;
using namespace yarp::dev;

SWIGINTERN std::string yarp_os_Value_toString(yarp::os::Value *self){
        return self->toString().c_str();
    }
SWIGINTERN bool yarp_os_Contactable_setEnvelope__SWIG_1(yarp::os::Contactable *self,yarp::os::Portable &data){
    return self->setEnvelope(*((PortWriter*)(&data)));
  }
SWIGINTERN bool yarp_os_Port_write__SWIG_4(yarp::os::Port *self,yarp::os::Bottle &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_5(yarp::os::Port *self,yarp::os::Property &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_6(yarp::os::Port *self,yarp::sig::ImageOf< yarp::sig::PixelRgb > &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_7(yarp::os::Port *self,yarp::sig::ImageOf< yarp::sig::PixelFloat > &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_8(yarp::os::Port *self,yarp::os::Bottle &data1,yarp::os::Bottle &data2){
        return self->write(*((PortWriter*)(&data1)), *((PortReader*)(&data2)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_9(yarp::os::Port *self,yarp::os::Bottle &data1,yarp::sig::ImageOf< yarp::sig::PixelFloat > &data2){
        return self->write(*((PortWriter*)(&data1)), *((PortReader*)(&data2)));
    }
SWIGINTERN bool yarp_os_Port_reply__SWIG_1(yarp::os::Port *self,yarp::os::Bottle &data){
        return self->reply(*((PortWriter*)(&data)));
    }
SWIGINTERN std::string yarp_os_Property_toString(yarp::os::Property *self){
        return self->toString().c_str();
    }
SWIGINTERN std::string yarp_os_Bottle_toString__SWIG_1(yarp::os::Bottle *self){
        return self->toString().c_str();
    }
SWIGINTERN bool yarp_os_ResourceFinder_configure__SWIG_3(yarp::os::ResourceFinder *self,std::string const &policyName,std::vector< std::string > &argv,bool skipFirstArgument=true){
        std::vector<const char *> tmp(argv.size());
        for (size_t i=0; i<argv.size(); i++) { tmp[i] = argv[i].c_str(); }
        return self->configure(policyName.c_str(),
                               argv.size(),
                               (char**)&tmp[0]);
    }
SWIGINTERN bool yarp_os_RpcClient_write(yarp::os::RpcClient *self,yarp::os::Bottle &data1,yarp::os::Bottle &data2){
        return self->write(*((PortWriter*)(&data1)), *((PortReader*)(&data2)));
    }
SWIGINTERN yarp::os::Value *yarp_os_Things_asValue(yarp::os::Things *self){
        return self->cast_as<yarp::os::Value>();
    }
SWIGINTERN yarp::os::Bottle *yarp_os_Things_asBottle(yarp::os::Things *self){
        return self->cast_as<yarp::os::Bottle>();
    }
SWIGINTERN yarp::os::Property *yarp_os_Things_asProperty(yarp::os::Things *self){
        return self->cast_as<yarp::os::Property>();
    }
SWIGINTERN yarp::sig::Vector *yarp_os_Things_asVector(yarp::os::Things *self){
        return self->cast_as<yarp::sig::Vector>();
    }
SWIGINTERN yarp::sig::Matrix *yarp_os_Things_asMatrix(yarp::os::Things *self){
        return self->cast_as<yarp::sig::Matrix>();
    }
SWIGINTERN yarp::sig::Image *yarp_os_Things_asImage(yarp::os::Things *self){
        return self->cast_as<yarp::sig::Image>();
    }
SWIGINTERN yarp::sig::ImageOf< yarp::sig::PixelRgb > *yarp_os_Things_asImageOfPixelRgb(yarp::os::Things *self){
        return self->cast_as<yarp::sig::ImageOf<yarp::sig::PixelRgb> >();
    }
SWIGINTERN yarp::sig::ImageOf< yarp::sig::PixelBgr > *yarp_os_Things_asImageOfPixelBgr(yarp::os::Things *self){
        return self->cast_as<yarp::sig::ImageOf<yarp::sig::PixelBgr> >();
    }
SWIGINTERN yarp::sig::ImageOf< yarp::sig::PixelMono > *yarp_os_Things_asImageOfPixelMono(yarp::os::Things *self){
        return self->cast_as<yarp::sig::ImageOf<yarp::sig::PixelMono> >();
    }
SWIGINTERN double yarp_sig_Vector_get(yarp::sig::Vector *self,int j){
        return self->operator [](j);
    }
SWIGINTERN void yarp_sig_Vector_set(yarp::sig::Vector *self,int j,double v){
        self->operator [](j) = v;
    }
SWIGINTERN yarp::dev::IFrameGrabberImage *yarp_dev_PolyDriver_viewFrameGrabberImage(yarp::dev::PolyDriver *self){
        yarp::dev::IFrameGrabberImage *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IPositionControl *yarp_dev_PolyDriver_viewIPositionControl(yarp::dev::PolyDriver *self){
        yarp::dev::IPositionControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IVelocityControl *yarp_dev_PolyDriver_viewIVelocityControl(yarp::dev::PolyDriver *self){
        yarp::dev::IVelocityControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IEncoders *yarp_dev_PolyDriver_viewIEncoders(yarp::dev::PolyDriver *self){
        yarp::dev::IEncoders *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IPidControl *yarp_dev_PolyDriver_viewIPidControl(yarp::dev::PolyDriver *self){
        yarp::dev::IPidControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IAmplifierControl *yarp_dev_PolyDriver_viewIAmplifierControl(yarp::dev::PolyDriver *self){
        yarp::dev::IAmplifierControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IControlLimits *yarp_dev_PolyDriver_viewIControlLimits(yarp::dev::PolyDriver *self){
        yarp::dev::IControlLimits *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::ICartesianControl *yarp_dev_PolyDriver_viewICartesianControl(yarp::dev::PolyDriver *self){
        yarp::dev::ICartesianControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IGazeControl *yarp_dev_PolyDriver_viewIGazeControl(yarp::dev::PolyDriver *self){
      yarp::dev::IGazeControl *result;
      self->view(result);
      return result;
    }
SWIGINTERN yarp::dev::IImpedanceControl *yarp_dev_PolyDriver_viewIImpedanceControl(yarp::dev::PolyDriver *self){
        yarp::dev::IImpedanceControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::ITorqueControl *yarp_dev_PolyDriver_viewITorqueControl(yarp::dev::PolyDriver *self){
        yarp::dev::ITorqueControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IControlMode *yarp_dev_PolyDriver_viewIControlMode(yarp::dev::PolyDriver *self){
        yarp::dev::IControlMode *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IOpenLoopControl *yarp_dev_PolyDriver_viewIOpenLoopControl(yarp::dev::PolyDriver *self){
            yarp::dev::IOpenLoopControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN bool yarp_dev_IPidControl_setReferences__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->setReferences(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getReference__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getReference(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getReferences__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getReferences(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_setErrorLimits__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->setErrorLimits(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getErrorLimit__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getErrorLimit(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getErrorLimits__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getErrorLimits(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getError__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getError(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getErrors__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getErrors(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getOutput__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getOutput(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getOutputs__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getOutputs(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_setPid(yarp::dev::IPidControl *self,int j,yarp::dev::Pid pid){
        return self->setPid(j,pid);
    }
SWIGINTERN bool yarp_dev_IPidControl_setPids__SWIG_1(yarp::dev::IPidControl *self,std::vector< yarp::dev::Pid > pids){
        return self->setPids(&pids[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getPid(yarp::dev::IPidControl *self,int j,std::vector< yarp::dev::Pid > pid){
        return self->getPid(j,&pid[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getPids__SWIG_1(yarp::dev::IPidControl *self,std::vector< yarp::dev::Pid > pids){
        return self->getPids(&pids[0]);
    }
SWIGINTERN bool yarp_dev_IAmplifierControl_getCurrents__SWIG_1(yarp::dev::IAmplifierControl *self,std::vector< double > &data){
        return self->getCurrents(&data[0]);
    }
SWIGINTERN bool yarp_dev_IAmplifierControl_getCurrent__SWIG_1(yarp::dev::IAmplifierControl *self,int j,std::vector< double > &data){
        return self->getCurrent(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IControlLimits_getLimits__SWIG_1(yarp::dev::IControlLimits *self,int axis,std::vector< double > &min,std::vector< double > &max){
        return self->getLimits(axis, &min[0], &max[0]);
    }
SWIGINTERN bool yarp_dev_ICartesianControl_checkMotionDone__SWIG_1(yarp::dev::ICartesianControl *self,std::vector< bool > &flag){
      std::vector<char> data(flag.size());
      bool result = self->checkMotionDone((bool*)(&data[0]));
      for (size_t i=0; i<data.size(); i++) {
        flag[i] = data[i]!=0;
      }
      return result;
    }
SWIGINTERN bool yarp_dev_ICartesianControl_checkMotionDone__SWIG_2(yarp::dev::ICartesianControl *self){
        bool flag;
        if(self->checkMotionDone(&flag)) {
            return flag;
        } else {
            return false;
        }
    }
SWIGINTERN bool yarp_dev_ICartesianControl_isMotionDone(yarp::dev::ICartesianControl *self){
        bool data = true;
        self->checkMotionDone(&data);
        return data;
    }
SWIGINTERN bool yarp_dev_IGazeControl_getTrackingMode__SWIG_1(yarp::dev::IGazeControl *self){
        bool flag;

        if(self->getTrackingMode(&flag)) {
            return flag;
        } else {
            return false; //Not sure what is best to assume here...
        }
    }
SWIGINTERN double yarp_dev_IGazeControl_getNeckTrajTime__SWIG_1(yarp::dev::IGazeControl *self){
              double result;

              if(self->getNeckTrajTime(&result)) {
            return result;
        } else {
            return -1.0; //On error return -1.0
          }
    }
SWIGINTERN double yarp_dev_IGazeControl_getEyesTrajTime__SWIG_1(yarp::dev::IGazeControl *self){
        double result;

        if(self->getEyesTrajTime(&result)) {
            return result;
        } else {
            return -1.0; //On error return -1.0
        }
    }
SWIGINTERN bool yarp_dev_IGazeControl_checkMotionDone__SWIG_1(yarp::dev::IGazeControl *self){
          bool flag;
        if(self->checkMotionDone(&flag)) {
            return flag;
        } else {
            return false;
        }
    }
SWIGINTERN int yarp_dev_IPositionControl_getAxes__SWIG_1(yarp::dev::IPositionControl *self){
        int buffer;
        bool ok = self->getAxes(&buffer);
        if (!ok) return 0;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IPositionControl_positionMove__SWIG_2(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->positionMove(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_relativeMove__SWIG_2(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->relativeMove(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_setRefSpeeds__SWIG_1(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->setRefSpeeds(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefSpeed__SWIG_1(yarp::dev::IPositionControl *self,int j,std::vector< double > &data){
        return self->getRefSpeed(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefSpeeds__SWIG_1(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->getRefSpeeds(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefAcceleration__SWIG_1(yarp::dev::IPositionControl *self,int j,std::vector< double > &data){
        return self->getRefAcceleration(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefAccelerations__SWIG_1(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->getRefAccelerations(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_checkMotionDone__SWIG_2(yarp::dev::IPositionControl *self){
        bool result;
        bool ok = self->checkMotionDone(&result);
        if(!ok) { return 1; } //In case of error tell the motion has been completed
        return result;
    }
SWIGINTERN bool yarp_dev_IPositionControl_checkMotionDone__SWIG_3(yarp::dev::IPositionControl *self,std::vector< bool > &flag){
      // complication: vector<bool> is packed in C++
      // and isn't a regular container.
      std::vector<char> data(flag.size());
      bool result = self->checkMotionDone((bool*)(&data[0]));
      for (size_t i=0; i<data.size(); i++) {
        flag[i] = data[i]!=0;
      }
      return result;
    }
SWIGINTERN bool yarp_dev_IPositionControl_checkMotionDone__SWIG_4(yarp::dev::IPositionControl *self,int i,std::vector< bool > &flag){
      std::vector<char> data(flag.size());
      bool result = self->checkMotionDone(i,(bool*)(&data[0]));
      for (size_t i=0; i<data.size(); i++) {
        flag[i] = data[i]!=0;
      }
      return result;
    }
SWIGINTERN bool yarp_dev_IPositionControl_isMotionDone__SWIG_0(yarp::dev::IPositionControl *self,int i){
        bool buffer;
        self->checkMotionDone(i,&buffer);
        return buffer;
    }
SWIGINTERN bool yarp_dev_IPositionControl_isMotionDone__SWIG_1(yarp::dev::IPositionControl *self){
        int buffer;
        self->getAxes(&buffer);
        bool data = true;
        for (int i=0; i<buffer; i++) {
            bool buffer2;
            self->checkMotionDone(i,&buffer2);
            data = data && buffer2;
            }
        return data;
    }
SWIGINTERN int yarp_dev_IEncoders_getAxes__SWIG_1(yarp::dev::IEncoders *self){
        int buffer;
        bool ok = self->getAxes(&buffer);
        if (!ok) return 0;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IEncoders_setEncoders__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->setEncoders(&data[0]);
    }
SWIGINTERN double yarp_dev_IEncoders_getEncoder__SWIG_1(yarp::dev::IEncoders *self,int j){
        double data;
        bool ok = self->getEncoder(j, &data);
        if (!ok) return 0;
        return data;
    }
SWIGINTERN bool yarp_dev_IEncoders_getEncoders__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->getEncoders(&data[0]);
    }
SWIGINTERN double yarp_dev_IEncoders_getEncoderSpeed__SWIG_1(yarp::dev::IEncoders *self,int j){
        double data;
        bool ok = self->getEncoderSpeed(j, &data);
        if (!ok) return 0;
        return data;
    }
SWIGINTERN bool yarp_dev_IEncoders_getEncoderSpeeds__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->getEncoderSpeeds(&data[0]);
    }
SWIGINTERN double yarp_dev_IEncoders_getEncoderAcceleration__SWIG_1(yarp::dev::IEncoders *self,int j){
        double data;
        bool ok = self->getEncoderAcceleration(j, &data);
        if (!ok) return 0;
        return data;
    }
SWIGINTERN bool yarp_dev_IEncoders_getEncoderAccelerations__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->getEncoderAccelerations(&data[0]);
    }
SWIGINTERN int yarp_dev_IControlMode_getControlMode__SWIG_1(yarp::dev::IControlMode *self,int j){
        int buffer;
        bool ok = self->getControlMode(j, &buffer);
        if (!ok) return -1;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IControlMode_getControlModes__SWIG_1(yarp::dev::IControlMode *self,std::vector< int > &data){
        return self->getControlModes(&data[0]);
    }
SWIGINTERN int yarp_dev_IVelocityControl_getAxes__SWIG_1(yarp::dev::IVelocityControl *self){
        int buffer;
        bool ok = self->getAxes(&buffer);
        if (!ok) return 0;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IVelocityControl_velocityMove__SWIG_2(yarp::dev::IVelocityControl *self,std::vector< double > &data){
        return self->velocityMove(&data[0]);
    }
SWIGINTERN bool yarp_dev_IVelocityControl_setRefAccelerations__SWIG_1(yarp::dev::IVelocityControl *self,std::vector< double > &data){
        return self->setRefAccelerations(&data[0]);
    }
SWIGINTERN bool yarp_dev_IVelocityControl_getRefAcceleration__SWIG_1(yarp::dev::IVelocityControl *self,int j,std::vector< double > &data){
        return self->getRefAcceleration(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IVelocityControl_getRefAccelerations__SWIG_1(yarp::dev::IVelocityControl *self,std::vector< double > &data){
        return self->getRefAccelerations(&data[0]);
    }
SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< bool > *new_std_vector_Sl_bool_Sg___SWIG_2(int capacity){
        std::vector< bool >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< bool >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__getitemcopy(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< bool >::const_reference std_vector_Sl_bool_Sg__getitem(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__setitem(std::vector< bool > *self,int index,bool const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__AddRange(std::vector< bool > *self,std::vector< bool > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< bool > *std_vector_Sl_bool_Sg__GetRange(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< bool >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Insert(std::vector< bool > *self,int index,bool const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__InsertRange(std::vector< bool > *self,int index,std::vector< bool > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__RemoveAt(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__RemoveRange(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< bool > *std_vector_Sl_bool_Sg__Repeat(bool const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< bool >(count, value);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Reverse__SWIG_0(std::vector< bool > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Reverse__SWIG_1(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__SetRange(std::vector< bool > *self,int index,std::vector< bool > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__Contains(std::vector< bool > *self,bool const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_bool_Sg__IndexOf(std::vector< bool > *self,bool const &value){
        int index = -1;
        std::vector< bool >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_bool_Sg__LastIndexOf(std::vector< bool > *self,bool const &value){
        int index = -1;
        std::vector< bool >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__Remove(std::vector< bool > *self,bool const &value){
        std::vector< bool >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< yarp::dev::Pid > *new_std_vector_Sl_yarp_dev_Pid_Sg___SWIG_2(int capacity){
        std::vector< yarp::dev::Pid >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< yarp::dev::Pid >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN yarp::dev::Pid std_vector_Sl_yarp_dev_Pid_Sg__getitemcopy(std::vector< yarp::dev::Pid > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< yarp::dev::Pid >::const_reference std_vector_Sl_yarp_dev_Pid_Sg__getitem(std::vector< yarp::dev::Pid > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg__setitem(std::vector< yarp::dev::Pid > *self,int index,yarp::dev::Pid const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg__AddRange(std::vector< yarp::dev::Pid > *self,std::vector< yarp::dev::Pid > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< yarp::dev::Pid > *std_vector_Sl_yarp_dev_Pid_Sg__GetRange(std::vector< yarp::dev::Pid > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< yarp::dev::Pid >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg__Insert(std::vector< yarp::dev::Pid > *self,int index,yarp::dev::Pid const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg__InsertRange(std::vector< yarp::dev::Pid > *self,int index,std::vector< yarp::dev::Pid > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg__RemoveAt(std::vector< yarp::dev::Pid > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg__RemoveRange(std::vector< yarp::dev::Pid > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< yarp::dev::Pid > *std_vector_Sl_yarp_dev_Pid_Sg__Repeat(yarp::dev::Pid const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< yarp::dev::Pid >(count, value);
      }
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg__Reverse__SWIG_0(std::vector< yarp::dev::Pid > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg__Reverse__SWIG_1(std::vector< yarp::dev::Pid > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg__SetRange(std::vector< yarp::dev::Pid > *self,int index,std::vector< yarp::dev::Pid > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

typedef yarp::sig::ImageOf<yarp::sig::PixelRgb> ImageRgb;
typedef yarp::os::TypedReader<ImageRgb> TypedReaderImageRgb;
typedef yarp::os::TypedReaderCallback<ImageRgb> TypedReaderCallbackImageRgb;
typedef yarp::os::BufferedPort<ImageRgb> BufferedPortImageRgb;


typedef yarp::sig::ImageOf<yarp::sig::PixelRgba> ImageRgba;
typedef yarp::os::TypedReader<ImageRgba> TypedReaderImageRgba;
typedef yarp::os::TypedReaderCallback<ImageRgba> TypedReaderCallbackImageRgba;
typedef yarp::os::BufferedPort<ImageRgba> BufferedPortImageRgba;


typedef yarp::sig::ImageOf<yarp::sig::PixelMono> ImageMono;
typedef yarp::os::TypedReader<ImageMono> TypedReaderImageMono;
typedef yarp::os::TypedReaderCallback<ImageMono> TypedReaderCallbackImageMono;
typedef yarp::os::BufferedPort<ImageMono> BufferedPortImageMono;


typedef yarp::sig::ImageOf<yarp::sig::PixelMono16> ImageMono16;
typedef yarp::os::TypedReader<ImageMono16> TypedReaderImageMono16;
typedef yarp::os::TypedReaderCallback<ImageMono16> TypedReaderCallbackImageMono16;
typedef yarp::os::BufferedPort<ImageMono16> BufferedPortImageMono16;


typedef yarp::sig::ImageOf<yarp::sig::PixelInt> ImageInt;
typedef yarp::os::TypedReader<ImageInt> TypedReaderImageInt;
typedef yarp::os::TypedReaderCallback<ImageInt> TypedReaderCallbackImageInt;
typedef yarp::os::BufferedPort<ImageInt> BufferedPortImageInt;


typedef yarp::os::TypedReader<Sound> TypedReaderSound;
typedef yarp::os::TypedReaderCallback<Sound> TypedReaderCallbackSound;
typedef yarp::os::BufferedPort<Sound> BufferedPortSound;

SWIGINTERN int yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__getPixel(yarp::sig::ImageOf< yarp::sig::PixelInt > *self,int x,int y){
        return self->pixel(x,y);
    }
SWIGINTERN void yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__setPixel(yarp::sig::ImageOf< yarp::sig::PixelInt > *self,int x,int y,int v){
        self->pixel(x,y) = v;
    }

typedef yarp::sig::ImageOf<yarp::sig::PixelFloat> ImageFloat;
typedef yarp::os::TypedReader<ImageFloat> TypedReaderImageFloat;
typedef yarp::os::TypedReaderCallback<ImageFloat> TypedReaderCallbackImageFloat;
typedef yarp::os::BufferedPort<ImageFloat> BufferedPortImageFloat;

SWIGINTERN float yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__getPixel(yarp::sig::ImageOf< yarp::sig::PixelFloat > *self,int x,int y){
       return self->pixel(x,y);
       }
SWIGINTERN void yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__setPixel(yarp::sig::ImageOf< yarp::sig::PixelFloat > *self,int x,int y,float v){
       self->pixel(x,y) = v;
       }

typedef yarp::sig::ImageOf<yarp::sig::PixelRgbFloat> ImageRgbFloat;
typedef yarp::os::TypedReader<ImageRgbFloat> TypedReaderImageRgbFloat;
typedef yarp::os::TypedReaderCallback<ImageRgbFloat> TypedReaderCallbackImageRgbFloat;
typedef yarp::os::BufferedPort<ImageRgbFloat> BufferedPortImageRgbFloat;



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "yarpCSHARP_wrap.h"

SwigDirector_PortReader::SwigDirector_PortReader() : yarp::os::PortReader(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_PortReader::~SwigDirector_PortReader() {
  
}


bool SwigDirector_PortReader::read(yarp::os::ConnectionReader &reader) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jreader = 0 ;
  
  if (!swig_callbackread) {
    throw Swig::DirectorPureVirtualException("yarp::os::PortReader::read");
  } else {
    jreader = (yarp::os::ConnectionReader *) &reader; 
    jresult = (unsigned int) swig_callbackread(jreader);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

Type SwigDirector_PortReader::getReadType() {
  Type c_result = SwigValueInit< Type >() ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetReadType) {
    return yarp::os::PortReader::getReadType();
  } else {
    jresult = (void *) swig_callbackgetReadType();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Type", 0);
      return c_result;
    }
    c_result = *(Type *)jresult; 
  }
  return c_result;
}

void SwigDirector_PortReader::swig_connect_director(SWIG_Callback0_t callbackread, SWIG_Callback1_t callbackgetReadType) {
  swig_callbackread = callbackread;
  swig_callbackgetReadType = callbackgetReadType;
}

void SwigDirector_PortReader::swig_init_callbacks() {
  swig_callbackread = 0;
  swig_callbackgetReadType = 0;
}

SwigDirector_Thread::SwigDirector_Thread() : yarp::os::Thread(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Thread::~SwigDirector_Thread() {
  
}


void SwigDirector_Thread::run() {
  if (!swig_callbackrun) {
    throw Swig::DirectorPureVirtualException("yarp::os::Thread::run");
  } else {
    swig_callbackrun();
  }
}

void SwigDirector_Thread::onStop() {
  if (!swig_callbackonStop) {
    yarp::os::Thread::onStop();
    return;
  } else {
    swig_callbackonStop();
  }
}

void SwigDirector_Thread::beforeStart() {
  if (!swig_callbackbeforeStart) {
    yarp::os::Thread::beforeStart();
    return;
  } else {
    swig_callbackbeforeStart();
  }
}

void SwigDirector_Thread::afterStart(bool success) {
  unsigned int jsuccess  ;
  
  if (!swig_callbackafterStart) {
    yarp::os::Thread::afterStart(success);
    return;
  } else {
    jsuccess = success;
    swig_callbackafterStart(jsuccess);
  }
}

bool SwigDirector_Thread::threadInit() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackthreadInit) {
    return yarp::os::Thread::threadInit();
  } else {
    jresult = (unsigned int) swig_callbackthreadInit();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_Thread::threadRelease() {
  if (!swig_callbackthreadRelease) {
    yarp::os::Thread::threadRelease();
    return;
  } else {
    swig_callbackthreadRelease();
  }
}

void SwigDirector_Thread::swig_connect_director(SWIG_Callback0_t callbackrun, SWIG_Callback1_t callbackonStop, SWIG_Callback2_t callbackbeforeStart, SWIG_Callback3_t callbackafterStart, SWIG_Callback4_t callbackthreadInit, SWIG_Callback5_t callbackthreadRelease) {
  swig_callbackrun = callbackrun;
  swig_callbackonStop = callbackonStop;
  swig_callbackbeforeStart = callbackbeforeStart;
  swig_callbackafterStart = callbackafterStart;
  swig_callbackthreadInit = callbackthreadInit;
  swig_callbackthreadRelease = callbackthreadRelease;
}

void SwigDirector_Thread::swig_init_callbacks() {
  swig_callbackrun = 0;
  swig_callbackonStop = 0;
  swig_callbackbeforeStart = 0;
  swig_callbackafterStart = 0;
  swig_callbackthreadInit = 0;
  swig_callbackthreadRelease = 0;
}

SwigDirector_RFModule::SwigDirector_RFModule() : yarp::os::RFModule(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_RFModule::~SwigDirector_RFModule() {
  
}


double SwigDirector_RFModule::getPeriod() {
  double c_result = SwigValueInit< double >() ;
  double jresult = 0 ;
  
  if (!swig_callbackgetPeriod) {
    return yarp::os::RFModule::getPeriod();
  } else {
    jresult = (double) swig_callbackgetPeriod();
    c_result = (double)jresult; 
  }
  return c_result;
}

bool SwigDirector_RFModule::updateModule() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackupdateModule) {
    throw Swig::DirectorPureVirtualException("yarp::os::RFModule::updateModule");
  } else {
    jresult = (unsigned int) swig_callbackupdateModule();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_RFModule::runModule() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackrunModule__SWIG_0) {
    return yarp::os::RFModule::runModule();
  } else {
    jresult = (int) swig_callbackrunModule__SWIG_0();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_RFModule::runModule(yarp::os::ResourceFinder &rf) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jrf = 0 ;
  
  if (!swig_callbackrunModule__SWIG_1) {
    return yarp::os::RFModule::runModule(rf);
  } else {
    jrf = (yarp::os::ResourceFinder *) &rf; 
    jresult = (int) swig_callbackrunModule__SWIG_1(jrf);
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_RFModule::configure(yarp::os::ResourceFinder &rf) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jrf = 0 ;
  
  if (!swig_callbackconfigure) {
    return yarp::os::RFModule::configure(rf);
  } else {
    jrf = (yarp::os::ResourceFinder *) &rf; 
    jresult = (unsigned int) swig_callbackconfigure(jrf);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_RFModule::respond(yarp::os::Bottle const &command, yarp::os::Bottle &reply) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jcommand = 0 ;
  void * jreply = 0 ;
  
  if (!swig_callbackrespond) {
    return yarp::os::RFModule::respond(command,reply);
  } else {
    jcommand = (yarp::os::Bottle *) &command; 
    jreply = (yarp::os::Bottle *) &reply; 
    jresult = (unsigned int) swig_callbackrespond(jcommand, jreply);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_RFModule::attach(yarp::os::Port &source) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsource = 0 ;
  
  if (!swig_callbackattach) {
    return yarp::os::RFModule::attach(source);
  } else {
    jsource = (yarp::os::Port *) &source; 
    jresult = (unsigned int) swig_callbackattach(jsource);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_RFModule::attach(yarp::os::RpcServer &source) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jsource = 0 ;
  
  if (!swig_callbackattach_rpc_server) {
    return yarp::os::RFModule::attach(source);
  } else {
    jsource = (yarp::os::RpcServer *) &source; 
    jresult = (unsigned int) swig_callbackattach_rpc_server(jsource);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_RFModule::interruptModule() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackinterruptModule) {
    return yarp::os::RFModule::interruptModule();
  } else {
    jresult = (unsigned int) swig_callbackinterruptModule();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_RFModule::close() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackclose) {
    return yarp::os::RFModule::close();
  } else {
    jresult = (unsigned int) swig_callbackclose();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_RFModule::swig_connect_director(SWIG_Callback0_t callbackgetPeriod, SWIG_Callback1_t callbackupdateModule, SWIG_Callback2_t callbackrunModule__SWIG_0, SWIG_Callback3_t callbackrunModule__SWIG_1, SWIG_Callback4_t callbackconfigure, SWIG_Callback5_t callbackrespond, SWIG_Callback6_t callbackattach, SWIG_Callback7_t callbackattach_rpc_server, SWIG_Callback8_t callbackinterruptModule, SWIG_Callback9_t callbackclose) {
  swig_callbackgetPeriod = callbackgetPeriod;
  swig_callbackupdateModule = callbackupdateModule;
  swig_callbackrunModule__SWIG_0 = callbackrunModule__SWIG_0;
  swig_callbackrunModule__SWIG_1 = callbackrunModule__SWIG_1;
  swig_callbackconfigure = callbackconfigure;
  swig_callbackrespond = callbackrespond;
  swig_callbackattach = callbackattach;
  swig_callbackattach_rpc_server = callbackattach_rpc_server;
  swig_callbackinterruptModule = callbackinterruptModule;
  swig_callbackclose = callbackclose;
}

void SwigDirector_RFModule::swig_init_callbacks() {
  swig_callbackgetPeriod = 0;
  swig_callbackupdateModule = 0;
  swig_callbackrunModule__SWIG_0 = 0;
  swig_callbackrunModule__SWIG_1 = 0;
  swig_callbackconfigure = 0;
  swig_callbackrespond = 0;
  swig_callbackattach = 0;
  swig_callbackattach_rpc_server = 0;
  swig_callbackinterruptModule = 0;
  swig_callbackclose = 0;
}

SwigDirector_PropertyCallback::SwigDirector_PropertyCallback() : yarp::os::TypedReaderCallback< Property >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_PropertyCallback::~SwigDirector_PropertyCallback() {
  
}


void SwigDirector_PropertyCallback::onRead(yarp::os::Property &datum) {
  void * jdatum = 0 ;
  
  if (!swig_callbackonRead__SWIG_0) {
    yarp::os::TypedReaderCallback< Property >::onRead(datum);
    return;
  } else {
    jdatum = (yarp::os::Property *) &datum; 
    swig_callbackonRead__SWIG_0(jdatum);
  }
}

void SwigDirector_PropertyCallback::onRead(yarp::os::Property &datum, yarp::os::TypedReader< yarp::os::Property > const &reader) {
  void * jdatum = 0 ;
  void * jreader = 0 ;
  
  if (!swig_callbackonRead__SWIG_1) {
    yarp::os::TypedReaderCallback< Property >::onRead(datum,reader);
    return;
  } else {
    jdatum = (yarp::os::Property *) &datum; 
    jreader = (yarp::os::TypedReader< yarp::os::Property > *) &reader; 
    swig_callbackonRead__SWIG_1(jdatum, jreader);
  }
}

void SwigDirector_PropertyCallback::swig_connect_director(SWIG_Callback0_t callbackonRead__SWIG_0, SWIG_Callback1_t callbackonRead__SWIG_1) {
  swig_callbackonRead__SWIG_0 = callbackonRead__SWIG_0;
  swig_callbackonRead__SWIG_1 = callbackonRead__SWIG_1;
}

void SwigDirector_PropertyCallback::swig_init_callbacks() {
  swig_callbackonRead__SWIG_0 = 0;
  swig_callbackonRead__SWIG_1 = 0;
}

SwigDirector_BottleCallback::SwigDirector_BottleCallback() : yarp::os::TypedReaderCallback< Bottle >(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_BottleCallback::~SwigDirector_BottleCallback() {
  
}


void SwigDirector_BottleCallback::onRead(yarp::os::Bottle &datum) {
  void * jdatum = 0 ;
  
  if (!swig_callbackonRead__SWIG_0) {
    yarp::os::TypedReaderCallback< Bottle >::onRead(datum);
    return;
  } else {
    jdatum = (yarp::os::Bottle *) &datum; 
    swig_callbackonRead__SWIG_0(jdatum);
  }
}

void SwigDirector_BottleCallback::onRead(yarp::os::Bottle &datum, yarp::os::TypedReader< yarp::os::Bottle > const &reader) {
  void * jdatum = 0 ;
  void * jreader = 0 ;
  
  if (!swig_callbackonRead__SWIG_1) {
    yarp::os::TypedReaderCallback< Bottle >::onRead(datum,reader);
    return;
  } else {
    jdatum = (yarp::os::Bottle *) &datum; 
    jreader = (yarp::os::TypedReader< yarp::os::Bottle > *) &reader; 
    swig_callbackonRead__SWIG_1(jdatum, jreader);
  }
}

void SwigDirector_BottleCallback::swig_connect_director(SWIG_Callback0_t callbackonRead__SWIG_0, SWIG_Callback1_t callbackonRead__SWIG_1) {
  swig_callbackonRead__SWIG_0 = callbackonRead__SWIG_0;
  swig_callbackonRead__SWIG_1 = callbackonRead__SWIG_1;
}

void SwigDirector_BottleCallback::swig_init_callbacks() {
  swig_callbackonRead__SWIG_0 = 0;
  swig_callbackonRead__SWIG_1 = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_YARP_CONSTSTRING_IS_STD_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PortReport(void * jarg1) {
  yarp::os::PortReport *arg1 = (yarp::os::PortReport *) 0 ;
  
  arg1 = (yarp::os::PortReport *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReport_report(void * jarg1, void * jarg2) {
  yarp::os::PortReport *arg1 = (yarp::os::PortReport *) 0 ;
  yarp::os::PortInfo *arg2 = 0 ;
  
  arg1 = (yarp::os::PortReport *)jarg1; 
  arg2 = (yarp::os::PortInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortInfo const & type is null", 0);
    return ;
  } 
  (arg1)->report((yarp::os::PortInfo const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Contact__SWIG_0(char * jarg1, int jarg2) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  int arg2 ;
  yarp::os::Contact *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  result = (yarp::os::Contact *)new yarp::os::Contact((yarp::os::ConstString const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_empty() {
  void * jresult ;
  yarp::os::Contact result;
  
  result = yarp::os::Contact::empty();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_invalid() {
  void * jresult ;
  yarp::os::Contact result;
  
  result = yarp::os::Contact::invalid();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_byName(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = yarp::os::Contact::byName((std::string const &)*arg1);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_byCarrier(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = yarp::os::Contact::byCarrier((std::string const &)*arg1);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_byConfig(void * jarg1) {
  void * jresult ;
  Searchable *arg1 = 0 ;
  yarp::os::Contact result;
  
  arg1 = (Searchable *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Searchable & type is null", 0);
    return 0;
  } 
  result = yarp::os::Contact::byConfig(*arg1);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_addCarrier(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((yarp::os::Contact const *)arg1)->addCarrier((yarp::os::ConstString const &)*arg2);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_addHost(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((yarp::os::Contact const *)arg1)->addHost((yarp::os::ConstString const &)*arg2);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_addPort(void * jarg1, int jarg2) {
  void * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  int arg2 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((yarp::os::Contact const *)arg1)->addPort(arg2);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_bySocket(char * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  int arg3 ;
  yarp::os::Contact result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = yarp::os::Contact::bySocket((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_addSocket(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  int arg4 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  result = ((yarp::os::Contact const *)arg1)->addSocket((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3,arg4);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_addNested(void * jarg1, void * jarg2) {
  void * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  NestedContact *arg2 = 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  arg2 = (NestedContact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NestedContact const & type is null", 0);
    return 0;
  } 
  result = ((yarp::os::Contact const *)arg1)->addNested((NestedContact const &)*arg2);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_addName(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((yarp::os::Contact const *)arg1)->addName((yarp::os::ConstString const &)*arg2);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contact_convertHostToIp(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (char *)jarg1; 
  result = yarp::os::Contact::convertHostToIp((char const *)arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Contact__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Contact *result = 0 ;
  
  arg1 = (yarp::os::Contact *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (yarp::os::Contact *)new yarp::os::Contact((yarp::os::Contact const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Contact(void * jarg1) {
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contact_getName(void * jarg1) {
  char * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = ((yarp::os::Contact const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contact_getHost(void * jarg1) {
  char * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = ((yarp::os::Contact const *)arg1)->getHost();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contact_getCarrier(void * jarg1) {
  char * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = ((yarp::os::Contact const *)arg1)->getCarrier();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_getNested(void * jarg1) {
  void * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  NestedContact *result = 0 ;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = (NestedContact *) &((yarp::os::Contact const *)arg1)->getNested();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Contact_getPort(void * jarg1) {
  int jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  int result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = (int)((yarp::os::Contact const *)arg1)->getPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contact_toString_c(void * jarg1) {
  char * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = ((yarp::os::Contact const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contact_toURI(void * jarg1) {
  char * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = ((yarp::os::Contact const *)arg1)->toURI();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contact_fromString(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = yarp::os::Contact::fromString((std::string const &)*arg1);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contact_isValid(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = (bool)((yarp::os::Contact const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Contact__SWIG_2() {
  void * jresult ;
  yarp::os::Contact *result = 0 ;
  
  result = (yarp::os::Contact *)new yarp::os::Contact();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contact_hasTimeout(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = (bool)((yarp::os::Contact const *)arg1)->hasTimeout();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_setTimeout(void * jarg1, float jarg2) {
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  float arg2 ;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setTimeout(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_setNested(void * jarg1, void * jarg2) {
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::NestedContact *arg2 = 0 ;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  arg2 = (yarp::os::NestedContact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::NestedContact const & type is null", 0);
    return ;
  } 
  (arg1)->setNested((yarp::os::NestedContact const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Contact_getTimeout(void * jarg1) {
  float jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  float result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = (float)((yarp::os::Contact const *)arg1)->getTimeout();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contact_getRegName(void * jarg1) {
  char * jresult ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  result = ((yarp::os::Contact const *)arg1)->getRegName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_setHost(void * jarg1, char * jarg2) {
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setHost((yarp::os::ConstString const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contact_setPort(void * jarg1, int jarg2) {
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::os::Contact *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPort(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConnectionReader(void * jarg1) {
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionReader_expectBlock(void * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->expectBlock((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ConnectionReader_expectText__SWIG_0(void * jarg1, int jarg2) {
  char * jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  int arg2 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->expectText(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ConnectionReader_expectText__SWIG_1(void * jarg1) {
  char * jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (arg1)->expectText();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConnectionReader_expectInt(void * jarg1) {
  int jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  int result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (int)(arg1)->expectInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionReader_expectInt64(void * jarg1) {
  void * jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  YARP_INT64 result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (arg1)->expectInt64();
  jresult = new YARP_INT64((const YARP_INT64 &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ConnectionReader_expectDouble(void * jarg1) {
  double jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  double result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (double)(arg1)->expectDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionReader_isTextMode(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (bool)(arg1)->isTextMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionReader_isBareMode(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (bool)(arg1)->isBareMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionReader_convertTextMode(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (bool)(arg1)->convertTextMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ConnectionReader_getSize(void * jarg1) {
  unsigned long jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  size_t result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (arg1)->getSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionReader_getWriter(void * jarg1) {
  void * jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (yarp::os::ConnectionWriter *)(arg1)->getWriter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionReader_readEnvelope(void * jarg1) {
  void * jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  Bytes result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (arg1)->readEnvelope();
  jresult = new Bytes((const Bytes &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionReader_getReference(void * jarg1) {
  void * jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::Portable *result = 0 ;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (yarp::os::Portable *)(arg1)->getReference();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionReader_getRemoteContact(void * jarg1) {
  void * jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (arg1)->getRemoteContact();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionReader_getLocalContact(void * jarg1) {
  void * jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (arg1)->getLocalContact();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionReader_isValid(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionReader_isActive(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (bool)(arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionReader_isError(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (bool)(arg1)->isError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionReader_requestDrop(void * jarg1) {
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  (arg1)->requestDrop();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionReader_getConnectionModifiers(void * jarg1) {
  void * jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  Searchable *result = 0 ;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  result = (Searchable *) &(arg1)->getConnectionModifiers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionReader_pushInt(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->pushInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionReader_setSize(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionReader_createConnectionReader(void * jarg1) {
  void * jresult ;
  yarp::os::InputStream *arg1 = 0 ;
  yarp::os::ConnectionReader *result = 0 ;
  
  arg1 = (yarp::os::InputStream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::InputStream & type is null", 0);
    return 0;
  } 
  result = (yarp::os::ConnectionReader *)yarp::os::ConnectionReader::createConnectionReader(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionReader_readFromStream(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::PortReader *arg1 = 0 ;
  yarp::os::InputStream *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::PortReader *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::InputStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::InputStream & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::ConnectionReader::readFromStream(*arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConnectionWriter(void * jarg1) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_appendBlock(void * jarg1, char * jarg2, unsigned long jarg3) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->appendBlock((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_appendInt(void * jarg1, int jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->appendInt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_appendInt64(void * jarg1, void * jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  YARP_INT64 *arg2 = 0 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  arg2 = (YARP_INT64 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "YARP_INT64 const & type is null", 0);
    return ;
  } 
  (arg1)->appendInt64((YARP_INT64 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_appendDouble(void * jarg1, double jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->appendDouble(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_appendString__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->appendString((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_appendString__SWIG_1(void * jarg1, char * jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->appendString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_appendExternalBlock(void * jarg1, char * jarg2, unsigned long jarg3) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->appendExternalBlock((char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionWriter_isTextMode(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  result = (bool)(arg1)->isTextMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionWriter_isBareMode(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  result = (bool)(arg1)->isBareMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_declareSizes(void * jarg1, int jarg2, void * jarg3) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->declareSizes(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_setReplyHandler(void * jarg1, void * jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplyHandler(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_setReference(void * jarg1, void * jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::Portable *arg2 = (yarp::os::Portable *) 0 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  arg2 = (yarp::os::Portable *)jarg2; 
  (arg1)->setReference(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionWriter_convertTextMode(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  result = (bool)(arg1)->convertTextMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionWriter_isValid(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionWriter_isActive(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  result = (bool)(arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionWriter_isError(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  result = (bool)(arg1)->isError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_requestDrop(void * jarg1) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  (arg1)->requestDrop();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionWriter_isNull(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  result = (bool)((yarp::os::ConnectionWriter const *)arg1)->isNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionWriter_getBuffer(void * jarg1) {
  void * jresult ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::SizedWriter *result = 0 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  result = (yarp::os::SizedWriter *)(arg1)->getBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionWriter_appendRawString(void * jarg1, char * jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->appendRawString((yarp::os::ConstString const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionWriter_createBufferedConnectionWriter() {
  void * jresult ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  result = (yarp::os::ConnectionWriter *)yarp::os::ConnectionWriter::createBufferedConnectionWriter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConnectionWriter_writeToStream(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::PortWriter *arg1 = 0 ;
  yarp::os::OutputStream *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::PortWriter *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::OutputStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::OutputStream & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::ConnectionWriter::writeToStream(*arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PortReader(void * jarg1) {
  yarp::os::PortReader *arg1 = (yarp::os::PortReader *) 0 ;
  
  arg1 = (yarp::os::PortReader *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortReader_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::PortReader *arg1 = (yarp::os::PortReader *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::PortReader *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortReader_getReadType(void * jarg1) {
  void * jresult ;
  yarp::os::PortReader *arg1 = (yarp::os::PortReader *) 0 ;
  Type result;
  
  arg1 = (yarp::os::PortReader *)jarg1; 
  result = (arg1)->getReadType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortReader_getReadTypeSwigExplicitPortReader(void * jarg1) {
  void * jresult ;
  yarp::os::PortReader *arg1 = (yarp::os::PortReader *) 0 ;
  Type result;
  
  arg1 = (yarp::os::PortReader *)jarg1; 
  result = (arg1)->yarp::os::PortReader::getReadType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PortReader() {
  void * jresult ;
  yarp::os::PortReader *result = 0 ;
  
  result = (yarp::os::PortReader *)new SwigDirector_PortReader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReader_director_connect(void *objarg, SwigDirector_PortReader::SWIG_Callback0_t callback0, SwigDirector_PortReader::SWIG_Callback1_t callback1) {
  yarp::os::PortReader *obj = (yarp::os::PortReader *)objarg;
  SwigDirector_PortReader *director = dynamic_cast<SwigDirector_PortReader *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PortWriter(void * jarg1) {
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  
  arg1 = (yarp::os::PortWriter *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortWriter_write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::PortWriter *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortWriter_onCompletion(void * jarg1) {
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  
  arg1 = (yarp::os::PortWriter *)jarg1; 
  (arg1)->onCompletion();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortWriter_onCommencement(void * jarg1) {
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  
  arg1 = (yarp::os::PortWriter *)jarg1; 
  (arg1)->onCommencement();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortWriter_getWriteType(void * jarg1) {
  void * jresult ;
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  Type result;
  
  arg1 = (yarp::os::PortWriter *)jarg1; 
  result = (arg1)->getWriteType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Portable_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Portable *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Portable_write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Portable *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Portable_getType(void * jarg1) {
  void * jresult ;
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  Type result;
  
  arg1 = (yarp::os::Portable *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Portable_copyPortable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::PortWriter *arg1 = 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::PortWriter *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::Portable::copyPortable(*arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Portable(void * jarg1) {
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  
  arg1 = (yarp::os::Portable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SearchReport_key_set(void * jarg1, char * jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SearchReport_key_get(void * jarg1) {
  char * jresult ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->key);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SearchReport_value_set(void * jarg1, char * jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SearchReport_value_get(void * jarg1) {
  char * jresult ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->value);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SearchReport_isFound_set(void * jarg1, unsigned int jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isFound = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SearchReport_isFound_get(void * jarg1) {
  unsigned int jresult ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  result = (bool) ((arg1)->isFound);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SearchReport_isGroup_set(void * jarg1, unsigned int jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isGroup = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SearchReport_isGroup_get(void * jarg1) {
  unsigned int jresult ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  result = (bool) ((arg1)->isGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SearchReport_isComment_set(void * jarg1, unsigned int jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isComment = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SearchReport_isComment_get(void * jarg1) {
  unsigned int jresult ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  result = (bool) ((arg1)->isComment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SearchReport_isDefault_set(void * jarg1, unsigned int jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDefault = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SearchReport_isDefault_get(void * jarg1) {
  unsigned int jresult ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  result = (bool) ((arg1)->isDefault);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SearchReport() {
  void * jresult ;
  yarp::os::SearchReport *result = 0 ;
  
  result = (yarp::os::SearchReport *)new yarp::os::SearchReport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SearchReport(void * jarg1) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  
  arg1 = (yarp::os::SearchReport *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SearchMonitor(void * jarg1) {
  yarp::os::SearchMonitor *arg1 = (yarp::os::SearchMonitor *) 0 ;
  
  arg1 = (yarp::os::SearchMonitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SearchMonitor_report(void * jarg1, void * jarg2, char * jarg3) {
  yarp::os::SearchMonitor *arg1 = (yarp::os::SearchMonitor *) 0 ;
  yarp::os::SearchReport *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (yarp::os::SearchMonitor *)jarg1; 
  arg2 = (yarp::os::SearchReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::SearchReport const & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->report((yarp::os::SearchReport const &)*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Searchable(void * jarg1) {
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Searchable_check__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Searchable_check__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Searchable_find(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Value *) &((yarp::os::Searchable const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Searchable_findGroup__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Bottle *) &((yarp::os::Searchable const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Searchable_findGroup__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (yarp::os::Bottle *) &((yarp::os::Searchable const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Searchable_check__SWIG_2(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = ((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Searchable_check__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  result = ((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Searchable_isNull(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  result = (bool)((yarp::os::Searchable const *)arg1)->isNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Searchable_toString_c(void * jarg1) {
  char * jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  result = ((yarp::os::Searchable const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Searchable_setMonitor__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchMonitor *arg2 = (yarp::os::SearchMonitor *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  arg2 = (yarp::os::SearchMonitor *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setMonitor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Searchable_setMonitor__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchMonitor *arg2 = (yarp::os::SearchMonitor *) 0 ;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  arg2 = (yarp::os::SearchMonitor *)jarg2; 
  (arg1)->setMonitor(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Searchable_getMonitor(void * jarg1) {
  void * jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchMonitor *result = 0 ;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  result = (yarp::os::SearchMonitor *)((yarp::os::Searchable const *)arg1)->getMonitor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Searchable_getMonitorContext(void * jarg1) {
  char * jresult ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  result = ((yarp::os::Searchable const *)arg1)->getMonitorContext();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Searchable_reportToMonitor(void * jarg1, void * jarg2) {
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchReport *arg2 = 0 ;
  
  arg1 = (yarp::os::Searchable *)jarg1; 
  arg2 = (yarp::os::SearchReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::SearchReport const & type is null", 0);
    return ;
  } 
  ((yarp::os::Searchable const *)arg1)->reportToMonitor((yarp::os::SearchReport const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_check__SWIG_0_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_check__SWIG_0_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_check__SWIG_0_2(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = ((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_check__SWIG_0_3(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  result = ((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_findGroup__SWIG_0_0(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Bottle *) &((yarp::os::Value const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_findGroup__SWIG_0_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (yarp::os::Bottle *) &((yarp::os::Value const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Value__SWIG_0() {
  void * jresult ;
  yarp::os::Value *result = 0 ;
  
  result = (yarp::os::Value *)new yarp::os::Value();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Value__SWIG_1(int jarg1, unsigned int jarg2) {
  void * jresult ;
  int arg1 ;
  bool arg2 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Value *)new yarp::os::Value(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Value__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (yarp::os::Value *)new yarp::os::Value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Value__SWIG_3(double jarg1) {
  void * jresult ;
  double arg1 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (yarp::os::Value *)new yarp::os::Value(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Value__SWIG_4(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  bool arg2 ;
  yarp::os::Value *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Value *)new yarp::os::Value((yarp::os::ConstString const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Value__SWIG_5(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (yarp::os::Value *)new yarp::os::Value((yarp::os::ConstString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Value__SWIG_6(void * jarg1, int jarg2) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  result = (yarp::os::Value *)new yarp::os::Value(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Value__SWIG_7(void * jarg1) {
  void * jresult ;
  yarp::os::Value *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (yarp::os::Value *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  result = (yarp::os::Value *)new yarp::os::Value((yarp::os::Value const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Value(void * jarg1) {
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isBool(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isInt(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isInt64(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isInt64();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isString(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isString();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isDouble(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isList(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isList();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isDict(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isDict();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isVocab(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isVocab();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isBlob(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isBlob();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_asBool(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->asBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Value_asInt(void * jarg1) {
  int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  int result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (int)((yarp::os::Value const *)arg1)->asInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_asInt64(void * jarg1) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  YARP_INT64 result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = ((yarp::os::Value const *)arg1)->asInt64();
  jresult = new YARP_INT64((const YARP_INT64 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Value_asVocab(void * jarg1) {
  int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  int result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (int)((yarp::os::Value const *)arg1)->asVocab();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Value_asDouble(void * jarg1) {
  double jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  double result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (double)((yarp::os::Value const *)arg1)->asDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Value_asString(void * jarg1) {
  char * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = ((yarp::os::Value const *)arg1)->asString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_asList(void * jarg1) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (yarp::os::Bottle *)((yarp::os::Value const *)arg1)->asList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_asDict(void * jarg1) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (yarp::os::Property *)((yarp::os::Value const *)arg1)->asDict();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_asSearchable(void * jarg1) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Searchable *result = 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (yarp::os::Searchable *)((yarp::os::Value const *)arg1)->asSearchable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Value_asBlob(void * jarg1) {
  char * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *result = 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (char *)((yarp::os::Value const *)arg1)->asBlob();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Value_asBlobLength(void * jarg1) {
  unsigned long jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  size_t result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = ((yarp::os::Value const *)arg1)->asBlobLength();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_find(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Value *) &((yarp::os::Value const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isEqual__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  arg2 = (yarp::os::Value *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::os::Value const *)arg1)->operator ==((yarp::os::Value const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_notEqual__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  arg2 = (yarp::os::Value *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::os::Value const *)arg1)->operator !=((yarp::os::Value const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isEqual__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((yarp::os::Value const *)arg1)->operator ==((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_notEqual__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((yarp::os::Value const *)arg1)->operator !=((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Value_fromString(void * jarg1, char * jarg2) {
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->fromString((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Value_toString_c(void * jarg1) {
  char * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = ((yarp::os::Value const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_create(void * jarg1) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (yarp::os::Value *)((yarp::os::Value const *)arg1)->create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_clone(void * jarg1) {
  void * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (yarp::os::Value *)((yarp::os::Value const *)arg1)->clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Value_getCode(void * jarg1) {
  int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  int result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (int)((yarp::os::Value const *)arg1)->getCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isNull(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Value_isLeaf(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isLeaf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_makeInt(int jarg1) {
  void * jresult ;
  int arg1 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (yarp::os::Value *)yarp::os::Value::makeInt(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_makeDouble(double jarg1) {
  void * jresult ;
  double arg1 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (yarp::os::Value *)yarp::os::Value::makeDouble(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_makeString(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (yarp::os::Value *)yarp::os::Value::makeString((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_makeVocab__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (yarp::os::Value *)yarp::os::Value::makeVocab(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_makeVocab__SWIG_1(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (yarp::os::Value *)yarp::os::Value::makeVocab((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_makeBlob(void * jarg1, int jarg2) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  result = (yarp::os::Value *)yarp::os::Value::makeBlob(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_makeList__SWIG_0() {
  void * jresult ;
  yarp::os::Value *result = 0 ;
  
  result = (yarp::os::Value *)yarp::os::Value::makeList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_makeList__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (yarp::os::Value *)yarp::os::Value::makeList((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_makeValue(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (yarp::os::Value *)yarp::os::Value::makeValue((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_getNullValue() {
  void * jresult ;
  yarp::os::Value *result = 0 ;
  
  result = (yarp::os::Value *) &yarp::os::Value::getNullValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Value_toString(void * jarg1) {
  char * jresult ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  std::string result;
  
  arg1 = (yarp::os::Value *)jarg1; 
  result = yarp_os_Value_toString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Vocab_encode(char * jarg1) {
  int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::NetInt32 result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (yarp::os::NetInt32)yarp::os::Vocab::encode((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Vocab_decode(int jarg1) {
  char * jresult ;
  yarp::os::NetInt32 arg1 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::NetInt32)jarg1; 
  result = yarp::os::Vocab::decode(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vocab() {
  void * jresult ;
  yarp::os::Vocab *result = 0 ;
  
  result = (yarp::os::Vocab *)new yarp::os::Vocab();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vocab(void * jarg1) {
  yarp::os::Vocab *arg1 = (yarp::os::Vocab *) 0 ;
  
  arg1 = (yarp::os::Vocab *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Contactable(void * jarg1) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_open__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = (bool)(arg1)->open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_open__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_open__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_open__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_close(void * jarg1) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_interrupt(void * jarg1) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_resume(void * jarg1) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contactable_where(void * jarg1) {
  void * jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = ((yarp::os::Contactable const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Contactable_getName(void * jarg1) {
  char * jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = ((yarp::os::Contactable const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_setEnvelope__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Contactable_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  int result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Contactable_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  int result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_getReport(void * jarg1, void * jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_setReporter(void * jarg1, void * jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_setReader(void * jarg1, void * jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contactable_getType(void * jarg1) {
  void * jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  Type result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_promiseType(void * jarg1, void * jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Contactable_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_setReadOnly(void * jarg1) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  (arg1)->setReadOnly();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_setWriteOnly(void * jarg1) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  (arg1)->setWriteOnly();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_setRpcServer(void * jarg1) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  (arg1)->setRpcServer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_setRpcClient(void * jarg1) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  (arg1)->setRpcClient();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_setCallbackLock__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_setCallbackLock__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = (bool)(arg1)->setCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Contactable_unlockCallback(void * jarg1) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Contactable_setEnvelope__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Portable *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contactable *)jarg1; 
  arg2 = (yarp::os::Portable *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Portable & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_os_Contactable_setEnvelope__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnbufferedContactable_write__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::UnbufferedContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortWriter *)jarg3; 
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnbufferedContactable_write__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::UnbufferedContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnbufferedContactable_write__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::UnbufferedContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::PortWriter *)jarg4; 
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnbufferedContactable_write__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::UnbufferedContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnbufferedContactable_read__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::UnbufferedContactable *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnbufferedContactable_read__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::UnbufferedContactable *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnbufferedContactable_reply(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::UnbufferedContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->reply(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnbufferedContactable_replyAndDrop(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::UnbufferedContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->replyAndDrop(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnbufferedContactable(void * jarg1) {
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  
  arg1 = (yarp::os::UnbufferedContactable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Port() {
  void * jresult ;
  yarp::os::Port *result = 0 ;
  
  result = (yarp::os::Port *)new yarp::os::Port();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Port(void * jarg1) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_openFake(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->openFake((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_close(void * jarg1) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_interrupt(void * jarg1) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_resume(void * jarg1) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Port_where(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = ((yarp::os::Port const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_write__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortWriter *)jarg3; 
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_write__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_write__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::PortWriter *)jarg4; 
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_write__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_read__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_read__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_reply__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->reply(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_replyAndDrop(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->replyAndDrop(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_setReader(void * jarg1, void * jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_setReaderCreator(void * jarg1, void * jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  PortReaderCreator *arg2 = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (PortReaderCreator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PortReaderCreator & type is null", 0);
    return ;
  } 
  (arg1)->setReaderCreator(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_enableBackgroundWrite(void * jarg1, unsigned int jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableBackgroundWrite(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Port_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Port_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_getReport(void * jarg1, void * jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_setReporter(void * jarg1, void * jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_setAdminMode__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAdminMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_setAdminMode__SWIG_1(void * jarg1) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  (arg1)->setAdminMode();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_setTimeout(void * jarg1, float jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->setTimeout(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_setVerbosity(void * jarg1, int jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setVerbosity(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Port_getVerbosity(void * jarg1) {
  int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = (int)(arg1)->getVerbosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Port_getType(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  Type result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_promiseType(void * jarg1, void * jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Port_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_sharedOpen(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::Port *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->sharedOpen(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_isOpen(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = (bool)((yarp::os::Port const *)arg1)->isOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_setCallbackLock__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_setCallbackLock__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = (bool)(arg1)->setCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Port_unlockCallback(void * jarg1) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  arg1 = (yarp::os::Port *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_write__SWIG_4(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_4(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_write__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Property & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_5(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_write__SWIG_6(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_6(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_write__SWIG_7(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_7(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_write__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::Bottle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_8(arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_write__SWIG_9(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_9(arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Port_reply__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Port *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_os_Port_reply__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_open__SWIG_0_0(void * jarg1) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = (bool)(arg1)->open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_open__SWIG_0_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_open__SWIG_0_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_open__SWIG_0_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AbstractContactable_asPort__SWIG_0(void * jarg1) {
  void * jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Port *result = 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = (yarp::os::Port *) &(arg1)->asPort();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_close(void * jarg1) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_interrupt(void * jarg1) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_resume(void * jarg1) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AbstractContactable_where(void * jarg1) {
  void * jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = ((yarp::os::AbstractContactable const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AbstractContactable_getName(void * jarg1) {
  char * jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = ((yarp::os::AbstractContactable const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AbstractContactable_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  int result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AbstractContactable_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  int result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_getReport(void * jarg1, void * jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_setReporter(void * jarg1, void * jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_setReader(void * jarg1, void * jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AbstractContactable_getType(void * jarg1) {
  void * jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  Type result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_promiseType(void * jarg1, void * jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AbstractContactable_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_write__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortWriter *)jarg3; 
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_write__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_write__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::PortWriter *)jarg4; 
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_write__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_read__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_read__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_reply(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->reply(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_replyAndDrop(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->replyAndDrop(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_setCallbackLock__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_setCallbackLock__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = (bool)(arg1)->setCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AbstractContactable_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AbstractContactable_unlockCallback(void * jarg1) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AbstractContactable(void * jarg1) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  arg1 = (yarp::os::AbstractContactable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkBase_initMinimum() {
  yarp::os::NetworkBase::initMinimum();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkBase_autoInitMinimum() {
  yarp::os::NetworkBase::autoInitMinimum();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkBase_finiMinimum() {
  yarp::os::NetworkBase::finiMinimum();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_connect__SWIG_0(char * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_connect__SWIG_1(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_connect__SWIG_2(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_connect__SWIG_5(char * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::ContactStyle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ContactStyle const & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::ContactStyle const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_disconnect__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (bool)yarp::os::NetworkBase::disconnect((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_disconnect__SWIG_1(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::os::NetworkBase::disconnect((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_disconnect__SWIG_2(char * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::ContactStyle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ContactStyle const & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::disconnect((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::ContactStyle const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_isConnected__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (bool)yarp::os::NetworkBase::isConnected((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_isConnected__SWIG_1(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::os::NetworkBase::isConnected((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_isConnected__SWIG_2(char * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::ContactStyle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ContactStyle const & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::isConnected((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::ContactStyle const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_exists__SWIG_0(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  bool arg2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  result = (bool)yarp::os::NetworkBase::exists((std::string const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_exists__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)yarp::os::NetworkBase::exists((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_exists__SWIG_2(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ContactStyle *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (yarp::os::ContactStyle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ContactStyle const & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::exists((std::string const &)*arg1,(yarp::os::ContactStyle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_sync__SWIG_0(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  bool arg2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  result = (bool)yarp::os::NetworkBase::sync((std::string const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_sync__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)yarp::os::NetworkBase::sync((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetworkBase_main(int jarg1, void * jarg2) {
  int jresult ;
  int arg1 ;
  char **arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char **)jarg2; 
  result = (int)yarp::os::NetworkBase::main(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetworkBase_runNameServer(int jarg1, void * jarg2) {
  int jresult ;
  int arg1 ;
  char **arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char **)jarg2; 
  result = (int)yarp::os::NetworkBase::runNameServer(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkBase_assertion(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  yarp::os::NetworkBase::assertion(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkBase_queryName(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = yarp::os::NetworkBase::queryName((std::string const &)*arg1);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkBase_registerName(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = yarp::os::NetworkBase::registerName((std::string const &)*arg1);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkBase_registerContact(void * jarg1) {
  void * jresult ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::Contact *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = yarp::os::NetworkBase::registerContact((yarp::os::Contact const &)*arg1);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkBase_unregisterName(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = yarp::os::NetworkBase::unregisterName((std::string const &)*arg1);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkBase_unregisterContact(void * jarg1) {
  void * jresult ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::Contact *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = yarp::os::NetworkBase::unregisterContact((yarp::os::Contact const &)*arg1);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_setProperty(char * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value *arg3 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::setProperty((char const *)arg1,(char const *)arg2,(yarp::os::Value const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkBase_getProperty(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (yarp::os::Value *)yarp::os::NetworkBase::getProperty((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetworkBase_getNameServerName() {
  char * jresult ;
  yarp::os::ConstString result;
  
  result = yarp::os::NetworkBase::getNameServerName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkBase_getNameServerContact() {
  void * jresult ;
  yarp::os::Contact result;
  
  result = yarp::os::NetworkBase::getNameServerContact();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_setNameServerName(char * jarg1) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)yarp::os::NetworkBase::setNameServerName((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_setLocalMode(unsigned int jarg1) {
  unsigned int jresult ;
  bool arg1 ;
  bool result;
  
  arg1 = jarg1 ? true : false; 
  result = (bool)yarp::os::NetworkBase::setLocalMode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_getLocalMode() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)yarp::os::NetworkBase::getLocalMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetworkBase_readString__SWIG_0(void * jarg1) {
  char * jresult ;
  bool *arg1 = (bool *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (bool *)jarg1; 
  result = yarp::os::NetworkBase::readString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetworkBase_readString__SWIG_1() {
  char * jresult ;
  yarp::os::ConstString result;
  
  result = yarp::os::NetworkBase::readString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_write__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, double jarg6) {
  unsigned int jresult ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  bool result;
  
  arg1 = (yarp::os::Contact *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_write__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (yarp::os::Contact *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_write__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (yarp::os::Contact *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_write__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contact *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_write__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::ContactStyle *arg4 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contact *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::ContactStyle *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ContactStyle const & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,(yarp::os::ContactStyle const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_writeToNameServer(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::PortWriter *arg1 = 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::PortWriter *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::ContactStyle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ContactStyle const & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::writeToNameServer(*arg1,*arg2,(yarp::os::ContactStyle const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_write__SWIG_5(char * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::write((std::string const &)*arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_checkNetwork__SWIG_0() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)yarp::os::NetworkBase::checkNetwork();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_checkNetwork__SWIG_1(double jarg1) {
  unsigned int jresult ;
  double arg1 ;
  bool result;
  
  arg1 = (double)jarg1; 
  result = (bool)yarp::os::NetworkBase::checkNetwork(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_initialized() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)yarp::os::NetworkBase::initialized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkBase_setVerbosity(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  yarp::os::NetworkBase::setVerbosity(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkBase_queryBypass(void * jarg1) {
  NameStore *arg1 = (NameStore *) 0 ;
  
  arg1 = (NameStore *)jarg1; 
  yarp::os::NetworkBase::queryBypass(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkBase_getQueryBypass() {
  void * jresult ;
  NameStore *result = 0 ;
  
  result = (NameStore *)yarp::os::NetworkBase::getQueryBypass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetworkBase_getEnvironment__SWIG_0(char * jarg1, void * jarg2) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = yarp::os::NetworkBase::getEnvironment((char const *)arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetworkBase_getEnvironment__SWIG_1(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (char *)jarg1; 
  result = yarp::os::NetworkBase::getEnvironment((char const *)arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkBase_setEnvironment(char * jarg1, char * jarg2) {
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  yarp::os::NetworkBase::setEnvironment((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkBase_unsetEnvironment(char * jarg1) {
  yarp::os::ConstString *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  yarp::os::NetworkBase::unsetEnvironment((std::string const &)*arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetworkBase_getDirectorySeparator() {
  char * jresult ;
  yarp::os::ConstString result;
  
  result = yarp::os::NetworkBase::getDirectorySeparator();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetworkBase_getPathSeparator() {
  char * jresult ;
  yarp::os::ConstString result;
  
  result = yarp::os::NetworkBase::getPathSeparator();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_registerCarrier(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)yarp::os::NetworkBase::registerCarrier((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkBase__lock() {
  yarp::os::NetworkBase::lock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkBase_unlock() {
  yarp::os::NetworkBase::unlock();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_localNetworkAllocation() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)yarp::os::NetworkBase::localNetworkAllocation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkBase_detectNameServer(unsigned int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  bool arg1 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  yarp::os::Contact result;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (bool *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg3 = (bool *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  result = yarp::os::NetworkBase::detectNameServer(arg1,*arg2,*arg3);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_setNameServerContact(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Contact *arg1 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Contact *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::setNameServerContact(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetworkBase_getConfigFile(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (char *)jarg1; 
  result = yarp::os::NetworkBase::getConfigFile((char const *)arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetworkBase_getDefaultPortRange() {
  int jresult ;
  int result;
  
  result = (int)yarp::os::NetworkBase::getDefaultPortRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_setConnectionQos__SWIG_0(char * jarg1, char * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::QosStyle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::QosStyle const & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::QosStyle *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::QosStyle const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3,(yarp::os::QosStyle const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_setConnectionQos__SWIG_1(char * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::QosStyle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::QosStyle const & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::QosStyle *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::QosStyle const & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3,(yarp::os::QosStyle const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_setConnectionQos__SWIG_2(char * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::QosStyle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::QosStyle const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_setConnectionQos__SWIG_3(char * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::QosStyle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::QosStyle const & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_getConnectionQos__SWIG_0(char * jarg1, char * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::QosStyle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::QosStyle & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::QosStyle *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::QosStyle & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)yarp::os::NetworkBase::getConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,*arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkBase_getConnectionQos__SWIG_1(char * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::QosStyle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::QosStyle & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::QosStyle *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::QosStyle & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::getConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetworkBase() {
  void * jresult ;
  yarp::os::NetworkBase *result = 0 ;
  
  result = (yarp::os::NetworkBase *)new yarp::os::NetworkBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetworkBase(void * jarg1) {
  yarp::os::NetworkBase *arg1 = (yarp::os::NetworkBase *) 0 ;
  
  arg1 = (yarp::os::NetworkBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Network() {
  void * jresult ;
  yarp::os::Network *result = 0 ;
  
  result = (yarp::os::Network *)new yarp::os::Network();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Network(void * jarg1) {
  yarp::os::Network *arg1 = (yarp::os::Network *) 0 ;
  
  arg1 = (yarp::os::Network *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network_init() {
  yarp::os::Network::init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Network_fini() {
  yarp::os::Network::fini();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortablePairBase_readPair(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::ConnectionReader *arg1 = 0 ;
  yarp::os::Portable *arg2 = 0 ;
  yarp::os::Portable *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionReader *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::Portable *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Portable & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::Portable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Portable & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::PortablePairBase::readPair(*arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortablePairBase_writePair(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::ConnectionWriter *arg1 = 0 ;
  yarp::os::Portable *arg2 = 0 ;
  yarp::os::Portable *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::ConnectionWriter *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  arg2 = (yarp::os::Portable *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Portable & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::Portable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Portable & type is null", 0);
    return 0;
  } 
  result = (bool)yarp::os::PortablePairBase::writePair(*arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PortablePairBase(void * jarg1) {
  yarp::os::PortablePairBase *arg1 = (yarp::os::PortablePairBase *) 0 ;
  
  arg1 = (yarp::os::PortablePairBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PortReaderCreator(void * jarg1) {
  yarp::os::PortReaderCreator *arg1 = (yarp::os::PortReaderCreator *) 0 ;
  
  arg1 = (yarp::os::PortReaderCreator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortReaderCreator_create(void * jarg1) {
  void * jresult ;
  yarp::os::PortReaderCreator *arg1 = (yarp::os::PortReaderCreator *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  arg1 = (yarp::os::PortReaderCreator *)jarg1; 
  result = (yarp::os::PortReader *)(arg1)->create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_check__SWIG_0_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_check__SWIG_0_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Property_check__SWIG_0_2(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = ((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Property_check__SWIG_0_3(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  result = ((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Property_findGroup__SWIG_0_0(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Bottle *) &((yarp::os::Property const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Property_findGroup__SWIG_0_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (yarp::os::Bottle *) &((yarp::os::Property const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Property__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (yarp::os::Property *)new yarp::os::Property(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Property__SWIG_1() {
  void * jresult ;
  yarp::os::Property *result = 0 ;
  
  result = (yarp::os::Property *)new yarp::os::Property();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Property__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (yarp::os::Property *)new yarp::os::Property((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Property__SWIG_3(void * jarg1) {
  void * jresult ;
  yarp::os::Property *arg1 = 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::Property *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Property const & type is null", 0);
    return 0;
  } 
  result = (yarp::os::Property *)new yarp::os::Property((yarp::os::Property const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Property(void * jarg1) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_put__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->put((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_put__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return ;
  } 
  (arg1)->put((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_put__SWIG_3(void * jarg1, char * jarg2, int jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  (arg1)->put((yarp::os::ConstString const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_put__SWIG_4(void * jarg1, char * jarg2, double jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  (arg1)->put((yarp::os::ConstString const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Property_addGroup(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Property *) &(arg1)->addGroup((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_unput(void * jarg1, char * jarg2) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->unput((yarp::os::ConstString const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Property_find(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Value *) &((yarp::os::Property const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_clear(void * jarg1) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromString__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  (arg1)->fromString((yarp::os::ConstString const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromString__SWIG_1(void * jarg1, char * jarg2) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->fromString((yarp::os::ConstString const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromCommand__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->fromCommand(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromCommand__SWIG_1(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool arg4 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->fromCommand(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromCommand__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  (arg1)->fromCommand(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromArguments__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->fromArguments((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromArguments__SWIG_1(void * jarg1, char * jarg2) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->fromArguments((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_fromConfigFile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_fromConfigFile__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_fromConfigFile__SWIG_2(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Searchable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Searchable & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_fromConfigFile__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Searchable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Searchable & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_fromConfigDir__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->fromConfigDir((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_fromConfigDir__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->fromConfigDir((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_fromConfigDir__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->fromConfigDir((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromConfig__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->fromConfig((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromConfig__SWIG_1(void * jarg1, char * jarg2) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->fromConfig((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromConfig__SWIG_2(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (yarp::os::Searchable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Searchable & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->fromConfig((char const *)arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromConfig__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (yarp::os::Searchable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Searchable & type is null", 0);
    return ;
  } 
  (arg1)->fromConfig((char const *)arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromQuery__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->fromQuery((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Property_fromQuery__SWIG_1(void * jarg1, char * jarg2) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->fromQuery((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Property_toString_c(void * jarg1) {
  char * jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  result = ((yarp::os::Property const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Property_write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Property_toString(void * jarg1) {
  char * jresult ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  std::string result;
  
  arg1 = (yarp::os::Property *)jarg1; 
  result = yarp_os_Property_toString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOTTLE_TAG_INT_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOTTLE_TAG_VOCAB_get() {
  int jresult ;
  int result;
  
  result = (int)((1+8));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOTTLE_TAG_DOUBLE_get() {
  int jresult ;
  int result;
  
  result = (int)((2+8));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOTTLE_TAG_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)((4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOTTLE_TAG_BLOB_get() {
  int jresult ;
  int result;
  
  result = (int)((4+8));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOTTLE_TAG_INT64_get() {
  int jresult ;
  int result;
  
  result = (int)((1+16));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOTTLE_TAG_LIST_get() {
  int jresult ;
  int result;
  
  result = (int)(256);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOTTLE_TAG_DICT_get() {
  int jresult ;
  int result;
  
  result = (int)(512);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_check__SWIG_0_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_check__SWIG_0_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_check__SWIG_0_2(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = ((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_check__SWIG_0_3(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  result = ((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_findGroup__SWIG_0_0(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Bottle *) &((yarp::os::Bottle const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_findGroup__SWIG_0_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (yarp::os::Bottle *) &((yarp::os::Bottle const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Bottle__SWIG_0() {
  void * jresult ;
  yarp::os::Bottle *result = 0 ;
  
  result = (yarp::os::Bottle *)new yarp::os::Bottle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Bottle__SWIG_1(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (yarp::os::Bottle *)new yarp::os::Bottle((yarp::os::ConstString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Bottle__SWIG_2(void * jarg1) {
  void * jresult ;
  yarp::os::Bottle *arg1 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return 0;
  } 
  result = (yarp::os::Bottle *)new yarp::os::Bottle((yarp::os::Bottle const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Bottle(void * jarg1) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_clear(void * jarg1) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_addInt(void * jarg1, int jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->addInt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_addInt64(void * jarg1, void * jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  YARP_INT64 *arg2 = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (YARP_INT64 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "YARP_INT64 const & type is null", 0);
    return ;
  } 
  (arg1)->addInt64((YARP_INT64 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_addVocab(void * jarg1, int jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->addVocab(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_addDouble(void * jarg1, double jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->addDouble(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_addString__SWIG_0(void * jarg1, char * jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->addString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_add__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Value *arg2 = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::Value *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return ;
  } 
  (arg1)->add((yarp::os::Value const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_addList(void * jarg1) {
  void * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  result = (yarp::os::Bottle *) &(arg1)->addList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_addDict(void * jarg1) {
  void * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  result = (yarp::os::Property *) &(arg1)->addDict();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_pop(void * jarg1) {
  void * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  result = (arg1)->pop();
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_get(void * jarg1, int jarg2) {
  void * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int arg2 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (int)jarg2; 
  result = (yarp::os::Value *) &((yarp::os::Bottle const *)arg1)->get(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bottle_size(void * jarg1) {
  int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  result = (int)((yarp::os::Bottle const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_fromString(void * jarg1, char * jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->fromString((yarp::os::ConstString const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_fromBinary(void * jarg1, char * jarg2, int jarg3) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->fromBinary((char const *)arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Bottle_toBinary__SWIG_0(void * jarg1, void * jarg2) {
  char * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (size_t *)jarg2; 
  result = (char *)(arg1)->toBinary(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Bottle_toBinary__SWIG_1(void * jarg1) {
  char * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *result = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  result = (char *)(arg1)->toBinary();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Bottle_toString_c(void * jarg1) {
  char * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  result = ((yarp::os::Bottle const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_write__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_read__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_write__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->write(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_write__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_read__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_read__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_onCommencement(void * jarg1) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  (arg1)->onCommencement();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_find(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Value *) &((yarp::os::Bottle const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_isNull(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  result = (bool)((yarp::os::Bottle const *)arg1)->isNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_copy__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->copy((yarp::os::Bottle const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_copy__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->copy((yarp::os::Bottle const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_copy__SWIG_2(void * jarg1, void * jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return ;
  } 
  (arg1)->copy((yarp::os::Bottle const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_getNullBottle() {
  void * jresult ;
  yarp::os::Bottle *result = 0 ;
  
  result = (yarp::os::Bottle *) &yarp::os::Bottle::getNullBottle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_isEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->operator ==((yarp::os::Bottle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bottle_notEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->operator !=((yarp::os::Bottle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_append(void * jarg1, void * jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return ;
  } 
  (arg1)->append((yarp::os::Bottle const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottle_tail(void * jarg1) {
  void * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  result = ((yarp::os::Bottle const *)arg1)->tail();
  jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_hasChanged(void * jarg1) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  (arg1)->hasChanged();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Bottle_toString__SWIG_0(int jarg1) {
  char * jresult ;
  int arg1 ;
  yarp::os::ConstString result;
  
  arg1 = (int)jarg1; 
  result = yarp::os::Bottle::toString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bottle_getSpecialization(void * jarg1) {
  int jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  result = (int)(arg1)->getSpecialization();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Bottle_describeBottleCode(int jarg1) {
  char * jresult ;
  int arg1 ;
  yarp::os::ConstString result;
  
  arg1 = (int)jarg1; 
  result = yarp::os::Bottle::describeBottleCode(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bottle_add__SWIG_1(void * jarg1, char * jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->add((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Bottle_toString__SWIG_1(void * jarg1) {
  char * jresult ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  std::string result;
  
  arg1 = (yarp::os::Bottle *)jarg1; 
  result = yarp_os_Bottle_toString__SWIG_1(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_typedReaderMissingCallback() {
  typedReaderMissingCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PortReaderBufferBaseCreator(void * jarg1) {
  yarp::os::impl::PortReaderBufferBaseCreator *arg1 = (yarp::os::impl::PortReaderBufferBaseCreator *) 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBaseCreator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortReaderBufferBaseCreator_create(void * jarg1) {
  void * jresult ;
  yarp::os::impl::PortReaderBufferBaseCreator *arg1 = (yarp::os::impl::PortReaderBufferBaseCreator *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBaseCreator *)jarg1; 
  result = (yarp::os::PortReader *)(arg1)->create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PortReaderBufferBase(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  yarp::os::impl::PortReaderBufferBase *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (yarp::os::impl::PortReaderBufferBase *)new yarp::os::impl::PortReaderBufferBase(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PortReaderBufferBase(void * jarg1) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_setCreator(void * jarg1, void * jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::impl::PortReaderBufferBaseCreator *arg2 = (yarp::os::impl::PortReaderBufferBaseCreator *) 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = (yarp::os::impl::PortReaderBufferBaseCreator *)jarg2; 
  (arg1)->setCreator(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_setReplier(void * jarg1, void * jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_setPrune__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPrune(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_setPrune__SWIG_1(void * jarg1) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  (arg1)->setPrune();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_setAllowReuse__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAllowReuse(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_setAllowReuse__SWIG_1(void * jarg1) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  (arg1)->setAllowReuse();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PortReaderBufferBase_getName(void * jarg1) {
  char * jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  result = ((yarp::os::impl::PortReaderBufferBase const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortReaderBufferBase_getMaxBuffer(void * jarg1) {
  unsigned int jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  unsigned int result;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  result = (unsigned int)(arg1)->getMaxBuffer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortReaderBufferBase_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool result;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_clear(void * jarg1) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortReaderBufferBase_create(void * jarg1) {
  void * jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  result = (yarp::os::PortReader *)(arg1)->create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_release__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PortReaderBufferBase_check(void * jarg1) {
  int jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  int result;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  result = (int)(arg1)->check();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortReaderBufferBase_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortReaderBufferBase_readBase(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  yarp::os::PortReader *result = 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = (bool *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (yarp::os::PortReader *)(arg1)->readBase(*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_interrupt(void * jarg1) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_attachBase(void * jarg1, void * jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = (yarp::os::Port *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return ;
  } 
  (arg1)->attachBase(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortReaderBufferBase_acceptObjectBase(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2; 
  arg3 = (yarp::os::PortWriter *)jarg3; 
  result = (bool)(arg1)->acceptObjectBase(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortReaderBufferBase_forgetObjectBase(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2; 
  arg3 = (yarp::os::PortWriter *)jarg3; 
  result = (bool)(arg1)->forgetObjectBase(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortReaderBufferBase_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortReaderBufferBase_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_release__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_setAutoRelease__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoRelease(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortReaderBufferBase_setAutoRelease__SWIG_1(void * jarg1) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  arg1 = (yarp::os::impl::PortReaderBufferBase *)jarg1; 
  (arg1)->setAutoRelease();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PortWriterBufferManager(void * jarg1) {
  yarp::os::PortWriterBufferManager *arg1 = (yarp::os::PortWriterBufferManager *) 0 ;
  
  arg1 = (yarp::os::PortWriterBufferManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortWriterBufferManager_onCompletion(void * jarg1, void * jarg2) {
  yarp::os::PortWriterBufferManager *arg1 = (yarp::os::PortWriterBufferManager *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::PortWriterBufferManager *)jarg1; 
  arg2 = jarg2; 
  (arg1)->onCompletion(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortWriterWrapper_getInternal(void * jarg1) {
  void * jresult ;
  yarp::os::PortWriterWrapper *arg1 = (yarp::os::PortWriterWrapper *) 0 ;
  yarp::os::PortWriter *result = 0 ;
  
  arg1 = (yarp::os::PortWriterWrapper *)jarg1; 
  result = (yarp::os::PortWriter *)(arg1)->getInternal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PortWriterWrapper(void * jarg1) {
  yarp::os::PortWriterWrapper *arg1 = (yarp::os::PortWriterWrapper *) 0 ;
  
  arg1 = (yarp::os::PortWriterWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PortWriterBufferBase(void * jarg1) {
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  
  arg1 = (yarp::os::PortWriterBufferBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortWriterBufferBase_create(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  yarp::os::PortWriterBufferManager *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  yarp::os::PortWriterWrapper *result = 0 ;
  
  arg1 = (yarp::os::PortWriterBufferBase *)jarg1; 
  arg2 = (yarp::os::PortWriterBufferManager *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriterBufferManager & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (yarp::os::PortWriterWrapper *)(arg1)->create(*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PortWriterBufferBase_getContent(void * jarg1) {
  void * jresult ;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::PortWriterBufferBase *)jarg1; 
  result = (void *)(arg1)->getContent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PortWriterBufferBase_releaseContent(void * jarg1) {
  unsigned int jresult ;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  bool result;
  
  arg1 = (yarp::os::PortWriterBufferBase *)jarg1; 
  result = (bool)(arg1)->releaseContent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PortWriterBufferBase_getCount(void * jarg1) {
  int jresult ;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  int result;
  
  arg1 = (yarp::os::PortWriterBufferBase *)jarg1; 
  result = (int)(arg1)->getCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortWriterBufferBase_attach(void * jarg1, void * jarg2) {
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  
  arg1 = (yarp::os::PortWriterBufferBase *)jarg1; 
  arg2 = (yarp::os::Port *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return ;
  } 
  (arg1)->attach(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortWriterBufferBase_detach(void * jarg1) {
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  
  arg1 = (yarp::os::PortWriterBufferBase *)jarg1; 
  (arg1)->detach();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortWriterBufferBase_write(void * jarg1, unsigned int jarg2) {
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::PortWriterBufferBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PortWriterBufferBase_waitForWrite(void * jarg1) {
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  
  arg1 = (yarp::os::PortWriterBufferBase *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT double SWIGSTDCALL CSharp_Random_uniform__SWIG_0() {
  double jresult ;
  double result;
  
  result = (double)yarp::os::Random::uniform();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Random_normal__SWIG_0(double jarg1, double jarg2) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)yarp::os::Random::normal(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Random_seed_c(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  yarp::os::Random::seed(arg1);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Random_normal__SWIG_1() {
  double jresult ;
  double result;
  
  result = (double)yarp::os::Random::normal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Random_uniform__SWIG_1(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)yarp::os::Random::uniform(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Random() {
  void * jresult ;
  yarp::os::Random *result = 0 ;
  
  result = (yarp::os::Random *)new yarp::os::Random();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Random(void * jarg1) {
  yarp::os::Random *arg1 = (yarp::os::Random *) 0 ;
  
  arg1 = (yarp::os::Random *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Semaphore__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  yarp::os::Semaphore *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (yarp::os::Semaphore *)new yarp::os::Semaphore(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Semaphore__SWIG_1() {
  void * jresult ;
  yarp::os::Semaphore *result = 0 ;
  
  result = (yarp::os::Semaphore *)new yarp::os::Semaphore();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Semaphore(void * jarg1) {
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  
  arg1 = (yarp::os::Semaphore *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Semaphore_wait(void * jarg1) {
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  
  arg1 = (yarp::os::Semaphore *)jarg1; 
  (arg1)->wait();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Semaphore_waitWithTimeout(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::os::Semaphore *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->waitWithTimeout(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Semaphore_check(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Semaphore *)jarg1; 
  result = (bool)(arg1)->check();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Semaphore_post(void * jarg1) {
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  
  arg1 = (yarp::os::Semaphore *)jarg1; 
  (arg1)->post();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Thread() {
  void * jresult ;
  yarp::os::Thread *result = 0 ;
  
  result = (yarp::os::Thread *)new SwigDirector_Thread();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Thread(void * jarg1) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_run(void * jarg1) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  (arg1)->run();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_onStop(void * jarg1) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  (arg1)->onStop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_onStopSwigExplicitThread(void * jarg1) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  (arg1)->yarp::os::Thread::onStop();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Thread_start(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  result = (bool)(arg1)->start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Thread_stop(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  result = (bool)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_beforeStart(void * jarg1) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  (arg1)->beforeStart();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_beforeStartSwigExplicitThread(void * jarg1) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  (arg1)->yarp::os::Thread::beforeStart();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_afterStart(void * jarg1, unsigned int jarg2) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->afterStart(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_afterStartSwigExplicitThread(void * jarg1, unsigned int jarg2) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->yarp::os::Thread::afterStart(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Thread_threadInit(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  result = (bool)(arg1)->threadInit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Thread_threadInitSwigExplicitThread(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  result = (bool)(arg1)->yarp::os::Thread::threadInit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_threadRelease(void * jarg1) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  (arg1)->threadRelease();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_threadReleaseSwigExplicitThread(void * jarg1) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  (arg1)->yarp::os::Thread::threadRelease();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Thread_isStopping(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  result = (bool)(arg1)->isStopping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Thread_isRunning(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  result = (bool)(arg1)->isRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_setOptions__SWIG_0(void * jarg1, int jarg2) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOptions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_setOptions__SWIG_1(void * jarg1) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  (arg1)->setOptions();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_getCount() {
  int jresult ;
  int result;
  
  result = (int)yarp::os::Thread::getCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Thread_getKey(void * jarg1) {
  long jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  long result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  result = (long)(arg1)->getKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Thread_getKeyOfCaller() {
  long jresult ;
  long result;
  
  result = (long)yarp::os::Thread::getKeyOfCaller();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_setPriority__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->setPriority(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_setPriority__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setPriority(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_getPriority(void * jarg1) {
  int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  result = (int)(arg1)->getPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_getPolicy(void * jarg1) {
  int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  result = (int)(arg1)->getPolicy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_setDefaultStackSize(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  yarp::os::Thread::setDefaultStackSize(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Thread_join__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->join(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Thread_join__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Thread *)jarg1; 
  result = (bool)(arg1)->join();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Thread_director_connect(void *objarg, SwigDirector_Thread::SWIG_Callback0_t callback0, SwigDirector_Thread::SWIG_Callback1_t callback1, SwigDirector_Thread::SWIG_Callback2_t callback2, SwigDirector_Thread::SWIG_Callback3_t callback3, SwigDirector_Thread::SWIG_Callback4_t callback4, SwigDirector_Thread::SWIG_Callback5_t callback5) {
  yarp::os::Thread *obj = (yarp::os::Thread *)objarg;
  SwigDirector_Thread *director = dynamic_cast<SwigDirector_Thread *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RateThread(void * jarg1) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThread_threadInit(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (bool)(arg1)->threadInit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_threadRelease(void * jarg1) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  (arg1)->threadRelease();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_run(void * jarg1) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  (arg1)->run();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThread_start(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (bool)(arg1)->start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThread_step(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (bool)(arg1)->step();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_stop(void * jarg1) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_askToStop(void * jarg1) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  (arg1)->askToStop();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThread_isRunning(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (bool)(arg1)->isRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThread_isSuspended(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (bool)(arg1)->isSuspended();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThread_setRate(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setRate(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RateThread_getRate(void * jarg1) {
  double jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (double)(arg1)->getRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_suspend(void * jarg1) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  (arg1)->suspend();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_resume(void * jarg1) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_resetStat(void * jarg1) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  (arg1)->resetStat();
}


SWIGEXPORT double SWIGSTDCALL CSharp_RateThread_getEstPeriod__SWIG_0(void * jarg1) {
  double jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (double)(arg1)->getEstPeriod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_getEstPeriod__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  (arg1)->getEstPeriod(*arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThread_getIterations(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  unsigned int result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (unsigned int)(arg1)->getIterations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RateThread_getEstUsed__SWIG_0(void * jarg1) {
  double jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (double)(arg1)->getEstUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_getEstUsed__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return ;
  } 
  (arg1)->getEstUsed(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_beforeStart(void * jarg1) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  (arg1)->beforeStart();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThread_afterStart(void * jarg1, unsigned int jarg2) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->afterStart(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RateThread_setPriority__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->setPriority(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RateThread_setPriority__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setPriority(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RateThread_getPriority(void * jarg1) {
  int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (int)(arg1)->getPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RateThread_getPolicy(void * jarg1) {
  int jresult ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int result;
  
  arg1 = (yarp::os::RateThread *)jarg1; 
  result = (int)(arg1)->getPolicy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RateThreadWrapper__SWIG_0() {
  void * jresult ;
  yarp::os::RateThreadWrapper *result = 0 ;
  
  result = (yarp::os::RateThreadWrapper *)new yarp::os::RateThreadWrapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RateThreadWrapper__SWIG_1(void * jarg1) {
  void * jresult ;
  Runnable *arg1 = (Runnable *) 0 ;
  yarp::os::RateThreadWrapper *result = 0 ;
  
  arg1 = (Runnable *)jarg1; 
  result = (yarp::os::RateThreadWrapper *)new yarp::os::RateThreadWrapper(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RateThreadWrapper(void * jarg1) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThreadWrapper_detach(void * jarg1) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  (arg1)->detach();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThreadWrapper_attach__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  Runnable *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  arg2 = (Runnable *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Runnable & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->attach(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThreadWrapper_open__SWIG_0(void * jarg1, double jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  double arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->open(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThreadWrapper_open__SWIG_1(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->open(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThreadWrapper_open__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  result = (bool)(arg1)->open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThreadWrapper_close(void * jarg1) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThreadWrapper_stop(void * jarg1) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThreadWrapper_run(void * jarg1) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  (arg1)->run();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RateThreadWrapper_threadInit(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  result = (bool)(arg1)->threadInit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThreadWrapper_threadRelease(void * jarg1) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  (arg1)->threadRelease();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThreadWrapper_afterStart(void * jarg1, unsigned int jarg2) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->afterStart(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RateThreadWrapper_beforeStart(void * jarg1) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  (arg1)->beforeStart();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RateThreadWrapper_getAttachment(void * jarg1) {
  void * jresult ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  Runnable *result = 0 ;
  
  arg1 = (yarp::os::RateThreadWrapper *)jarg1; 
  result = (Runnable *)((yarp::os::RateThreadWrapper const *)arg1)->getAttachment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Time_delay(double jarg1) {
  double arg1 ;
  
  arg1 = (double)jarg1; 
  yarp::os::Time::delay(arg1);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Time_now() {
  double jresult ;
  double result;
  
  result = (double)yarp::os::Time::now();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Time_yield() {
  yarp::os::Time::yield();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Time_turboBoost() {
  yarp::os::Time::turboBoost();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Time_useSystemClock() {
  yarp::os::Time::useSystemClock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Time_useNetworkClock(char * jarg1) {
  yarp::os::ConstString *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  yarp::os::Time::useNetworkClock((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Time_useCustomClock(void * jarg1) {
  Clock *arg1 = (Clock *) 0 ;
  
  arg1 = (Clock *)jarg1; 
  yarp::os::Time::useCustomClock(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Time_isSystemClock() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)yarp::os::Time::isSystemClock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Time_isValid() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)yarp::os::Time::isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Time() {
  void * jresult ;
  yarp::os::Time *result = 0 ;
  
  result = (yarp::os::Time *)new yarp::os::Time();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Time(void * jarg1) {
  yarp::os::Time *arg1 = (yarp::os::Time *) 0 ;
  
  arg1 = (yarp::os::Time *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RFModule() {
  void * jresult ;
  yarp::os::RFModule *result = 0 ;
  
  result = (yarp::os::RFModule *)new SwigDirector_RFModule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RFModule(void * jarg1) {
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RFModule_getPeriod(void * jarg1) {
  double jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  double result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (double)(arg1)->getPeriod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RFModule_getPeriodSwigExplicitRFModule(void * jarg1) {
  double jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  double result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (double)(arg1)->yarp::os::RFModule::getPeriod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_updateModule(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (bool)(arg1)->updateModule();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RFModule_runModule__SWIG_0(void * jarg1) {
  int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  int result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (int)(arg1)->runModule();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RFModule_runModuleSwigExplicitRFModule__SWIG_0(void * jarg1) {
  int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  int result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (int)(arg1)->yarp::os::RFModule::runModule();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RFModule_runModule__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ResourceFinder *arg2 = 0 ;
  int result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::ResourceFinder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ResourceFinder & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->runModule(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RFModule_runModuleSwigExplicitRFModule__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ResourceFinder *arg2 = 0 ;
  int result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::ResourceFinder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ResourceFinder & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->yarp::os::RFModule::runModule(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_configure(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ResourceFinder *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::ResourceFinder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ResourceFinder & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->configure(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_configureSwigExplicitRFModule(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ResourceFinder *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::ResourceFinder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ResourceFinder & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->yarp::os::RFModule::configure(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_respond(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::Bottle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->respond((yarp::os::Bottle const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_respondSwigExplicitRFModule(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::Bottle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->yarp::os::RFModule::respond((yarp::os::Bottle const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_attach(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::Port *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->attach(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_attachSwigExplicitRFModule(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::Port *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->yarp::os::RFModule::attach(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_attach_rpc_server(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::RpcServer *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::RpcServer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::RpcServer & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->attach(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_attach_rpc_serverSwigExplicitRFModule(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::RpcServer *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::RpcServer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::RpcServer & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->yarp::os::RFModule::attach(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_attachTerminal(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (bool)(arg1)->attachTerminal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_detachTerminal(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (bool)(arg1)->detachTerminal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_interruptModule(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (bool)(arg1)->interruptModule();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_interruptModuleSwigExplicitRFModule(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (bool)(arg1)->yarp::os::RFModule::interruptModule();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_close(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (bool)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_closeSwigExplicitRFModule(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (bool)(arg1)->yarp::os::RFModule::close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RFModule_stopModule__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->stopModule(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RFModule_stopModule__SWIG_1(void * jarg1) {
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  (arg1)->stopModule();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_isStopping(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (bool)(arg1)->isStopping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RFModule_getName__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->getName((yarp::os::ConstString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RFModule_getName__SWIG_1(void * jarg1) {
  char * jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  result = (arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RFModule_setName(void * jarg1, char * jarg2) {
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RFModule_safeRespond(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RFModule *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::Bottle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->safeRespond((yarp::os::Bottle const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RFModule_director_connect(void *objarg, SwigDirector_RFModule::SWIG_Callback0_t callback0, SwigDirector_RFModule::SWIG_Callback1_t callback1, SwigDirector_RFModule::SWIG_Callback2_t callback2, SwigDirector_RFModule::SWIG_Callback3_t callback3, SwigDirector_RFModule::SWIG_Callback4_t callback4, SwigDirector_RFModule::SWIG_Callback5_t callback5, SwigDirector_RFModule::SWIG_Callback6_t callback6, SwigDirector_RFModule::SWIG_Callback7_t callback7, SwigDirector_RFModule::SWIG_Callback8_t callback8, SwigDirector_RFModule::SWIG_Callback9_t callback9) {
  yarp::os::RFModule *obj = (yarp::os::RFModule *)objarg;
  SwigDirector_RFModule *director = dynamic_cast<SwigDirector_RFModule *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Stamp__SWIG_0() {
  void * jresult ;
  yarp::os::Stamp *result = 0 ;
  
  result = (yarp::os::Stamp *)new yarp::os::Stamp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Stamp__SWIG_1(int jarg1, double jarg2) {
  void * jresult ;
  int arg1 ;
  double arg2 ;
  yarp::os::Stamp *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (yarp::os::Stamp *)new yarp::os::Stamp(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Stamp_getCount(void * jarg1) {
  int jresult ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  int result;
  
  arg1 = (yarp::os::Stamp *)jarg1; 
  result = (int)(arg1)->getCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Stamp_getTime(void * jarg1) {
  double jresult ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  double result;
  
  arg1 = (yarp::os::Stamp *)jarg1; 
  result = (double)(arg1)->getTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Stamp_isValid(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Stamp *)jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Stamp_getMaxCount(void * jarg1) {
  int jresult ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  int result;
  
  arg1 = (yarp::os::Stamp *)jarg1; 
  result = (int)(arg1)->getMaxCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Stamp_update__SWIG_0(void * jarg1) {
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  
  arg1 = (yarp::os::Stamp *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Stamp_update__SWIG_1(void * jarg1, double jarg2) {
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::Stamp *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->update(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Stamp_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Stamp *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Stamp_write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Stamp *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Stamp(void * jarg1) {
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  
  arg1 = (yarp::os::Stamp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Stamped(void * jarg1) {
  yarp::os::Stamped *arg1 = (yarp::os::Stamped *) 0 ;
  
  arg1 = (yarp::os::Stamped *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stamped_getStamp(void * jarg1) {
  void * jresult ;
  yarp::os::Stamped *arg1 = (yarp::os::Stamped *) 0 ;
  yarp::os::Stamp result;
  
  arg1 = (yarp::os::Stamped *)jarg1; 
  result = ((yarp::os::Stamped const *)arg1)->getStamp();
  jresult = new yarp::os::Stamp((const yarp::os::Stamp &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NameStore(void * jarg1) {
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  
  arg1 = (yarp::os::NameStore *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NameStore_query(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::NameStore *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->query((yarp::os::ConstString const &)*arg2);
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NameStore_announce(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (yarp::os::NameStore *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->announce((yarp::os::ConstString const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NameStore_process(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::Contact *arg4 = 0 ;
  bool result;
  
  arg1 = (yarp::os::NameStore *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::Contact *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->process(*arg2,*arg3,(yarp::os::Contact const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactStyle_admin_set(void * jarg1, unsigned int jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->admin = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ContactStyle_admin_get(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  result = (bool) ((arg1)->admin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactStyle_quiet_set(void * jarg1, unsigned int jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->quiet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ContactStyle_quiet_get(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  result = (bool) ((arg1)->quiet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactStyle_verboseOnSuccess_set(void * jarg1, unsigned int jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verboseOnSuccess = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ContactStyle_verboseOnSuccess_get(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  result = (bool) ((arg1)->verboseOnSuccess);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactStyle_timeout_set(void * jarg1, double jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timeout = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ContactStyle_timeout_get(void * jarg1) {
  double jresult ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  double result;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  result = (double) ((arg1)->timeout);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactStyle_carrier_set(void * jarg1, char * jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->carrier = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ContactStyle_carrier_get(void * jarg1) {
  char * jresult ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->carrier);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactStyle_expectReply_set(void * jarg1, unsigned int jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expectReply = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ContactStyle_expectReply_get(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  result = (bool) ((arg1)->expectReply);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactStyle_persistent_set(void * jarg1, unsigned int jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->persistent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ContactStyle_persistent_get(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  result = (bool) ((arg1)->persistent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContactStyle_persistenceType_set(void * jarg1, int jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ContactStyle::PersistenceType arg2 ;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  arg2 = (yarp::os::ContactStyle::PersistenceType)jarg2; 
  if (arg1) (arg1)->persistenceType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ContactStyle_persistenceType_get(void * jarg1) {
  int jresult ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ContactStyle::PersistenceType result;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  result = (yarp::os::ContactStyle::PersistenceType) ((arg1)->persistenceType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ContactStyle() {
  void * jresult ;
  yarp::os::ContactStyle *result = 0 ;
  
  result = (yarp::os::ContactStyle *)new yarp::os::ContactStyle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ContactStyle(void * jarg1) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  
  arg1 = (yarp::os::ContactStyle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ResourceFinder__SWIG_0() {
  void * jresult ;
  yarp::os::ResourceFinder *result = 0 ;
  
  result = (yarp::os::ResourceFinder *)new yarp::os::ResourceFinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ResourceFinder__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::ResourceFinder *arg1 = 0 ;
  yarp::os::ResourceFinder *result = 0 ;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ResourceFinder const & type is null", 0);
    return 0;
  } 
  result = (yarp::os::ResourceFinder *)new yarp::os::ResourceFinder((yarp::os::ResourceFinder const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ResourceFinder(void * jarg1) {
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_setVerbose__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setVerbose(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_setVerbose__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = (bool)(arg1)->setVerbose();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_setQuiet__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setQuiet(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_setQuiet__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = (bool)(arg1)->setQuiet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_configure__SWIG_0(void * jarg1, char * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char **)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->configure((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_configure__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char **)jarg4; 
  result = (bool)(arg1)->configure((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_configure__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  result = (bool)(arg1)->configure(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_setDefaultContext(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setDefaultContext((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_setContext(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setContext((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_setDefault__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = (char *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->setDefault((char const *)arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_setDefault__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setDefault((char const *)arg2,(yarp::os::Value const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_setDefaultConfigFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setDefaultConfigFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_findFile__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->findFile((yarp::os::ConstString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_findFileByName__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->findFileByName((yarp::os::ConstString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_findPath__SWIG_0(void * jarg1, char * jarg2) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->findPath((yarp::os::ConstString const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_findPaths__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->findPaths((yarp::os::ConstString const &)*arg2);
  jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_findPath__SWIG_1(void * jarg1) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = (arg1)->findPath();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_getContext(void * jarg1) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = (arg1)->getContext();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_getContextPath(void * jarg1) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = (arg1)->getContextPath();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_getContexts(void * jarg1) {
  void * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::Bottle result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = (arg1)->getContexts();
  jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_check__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_find(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Value *) &((yarp::os::ResourceFinder const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_findGroup__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (yarp::os::Bottle *) &((yarp::os::ResourceFinder const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_isNull(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->isNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_toString_c(void * jarg1) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = ((yarp::os::ResourceFinder const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_findNestedResourceFinder(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::ResourceFinder result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->findNestedResourceFinder((char const *)arg2);
  jresult = new yarp::os::ResourceFinder((const yarp::os::ResourceFinder &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_isConfigured(void * jarg1) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->isConfigured();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_getResourceFinderSingleton() {
  void * jresult ;
  yarp::os::ResourceFinder *result = 0 ;
  
  result = (yarp::os::ResourceFinder *) &yarp::os::ResourceFinder::getResourceFinderSingleton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_check__SWIG_1_0(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_check__SWIG_1_1(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = ((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_check__SWIG_1_2(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (yarp::os::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Value const & type is null", 0);
    return 0;
  } 
  result = ((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_findGroup__SWIG_1_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (yarp::os::Bottle *) &((yarp::os::ResourceFinder const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_getDataHome() {
  char * jresult ;
  yarp::os::ConstString result;
  
  result = yarp::os::ResourceFinder::getDataHome();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_getDataHomeNoCreate() {
  char * jresult ;
  yarp::os::ConstString result;
  
  result = yarp::os::ResourceFinder::getDataHomeNoCreate();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_getConfigHome() {
  char * jresult ;
  yarp::os::ConstString result;
  
  result = yarp::os::ResourceFinder::getConfigHome();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_getConfigHomeNoCreate() {
  char * jresult ;
  yarp::os::ConstString result;
  
  result = yarp::os::ResourceFinder::getConfigHomeNoCreate();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_getHomeContextPath(void * jarg1) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = (arg1)->getHomeContextPath();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_getHomeRobotPath(void * jarg1) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  result = (arg1)->getHomeRobotPath();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_getDataDirs() {
  void * jresult ;
  yarp::os::Bottle result;
  
  result = yarp::os::ResourceFinder::getDataDirs();
  jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_getConfigDirs() {
  void * jresult ;
  yarp::os::Bottle result;
  
  result = yarp::os::ResourceFinder::getConfigDirs();
  jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceFinder_findPaths__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::Bottle result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (ResourceFinderOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ResourceFinderOptions const & type is null", 0);
    return 0;
  } 
  result = (arg1)->findPaths((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_findPath__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (ResourceFinderOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ResourceFinderOptions const & type is null", 0);
    return 0;
  } 
  result = (arg1)->findPath((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_findFile__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (ResourceFinderOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ResourceFinderOptions const & type is null", 0);
    return 0;
  } 
  result = (arg1)->findFile((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ResourceFinder_findFileByName__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  char * jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (ResourceFinderOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ResourceFinderOptions const & type is null", 0);
    return 0;
  } 
  result = (arg1)->findFileByName((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_readConfig(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  ResourceFinderOptions *arg4 = 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Property & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (ResourceFinderOptions *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ResourceFinderOptions const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->readConfig(*arg2,(yarp::os::ConstString const &)*arg3,(ResourceFinderOptions const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_configure__SWIG_3(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)yarp_os_ResourceFinder_configure__SWIG_3(arg1,(std::string const &)*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceFinder_configure__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::ResourceFinder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_os_ResourceFinder_configure__SWIG_3(arg1,(std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcServer_open_SWIG_0_0(void * jarg1) {
  unsigned int jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  result = (bool)(arg1)->open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcServer_open_SWIG_0_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcServer_open_SWIG_0_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcServer_open_SWIG_0_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RpcServer() {
  void * jresult ;
  yarp::os::RpcServer *result = 0 ;
  
  result = (yarp::os::RpcServer *)new yarp::os::RpcServer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RpcServer(void * jarg1) {
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcServer_write__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortWriter *)jarg3; 
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcServer_write__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcServer_write__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::PortWriter *)jarg4; 
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcServer_write__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::PortReader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcServer_read__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcServer_read__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RpcServer_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RpcServer_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RpcServer_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RpcServer_asPort__SWIG_0(void * jarg1) {
  void * jresult ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::Port *result = 0 ;
  
  arg1 = (yarp::os::RpcServer *)jarg1; 
  result = (yarp::os::Port *) &(arg1)->asPort();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RpcClient() {
  void * jresult ;
  yarp::os::RpcClient *result = 0 ;
  
  result = (yarp::os::RpcClient *)new yarp::os::RpcClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RpcClient(void * jarg1) {
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  
  arg1 = (yarp::os::RpcClient *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcClient_read__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::os::RpcClient *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcClient_read__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcClient *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcClient_reply(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcClient *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->reply(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcClient_replyAndDrop(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcClient *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->replyAndDrop(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RpcClient_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::RpcClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RpcClient_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::RpcClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RpcClient_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::RpcClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RpcClient_asPort__SWIG_0(void * jarg1) {
  void * jresult ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::Port *result = 0 ;
  
  arg1 = (yarp::os::RpcClient *)jarg1; 
  result = (yarp::os::Port *) &(arg1)->asPort();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RpcClient_write(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::RpcClient *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::Bottle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_os_RpcClient_write(arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DummyConnector() {
  void * jresult ;
  yarp::os::DummyConnector *result = 0 ;
  
  result = (yarp::os::DummyConnector *)new yarp::os::DummyConnector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DummyConnector(void * jarg1) {
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  
  arg1 = (yarp::os::DummyConnector *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DummyConnector_setTextMode(void * jarg1, unsigned int jarg2) {
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::DummyConnector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTextMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DummyConnector_getCleanWriter(void * jarg1) {
  void * jresult ;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  arg1 = (yarp::os::DummyConnector *)jarg1; 
  result = (yarp::os::ConnectionWriter *) &(arg1)->getCleanWriter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DummyConnector_getWriter(void * jarg1) {
  void * jresult ;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  arg1 = (yarp::os::DummyConnector *)jarg1; 
  result = (yarp::os::ConnectionWriter *) &(arg1)->getWriter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DummyConnector_getReader(void * jarg1) {
  void * jresult ;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  yarp::os::ConnectionReader *result = 0 ;
  
  arg1 = (yarp::os::DummyConnector *)jarg1; 
  result = (yarp::os::ConnectionReader *) &(arg1)->getReader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DummyConnector_reset(void * jarg1) {
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  
  arg1 = (yarp::os::DummyConnector *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Things() {
  void * jresult ;
  yarp::os::Things *result = 0 ;
  
  result = (yarp::os::Things *)new yarp::os::Things();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Things(void * jarg1) {
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Things_setPortWriter(void * jarg1, void * jarg2) {
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortWriter *arg2 = (yarp::os::PortWriter *) 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2; 
  (arg1)->setPortWriter(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_getPortWriter(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortWriter *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::os::PortWriter *)(arg1)->getPortWriter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Things_setPortReader(void * jarg1, void * jarg2) {
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2; 
  (arg1)->setPortReader(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_getPortReader(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::os::PortReader *)(arg1)->getPortReader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Things_setConnectionReader(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Things *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setConnectionReader(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Things_write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::Things *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Things_reset(void * jarg1) {
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Things_hasBeenRead(void * jarg1) {
  unsigned int jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  bool result;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (bool)(arg1)->hasBeenRead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_asValue(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::Value *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::os::Value *)yarp_os_Things_asValue(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_asBottle(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::os::Bottle *)yarp_os_Things_asBottle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_asProperty(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::os::Property *)yarp_os_Things_asProperty(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_asVector(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::Vector *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::sig::Vector *)yarp_os_Things_asVector(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_asMatrix(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::Matrix *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::sig::Matrix *)yarp_os_Things_asMatrix(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_asImage(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::Image *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::sig::Image *)yarp_os_Things_asImage(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_asImageOfPixelRgb(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)yarp_os_Things_asImageOfPixelRgb(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_asImageOfPixelBgr(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelBgr > *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelBgr > *)yarp_os_Things_asImageOfPixelBgr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Things_asImageOfPixelMono(void * jarg1) {
  void * jresult ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  arg1 = (yarp::os::Things *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)yarp_os_Things_asImageOfPixelMono(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_QosStyle() {
  void * jresult ;
  yarp::os::QosStyle *result = 0 ;
  
  result = (yarp::os::QosStyle *)new yarp::os::QosStyle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QosStyle_setPacketPriorityByDscp(void * jarg1, int jarg2) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP arg2 ;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  arg2 = (yarp::os::QosStyle::PacketPriorityDSCP)jarg2; 
  (arg1)->setPacketPriorityByDscp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QosStyle_setPacketPriorityByLevel(void * jarg1, int jarg2) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityLevel arg2 ;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  arg2 = (yarp::os::QosStyle::PacketPriorityLevel)jarg2; 
  (arg1)->setPacketPriorityByLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QosStyle_setPacketPrioritybyTOS(void * jarg1, int jarg2) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPacketPrioritybyTOS(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QosStyle_setPacketPriority(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->setPacketPriority((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QosStyle_setThreadPriority(void * jarg1, int jarg2) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setThreadPriority(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QosStyle_setThreadPolicy(void * jarg1, int jarg2) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setThreadPolicy(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_QosStyle_getPacketPriorityAsTOS(void * jarg1) {
  int jresult ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int result;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  result = (int)((yarp::os::QosStyle const *)arg1)->getPacketPriorityAsTOS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QosStyle_getPacketPriorityAsDSCP(void * jarg1) {
  int jresult ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  result = (yarp::os::QosStyle::PacketPriorityDSCP)((yarp::os::QosStyle const *)arg1)->getPacketPriorityAsDSCP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QosStyle_getPacketPriorityAsLevel(void * jarg1) {
  int jresult ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  result = (yarp::os::QosStyle::PacketPriorityLevel)((yarp::os::QosStyle const *)arg1)->getPacketPriorityAsLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QosStyle_getThreadPriority(void * jarg1) {
  int jresult ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int result;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  result = (int)((yarp::os::QosStyle const *)arg1)->getThreadPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QosStyle_getThreadPolicy(void * jarg1) {
  int jresult ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int result;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  result = (int)((yarp::os::QosStyle const *)arg1)->getThreadPolicy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QosStyle_getDSCPByVocab(int jarg1) {
  int jresult ;
  int arg1 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  arg1 = (int)jarg1; 
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::getDSCPByVocab(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QosStyle_getLevelByVocab(int jarg1) {
  int jresult ;
  int arg1 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  arg1 = (int)jarg1; 
  result = (yarp::os::QosStyle::PacketPriorityLevel)yarp::os::QosStyle::getLevelByVocab(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QosStyle(void * jarg1) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  
  arg1 = (yarp::os::QosStyle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderProperty_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderProperty_setStrict__SWIG_1(void * jarg1) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderProperty_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderProperty_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  result = (yarp::os::Property *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderProperty_interrupt(void * jarg1) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderProperty_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  result = (yarp::os::Property *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TypedReaderProperty_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderProperty_useCallback(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Property > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::os::Property > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::os::Property > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderProperty_disableCallback(void * jarg1) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TypedReaderProperty_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  int result;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderProperty(void * jarg1) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TypedReaderProperty_getName(void * jarg1) {
  char * jresult ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  result = ((yarp::os::TypedReader< Property > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderProperty_setReplier(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderProperty_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderProperty_release(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderProperty_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::TypedReader< Property > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PropertyCallback(void * jarg1) {
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< Property > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyCallback_onRead__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< Property > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Property & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyCallback_onReadSwigExplicitPropertyCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< Property > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Property & type is null", 0);
    return ;
  } 
  (arg1)->yarp::os::TypedReaderCallback< Property >::onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyCallback_onRead__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Property > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< Property > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Property & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::os::Property > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::os::Property > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Property > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyCallback_onReadSwigExplicitPropertyCallback__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Property > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< Property > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Property & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::os::Property > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::os::Property > const & type is null", 0);
    return ;
  } 
  (arg1)->yarp::os::TypedReaderCallback< Property >::onRead(*arg2,(yarp::os::TypedReader< yarp::os::Property > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PropertyCallback() {
  void * jresult ;
  yarp::os::TypedReaderCallback< Property > *result = 0 ;
  
  result = (yarp::os::TypedReaderCallback< Property > *)new SwigDirector_PropertyCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PropertyCallback_director_connect(void *objarg, SwigDirector_PropertyCallback::SWIG_Callback0_t callback0, SwigDirector_PropertyCallback::SWIG_Callback1_t callback1) {
  yarp::os::TypedReaderCallback< Property > *obj = (yarp::os::TypedReaderCallback< Property > *)objarg;
  SwigDirector_PropertyCallback *director = dynamic_cast<SwigDirector_PropertyCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Property > *arg3 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Property & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::os::Property > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::os::Property > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Property > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortProperty__SWIG_0() {
  void * jresult ;
  yarp::os::BufferedPort< Property > *result = 0 ;
  
  result = (yarp::os::BufferedPort< Property > *)new yarp::os::BufferedPort< Property >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortProperty__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< Property > *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (yarp::os::BufferedPort< Property > *)new yarp::os::BufferedPort< Property >(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferedPortProperty(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_close(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_interrupt(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_resume(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortProperty_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortProperty_where(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = ((yarp::os::BufferedPort< Property > const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BufferedPortProperty_getName(void * jarg1) {
  char * jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = ((yarp::os::BufferedPort< Property > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortProperty_prepare(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (yarp::os::Property *) &(arg1)->prepare();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_unprepare(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_write__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_write__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  (arg1)->write();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_writeStrict(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_waitForWrite(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_setStrict__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortProperty_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortProperty_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (yarp::os::Property *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortProperty_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (yarp::os::Property *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_setReplier(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_setReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Property & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_useCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Property > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::os::Property > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::os::Property > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_useCallback__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_disableCallback(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortProperty_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortProperty_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_getReport(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_setReporter(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortProperty_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_release(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortProperty_getType(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  Type result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_promiseType(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortProperty_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_setCallbackLock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortProperty_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortProperty_unlockCallback(void * jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Property > *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderBottle_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderBottle_setStrict__SWIG_1(void * jarg1) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderBottle_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  bool arg2 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Bottle *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderBottle_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  result = (yarp::os::Bottle *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderBottle_interrupt(void * jarg1) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderBottle_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  result = (yarp::os::Bottle *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TypedReaderBottle_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderBottle_useCallback(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Bottle > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::os::Bottle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::os::Bottle > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderBottle_disableCallback(void * jarg1) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TypedReaderBottle_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  int result;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderBottle(void * jarg1) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TypedReaderBottle_getName(void * jarg1) {
  char * jresult ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  result = ((yarp::os::TypedReader< Bottle > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderBottle_setReplier(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderBottle_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderBottle_release(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderBottle_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::TypedReader< Bottle > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BottleCallback(void * jarg1) {
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< Bottle > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BottleCallback_onRead__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< Bottle > *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BottleCallback_onReadSwigExplicitBottleCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< Bottle > *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return ;
  } 
  (arg1)->yarp::os::TypedReaderCallback< Bottle >::onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BottleCallback_onRead__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< Bottle > *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::os::Bottle > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::os::Bottle > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BottleCallback_onReadSwigExplicitBottleCallback__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< Bottle > *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::os::Bottle > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::os::Bottle > const & type is null", 0);
    return ;
  } 
  (arg1)->yarp::os::TypedReaderCallback< Bottle >::onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BottleCallback() {
  void * jresult ;
  yarp::os::TypedReaderCallback< Bottle > *result = 0 ;
  
  result = (yarp::os::TypedReaderCallback< Bottle > *)new SwigDirector_BottleCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BottleCallback_director_connect(void *objarg, SwigDirector_BottleCallback::SWIG_Callback0_t callback0, SwigDirector_BottleCallback::SWIG_Callback1_t callback1) {
  yarp::os::TypedReaderCallback< Bottle > *obj = (yarp::os::TypedReaderCallback< Bottle > *)objarg;
  SwigDirector_BottleCallback *director = dynamic_cast<SwigDirector_BottleCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::os::Bottle > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::os::Bottle > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortBottle__SWIG_0() {
  void * jresult ;
  yarp::os::BufferedPort< Bottle > *result = 0 ;
  
  result = (yarp::os::BufferedPort< Bottle > *)new yarp::os::BufferedPort< Bottle >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortBottle__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< Bottle > *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (yarp::os::BufferedPort< Bottle > *)new yarp::os::BufferedPort< Bottle >(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferedPortBottle(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_close(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_interrupt(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_resume(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortBottle_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortBottle_where(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = ((yarp::os::BufferedPort< Bottle > const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BufferedPortBottle_getName(void * jarg1) {
  char * jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = ((yarp::os::BufferedPort< Bottle > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortBottle_prepare(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (yarp::os::Bottle *) &(arg1)->prepare();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_unprepare(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_write__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_write__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  (arg1)->write();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_writeStrict(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_waitForWrite(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_setStrict__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortBottle_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Bottle *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortBottle_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (yarp::os::Bottle *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortBottle_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (yarp::os::Bottle *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_setReplier(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_setReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_useCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Bottle > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::os::Bottle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::os::Bottle > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_useCallback__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_disableCallback(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortBottle_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortBottle_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_getReport(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_setReporter(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortBottle_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_release(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortBottle_getType(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  Type result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_promiseType(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortBottle_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_setCallbackLock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortBottle_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortBottle_unlockCallback(void * jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< Bottle > *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_PAD_BYTES(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)yarp::sig::PAD_BYTES(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Image__SWIG_0() {
  void * jresult ;
  yarp::sig::Image *result = 0 ;
  
  result = (yarp::sig::Image *)new yarp::sig::Image();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Image__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::sig::Image *arg1 = 0 ;
  yarp::sig::Image *result = 0 ;
  
  arg1 = (yarp::sig::Image *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Image const & type is null", 0);
    return 0;
  } 
  result = (yarp::sig::Image *)new yarp::sig::Image((yarp::sig::Image const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Image(void * jarg1) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Image_copy__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::sig::Image *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = (yarp::sig::Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Image const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->copy((yarp::sig::Image const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Image_copy__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::sig::Image *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = (yarp::sig::Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Image const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->copy((yarp::sig::Image const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image_width(void * jarg1) {
  int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->width();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image_height(void * jarg1) {
  int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->height();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image_getPixelSize(void * jarg1) {
  int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getPixelSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image_getPixelCode(void * jarg1) {
  int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getPixelCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image_getRowSize(void * jarg1) {
  int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getRowSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image_getQuantum(void * jarg1) {
  int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getQuantum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image_getPadding(void * jarg1) {
  int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getPadding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char * SWIGSTDCALL CSharp_Image_getRow(void * jarg1, int jarg2) {
  unsigned char * jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char *)(arg1)->getRow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char * SWIGSTDCALL CSharp_Image_getPixelAddress(void * jarg1, int jarg2, int jarg3) {
  unsigned char * jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char *result = 0 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (unsigned char *)((yarp::sig::Image const *)arg1)->getPixelAddress(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Image_isPixel(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((yarp::sig::Image const *)arg1)->isPixel(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_zero(void * jarg1) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  (arg1)->zero();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_resize__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_resize__SWIG_1(void * jarg1, void * jarg2) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::sig::Image *arg2 = 0 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = (yarp::sig::Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Image const & type is null", 0);
    return ;
  } 
  (arg1)->resize((yarp::sig::Image const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_setExternal(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setExternal(arg2,arg3,arg4);
}


SWIGEXPORT unsigned char * SWIGSTDCALL CSharp_Image_getRawImage(void * jarg1) {
  unsigned char * jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (unsigned char *)((yarp::sig::Image const *)arg1)->getRawImage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image_getRawImageSize(void * jarg1) {
  int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getRawImageSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image_getIplImage(void * jarg1) {
  void * jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (void *)(arg1)->getIplImage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_wrapIplImage(void * jarg1, void * jarg2) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = jarg2; 
  (arg1)->wrapIplImage(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Image_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Image_write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_setQuantum(void * jarg1, int jarg2) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setQuantum(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Image_topIsLowIndex(void * jarg1) {
  unsigned int jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  bool result;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (bool)((yarp::sig::Image const *)arg1)->topIsLowIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_setTopIsLowIndex(void * jarg1, unsigned int jarg2) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTopIsLowIndex(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image_getRowArray(void * jarg1) {
  void * jresult ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  char **result = 0 ;
  
  arg1 = (yarp::sig::Image *)jarg1; 
  result = (char **)(arg1)->getRowArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FlexImage_setPixelCode(void * jarg1, int jarg2) {
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::sig::FlexImage *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPixelCode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FlexImage_setPixelSize(void * jarg1, int jarg2) {
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::sig::FlexImage *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPixelSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FlexImage_setQuantum(void * jarg1, int jarg2) {
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::sig::FlexImage *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setQuantum(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FlexImage() {
  void * jresult ;
  yarp::sig::FlexImage *result = 0 ;
  
  result = (yarp::sig::FlexImage *)new yarp::sig::FlexImage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FlexImage(void * jarg1) {
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  
  arg1 = (yarp::sig::FlexImage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgb_r_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelRgb *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelRgb_r_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelRgb *)jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgb_g_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelRgb *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelRgb_g_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelRgb *)jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgb_b_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelRgb *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelRgb_b_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelRgb *)jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelRgb__SWIG_0() {
  void * jresult ;
  yarp::sig::PixelRgb *result = 0 ;
  
  result = (yarp::sig::PixelRgb *)new yarp::sig::PixelRgb();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelRgb__SWIG_1(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (yarp::sig::PixelRgb *)new yarp::sig::PixelRgb(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PixelRgb(void * jarg1) {
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  
  arg1 = (yarp::sig::PixelRgb *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgba_r_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelRgba *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelRgba_r_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelRgba *)jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgba_g_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelRgba *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelRgba_g_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelRgba *)jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgba_b_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelRgba *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelRgba_b_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelRgba *)jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgba_a_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelRgba *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelRgba_a_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelRgba *)jarg1; 
  result = (unsigned char) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelRgba__SWIG_0() {
  void * jresult ;
  yarp::sig::PixelRgba *result = 0 ;
  
  result = (yarp::sig::PixelRgba *)new yarp::sig::PixelRgba();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelRgba__SWIG_1(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (yarp::sig::PixelRgba *)new yarp::sig::PixelRgba(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PixelRgba(void * jarg1) {
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  
  arg1 = (yarp::sig::PixelRgba *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelBgra_b_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelBgra *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelBgra_b_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelBgra *)jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelBgra_g_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelBgra *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelBgra_g_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelBgra *)jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelBgra_r_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelBgra *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelBgra_r_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelBgra *)jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelBgra_a_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelBgra *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelBgra_a_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelBgra *)jarg1; 
  result = (unsigned char) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelBgra__SWIG_0() {
  void * jresult ;
  yarp::sig::PixelBgra *result = 0 ;
  
  result = (yarp::sig::PixelBgra *)new yarp::sig::PixelBgra();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelBgra__SWIG_1(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  yarp::sig::PixelBgra *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (yarp::sig::PixelBgra *)new yarp::sig::PixelBgra(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PixelBgra(void * jarg1) {
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  
  arg1 = (yarp::sig::PixelBgra *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelBgr_b_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelBgr *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelBgr_b_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelBgr *)jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelBgr_g_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelBgr *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelBgr_g_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelBgr *)jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelBgr_r_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelBgr *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelBgr_r_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelBgr *)jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelBgr__SWIG_0() {
  void * jresult ;
  yarp::sig::PixelBgr *result = 0 ;
  
  result = (yarp::sig::PixelBgr *)new yarp::sig::PixelBgr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelBgr__SWIG_1(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  yarp::sig::PixelBgr *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (yarp::sig::PixelBgr *)new yarp::sig::PixelBgr(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PixelBgr(void * jarg1) {
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  
  arg1 = (yarp::sig::PixelBgr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelHsv_h_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelHsv *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelHsv_h_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelHsv *)jarg1; 
  result = (unsigned char) ((arg1)->h);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelHsv_s_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelHsv *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelHsv_s_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelHsv *)jarg1; 
  result = (unsigned char) ((arg1)->s);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelHsv_v_set(void * jarg1, unsigned char jarg2) {
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (yarp::sig::PixelHsv *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PixelHsv_v_get(void * jarg1) {
  unsigned char jresult ;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char result;
  
  arg1 = (yarp::sig::PixelHsv *)jarg1; 
  result = (unsigned char) ((arg1)->v);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelHsv() {
  void * jresult ;
  yarp::sig::PixelHsv *result = 0 ;
  
  result = (yarp::sig::PixelHsv *)new yarp::sig::PixelHsv();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PixelHsv(void * jarg1) {
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  
  arg1 = (yarp::sig::PixelHsv *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgbSigned_r_set(void * jarg1, char jarg2) {
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char arg2 ;
  
  arg1 = (yarp::sig::PixelRgbSigned *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_PixelRgbSigned_r_get(void * jarg1) {
  char jresult ;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char result;
  
  arg1 = (yarp::sig::PixelRgbSigned *)jarg1; 
  result = (char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgbSigned_g_set(void * jarg1, char jarg2) {
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char arg2 ;
  
  arg1 = (yarp::sig::PixelRgbSigned *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_PixelRgbSigned_g_get(void * jarg1) {
  char jresult ;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char result;
  
  arg1 = (yarp::sig::PixelRgbSigned *)jarg1; 
  result = (char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgbSigned_b_set(void * jarg1, char jarg2) {
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char arg2 ;
  
  arg1 = (yarp::sig::PixelRgbSigned *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_PixelRgbSigned_b_get(void * jarg1) {
  char jresult ;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char result;
  
  arg1 = (yarp::sig::PixelRgbSigned *)jarg1; 
  result = (char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelRgbSigned() {
  void * jresult ;
  yarp::sig::PixelRgbSigned *result = 0 ;
  
  result = (yarp::sig::PixelRgbSigned *)new yarp::sig::PixelRgbSigned();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PixelRgbSigned(void * jarg1) {
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  
  arg1 = (yarp::sig::PixelRgbSigned *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgbFloat_r_set(void * jarg1, float jarg2) {
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float arg2 ;
  
  arg1 = (yarp::sig::PixelRgbFloat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PixelRgbFloat_r_get(void * jarg1) {
  float jresult ;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float result;
  
  arg1 = (yarp::sig::PixelRgbFloat *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgbFloat_g_set(void * jarg1, float jarg2) {
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float arg2 ;
  
  arg1 = (yarp::sig::PixelRgbFloat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PixelRgbFloat_g_get(void * jarg1) {
  float jresult ;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float result;
  
  arg1 = (yarp::sig::PixelRgbFloat *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgbFloat_b_set(void * jarg1, float jarg2) {
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float arg2 ;
  
  arg1 = (yarp::sig::PixelRgbFloat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PixelRgbFloat_b_get(void * jarg1) {
  float jresult ;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float result;
  
  arg1 = (yarp::sig::PixelRgbFloat *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelRgbFloat__SWIG_0() {
  void * jresult ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  result = (yarp::sig::PixelRgbFloat *)new yarp::sig::PixelRgbFloat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelRgbFloat__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (yarp::sig::PixelRgbFloat *)new yarp::sig::PixelRgbFloat(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PixelRgbFloat(void * jarg1) {
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  
  arg1 = (yarp::sig::PixelRgbFloat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgbInt_r_set(void * jarg1, int jarg2) {
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 arg2 ;
  
  arg1 = (yarp::sig::PixelRgbInt *)jarg1; 
  arg2 = (yarp::os::NetInt32)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PixelRgbInt_r_get(void * jarg1) {
  int jresult ;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 result;
  
  arg1 = (yarp::sig::PixelRgbInt *)jarg1; 
  result = (yarp::os::NetInt32) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgbInt_g_set(void * jarg1, int jarg2) {
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 arg2 ;
  
  arg1 = (yarp::sig::PixelRgbInt *)jarg1; 
  arg2 = (yarp::os::NetInt32)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PixelRgbInt_g_get(void * jarg1) {
  int jresult ;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 result;
  
  arg1 = (yarp::sig::PixelRgbInt *)jarg1; 
  result = (yarp::os::NetInt32) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelRgbInt_b_set(void * jarg1, int jarg2) {
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 arg2 ;
  
  arg1 = (yarp::sig::PixelRgbInt *)jarg1; 
  arg2 = (yarp::os::NetInt32)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PixelRgbInt_b_get(void * jarg1) {
  int jresult ;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 result;
  
  arg1 = (yarp::sig::PixelRgbInt *)jarg1; 
  result = (yarp::os::NetInt32) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelRgbInt__SWIG_0() {
  void * jresult ;
  yarp::sig::PixelRgbInt *result = 0 ;
  
  result = (yarp::sig::PixelRgbInt *)new yarp::sig::PixelRgbInt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelRgbInt__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbInt *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgbInt *)new yarp::sig::PixelRgbInt(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PixelRgbInt(void * jarg1) {
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  
  arg1 = (yarp::sig::PixelRgbInt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelHsvFloat_h_set(void * jarg1, float jarg2) {
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float arg2 ;
  
  arg1 = (yarp::sig::PixelHsvFloat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PixelHsvFloat_h_get(void * jarg1) {
  float jresult ;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float result;
  
  arg1 = (yarp::sig::PixelHsvFloat *)jarg1; 
  result = (float) ((arg1)->h);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelHsvFloat_s_set(void * jarg1, float jarg2) {
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float arg2 ;
  
  arg1 = (yarp::sig::PixelHsvFloat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PixelHsvFloat_s_get(void * jarg1) {
  float jresult ;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float result;
  
  arg1 = (yarp::sig::PixelHsvFloat *)jarg1; 
  result = (float) ((arg1)->s);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixelHsvFloat_v_set(void * jarg1, float jarg2) {
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float arg2 ;
  
  arg1 = (yarp::sig::PixelHsvFloat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PixelHsvFloat_v_get(void * jarg1) {
  float jresult ;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float result;
  
  arg1 = (yarp::sig::PixelHsvFloat *)jarg1; 
  result = (float) ((arg1)->v);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixelHsvFloat() {
  void * jresult ;
  yarp::sig::PixelHsvFloat *result = 0 ;
  
  result = (yarp::sig::PixelHsvFloat *)new yarp::sig::PixelHsvFloat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PixelHsvFloat(void * jarg1) {
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  
  arg1 = (yarp::sig::PixelHsvFloat *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_NULL_get() {
  int jresult ;
  int result;
  
  result = (int)yarp::sig::file::FORMAT_NULL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_ANY_get() {
  int jresult ;
  int result;
  
  result = (int)yarp::sig::file::FORMAT_ANY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_PGM_get() {
  int jresult ;
  int result;
  
  result = (int)yarp::sig::file::FORMAT_PGM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_PPM_get() {
  int jresult ;
  int result;
  
  result = (int)yarp::sig::file::FORMAT_PPM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FORMAT_NUMERIC_get() {
  int jresult ;
  int result;
  
  result = (int)yarp::sig::file::FORMAT_NUMERIC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_read__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_read__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelBgr > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelBgr > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelBgr > & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_read__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_read__SWIG_3(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_read__SWIG_4(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_write__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< yarp::sig::PixelRgb > const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_write__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelBgr > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelBgr > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelBgr > const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< yarp::sig::PixelBgr > const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_write__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< yarp::sig::PixelRgba > const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_write__SWIG_3(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono > const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< unsigned char > const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_write__SWIG_4(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< float > const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_write__SWIG_5(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::sig::Image *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::Image *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Image const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)yarp::sig::file::write((yarp::sig::Image const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sound__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  yarp::sig::Sound *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (yarp::sig::Sound *)new yarp::sig::Sound(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sound__SWIG_1() {
  void * jresult ;
  yarp::sig::Sound *result = 0 ;
  
  result = (yarp::sig::Sound *)new yarp::sig::Sound();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sound__SWIG_2(void * jarg1) {
  void * jresult ;
  yarp::sig::Sound *arg1 = 0 ;
  yarp::sig::Sound *result = 0 ;
  
  arg1 = (yarp::sig::Sound *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Sound const & type is null", 0);
    return 0;
  } 
  result = (yarp::sig::Sound *)new yarp::sig::Sound((yarp::sig::Sound const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sound(void * jarg1) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sound_subSound(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::Sound result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->subSound(arg2,arg3);
  jresult = new yarp::sig::Sound((const yarp::sig::Sound &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_resize__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_resize__SWIG_1(void * jarg1, int jarg2) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_get__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((yarp::sig::Sound const *)arg1)->get(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_get__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((yarp::sig::Sound const *)arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_set__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_set__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_getSafe__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getSafe(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_getSafe__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getSafe(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_setSafe__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setSafe(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_setSafe__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setSafe(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sound_isSample__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((yarp::sig::Sound const *)arg1)->isSample(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sound_isSample__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((yarp::sig::Sound const *)arg1)->isSample(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_clear(void * jarg1) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_getFrequency(void * jarg1) {
  int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  result = (int)((yarp::sig::Sound const *)arg1)->getFrequency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_setFrequency(void * jarg1, int jarg2) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFrequency(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_getBytesPerSample(void * jarg1) {
  int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  result = (int)((yarp::sig::Sound const *)arg1)->getBytesPerSample();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_getSamples(void * jarg1) {
  int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  result = (int)((yarp::sig::Sound const *)arg1)->getSamples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_getChannels(void * jarg1) {
  int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  result = (int)((yarp::sig::Sound const *)arg1)->getChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sound_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sound_write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char * SWIGSTDCALL CSharp_Sound_getRawData(void * jarg1) {
  unsigned char * jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  result = (unsigned char *)((yarp::sig::Sound const *)arg1)->getRawData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_getRawDataSize(void * jarg1) {
  int jresult ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  arg1 = (yarp::sig::Sound *)jarg1; 
  result = (int)((yarp::sig::Sound const *)arg1)->getRawDataSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorBase_getElementSize(void * jarg1) {
  int jresult ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  int result;
  
  arg1 = (yarp::sig::VectorBase *)jarg1; 
  result = (int)((yarp::sig::VectorBase const *)arg1)->getElementSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorBase_getBottleTag(void * jarg1) {
  int jresult ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  int result;
  
  arg1 = (yarp::sig::VectorBase *)jarg1; 
  result = (int)((yarp::sig::VectorBase const *)arg1)->getBottleTag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorBase_getListSize(void * jarg1) {
  unsigned long jresult ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  size_t result;
  
  arg1 = (yarp::sig::VectorBase *)jarg1; 
  result = ((yarp::sig::VectorBase const *)arg1)->getListSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_VectorBase_getMemoryBlock(void * jarg1) {
  char * jresult ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (yarp::sig::VectorBase *)jarg1; 
  result = (char *)((yarp::sig::VectorBase const *)arg1)->getMemoryBlock();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorBase_resize(void * jarg1, unsigned long jarg2) {
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  size_t arg2 ;
  
  arg1 = (yarp::sig::VectorBase *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorBase_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::VectorBase *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorBase_write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::VectorBase *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorBase(void * jarg1) {
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  
  arg1 = (yarp::sig::VectorBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector__SWIG_0() {
  void * jresult ;
  yarp::sig::Vector *result = 0 ;
  
  result = (yarp::sig::Vector *)new yarp::sig::Vector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector__SWIG_1(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  yarp::sig::Vector *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (yarp::sig::Vector *)new yarp::sig::Vector(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector__SWIG_2(unsigned long jarg1, double jarg2) {
  void * jresult ;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  yarp::sig::Vector *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (yarp::sig::Vector *)new yarp::sig::Vector(arg1,(double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector(void * jarg1) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector__SWIG_3(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  yarp::sig::Vector *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (double *)jarg2; 
  result = (yarp::sig::Vector *)new yarp::sig::Vector(arg1,(double const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector__SWIG_4(void * jarg1) {
  void * jresult ;
  yarp::sig::Vector *arg1 = 0 ;
  yarp::sig::Vector *result = 0 ;
  
  arg1 = (yarp::sig::Vector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (yarp::sig::Vector *)new yarp::sig::Vector((yarp::sig::Vector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector_size__SWIG_0(void * jarg1, unsigned long jarg2) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->size(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector_resize__SWIG_0(void * jarg1, unsigned long jarg2) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector_resize__SWIG_1(void * jarg1, unsigned long jarg2, double jarg3) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->resize(arg2,(double const &)*arg3);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Vector_size__SWIG_1(void * jarg1) {
  unsigned long jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  result = ((yarp::sig::Vector const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Vector_length(void * jarg1) {
  unsigned long jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  result = ((yarp::sig::Vector const *)arg1)->length();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector_zero(void * jarg1) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  (arg1)->zero();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Vector_toString__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  char * jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ((yarp::sig::Vector const *)arg1)->toString(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Vector_toString__SWIG_1(void * jarg1, int jarg2) {
  char * jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((yarp::sig::Vector const *)arg1)->toString(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Vector_toString_c(void * jarg1) {
  char * jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  result = ((yarp::sig::Vector const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector_subVector(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  yarp::sig::Vector result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = ((yarp::sig::Vector const *)arg1)->subVector(arg2,arg3);
  jresult = new yarp::sig::Vector((const yarp::sig::Vector &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector_setSubvector(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setSubvector(arg2,(yarp::sig::Vector const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector_data__SWIG_0(void * jarg1) {
  void * jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  double *result = 0 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  result = (double *)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector_isEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)((yarp::sig::Vector const *)arg1)->operator ==((yarp::sig::Vector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector_push_back(void * jarg1, double jarg2) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector_pop_back(void * jarg1) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector_getGslVector__SWIG_0(void * jarg1) {
  void * jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  result = (void *)(arg1)->getGslVector();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector_access__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (double *) &(arg1)->operator ()(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector_clear(void * jarg1) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector_write(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (yarp::os::ConnectionWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Vector_get(void * jarg1, int jarg2) {
  double jresult ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)yarp_sig_Vector_get(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector_set(void * jarg1, int jarg2, double jarg3) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (yarp::sig::Vector *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  yarp_sig_Vector_set(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IConfig(void * jarg1) {
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  
  arg1 = (yarp::os::IConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConfig_open(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::IConfig *)jarg1; 
  arg2 = (yarp::os::Searchable *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Searchable & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->open(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConfig_close(void * jarg1) {
  unsigned int jresult ;
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  bool result;
  
  arg1 = (yarp::os::IConfig *)jarg1; 
  result = (bool)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConfig_configure(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::IConfig *)jarg1; 
  arg2 = (yarp::os::Searchable *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Searchable & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->configure(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IConfig() {
  void * jresult ;
  yarp::os::IConfig *result = 0 ;
  
  result = (yarp::os::IConfig *)new yarp::os::IConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DeviceDriver(void * jarg1) {
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  
  arg1 = (yarp::dev::DeviceDriver *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceDriver_open(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::DeviceDriver *)jarg1; 
  arg2 = (yarp::os::Searchable *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Searchable & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->open(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceDriver_close(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::DeviceDriver *)jarg1; 
  result = (bool)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DeviceDriver_getImplementation(void * jarg1) {
  void * jresult ;
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  arg1 = (yarp::dev::DeviceDriver *)jarg1; 
  result = (yarp::dev::DeviceDriver *)(arg1)->getImplementation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DeviceDriver() {
  void * jresult ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  result = (yarp::dev::DeviceDriver *)new yarp::dev::DeviceDriver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DeviceResponder() {
  void * jresult ;
  yarp::dev::DeviceResponder *result = 0 ;
  
  result = (yarp::dev::DeviceResponder *)new yarp::dev::DeviceResponder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceResponder_addUsage__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->addUsage((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceResponder_addUsage__SWIG_1(void * jarg1, char * jarg2) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->addUsage((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceResponder_addUsage__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->addUsage((yarp::os::Bottle const &)*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceResponder_addUsage__SWIG_3(void * jarg1, void * jarg2) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return ;
  } 
  (arg1)->addUsage((yarp::os::Bottle const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceResponder_respond(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::Bottle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->respond((yarp::os::Bottle const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DeviceResponder_read(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  arg2 = (yarp::os::ConnectionReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConnectionReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceResponder_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::os::Bottle > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::os::Bottle > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceResponder_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceResponder_makeUsage(void * jarg1) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  (arg1)->makeUsage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeviceResponder_attach(void * jarg1, void * jarg2) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg2 = 0 ;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  arg2 = (yarp::os::TypedReader< yarp::os::Bottle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::os::Bottle > & type is null", 0);
    return ;
  } 
  (arg1)->attach(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DeviceResponder(void * jarg1) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  
  arg1 = (yarp::dev::DeviceResponder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolyDriver__SWIG_0() {
  void * jresult ;
  yarp::dev::PolyDriver *result = 0 ;
  
  result = (yarp::dev::PolyDriver *)new yarp::dev::PolyDriver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolyDriver__SWIG_1(char * jarg1) {
  void * jresult ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::dev::PolyDriver *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (yarp::dev::PolyDriver *)new yarp::dev::PolyDriver((yarp::os::ConstString const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolyDriver__SWIG_2(void * jarg1) {
  void * jresult ;
  yarp::os::Searchable *arg1 = 0 ;
  yarp::dev::PolyDriver *result = 0 ;
  
  arg1 = (yarp::os::Searchable *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Searchable & type is null", 0);
    return 0;
  } 
  result = (yarp::dev::PolyDriver *)new yarp::dev::PolyDriver(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyDriver_open_str(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyDriver_open(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  arg2 = (yarp::os::Searchable *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Searchable & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->open(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyDriver_link(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::PolyDriver *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  arg2 = (yarp::dev::PolyDriver *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::PolyDriver & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->link(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_take(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::DeviceDriver *)(arg1)->take();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyDriver_give(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  arg2 = (yarp::dev::DeviceDriver *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->give(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolyDriver(void * jarg1) {
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyDriver_close(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (bool)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolyDriver_isValid(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (bool)((yarp::dev::PolyDriver const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_getOptions(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::os::Bottle result;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (arg1)->getOptions();
  jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PolyDriver_getComment(void * jarg1, char * jarg2) {
  char * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->getComment((char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_getDefaultValue(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->getDefaultValue((char const *)arg2);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_getValue(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value result;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->getValue((char const *)arg2);
  jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_getImplementation(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::DeviceDriver *)(arg1)->getImplementation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewFrameGrabberImage(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IFrameGrabberImage *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IFrameGrabberImage *)yarp_dev_PolyDriver_viewFrameGrabberImage(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewIPositionControl(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IPositionControl *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IPositionControl *)yarp_dev_PolyDriver_viewIPositionControl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewIVelocityControl(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IVelocityControl *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IVelocityControl *)yarp_dev_PolyDriver_viewIVelocityControl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewIEncoders(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IEncoders *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IEncoders *)yarp_dev_PolyDriver_viewIEncoders(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewIPidControl(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IPidControl *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IPidControl *)yarp_dev_PolyDriver_viewIPidControl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewIAmplifierControl(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IAmplifierControl *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IAmplifierControl *)yarp_dev_PolyDriver_viewIAmplifierControl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewIControlLimits(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IControlLimits *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IControlLimits *)yarp_dev_PolyDriver_viewIControlLimits(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewICartesianControl(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::ICartesianControl *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::ICartesianControl *)yarp_dev_PolyDriver_viewICartesianControl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewIGazeControl(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IGazeControl *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IGazeControl *)yarp_dev_PolyDriver_viewIGazeControl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewIImpedanceControl(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IImpedanceControl *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IImpedanceControl *)yarp_dev_PolyDriver_viewIImpedanceControl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewITorqueControl(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::ITorqueControl *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::ITorqueControl *)yarp_dev_PolyDriver_viewITorqueControl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewIControlMode(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IControlMode *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IControlMode *)yarp_dev_PolyDriver_viewIControlMode(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolyDriver_viewIOpenLoopControl(void * jarg1) {
  void * jresult ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IOpenLoopControl *result = 0 ;
  
  arg1 = (yarp::dev::PolyDriver *)jarg1; 
  result = (yarp::dev::IOpenLoopControl *)yarp_dev_PolyDriver_viewIOpenLoopControl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DriverCreator(void * jarg1) {
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  
  arg1 = (yarp::dev::DriverCreator *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DriverCreator_toString(void * jarg1) {
  char * jresult ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::dev::DriverCreator *)jarg1; 
  result = (arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DriverCreator_create(void * jarg1) {
  void * jresult ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  arg1 = (yarp::dev::DriverCreator *)jarg1; 
  result = (yarp::dev::DeviceDriver *)(arg1)->create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DriverCreator_getName(void * jarg1) {
  char * jresult ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::dev::DriverCreator *)jarg1; 
  result = (arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DriverCreator_getWrapper(void * jarg1) {
  char * jresult ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::dev::DriverCreator *)jarg1; 
  result = (arg1)->getWrapper();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DriverCreator_getCode(void * jarg1) {
  char * jresult ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::dev::DriverCreator *)jarg1; 
  result = (arg1)->getCode();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DriverCreator_owner(void * jarg1) {
  void * jresult ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::dev::PolyDriver *result = 0 ;
  
  arg1 = (yarp::dev::DriverCreator *)jarg1; 
  result = (yarp::dev::PolyDriver *)(arg1)->owner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StubDriverCreator(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  yarp::dev::StubDriverCreator *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (yarp::dev::StubDriverCreator *)new yarp::dev::StubDriverCreator((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StubDriverCreator_toString(void * jarg1) {
  char * jresult ;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::dev::StubDriverCreator *)jarg1; 
  result = (arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StubDriverCreator_getName(void * jarg1) {
  char * jresult ;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::dev::StubDriverCreator *)jarg1; 
  result = (arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StubDriverCreator_getWrapper(void * jarg1) {
  char * jresult ;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::dev::StubDriverCreator *)jarg1; 
  result = (arg1)->getWrapper();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StubDriverCreator_getCode(void * jarg1) {
  char * jresult ;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::dev::StubDriverCreator *)jarg1; 
  result = (arg1)->getCode();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StubDriverCreator_create(void * jarg1) {
  void * jresult ;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  arg1 = (yarp::dev::StubDriverCreator *)jarg1; 
  result = (yarp::dev::DeviceDriver *)(arg1)->create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StubDriverCreator(void * jarg1) {
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  
  arg1 = (yarp::dev::StubDriverCreator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Drivers_factory() {
  void * jresult ;
  yarp::dev::Drivers *result = 0 ;
  
  result = (yarp::dev::Drivers *) &yarp::dev::Drivers::factory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Drivers_open__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  arg1 = (yarp::dev::Drivers *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (yarp::dev::DeviceDriver *)(arg1)->open((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Drivers_open__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  arg1 = (yarp::dev::Drivers *)jarg1; 
  arg2 = (yarp::os::Searchable *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Searchable & type is null", 0);
    return 0;
  } 
  result = (yarp::dev::DeviceDriver *)(arg1)->open(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Drivers_toString(void * jarg1) {
  char * jresult ;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::dev::Drivers *)jarg1; 
  result = (arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Drivers(void * jarg1) {
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  
  arg1 = (yarp::dev::Drivers *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Drivers_add(void * jarg1, void * jarg2) {
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  yarp::dev::DriverCreator *arg2 = (yarp::dev::DriverCreator *) 0 ;
  
  arg1 = (yarp::dev::Drivers *)jarg1; 
  arg2 = (yarp::dev::DriverCreator *)jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Drivers_find(void * jarg1, char * jarg2) {
  void * jresult ;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::dev::DriverCreator *result = 0 ;
  
  arg1 = (yarp::dev::Drivers *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (yarp::dev::DriverCreator *)(arg1)->find((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Drivers_remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::Drivers *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->remove((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Drivers_yarpdev(int jarg1, void * jarg2) {
  int jresult ;
  int arg1 ;
  char **arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char **)jarg2; 
  result = (int)yarp::dev::Drivers::yarpdev(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFrameGrabber(void * jarg1) {
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  
  arg1 = (yarp::dev::IFrameGrabber *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabber_getRawBuffer(void * jarg1, unsigned char * jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabber *)jarg1; 
  arg2 = jarg2; 
  result = (bool)(arg1)->getRawBuffer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFrameGrabber_getRawBufferSize(void * jarg1) {
  int jresult ;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IFrameGrabber *)jarg1; 
  result = (int)(arg1)->getRawBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFrameGrabber_height(void * jarg1) {
  int jresult ;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IFrameGrabber *)jarg1; 
  result = (int)((yarp::dev::IFrameGrabber const *)arg1)->height();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFrameGrabber_width(void * jarg1) {
  int jresult ;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IFrameGrabber *)jarg1; 
  result = (int)((yarp::dev::IFrameGrabber const *)arg1)->width();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFrameGrabberRgb(void * jarg1) {
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  
  arg1 = (yarp::dev::IFrameGrabberRgb *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberRgb_getRgbBuffer(void * jarg1, unsigned char * jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberRgb *)jarg1; 
  arg2 = jarg2; 
  result = (bool)(arg1)->getRgbBuffer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFrameGrabberRgb_height(void * jarg1) {
  int jresult ;
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IFrameGrabberRgb *)jarg1; 
  result = (int)((yarp::dev::IFrameGrabberRgb const *)arg1)->height();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFrameGrabberRgb_width(void * jarg1) {
  int jresult ;
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IFrameGrabberRgb *)jarg1; 
  result = (int)((yarp::dev::IFrameGrabberRgb const *)arg1)->width();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFrameGrabberImage(void * jarg1) {
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  
  arg1 = (yarp::dev::IFrameGrabberImage *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberImage_getImage(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberImage *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getImage(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFrameGrabberImage_height(void * jarg1) {
  int jresult ;
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IFrameGrabberImage *)jarg1; 
  result = (int)((yarp::dev::IFrameGrabberImage const *)arg1)->height();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFrameGrabberImage_width(void * jarg1) {
  int jresult ;
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IFrameGrabberImage *)jarg1; 
  result = (int)((yarp::dev::IFrameGrabberImage const *)arg1)->width();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFrameGrabberImageRaw(void * jarg1) {
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  
  arg1 = (yarp::dev::IFrameGrabberImageRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberImageRaw_getImage(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberImageRaw *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getImage(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFrameGrabberImageRaw_height(void * jarg1) {
  int jresult ;
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IFrameGrabberImageRaw *)jarg1; 
  result = (int)((yarp::dev::IFrameGrabberImageRaw const *)arg1)->height();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IFrameGrabberImageRaw_width(void * jarg1) {
  int jresult ;
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IFrameGrabberImageRaw *)jarg1; 
  result = (int)((yarp::dev::IFrameGrabberImageRaw const *)arg1)->width();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFrameWriterImage(void * jarg1) {
  yarp::dev::IFrameWriterImage *arg1 = (yarp::dev::IFrameWriterImage *) 0 ;
  
  arg1 = (yarp::dev::IFrameWriterImage *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameWriterImage_putImage(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameWriterImage *arg1 = (yarp::dev::IFrameWriterImage *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameWriterImage *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->putImage(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFrameGrabberControls(void * jarg1) {
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_setBrightness(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setBrightness(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_setExposure(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setExposure(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_setSharpness(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setSharpness(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_setWhiteBalance(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setWhiteBalance(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_setHue(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setHue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_setSaturation(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setSaturation(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_setGamma(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setGamma(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_setShutter(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setShutter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_setGain(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setGain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_setIris(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setIris(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IFrameGrabberControls_getBrightness(void * jarg1) {
  double jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  result = (double)(arg1)->getBrightness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IFrameGrabberControls_getExposure(void * jarg1) {
  double jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  result = (double)(arg1)->getExposure();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IFrameGrabberControls_getSharpness(void * jarg1) {
  double jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  result = (double)(arg1)->getSharpness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControls_getWhiteBalance(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getWhiteBalance(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IFrameGrabberControls_getHue(void * jarg1) {
  double jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  result = (double)(arg1)->getHue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IFrameGrabberControls_getSaturation(void * jarg1) {
  double jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  result = (double)(arg1)->getSaturation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IFrameGrabberControls_getGamma(void * jarg1) {
  double jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  result = (double)(arg1)->getGamma();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IFrameGrabberControls_getShutter(void * jarg1) {
  double jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  result = (double)(arg1)->getShutter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IFrameGrabberControls_getGain(void * jarg1) {
  double jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  result = (double)(arg1)->getGain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IFrameGrabberControls_getIris(void * jarg1) {
  double jresult ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IFrameGrabberControls *)jarg1; 
  result = (double)(arg1)->getIris();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_hasFeatureDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasFeatureDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setFeatureDC1394(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setFeatureDC1394(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getFeatureDC1394(void * jarg1, int jarg2) {
  double jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getFeatureDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_hasOnOffDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasOnOffDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setActiveDC1394(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setActiveDC1394(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getActiveDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getActiveDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_hasAutoDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasAutoDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_hasManualDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasManualDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_hasOnePushDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasOnePushDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setModeDC1394(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setModeDC1394(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getModeDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getModeDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setOnePushDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setOnePushDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getVideoModeMaskDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (unsigned int)(arg1)->getVideoModeMaskDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getVideoModeDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (unsigned int)(arg1)->getVideoModeDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setVideoModeDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setVideoModeDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getFPSMaskDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (unsigned int)(arg1)->getFPSMaskDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getFPSDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (unsigned int)(arg1)->getFPSDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setFPSDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setFPSDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getISOSpeedDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (unsigned int)(arg1)->getISOSpeedDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setISOSpeedDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setISOSpeedDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getColorCodingMaskDC1394(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->getColorCodingMaskDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getColorCodingDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (unsigned int)(arg1)->getColorCodingDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setColorCodingDC1394(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setColorCodingDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setWhiteBalanceDC1394(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setWhiteBalanceDC1394(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getWhiteBalanceDC1394(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getWhiteBalanceDC1394(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (unsigned int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned int & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned int & type is null", 0);
    return 0;
  } 
  arg4 = (unsigned int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned int & type is null", 0);
    return 0;
  } 
  arg5 = (unsigned int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned int & type is null", 0);
    return 0;
  } 
  arg6 = (unsigned int *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned int & type is null", 0);
    return 0;
  } 
  arg7 = (unsigned int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned int & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getFormat7MaxWindowDC1394(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getFormat7WindowDC1394(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (unsigned int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned int & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned int & type is null", 0);
    return 0;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getFormat7WindowDC1394(*arg2,*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setFormat7WindowDC1394(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->setFormat7WindowDC1394(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setOperationModeDC1394(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setOperationModeDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getOperationModeDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (bool)(arg1)->getOperationModeDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setTransmissionDC1394(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setTransmissionDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getTransmissionDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (bool)(arg1)->getTransmissionDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setBroadcastDC1394(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setBroadcastDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setDefaultsDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (bool)(arg1)->setDefaultsDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setResetDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (bool)(arg1)->setResetDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setPowerDC1394(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setPowerDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setCaptureDC1394(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setCaptureDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_getBytesPerPacketDC1394(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  result = (unsigned int)(arg1)->getBytesPerPacketDC1394();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_setBytesPerPacketDC1394(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->setBytesPerPacketDC1394(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFrameGrabberControlsDC1394(void * jarg1) {
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  
  arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAudioVisualGrabber(void * jarg1) {
  yarp::dev::IAudioVisualGrabber *arg1 = (yarp::dev::IAudioVisualGrabber *) 0 ;
  
  arg1 = (yarp::dev::IAudioVisualGrabber *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAudioVisualGrabber_getAudioVisual(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAudioVisualGrabber *arg1 = (yarp::dev::IAudioVisualGrabber *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::sig::Sound *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAudioVisualGrabber *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Sound *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Sound & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getAudioVisual(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFrameWriterAudioVisual(void * jarg1) {
  yarp::dev::IFrameWriterAudioVisual *arg1 = (yarp::dev::IFrameWriterAudioVisual *) 0 ;
  
  arg1 = (yarp::dev::IFrameWriterAudioVisual *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IFrameWriterAudioVisual_putAudioVisual(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IFrameWriterAudioVisual *arg1 = (yarp::dev::IFrameWriterAudioVisual *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::sig::Sound *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IFrameWriterAudioVisual *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Sound *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Sound & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->putAudioVisual(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAudioVisualStream(void * jarg1) {
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  
  arg1 = (yarp::dev::IAudioVisualStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAudioVisualStream_hasAudio(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAudioVisualStream *)jarg1; 
  result = (bool)(arg1)->hasAudio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAudioVisualStream_hasVideo(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAudioVisualStream *)jarg1; 
  result = (bool)(arg1)->hasVideo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAudioVisualStream_hasRawVideo(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAudioVisualStream *)jarg1; 
  result = (bool)(arg1)->hasRawVideo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalibrationParameters_type_set(void * jarg1, unsigned int jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CalibrationParameters_type_get(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  unsigned int result;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  result = (unsigned int) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalibrationParameters_param1_set(void * jarg1, double jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->param1 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CalibrationParameters_param1_get(void * jarg1) {
  double jresult ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  result = (double) ((arg1)->param1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalibrationParameters_param2_set(void * jarg1, double jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->param2 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CalibrationParameters_param2_get(void * jarg1) {
  double jresult ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  result = (double) ((arg1)->param2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalibrationParameters_param3_set(void * jarg1, double jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->param3 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CalibrationParameters_param3_get(void * jarg1) {
  double jresult ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  result = (double) ((arg1)->param3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalibrationParameters_param4_set(void * jarg1, double jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->param4 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CalibrationParameters_param4_get(void * jarg1) {
  double jresult ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  result = (double) ((arg1)->param4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalibrationParameters_param5_set(void * jarg1, double jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->param5 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CalibrationParameters_param5_get(void * jarg1) {
  double jresult ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  result = (double) ((arg1)->param5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalibrationParameters_paramZero_set(void * jarg1, double jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->paramZero = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CalibrationParameters_paramZero_get(void * jarg1) {
  double jresult ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  result = (double) ((arg1)->paramZero);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CalibrationParameters() {
  void * jresult ;
  yarp::dev::CalibrationParameters *result = 0 ;
  
  result = (yarp::dev::CalibrationParameters *)new yarp::dev::CalibrationParameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CalibrationParameters(void * jarg1) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  
  arg1 = (yarp::dev::CalibrationParameters *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPidControlRaw(void * jarg1) {
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_setPidRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  Pid *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Pid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pid const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setPidRaw(arg2,(Pid const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_setPidsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (Pid *)jarg2; 
  result = (bool)(arg1)->setPidsRaw((Pid const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_setReferenceRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setReferenceRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_setReferencesRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setReferencesRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_setErrorLimitRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setErrorLimitRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_setErrorLimitsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setErrorLimitsRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_getErrorRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getErrorRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_getErrorsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getErrorsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_getOutputRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getOutputRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_getOutputsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getOutputsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_getPidRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  Pid *arg3 = (Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Pid *)jarg3; 
  result = (bool)(arg1)->getPidRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_getPidsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (Pid *)jarg2; 
  result = (bool)(arg1)->getPidsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_getReferenceRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getReferenceRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_getReferencesRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getReferencesRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_getErrorLimitRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getErrorLimitRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_getErrorLimitsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getErrorLimitsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_resetPidRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetPidRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_disablePidRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disablePidRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_enablePidRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enablePidRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControlRaw_setOffsetRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setOffsetRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPidControl(void * jarg1) {
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_setPids__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (Pid *)jarg2; 
  result = (bool)(arg1)->setPids((Pid const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_setReference(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setReference(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_setReferences__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setReferences((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_setErrorLimit(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setErrorLimit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_setErrorLimits__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setErrorLimits((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getError__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getError(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getErrors__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getErrors(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getOutput__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getOutput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getOutputs__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getOutputs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getPids__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (Pid *)jarg2; 
  result = (bool)(arg1)->getPids(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getReference__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getReference(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getReferences__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getReferences(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getErrorLimit__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getErrorLimit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getErrorLimits__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getErrorLimits(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_resetPid(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetPid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_disablePid(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disablePid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_enablePid(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enablePid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_setOffset(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setOffset(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_setReferences__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_setReferences__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getReference__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getReference__SWIG_1(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getReferences__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getReferences__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_setErrorLimits__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_setErrorLimits__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getErrorLimit__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getErrorLimit__SWIG_1(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getErrorLimits__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getErrorLimits__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getError__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getError__SWIG_1(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getErrors__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getErrors__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getOutput__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getOutput__SWIG_1(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getOutputs__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getOutputs__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_setPid(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  yarp::dev::Pid arg3 ;
  yarp::dev::Pid *argp3 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (yarp::dev::Pid *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null yarp::dev::Pid", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)yarp_dev_IPidControl_setPid(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_setPids__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< yarp::dev::Pid > arg2 ;
  std::vector< yarp::dev::Pid > *argp2 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  argp2 = (std::vector< yarp::dev::Pid > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< yarp::dev::Pid >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)yarp_dev_IPidControl_setPids__SWIG_1(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getPid(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< yarp::dev::Pid > arg3 ;
  std::vector< yarp::dev::Pid > *argp3 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (std::vector< yarp::dev::Pid > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< yarp::dev::Pid >", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)yarp_dev_IPidControl_getPid(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPidControl_getPids__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< yarp::dev::Pid > arg2 ;
  std::vector< yarp::dev::Pid > *argp2 ;
  bool result;
  
  arg1 = (yarp::dev::IPidControl *)jarg1; 
  argp2 = (std::vector< yarp::dev::Pid > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< yarp::dev::Pid >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)yarp_dev_IPidControl_getPids__SWIG_1(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAmplifierControl(void * jarg1) {
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_enableAmp(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enableAmp(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_disableAmp(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disableAmp(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getAmpStatus__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAmpStatus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getAmpStatus__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)(arg1)->getAmpStatus(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getCurrents__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getCurrents(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getCurrent__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getCurrent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getMaxCurrent(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getMaxCurrent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_setMaxCurrent(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setMaxCurrent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getNominalCurrent(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getNominalCurrent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getPeakCurrent(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getPeakCurrent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_setPeakCurrent(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setPeakCurrent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getPWM(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getPWM(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getPWMLimit(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getPWMLimit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_setPWMLimit(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setPWMLimit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getPowerSupplyVoltage(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getPowerSupplyVoltage(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getCurrents__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IAmplifierControl_getCurrents__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControl_getCurrent__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IAmplifierControl_getCurrent__SWIG_1(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAmplifierControlRaw(void * jarg1) {
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_enableAmpRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enableAmpRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_disableAmpRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disableAmpRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_getAmpStatusRaw__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAmpStatusRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_getAmpStatusRaw__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)(arg1)->getAmpStatusRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_getCurrentsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getCurrentsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_getCurrentRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getCurrentRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_setMaxCurrentRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setMaxCurrentRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_getMaxCurrentRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getMaxCurrentRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_getNominalCurrentRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getNominalCurrentRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_getPeakCurrentRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getPeakCurrentRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_setPeakCurrentRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setPeakCurrentRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_getPWMRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getPWMRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_getPWMLimitRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getPWMLimitRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_setPWMLimitRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setPWMLimitRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAmplifierControlRaw_getPowerSupplyVoltageRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAmplifierControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getPowerSupplyVoltageRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IControlCalibrationRaw(void * jarg1) {
  yarp::dev::IControlCalibrationRaw *arg1 = (yarp::dev::IControlCalibrationRaw *) 0 ;
  
  arg1 = (yarp::dev::IControlCalibrationRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibrationRaw_calibrateRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IControlCalibrationRaw *arg1 = (yarp::dev::IControlCalibrationRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibrationRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->calibrateRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibrationRaw_doneRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlCalibrationRaw *arg1 = (yarp::dev::IControlCalibrationRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibrationRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->doneRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IControlCalibration2Raw(void * jarg1) {
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  
  arg1 = (yarp::dev::IControlCalibration2Raw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2Raw_calibrate2Raw(void * jarg1, int jarg2, unsigned int jarg3, double jarg4, double jarg5, double jarg6) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2Raw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (bool)(arg1)->calibrate2Raw(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2Raw_setCalibrationParametersRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  int arg2 ;
  yarp::dev::CalibrationParameters *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2Raw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::CalibrationParameters *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::CalibrationParameters const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setCalibrationParametersRaw(arg2,(yarp::dev::CalibrationParameters const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2Raw_doneRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2Raw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->doneRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IControlCalibration(void * jarg1) {
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  
  arg1 = (yarp::dev::IControlCalibration *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration_calibrate__SWIG_0(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->calibrate(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration_done(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->done(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration_setCalibrator(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  ICalibrator *arg2 = (ICalibrator *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration *)jarg1; 
  arg2 = (ICalibrator *)jarg2; 
  result = (bool)(arg1)->setCalibrator(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration_calibrate__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration *)jarg1; 
  result = (bool)(arg1)->calibrate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration_park__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->park(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration_park__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration *)jarg1; 
  result = (bool)(arg1)->park();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IControlCalibration2(void * jarg1) {
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  
  arg1 = (yarp::dev::IControlCalibration2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2_calibrate2(void * jarg1, int jarg2, unsigned int jarg3, double jarg4, double jarg5, double jarg6) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (bool)(arg1)->calibrate2(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2_setCalibrationParameters(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  int arg2 ;
  yarp::dev::CalibrationParameters *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::CalibrationParameters *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::CalibrationParameters const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setCalibrationParameters(arg2,(yarp::dev::CalibrationParameters const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2_done(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->done(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2_setCalibrator(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  ICalibrator *arg2 = (ICalibrator *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2 *)jarg1; 
  arg2 = (ICalibrator *)jarg2; 
  result = (bool)(arg1)->setCalibrator(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2_calibrate(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2 *)jarg1; 
  result = (bool)(arg1)->calibrate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2_park__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->park(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2_park__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2 *)jarg1; 
  result = (bool)(arg1)->park();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2_abortCalibration(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2 *)jarg1; 
  result = (bool)(arg1)->abortCalibration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlCalibration2_abortPark(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlCalibration2 *)jarg1; 
  result = (bool)(arg1)->abortPark();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IControlDebug(void * jarg1) {
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  
  arg1 = (yarp::dev::IControlDebug *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlDebug_setPrintFunction(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  int (*arg2)(char const *,...) = (int (*)(char const *,...)) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlDebug *)jarg1; 
  arg2 = (int (*)(char const *,...))jarg2; 
  result = (bool)(arg1)->setPrintFunction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlDebug_loadBootMemory(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlDebug *)jarg1; 
  result = (bool)(arg1)->loadBootMemory();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlDebug_saveBootMemory(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlDebug *)jarg1; 
  result = (bool)(arg1)->saveBootMemory();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IControlLimits(void * jarg1) {
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  
  arg1 = (yarp::dev::IControlLimits *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlLimits_setLimits(void * jarg1, int jarg2, double jarg3, double jarg4) {
  unsigned int jresult ;
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  arg1 = (yarp::dev::IControlLimits *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->setLimits(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlLimits_getLimits__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlLimits *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(arg1)->getLimits(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlLimits_getLimits__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlLimits *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  arg4 = (std::vector< double > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IControlLimits_getLimits__SWIG_1(arg1,arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IControlLimitsRaw(void * jarg1) {
  yarp::dev::IControlLimitsRaw *arg1 = (yarp::dev::IControlLimitsRaw *) 0 ;
  
  arg1 = (yarp::dev::IControlLimitsRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlLimitsRaw_setLimitsRaw(void * jarg1, int jarg2, double jarg3, double jarg4) {
  unsigned int jresult ;
  yarp::dev::IControlLimitsRaw *arg1 = (yarp::dev::IControlLimitsRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  arg1 = (yarp::dev::IControlLimitsRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->setLimitsRaw(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlLimitsRaw_getLimitsRaw(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IControlLimitsRaw *arg1 = (yarp::dev::IControlLimitsRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlLimitsRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(arg1)->getLimitsRaw(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAxisInfo(void * jarg1) {
  yarp::dev::IAxisInfo *arg1 = (yarp::dev::IAxisInfo *) 0 ;
  
  arg1 = (yarp::dev::IAxisInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAxisInfo_getAxisName(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAxisInfo *arg1 = (yarp::dev::IAxisInfo *) 0 ;
  int arg2 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAxisInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::os::ConstString *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConstString & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getAxisName(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAxisInfo_getJointType(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAxisInfo *arg1 = (yarp::dev::IAxisInfo *) 0 ;
  int arg2 ;
  yarp::dev::JointTypeEnum *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAxisInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::JointTypeEnum *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::JointTypeEnum & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getJointType(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAxisInfoRaw(void * jarg1) {
  yarp::dev::IAxisInfoRaw *arg1 = (yarp::dev::IAxisInfoRaw *) 0 ;
  
  arg1 = (yarp::dev::IAxisInfoRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAxisInfoRaw_getAxisNameRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAxisInfoRaw *arg1 = (yarp::dev::IAxisInfoRaw *) 0 ;
  int arg2 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAxisInfoRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::os::ConstString *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConstString & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getAxisNameRaw(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAxisInfoRaw_getJointTypeRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IAxisInfoRaw *arg1 = (yarp::dev::IAxisInfoRaw *) 0 ;
  int arg2 ;
  yarp::dev::JointTypeEnum *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IAxisInfoRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::JointTypeEnum *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::JointTypeEnum & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getJointTypeRaw(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_kp_set(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kp = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pid_kp_get(void * jarg1) {
  double jresult ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  result = (double) ((arg1)->kp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_kd_set(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kd = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pid_kd_get(void * jarg1) {
  double jresult ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  result = (double) ((arg1)->kd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_ki_set(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ki = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pid_ki_get(void * jarg1) {
  double jresult ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  result = (double) ((arg1)->ki);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_max_int_set(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max_int = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pid_max_int_get(void * jarg1) {
  double jresult ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  result = (double) ((arg1)->max_int);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_scale_set(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pid_scale_get(void * jarg1) {
  double jresult ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  result = (double) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_max_output_set(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max_output = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pid_max_output_get(void * jarg1) {
  double jresult ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  result = (double) ((arg1)->max_output);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_offset_set(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pid_offset_get(void * jarg1) {
  double jresult ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  result = (double) ((arg1)->offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_stiction_up_val_set(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->stiction_up_val = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pid_stiction_up_val_get(void * jarg1) {
  double jresult ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  result = (double) ((arg1)->stiction_up_val);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_stiction_down_val_set(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->stiction_down_val = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pid_stiction_down_val_get(void * jarg1) {
  double jresult ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  result = (double) ((arg1)->stiction_down_val);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_kff_set(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kff = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Pid_kff_get(void * jarg1) {
  double jresult ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  result = (double) ((arg1)->kff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pid__SWIG_0() {
  void * jresult ;
  yarp::dev::Pid *result = 0 ;
  
  result = (yarp::dev::Pid *)new yarp::dev::Pid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Pid(void * jarg1) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pid__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  yarp::dev::Pid *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (yarp::dev::Pid *)new yarp::dev::Pid(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Pid__SWIG_2(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  yarp::dev::Pid *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  result = (yarp::dev::Pid *)new yarp::dev::Pid(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_setMaxInt(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxInt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_setMaxOut(void * jarg1, double jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxOut(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Pid_setStictionValues(void * jarg1, double jarg2, double jarg3) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (yarp::dev::Pid *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setStictionValues(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CartesianEventParameters_type_set(void * jarg1, char * jarg2) {
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::dev::CartesianEventParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CartesianEventParameters_type_get(void * jarg1) {
  char * jresult ;
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  arg1 = (yarp::dev::CartesianEventParameters *)jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CartesianEventParameters_motionOngoingCheckPoint_set(void * jarg1, double jarg2) {
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::CartesianEventParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CartesianEventParameters_motionOngoingCheckPoint_get(void * jarg1) {
  double jresult ;
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::CartesianEventParameters *)jarg1; 
  result = (double) ((arg1)->motionOngoingCheckPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CartesianEventParameters() {
  void * jresult ;
  yarp::dev::CartesianEventParameters *result = 0 ;
  
  result = (yarp::dev::CartesianEventParameters *)new yarp::dev::CartesianEventParameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CartesianEventParameters(void * jarg1) {
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  
  arg1 = (yarp::dev::CartesianEventParameters *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CartesianEventVariables_type_set(void * jarg1, char * jarg2) {
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::dev::CartesianEventVariables *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CartesianEventVariables_type_get(void * jarg1) {
  char * jresult ;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  arg1 = (yarp::dev::CartesianEventVariables *)jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CartesianEventVariables_time_set(void * jarg1, double jarg2) {
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::CartesianEventVariables *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->time = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CartesianEventVariables_time_get(void * jarg1) {
  double jresult ;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double result;
  
  arg1 = (yarp::dev::CartesianEventVariables *)jarg1; 
  result = (double) ((arg1)->time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CartesianEventVariables_motionOngoingCheckPoint_set(void * jarg1, double jarg2) {
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::CartesianEventVariables *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CartesianEventVariables_motionOngoingCheckPoint_get(void * jarg1) {
  double jresult ;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double result;
  
  arg1 = (yarp::dev::CartesianEventVariables *)jarg1; 
  result = (double) ((arg1)->motionOngoingCheckPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CartesianEventVariables() {
  void * jresult ;
  yarp::dev::CartesianEventVariables *result = 0 ;
  
  result = (yarp::dev::CartesianEventVariables *)new yarp::dev::CartesianEventVariables();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CartesianEventVariables(void * jarg1) {
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  
  arg1 = (yarp::dev::CartesianEventVariables *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CartesianEvent(void * jarg1) {
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  
  arg1 = (yarp::dev::CartesianEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CartesianEvent_cartesianEventParameters_set(void * jarg1, void * jarg2) {
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventParameters *arg2 = (yarp::dev::CartesianEventParameters *) 0 ;
  
  arg1 = (yarp::dev::CartesianEvent *)jarg1; 
  arg2 = (yarp::dev::CartesianEventParameters *)jarg2; 
  if (arg1) (arg1)->cartesianEventParameters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CartesianEvent_cartesianEventParameters_get(void * jarg1) {
  void * jresult ;
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventParameters *result = 0 ;
  
  arg1 = (yarp::dev::CartesianEvent *)jarg1; 
  result = (yarp::dev::CartesianEventParameters *)& ((arg1)->cartesianEventParameters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CartesianEvent_cartesianEventVariables_set(void * jarg1, void * jarg2) {
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventVariables *arg2 = (yarp::dev::CartesianEventVariables *) 0 ;
  
  arg1 = (yarp::dev::CartesianEvent *)jarg1; 
  arg2 = (yarp::dev::CartesianEventVariables *)jarg2; 
  if (arg1) (arg1)->cartesianEventVariables = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CartesianEvent_cartesianEventVariables_get(void * jarg1) {
  void * jresult ;
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventVariables *result = 0 ;
  
  arg1 = (yarp::dev::CartesianEvent *)jarg1; 
  result = (yarp::dev::CartesianEventVariables *)& ((arg1)->cartesianEventVariables);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CartesianEvent_cartesianEventCallback(void * jarg1) {
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  
  arg1 = (yarp::dev::CartesianEvent *)jarg1; 
  (arg1)->cartesianEventCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICartesianControl(void * jarg1) {
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_setTrackingMode(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setTrackingMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getTrackingMode(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->getTrackingMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_setReferenceMode(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setReferenceMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getReferenceMode(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->getReferenceMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_setPosePriority(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->setPosePriority((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getPosePriority(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::os::ConstString *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::ConstString & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getPosePriority(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getPose__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::Stamp *)jarg4; 
  result = (bool)(arg1)->getPose(*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getPose__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getPose(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getPose__SWIG_2(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::os::Stamp *arg5 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg5 = (yarp::os::Stamp *)jarg5; 
  result = (bool)(arg1)->getPose(arg2,*arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getPose__SWIG_3(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getPose(arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_goToPose__SWIG_0(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->goToPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_goToPose__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->goToPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_goToPosition__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->goToPosition((yarp::sig::Vector const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_goToPosition__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->goToPosition((yarp::sig::Vector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_goToPoseSync__SWIG_0(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->goToPoseSync((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_goToPoseSync__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->goToPoseSync((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_goToPositionSync__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->goToPositionSync((yarp::sig::Vector const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_goToPositionSync__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->goToPositionSync((yarp::sig::Vector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getDesired(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getDesired(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_askForPose__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  yarp::sig::Vector *arg6 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg5 = (yarp::sig::Vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg6 = (yarp::sig::Vector *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->askForPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,*arg4,*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_askForPose__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  yarp::sig::Vector *arg6 = 0 ;
  yarp::sig::Vector *arg7 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg5 = (yarp::sig::Vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg6 = (yarp::sig::Vector *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg7 = (yarp::sig::Vector *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->askForPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,(yarp::sig::Vector const &)*arg4,*arg5,*arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_askForPosition__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg5 = (yarp::sig::Vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->askForPosition((yarp::sig::Vector const &)*arg2,*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_askForPosition__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  yarp::sig::Vector *arg6 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg5 = (yarp::sig::Vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg6 = (yarp::sig::Vector *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->askForPosition((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,*arg4,*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getDOF(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getDOF(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_setDOF(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setDOF((yarp::sig::Vector const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getRestPos(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getRestPos(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_setRestPos(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setRestPos((yarp::sig::Vector const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getRestWeights(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getRestWeights(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_setRestWeights(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setRestWeights((yarp::sig::Vector const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getLimits(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(arg1)->getLimits(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_setLimits(void * jarg1, int jarg2, double jarg3, double jarg4) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->setLimits(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getTrajTime(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getTrajTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_setTrajTime(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setTrajTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getInTargetTol(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getInTargetTol(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_setInTargetTol(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setInTargetTol(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getJointsVelocities(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getJointsVelocities(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getTaskVelocities(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getTaskVelocities(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_setTaskVelocities(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setTaskVelocities((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_attachTipFrame(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->attachTipFrame((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getTipFrame(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getTipFrame(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_removeTipFrame(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  result = (bool)(arg1)->removeTipFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_checkMotionDone__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->checkMotionDone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_waitMotionDone__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->waitMotionDone(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_waitMotionDone__SWIG_1(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->waitMotionDone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_waitMotionDone__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  result = (bool)(arg1)->waitMotionDone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_stopControl(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  result = (bool)(arg1)->stopControl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_storeContext(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->storeContext(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_restoreContext(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->restoreContext(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_deleteContext(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->deleteContext(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_getInfo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getInfo(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_registerEvent(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::dev::CartesianEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::dev::CartesianEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::CartesianEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->registerEvent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_unregisterEvent(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::dev::CartesianEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::dev::CartesianEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::CartesianEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->unregisterEvent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_tweakSet(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tweakSet((yarp::os::Bottle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_tweakGet(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tweakGet(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_checkMotionDone__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  arg2 = (std::vector< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_ICartesianControl_checkMotionDone__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_checkMotionDone__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  result = (bool)yarp_dev_ICartesianControl_checkMotionDone__SWIG_2(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICartesianControl_isMotionDone(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICartesianControl *)jarg1; 
  result = (bool)yarp_dev_ICartesianControl_isMotionDone(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GazeEventParameters_type_set(void * jarg1, char * jarg2) {
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::dev::GazeEventParameters *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GazeEventParameters_type_get(void * jarg1) {
  char * jresult ;
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  arg1 = (yarp::dev::GazeEventParameters *)jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GazeEventParameters_motionOngoingCheckPoint_set(void * jarg1, double jarg2) {
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::GazeEventParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GazeEventParameters_motionOngoingCheckPoint_get(void * jarg1) {
  double jresult ;
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::GazeEventParameters *)jarg1; 
  result = (double) ((arg1)->motionOngoingCheckPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GazeEventParameters() {
  void * jresult ;
  yarp::dev::GazeEventParameters *result = 0 ;
  
  result = (yarp::dev::GazeEventParameters *)new yarp::dev::GazeEventParameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GazeEventParameters(void * jarg1) {
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  
  arg1 = (yarp::dev::GazeEventParameters *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GazeEventVariables_type_set(void * jarg1, char * jarg2) {
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  arg1 = (yarp::dev::GazeEventVariables *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GazeEventVariables_type_get(void * jarg1) {
  char * jresult ;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  arg1 = (yarp::dev::GazeEventVariables *)jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GazeEventVariables_time_set(void * jarg1, double jarg2) {
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::GazeEventVariables *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->time = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GazeEventVariables_time_get(void * jarg1) {
  double jresult ;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double result;
  
  arg1 = (yarp::dev::GazeEventVariables *)jarg1; 
  result = (double) ((arg1)->time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GazeEventVariables_motionOngoingCheckPoint_set(void * jarg1, double jarg2) {
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::GazeEventVariables *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GazeEventVariables_motionOngoingCheckPoint_get(void * jarg1) {
  double jresult ;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double result;
  
  arg1 = (yarp::dev::GazeEventVariables *)jarg1; 
  result = (double) ((arg1)->motionOngoingCheckPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GazeEventVariables() {
  void * jresult ;
  yarp::dev::GazeEventVariables *result = 0 ;
  
  result = (yarp::dev::GazeEventVariables *)new yarp::dev::GazeEventVariables();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GazeEventVariables(void * jarg1) {
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  
  arg1 = (yarp::dev::GazeEventVariables *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GazeEvent(void * jarg1) {
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  
  arg1 = (yarp::dev::GazeEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GazeEvent_gazeEventParameters_set(void * jarg1, void * jarg2) {
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventParameters *arg2 = (yarp::dev::GazeEventParameters *) 0 ;
  
  arg1 = (yarp::dev::GazeEvent *)jarg1; 
  arg2 = (yarp::dev::GazeEventParameters *)jarg2; 
  if (arg1) (arg1)->gazeEventParameters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GazeEvent_gazeEventParameters_get(void * jarg1) {
  void * jresult ;
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventParameters *result = 0 ;
  
  arg1 = (yarp::dev::GazeEvent *)jarg1; 
  result = (yarp::dev::GazeEventParameters *)& ((arg1)->gazeEventParameters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GazeEvent_gazeEventVariables_set(void * jarg1, void * jarg2) {
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventVariables *arg2 = (yarp::dev::GazeEventVariables *) 0 ;
  
  arg1 = (yarp::dev::GazeEvent *)jarg1; 
  arg2 = (yarp::dev::GazeEventVariables *)jarg2; 
  if (arg1) (arg1)->gazeEventVariables = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GazeEvent_gazeEventVariables_get(void * jarg1) {
  void * jresult ;
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventVariables *result = 0 ;
  
  arg1 = (yarp::dev::GazeEvent *)jarg1; 
  result = (yarp::dev::GazeEventVariables *)& ((arg1)->gazeEventVariables);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GazeEvent_gazeEventCallback(void * jarg1) {
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  
  arg1 = (yarp::dev::GazeEvent *)jarg1; 
  (arg1)->gazeEventCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IGazeControl(void * jarg1) {
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setTrackingMode(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setTrackingMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getTrackingMode__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->getTrackingMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setStabilizationMode(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setStabilizationMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getStabilizationMode(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->getStabilizationMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getFixationPoint__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::os::Stamp *arg3 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::Stamp *)jarg3; 
  result = (bool)(arg1)->getFixationPoint(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getFixationPoint__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getFixationPoint(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getAngles__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::os::Stamp *arg3 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::os::Stamp *)jarg3; 
  result = (bool)(arg1)->getAngles(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getAngles__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getAngles(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_lookAtFixationPoint(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->lookAtFixationPoint((yarp::sig::Vector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_lookAtAbsAngles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->lookAtAbsAngles((yarp::sig::Vector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_lookAtRelAngles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->lookAtRelAngles((yarp::sig::Vector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_lookAtMonoPixel__SWIG_0(void * jarg1, int jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->lookAtMonoPixel(arg2,(yarp::sig::Vector const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_lookAtMonoPixel__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->lookAtMonoPixel(arg2,(yarp::sig::Vector const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_lookAtMonoPixelWithVergence(void * jarg1, int jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->lookAtMonoPixelWithVergence(arg2,(yarp::sig::Vector const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_lookAtStereoPixels(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->lookAtStereoPixels((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getNeckTrajTime__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getNeckTrajTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getEyesTrajTime__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getEyesTrajTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getVORGain(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getVORGain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getOCRGain(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getOCRGain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getSaccadesMode(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->getSaccadesMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getSaccadesInhibitionPeriod(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getSaccadesInhibitionPeriod(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getSaccadesActivationAngle(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getSaccadesActivationAngle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getLeftEyePose__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::Stamp *)jarg4; 
  result = (bool)(arg1)->getLeftEyePose(*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getLeftEyePose__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getLeftEyePose(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getRightEyePose__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::Stamp *)jarg4; 
  result = (bool)(arg1)->getRightEyePose(*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getRightEyePose__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getRightEyePose(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getHeadPose__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::os::Stamp *)jarg4; 
  result = (bool)(arg1)->getHeadPose(*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getHeadPose__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getHeadPose(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_get2DPixel(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->get2DPixel(arg2,(yarp::sig::Vector const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_get3DPoint(void * jarg1, int jarg2, void * jarg3, double jarg4, void * jarg5) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  yarp::sig::Vector *arg5 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (yarp::sig::Vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->get3DPoint(arg2,(yarp::sig::Vector const &)*arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_get3DPointOnPlane(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg5 = (yarp::sig::Vector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->get3DPointOnPlane(arg2,(yarp::sig::Vector const &)*arg3,(yarp::sig::Vector const &)*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_get3DPointFromAngles(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->get3DPointFromAngles(arg2,(yarp::sig::Vector const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getAnglesFrom3DPoint(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getAnglesFrom3DPoint((yarp::sig::Vector const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_triangulate3DPoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg3 = (yarp::sig::Vector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector const & type is null", 0);
    return 0;
  } 
  arg4 = (yarp::sig::Vector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->triangulate3DPoint((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getJointsDesired(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getJointsDesired(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getJointsVelocities(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::sig::Vector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Vector & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getJointsVelocities(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getStereoOptions(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getStereoOptions(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setNeckTrajTime(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setNeckTrajTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setEyesTrajTime(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setEyesTrajTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setVORGain(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setVORGain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setOCRGain(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setOCRGain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setSaccadesMode(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setSaccadesMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setSaccadesInhibitionPeriod(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setSaccadesInhibitionPeriod(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setSaccadesActivationAngle(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setSaccadesActivationAngle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setStereoOptions(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setStereoOptions((yarp::os::Bottle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_bindNeckPitch(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->bindNeckPitch(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_blockNeckPitch__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->blockNeckPitch(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_blockNeckPitch__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->blockNeckPitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_bindNeckRoll(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->bindNeckRoll(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_blockNeckRoll__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->blockNeckRoll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_blockNeckRoll__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->blockNeckRoll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_bindNeckYaw(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->bindNeckYaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_blockNeckYaw__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->blockNeckYaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_blockNeckYaw__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->blockNeckYaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_blockEyes__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->blockEyes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_blockEyes__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->blockEyes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getNeckPitchRange(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getNeckPitchRange(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getNeckRollRange(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getNeckRollRange(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getNeckYawRange(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getNeckYawRange(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getBlockedVergence(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getBlockedVergence(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_clearNeckPitch(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->clearNeckPitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_clearNeckRoll(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->clearNeckRoll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_clearNeckYaw(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->clearNeckYaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_clearEyes(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->clearEyes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getNeckAngleUserTolerance(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getNeckAngleUserTolerance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_setNeckAngleUserTolerance(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setNeckAngleUserTolerance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_checkMotionDone__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->checkMotionDone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_waitMotionDone__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->waitMotionDone(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_waitMotionDone__SWIG_1(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->waitMotionDone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_waitMotionDone__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->waitMotionDone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_checkSaccadeDone(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->checkSaccadeDone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_waitSaccadeDone__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->waitSaccadeDone(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_waitSaccadeDone__SWIG_1(void * jarg1, double jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->waitSaccadeDone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_waitSaccadeDone__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->waitSaccadeDone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_stopControl(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)(arg1)->stopControl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_storeContext(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->storeContext(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_restoreContext(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->restoreContext(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_deleteContext(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->deleteContext(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getInfo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getInfo(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_registerEvent(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::dev::GazeEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::dev::GazeEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::GazeEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->registerEvent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_unregisterEvent(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::dev::GazeEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::dev::GazeEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::GazeEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->unregisterEvent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_tweakSet(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tweakSet((yarp::os::Bottle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_tweakGet(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  arg2 = (yarp::os::Bottle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Bottle & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tweakGet(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_getTrackingMode__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)yarp_dev_IGazeControl_getTrackingMode__SWIG_1(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGazeControl_getNeckTrajTime__SWIG_1(void * jarg1) {
  double jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (double)yarp_dev_IGazeControl_getNeckTrajTime__SWIG_1(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IGazeControl_getEyesTrajTime__SWIG_1(void * jarg1) {
  double jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (double)yarp_dev_IGazeControl_getEyesTrajTime__SWIG_1(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IGazeControl_checkMotionDone__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IGazeControl *)jarg1; 
  result = (bool)yarp_dev_IGazeControl_checkMotionDone__SWIG_1(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPositionControlRaw(void * jarg1) {
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_getAxes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_setPositionModeRaw(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  result = (bool)(arg1)->setPositionModeRaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_positionMoveRaw__SWIG_0(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->positionMoveRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_positionMoveRaw__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->positionMoveRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_relativeMoveRaw__SWIG_0(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->relativeMoveRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_relativeMoveRaw__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->relativeMoveRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_checkMotionDoneRaw__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (bool)(arg1)->checkMotionDoneRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_checkMotionDoneRaw__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->checkMotionDoneRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_setRefSpeedRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefSpeedRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_setRefSpeedsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setRefSpeedsRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_setRefAccelerationRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefAccelerationRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_setRefAccelerationsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setRefAccelerationsRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_getRefSpeedRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getRefSpeedRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_getRefSpeedsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getRefSpeedsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_getRefAccelerationRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getRefAccelerationRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_getRefAccelerationsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getRefAccelerationsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_stopRaw__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->stopRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControlRaw_stopRaw__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControlRaw *)jarg1; 
  result = (bool)(arg1)->stopRaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPositionControl(void * jarg1) {
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_getAxes__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_setPositionMode(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  result = (bool)(arg1)->setPositionMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_positionMove__SWIG_0(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->positionMove(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_positionMove__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->positionMove((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_relativeMove__SWIG_0(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->relativeMove(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_relativeMove__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->relativeMove((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_checkMotionDone__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (bool)(arg1)->checkMotionDone(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_checkMotionDone__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->checkMotionDone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_setRefSpeed(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefSpeed(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_setRefSpeeds__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setRefSpeeds((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_setRefAcceleration(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefAcceleration(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_setRefAccelerations(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setRefAccelerations((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_getRefSpeed__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getRefSpeed(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_getRefSpeeds__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getRefSpeeds(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_getRefAcceleration__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getRefAcceleration(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_getRefAccelerations__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getRefAccelerations(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_stop__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->stop(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_stop__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  result = (bool)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IPositionControl_getAxes__SWIG_1(void * jarg1) {
  int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  result = (int)yarp_dev_IPositionControl_getAxes__SWIG_1(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_positionMove__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_positionMove__SWIG_2(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_relativeMove__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_relativeMove__SWIG_2(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_setRefSpeeds__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_setRefSpeeds__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_getRefSpeed__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_getRefSpeed__SWIG_1(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_getRefSpeeds__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_getRefSpeeds__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_getRefAcceleration__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_getRefAcceleration__SWIG_1(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_getRefAccelerations__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_getRefAccelerations__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_checkMotionDone__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  result = (bool)yarp_dev_IPositionControl_checkMotionDone__SWIG_2(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_checkMotionDone__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (std::vector< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_checkMotionDone__SWIG_3(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_checkMotionDone__SWIG_4(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_checkMotionDone__SWIG_4(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_isMotionDone__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)yarp_dev_IPositionControl_isMotionDone__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPositionControl_isMotionDone__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IPositionControl *)jarg1; 
  result = (bool)yarp_dev_IPositionControl_isMotionDone__SWIG_1(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IEncodersRaw(void * jarg1) {
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_getAxes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_resetEncoderRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetEncoderRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_resetEncodersRaw(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  result = (bool)(arg1)->resetEncodersRaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_setEncoderRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setEncoderRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_setEncodersRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setEncodersRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_getEncoderRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getEncoderRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_getEncodersRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getEncodersRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_getEncoderSpeedRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getEncoderSpeedRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_getEncoderSpeedsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getEncoderSpeedsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_getEncoderAccelerationRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getEncoderAccelerationRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncodersRaw_getEncoderAccelerationsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncodersRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getEncoderAccelerationsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IEncoders(void * jarg1) {
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_getAxes__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_resetEncoder(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetEncoder(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_resetEncoders(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  result = (bool)(arg1)->resetEncoders();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_setEncoder(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setEncoder(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_setEncoders__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setEncoders((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_getEncoder__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getEncoder(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_getEncoders__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getEncoders(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_getEncoderSpeed__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getEncoderSpeed(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_getEncoderSpeeds__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getEncoderSpeeds(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_getEncoderAcceleration__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getEncoderAcceleration(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_getEncoderAccelerations__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getEncoderAccelerations(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IEncoders_getAxes__SWIG_1(void * jarg1) {
  int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  result = (int)yarp_dev_IEncoders_getAxes__SWIG_1(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_setEncoders__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IEncoders_setEncoders__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IEncoders_getEncoder__SWIG_1(void * jarg1, int jarg2) {
  double jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)yarp_dev_IEncoders_getEncoder__SWIG_1(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_getEncoders__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IEncoders_getEncoders__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IEncoders_getEncoderSpeed__SWIG_1(void * jarg1, int jarg2) {
  double jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)yarp_dev_IEncoders_getEncoderSpeed__SWIG_1(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_getEncoderSpeeds__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IEncoders_getEncoderSpeeds__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IEncoders_getEncoderAcceleration__SWIG_1(void * jarg1, int jarg2) {
  double jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)yarp_dev_IEncoders_getEncoderAcceleration__SWIG_1(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IEncoders_getEncoderAccelerations__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IEncoders *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IEncoders_getEncoderAccelerations__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICalibrator(void * jarg1) {
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  
  arg1 = (yarp::dev::ICalibrator *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICalibrator_calibrate(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICalibrator *)jarg1; 
  arg2 = (yarp::dev::DeviceDriver *)jarg2; 
  result = (bool)(arg1)->calibrate(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICalibrator_park__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ICalibrator *)jarg1; 
  arg2 = (yarp::dev::DeviceDriver *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->park(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICalibrator_park__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICalibrator *)jarg1; 
  arg2 = (yarp::dev::DeviceDriver *)jarg2; 
  result = (bool)(arg1)->park(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICalibrator_quitCalibrate(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICalibrator *)jarg1; 
  result = (bool)(arg1)->quitCalibrate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICalibrator_quitPark(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ICalibrator *)jarg1; 
  result = (bool)(arg1)->quitPark();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IRemoteCalibrator(void * jarg1) {
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_setCalibratorDevice(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  yarp::dev::IRemoteCalibrator *arg2 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  arg2 = (yarp::dev::IRemoteCalibrator *)jarg2; 
  result = (bool)(arg1)->setCalibratorDevice(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRemoteCalibrator_getCalibratorDevice(void * jarg1) {
  void * jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  yarp::dev::IRemoteCalibrator *result = 0 ;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  result = (yarp::dev::IRemoteCalibrator *)(arg1)->getCalibratorDevice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_isCalibratorDevicePresent(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)(arg1)->isCalibratorDevicePresent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRemoteCalibrator_releaseCalibratorDevice(void * jarg1) {
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  (arg1)->releaseCalibratorDevice();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_calibrateSingleJoint(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->calibrateSingleJoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_calibrateWholePart(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  result = (bool)(arg1)->calibrateWholePart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_homingSingleJoint(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->homingSingleJoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_homingWholePart(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  result = (bool)(arg1)->homingWholePart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_parkSingleJoint__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parkSingleJoint(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_parkSingleJoint__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->parkSingleJoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_parkWholePart(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  result = (bool)(arg1)->parkWholePart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_quitCalibrate(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  result = (bool)(arg1)->quitCalibrate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRemoteCalibrator_quitPark(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IRemoteCalibrator *)jarg1; 
  result = (bool)(arg1)->quitPark();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IControlMode(void * jarg1) {
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlMode_setPositionMode(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setPositionMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlMode_setVelocityMode(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setVelocityMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlMode_setTorqueMode(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setTorqueMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlMode_setImpedancePositionMode(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setImpedancePositionMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlMode_setImpedanceVelocityMode(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setImpedanceVelocityMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlMode_setOpenLoopMode(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setOpenLoopMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlMode_getControlMode__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)(arg1)->getControlMode(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlMode_getControlModes__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getControlModes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IControlMode_getControlMode__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)yarp_dev_IControlMode_getControlMode__SWIG_1(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlMode_getControlModes__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  std::vector< int > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlMode *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IControlMode_getControlModes__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IControlModeRaw(void * jarg1) {
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  
  arg1 = (yarp::dev::IControlModeRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlModeRaw_setPositionModeRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlModeRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setPositionModeRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlModeRaw_setVelocityModeRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlModeRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setVelocityModeRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlModeRaw_setTorqueModeRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlModeRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setTorqueModeRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlModeRaw_setImpedancePositionModeRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlModeRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setImpedancePositionModeRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlModeRaw_setImpedanceVelocityModeRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlModeRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setImpedanceVelocityModeRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlModeRaw_setOpenLoopModeRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IControlModeRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setOpenLoopModeRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlModeRaw_getControlModeRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlModeRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)(arg1)->getControlModeRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IControlModeRaw_getControlModesRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IControlModeRaw *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getControlModesRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MotorTorqueParameters_bemf_set(void * jarg1, double jarg2) {
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::MotorTorqueParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bemf = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MotorTorqueParameters_bemf_get(void * jarg1) {
  double jresult ;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::MotorTorqueParameters *)jarg1; 
  result = (double) ((arg1)->bemf);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MotorTorqueParameters_bemf_scale_set(void * jarg1, double jarg2) {
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::MotorTorqueParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bemf_scale = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MotorTorqueParameters_bemf_scale_get(void * jarg1) {
  double jresult ;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::MotorTorqueParameters *)jarg1; 
  result = (double) ((arg1)->bemf_scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MotorTorqueParameters_ktau_set(void * jarg1, double jarg2) {
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::MotorTorqueParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ktau = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MotorTorqueParameters_ktau_get(void * jarg1) {
  double jresult ;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::MotorTorqueParameters *)jarg1; 
  result = (double) ((arg1)->ktau);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MotorTorqueParameters_ktau_scale_set(void * jarg1, double jarg2) {
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::dev::MotorTorqueParameters *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ktau_scale = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MotorTorqueParameters_ktau_scale_get(void * jarg1) {
  double jresult ;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  arg1 = (yarp::dev::MotorTorqueParameters *)jarg1; 
  result = (double) ((arg1)->ktau_scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MotorTorqueParameters() {
  void * jresult ;
  yarp::dev::MotorTorqueParameters *result = 0 ;
  
  result = (yarp::dev::MotorTorqueParameters *)new yarp::dev::MotorTorqueParameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MotorTorqueParameters(void * jarg1) {
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  
  arg1 = (yarp::dev::MotorTorqueParameters *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ITorqueControl(void * jarg1) {
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getAxes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setTorqueMode(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  result = (bool)(arg1)->setTorqueMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getRefTorques(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getRefTorques(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getRefTorque(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getRefTorque(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setRefTorques__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setRefTorques((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setRefTorque(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefTorque(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setRefTorques__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(arg1)->setRefTorques(arg2,(int const *)arg3,(double const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getBemfParam(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getBemfParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setBemfParam(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setBemfParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getMotorTorqueParams(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters *arg3 = (yarp::dev::MotorTorqueParameters *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::MotorTorqueParameters *)jarg3; 
  result = (bool)(arg1)->getMotorTorqueParams(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setMotorTorqueParams(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters arg3 ;
  yarp::dev::MotorTorqueParameters const *argp3 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (yarp::dev::MotorTorqueParameters *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null yarp::dev::MotorTorqueParameters const", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->setMotorTorqueParams(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setTorquePid(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::Pid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::Pid const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setTorquePid(arg2,(yarp::dev::Pid const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorque(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getTorque(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorques(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getTorques(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorqueRange(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(arg1)->getTorqueRange(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorqueRanges(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getTorqueRanges(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setTorquePids(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (yarp::dev::Pid *)jarg2; 
  result = (bool)(arg1)->setTorquePids((yarp::dev::Pid const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setTorqueErrorLimit(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setTorqueErrorLimit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setTorqueErrorLimits(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setTorqueErrorLimits((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorqueError(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getTorqueError(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorqueErrors(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getTorqueErrors(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorquePidOutput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getTorquePidOutput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorquePidOutputs(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getTorquePidOutputs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorquePid(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::Pid *)jarg3; 
  result = (bool)(arg1)->getTorquePid(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorquePids(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (yarp::dev::Pid *)jarg2; 
  result = (bool)(arg1)->getTorquePids(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorqueErrorLimit(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getTorqueErrorLimit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_getTorqueErrorLimits(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getTorqueErrorLimits(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_resetTorquePid(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetTorquePid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_disableTorquePid(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disableTorquePid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_enableTorquePid(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enableTorquePid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControl_setTorqueOffset(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setTorqueOffset(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ITorqueControlRaw(void * jarg1) {
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getAxes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setTorqueModeRaw(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  result = (bool)(arg1)->setTorqueModeRaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorqueRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getTorqueRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorquesRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getTorquesRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorqueRangeRaw(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(arg1)->getTorqueRangeRaw(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorqueRangesRaw(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getTorqueRangesRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setRefTorquesRaw__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setRefTorquesRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setRefTorqueRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefTorqueRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setRefTorquesRaw__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(arg1)->setRefTorquesRaw(arg2,(int const *)arg3,(double const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getRefTorquesRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getRefTorquesRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getRefTorqueRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getRefTorqueRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getBemfParamRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getBemfParamRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setBemfParamRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setBemfParamRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getMotorTorqueParamsRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters *arg3 = (yarp::dev::MotorTorqueParameters *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::MotorTorqueParameters *)jarg3; 
  result = (bool)(arg1)->getMotorTorqueParamsRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setMotorTorqueParamsRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters arg3 ;
  yarp::dev::MotorTorqueParameters const *argp3 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (yarp::dev::MotorTorqueParameters *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null yarp::dev::MotorTorqueParameters const", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->setMotorTorqueParamsRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setTorquePidRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::Pid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::Pid const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setTorquePidRaw(arg2,(yarp::dev::Pid const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setTorquePidsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (yarp::dev::Pid *)jarg2; 
  result = (bool)(arg1)->setTorquePidsRaw((yarp::dev::Pid const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setTorqueErrorLimitRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setTorqueErrorLimitRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setTorqueErrorLimitsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setTorqueErrorLimitsRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorqueErrorRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getTorqueErrorRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorqueErrorsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getTorqueErrorsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorquePidOutputRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getTorquePidOutputRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorquePidOutputsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getTorquePidOutputsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorquePidRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::Pid *)jarg3; 
  result = (bool)(arg1)->getTorquePidRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorquePidsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (yarp::dev::Pid *)jarg2; 
  result = (bool)(arg1)->getTorquePidsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorqueErrorLimitRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getTorqueErrorLimitRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_getTorqueErrorLimitsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getTorqueErrorLimitsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_resetTorquePidRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetTorquePidRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_disableTorquePidRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disableTorquePidRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_enableTorquePidRaw(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enableTorquePidRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ITorqueControlRaw_setTorqueOffsetRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::ITorqueControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setTorqueOffsetRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IImpedanceControlRaw(void * jarg1) {
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  
  arg1 = (yarp::dev::IImpedanceControlRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControlRaw_getAxes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControlRaw *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControlRaw_getImpedanceRaw(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(arg1)->getImpedanceRaw(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControlRaw_setImpedanceRaw(void * jarg1, int jarg2, double jarg3, double jarg4) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->setImpedanceRaw(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControlRaw_setImpedanceOffsetRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setImpedanceOffsetRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControlRaw_getImpedanceOffsetRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getImpedanceOffsetRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControlRaw_getCurrentImpedanceLimitRaw(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  result = (bool)(arg1)->getCurrentImpedanceLimitRaw(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IImpedanceControl(void * jarg1) {
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  
  arg1 = (yarp::dev::IImpedanceControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControl_getAxes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControl *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControl_getImpedance(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(arg1)->getImpedance(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControl_setImpedance(void * jarg1, int jarg2, double jarg3, double jarg4) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->setImpedance(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControl_setImpedanceOffset(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setImpedanceOffset(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControl_getImpedanceOffset(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getImpedanceOffset(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IImpedanceControl_getCurrentImpedanceLimit(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IImpedanceControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  result = (bool)(arg1)->getCurrentImpedanceLimit(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IVelocityControlRaw(void * jarg1) {
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControlRaw_getAxes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControlRaw_setVelocityModeRaw(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  result = (bool)(arg1)->setVelocityModeRaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControlRaw_velocityMoveRaw__SWIG_0(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->velocityMoveRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControlRaw_velocityMoveRaw__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->velocityMoveRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControlRaw_setRefAccelerationRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefAccelerationRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControlRaw_setRefAccelerationsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setRefAccelerationsRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControlRaw_getRefAccelerationRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getRefAccelerationRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControlRaw_getRefAccelerationsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getRefAccelerationsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControlRaw_stopRaw__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->stopRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControlRaw_stopRaw__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControlRaw *)jarg1; 
  result = (bool)(arg1)->stopRaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IVelocityControl(void * jarg1) {
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_getAxes__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_setVelocityMode(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  result = (bool)(arg1)->setVelocityMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_velocityMove__SWIG_0(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->velocityMove(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_velocityMove__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->velocityMove((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_setRefAcceleration(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefAcceleration(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_setRefAccelerations__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setRefAccelerations((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_getRefAcceleration__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getRefAcceleration(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_getRefAccelerations__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getRefAccelerations(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_stop__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->stop(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_stop__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  result = (bool)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVelocityControl_getAxes__SWIG_1(void * jarg1) {
  int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  result = (int)yarp_dev_IVelocityControl_getAxes__SWIG_1(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_velocityMove__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IVelocityControl_velocityMove__SWIG_2(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_setRefAccelerations__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IVelocityControl_setRefAccelerations__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_getRefAcceleration__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IVelocityControl_getRefAcceleration__SWIG_1(arg1,arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVelocityControl_getRefAccelerations__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::dev::IVelocityControl *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return 0;
  } 
  result = (bool)yarp_dev_IVelocityControl_getRefAccelerations__SWIG_1(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IOpenLoopControlRaw(void * jarg1) {
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  
  arg1 = (yarp::dev::IOpenLoopControlRaw *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControlRaw_setRefOutputRaw(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefOutputRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControlRaw_setRefOutputsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setRefOutputsRaw((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControlRaw_getRefOutputRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getRefOutputRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControlRaw_getRefOutputsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getRefOutputsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControlRaw_getOutputRaw(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControlRaw *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getOutputRaw(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControlRaw_getOutputsRaw(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControlRaw *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getOutputsRaw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControlRaw_setOpenLoopModeRaw(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControlRaw *)jarg1; 
  result = (bool)(arg1)->setOpenLoopModeRaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IOpenLoopControl(void * jarg1) {
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  
  arg1 = (yarp::dev::IOpenLoopControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControl_setRefOutput(void * jarg1, int jarg2, double jarg3) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefOutput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControl_setRefOutputs(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->setRefOutputs((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControl_getRefOutput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getRefOutput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControl_getRefOutputs(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getRefOutputs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControl_getOutput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (bool)(arg1)->getOutput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControl_getOutputs(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControl *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)(arg1)->getOutputs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IOpenLoopControl_setOpenLoopMode(void * jarg1) {
  unsigned int jresult ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  bool result;
  
  arg1 = (yarp::dev::IOpenLoopControl *)jarg1; 
  result = (bool)(arg1)->setOpenLoopMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DVector__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DVector_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DVector_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DVector_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DVector_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DVector_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DVector_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DVector_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DVector(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_Clear(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_Add(void * jarg1, unsigned int jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((bool const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BVector__SWIG_0() {
  void * jresult ;
  std::vector< bool > *result = 0 ;
  
  result = (std::vector< bool > *)new std::vector< bool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< bool > *arg1 = 0 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< bool > *)new std::vector< bool >((std::vector< bool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< bool > *)new_std_vector_Sl_bool_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BVector_getitemcopy(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BVector_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::const_reference result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bool >::const_reference)std_vector_Sl_bool_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__setitem(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (std::vector< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_bool_Sg__AddRange(arg1,(std::vector< bool > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< bool > *)std_vector_Sl_bool_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_Insert(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__Insert(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_bool_Sg__InsertRange(arg1,arg2,(std::vector< bool > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_bool_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_bool_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BVector_Repeat(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool *arg1 = 0 ;
  int arg2 ;
  bool temp1 ;
  std::vector< bool > *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bool > *)std_vector_Sl_bool_Sg__Repeat((bool const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  std_vector_Sl_bool_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_bool_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_bool_Sg__SetRange(arg1,arg2,(std::vector< bool > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BVector_Contains(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_bool_Sg__Contains(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BVector_IndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  int result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_bool_Sg__IndexOf(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BVector_LastIndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  int result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_bool_Sg__LastIndexOf(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BVector_Remove(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_bool_Sg__Remove(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BVector(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SVector_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SVector_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SVector_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SVector_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SVector_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SVector_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SVector_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IVector__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVector_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVector_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IVector_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVector_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVector_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVector_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVector_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IVector(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_Clear(void * jarg1) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_Add(void * jarg1, void * jarg2) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  yarp::dev::Pid *arg2 = 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (yarp::dev::Pid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::Pid const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((yarp::dev::Pid const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PidVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  std::vector< yarp::dev::Pid >::size_type result;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  result = ((std::vector< yarp::dev::Pid > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PidVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  std::vector< yarp::dev::Pid >::size_type result;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  result = ((std::vector< yarp::dev::Pid > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  std::vector< yarp::dev::Pid >::size_type arg2 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (std::vector< yarp::dev::Pid >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PidVector__SWIG_0() {
  void * jresult ;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  result = (std::vector< yarp::dev::Pid > *)new std::vector< yarp::dev::Pid >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PidVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< yarp::dev::Pid > *arg1 = 0 ;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< yarp::dev::Pid > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< yarp::dev::Pid > *)new std::vector< yarp::dev::Pid >((std::vector< yarp::dev::Pid > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PidVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< yarp::dev::Pid > *)new_std_vector_Sl_yarp_dev_Pid_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PidVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  yarp::dev::Pid result;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_yarp_dev_Pid_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new yarp::dev::Pid((const yarp::dev::Pid &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PidVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  yarp::dev::Pid *result = 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (yarp::dev::Pid *) &std_vector_Sl_yarp_dev_Pid_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::Pid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::Pid const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_yarp_dev_Pid_Sg__setitem(arg1,arg2,(yarp::dev::Pid const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  std::vector< yarp::dev::Pid > *arg2 = 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (std::vector< yarp::dev::Pid > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< yarp::dev::Pid > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_yarp_dev_Pid_Sg__AddRange(arg1,(std::vector< yarp::dev::Pid > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PidVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< yarp::dev::Pid > *)std_vector_Sl_yarp_dev_Pid_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (yarp::dev::Pid *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::Pid const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_yarp_dev_Pid_Sg__Insert(arg1,arg2,(yarp::dev::Pid const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  std::vector< yarp::dev::Pid > *arg3 = 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< yarp::dev::Pid > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< yarp::dev::Pid > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_yarp_dev_Pid_Sg__InsertRange(arg1,arg2,(std::vector< yarp::dev::Pid > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_yarp_dev_Pid_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_yarp_dev_Pid_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PidVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  yarp::dev::Pid *arg1 = 0 ;
  int arg2 ;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  arg1 = (yarp::dev::Pid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::dev::Pid const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< yarp::dev::Pid > *)std_vector_Sl_yarp_dev_Pid_Sg__Repeat((yarp::dev::Pid const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  std_vector_Sl_yarp_dev_Pid_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_yarp_dev_Pid_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PidVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  std::vector< yarp::dev::Pid > *arg3 = 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< yarp::dev::Pid > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< yarp::dev::Pid > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_yarp_dev_Pid_Sg__SetRange(arg1,arg2,(std::vector< yarp::dev::Pid > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PidVector(void * jarg1) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  
  arg1 = (std::vector< yarp::dev::Pid > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageRgb_getPixelSize(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgb > const *)arg1)->getPixelSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageRgb_getPixelCode(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgb > const *)arg1)->getPixelCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageRgb_pixel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgb *) &(arg1)->pixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageRgb_access(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgb *) &(arg1)->operator ()(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageRgb_safePixel__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgb *) &(arg1)->safePixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageRgb() {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)new yarp::sig::ImageOf< yarp::sig::PixelRgb >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageRgb(void * jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgb_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgb_setStrict__SWIG_1(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgb_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgb_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgb_interrupt(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgb_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TypedReaderImageRgb_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgb_useCallback(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgb_disableCallback(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TypedReaderImageRgb_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderImageRgb(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TypedReaderImageRgb_getName(void * jarg1) {
  char * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgb_setReplier(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgb_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgb_release(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgb_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderCallbackImageRgb(void * jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageRgb_onRead__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageRgb_onRead__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TypedReaderCallbackImageRgb() {
  void * jresult ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *result = 0 ;
  
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg3 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageRgb__SWIG_0() {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *result = 0 ;
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageRgb__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferedPortImageRgb(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_close(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_interrupt(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_resume(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageRgb_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgb_where(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BufferedPortImageRgb_getName(void * jarg1) {
  char * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgb_prepare(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) &(arg1)->prepare();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_unprepare(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_write__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_write__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->write();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_writeStrict(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_waitForWrite(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_setStrict__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgb_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgb_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgb_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_setReplier(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_setReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_useCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_useCallback__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_disableCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageRgb_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageRgb_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_getReport(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_setReporter(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgb_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_release(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgb_getType(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  Type result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_promiseType(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgb_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_setCallbackLock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgb_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgb_unlockCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageRgba_getPixelSize(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgba > const *)arg1)->getPixelSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageRgba_getPixelCode(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgba > const *)arg1)->getPixelCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageRgba_pixel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgba *) &(arg1)->pixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageRgba_access(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgba *) &(arg1)->operator ()(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageRgba_safePixel__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgba *) &(arg1)->safePixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageRgba() {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)new yarp::sig::ImageOf< yarp::sig::PixelRgba >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageRgba(void * jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgba_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgba_setStrict__SWIG_1(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgba_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgba_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgba_interrupt(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgba_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TypedReaderImageRgba_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgba_useCallback(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgba_disableCallback(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TypedReaderImageRgba_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderImageRgba(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TypedReaderImageRgba_getName(void * jarg1) {
  char * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgba_setReplier(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgba_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgba_release(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgba_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderCallbackImageRgba(void * jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageRgba_onRead__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageRgba_onRead__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TypedReaderCallbackImageRgba() {
  void * jresult ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *result = 0 ;
  
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg3 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageRgba__SWIG_0() {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *result = 0 ;
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageRgba__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferedPortImageRgba(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_close(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_interrupt(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_resume(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageRgba_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgba_where(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BufferedPortImageRgba_getName(void * jarg1) {
  char * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgba_prepare(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) &(arg1)->prepare();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_unprepare(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_write__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_write__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->write();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_writeStrict(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_waitForWrite(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_setStrict__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgba_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgba_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgba_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_setReplier(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_setReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_useCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_useCallback__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_disableCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageRgba_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageRgba_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_getReport(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_setReporter(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgba_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_release(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgba_getType(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  Type result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_promiseType(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgba_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_setCallbackLock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgba_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgba_unlockCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageMono_getPixelSize(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono > const *)arg1)->getPixelSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageMono_getPixelCode(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono > const *)arg1)->getPixelCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMono_pixel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono *) &(arg1)->pixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMono_access(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono *) &(arg1)->operator ()(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMono_safePixel__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono *) &(arg1)->safePixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageMono() {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)new yarp::sig::ImageOf< yarp::sig::PixelMono >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageMono(void * jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono_setStrict__SWIG_1(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageMono_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageMono_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono_interrupt(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageMono_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TypedReaderImageMono_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono_useCallback(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono_disableCallback(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TypedReaderImageMono_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderImageMono(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TypedReaderImageMono_getName(void * jarg1) {
  char * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono_setReplier(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageMono_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono_release(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderCallbackImageMono(void * jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageMono_onRead__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageMono_onRead__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TypedReaderCallbackImageMono() {
  void * jresult ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *result = 0 ;
  
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg3 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageMono__SWIG_0() {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *result = 0 ;
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageMono__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferedPortImageMono(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_close(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_interrupt(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_resume(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageMono_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono_where(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BufferedPortImageMono_getName(void * jarg1) {
  char * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono_prepare(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) &(arg1)->prepare();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_unprepare(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_write__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_write__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->write();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_writeStrict(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_waitForWrite(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_setStrict__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_setReplier(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_setReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_useCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_useCallback__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_disableCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageMono_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageMono_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_getReport(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_setReporter(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_release(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono_getType(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  Type result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_promiseType(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_setCallbackLock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono_unlockCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageMono16_getPixelSize(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono16 > const *)arg1)->getPixelSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageMono16_getPixelCode(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono16 > const *)arg1)->getPixelCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMono16_pixel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono16 *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono16 *) &(arg1)->pixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMono16_access(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono16 *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono16 *) &(arg1)->operator ()(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageMono16_safePixel__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono16 *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono16 *) &(arg1)->safePixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageMono16() {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)new yarp::sig::ImageOf< yarp::sig::PixelMono16 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageMono16(void * jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono16_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono16_setStrict__SWIG_1(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageMono16_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageMono16_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono16_interrupt(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageMono16_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TypedReaderImageMono16_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono16_useCallback(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono16_disableCallback(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TypedReaderImageMono16_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderImageMono16(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TypedReaderImageMono16_getName(void * jarg1) {
  char * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono16_setReplier(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageMono16_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono16_release(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageMono16_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderCallbackImageMono16(void * jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageMono16_onRead__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono16 > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageMono16_onRead__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono16 > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TypedReaderCallbackImageMono16() {
  void * jresult ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *result = 0 ;
  
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg3 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono16 > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageMono16__SWIG_0() {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *result = 0 ;
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageMono16__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferedPortImageMono16(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_close(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_interrupt(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_resume(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageMono16_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono16_where(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BufferedPortImageMono16_getName(void * jarg1) {
  char * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono16_prepare(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) &(arg1)->prepare();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_unprepare(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_write__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_write__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->write();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_writeStrict(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_waitForWrite(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_setStrict__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono16_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono16_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono16_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_setReplier(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_setReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelMono16 > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_useCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_useCallback__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_disableCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageMono16_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageMono16_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_getReport(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_setReporter(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono16_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_release(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono16_getType(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  Type result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_promiseType(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageMono16_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_setCallbackLock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageMono16_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageMono16_unlockCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageInt_getPixelSize(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelInt > const *)arg1)->getPixelSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageInt_getPixelCode(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelInt > const *)arg1)->getPixelCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageInt_pixel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelInt *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelInt *) &(arg1)->pixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageInt_access(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelInt *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelInt *) &(arg1)->operator ()(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageInt_safePixel__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelInt *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelInt *) &(arg1)->safePixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageInt_getPixel(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__getPixel(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageInt_setPixel(void * jarg1, int jarg2, int jarg3, int jarg4) {
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__setPixel(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageInt() {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)new yarp::sig::ImageOf< yarp::sig::PixelInt >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageInt(void * jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageInt_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageInt_setStrict__SWIG_1(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageInt_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageInt_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageInt_interrupt(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageInt_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TypedReaderImageInt_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageInt_useCallback(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageInt_disableCallback(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TypedReaderImageInt_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderImageInt(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TypedReaderImageInt_getName(void * jarg1) {
  char * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageInt_setReplier(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageInt_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageInt_release(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageInt_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderCallbackImageInt(void * jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageInt_onRead__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelInt > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageInt_onRead__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelInt > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TypedReaderCallbackImageInt() {
  void * jresult ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *result = 0 ;
  
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg3 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelInt > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageInt__SWIG_0() {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *result = 0 ;
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageInt__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferedPortImageInt(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_close(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_interrupt(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_resume(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageInt_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageInt_where(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BufferedPortImageInt_getName(void * jarg1) {
  char * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageInt_prepare(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) &(arg1)->prepare();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_unprepare(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_write__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_write__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->write();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_writeStrict(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_waitForWrite(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_setStrict__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageInt_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageInt_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageInt_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_setReplier(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_setReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelInt > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_useCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_useCallback__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_disableCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageInt_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageInt_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_getReport(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_setReporter(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageInt_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_release(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageInt_getType(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  Type result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_promiseType(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageInt_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_setCallbackLock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageInt_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageInt_unlockCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderSound_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderSound_setStrict__SWIG_1(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderSound_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  yarp::sig::Sound *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::Sound *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderSound_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  result = (yarp::sig::Sound *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderSound_interrupt(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderSound_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  result = (yarp::sig::Sound *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TypedReaderSound_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderSound_useCallback(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::Sound > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::Sound > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::Sound > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderSound_disableCallback(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TypedReaderSound_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  int result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderSound(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TypedReaderSound_getName(void * jarg1) {
  char * jresult ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::Sound > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderSound_setReplier(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderSound_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderSound_release(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderSound_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg3 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::sig::Sound *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Sound & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::Sound > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::Sound > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::Sound > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortSound__SWIG_0() {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *result = 0 ;
  
  result = (yarp::os::BufferedPort< yarp::sig::Sound > *)new yarp::os::BufferedPort< yarp::sig::Sound >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortSound__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::Sound > *)new yarp::os::BufferedPort< yarp::sig::Sound >(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferedPortSound(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_close(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_interrupt(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_resume(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortSound_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortSound_where(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::Sound > const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BufferedPortSound_getName(void * jarg1) {
  char * jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::Sound > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortSound_prepare(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (yarp::sig::Sound *) &(arg1)->prepare();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_unprepare(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_write__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_write__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  (arg1)->write();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_writeStrict(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_waitForWrite(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_setStrict__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortSound_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  yarp::sig::Sound *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::Sound *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortSound_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (yarp::sig::Sound *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortSound_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (yarp::sig::Sound *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_setReplier(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_setReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::sig::Sound *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::Sound & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_useCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::Sound > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::Sound > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::Sound > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_useCallback__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_disableCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortSound_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortSound_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_getReport(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_setReporter(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortSound_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_release(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortSound_getType(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  Type result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_promiseType(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortSound_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_setCallbackLock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortSound_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortSound_unlockCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageFloat_getPixelSize(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelFloat > const *)arg1)->getPixelSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageFloat_getPixelCode(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelFloat > const *)arg1)->getPixelCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageFloat_pixel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelFloat *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelFloat *) &(arg1)->pixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageFloat_access(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelFloat *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelFloat *) &(arg1)->operator ()(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageFloat_safePixel__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelFloat *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelFloat *) &(arg1)->safePixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImageFloat_getPixel(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__getPixel(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFloat_setPixel(void * jarg1, int jarg2, int jarg3, float jarg4) {
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__setPixel(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageFloat() {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)new yarp::sig::ImageOf< yarp::sig::PixelFloat >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageFloat(void * jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageFloat_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageFloat_setStrict__SWIG_1(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageFloat_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageFloat_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageFloat_interrupt(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageFloat_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TypedReaderImageFloat_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageFloat_useCallback(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageFloat_disableCallback(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TypedReaderImageFloat_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderImageFloat(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TypedReaderImageFloat_getName(void * jarg1) {
  char * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageFloat_setReplier(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageFloat_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageFloat_release(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageFloat_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderCallbackImageFloat(void * jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageFloat_onRead__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageFloat_onRead__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TypedReaderCallbackImageFloat() {
  void * jresult ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *result = 0 ;
  
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg3 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageFloat__SWIG_0() {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *result = 0 ;
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageFloat__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferedPortImageFloat(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_close(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_interrupt(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_resume(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageFloat_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageFloat_where(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BufferedPortImageFloat_getName(void * jarg1) {
  char * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageFloat_prepare(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) &(arg1)->prepare();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_unprepare(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_write__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_write__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->write();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_writeStrict(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_waitForWrite(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_setStrict__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageFloat_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageFloat_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageFloat_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_setReplier(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_setReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_useCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_useCallback__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_disableCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageFloat_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageFloat_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_getReport(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_setReporter(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageFloat_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_release(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageFloat_getType(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  Type result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_promiseType(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageFloat_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_setCallbackLock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageFloat_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageFloat_unlockCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageRgbFloat_getPixelSize(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > const *)arg1)->getPixelSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageRgbFloat_getPixelCode(void * jarg1) {
  int jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int result;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > const *)arg1)->getPixelCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageRgbFloat_pixel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgbFloat *) &(arg1)->pixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageRgbFloat_access(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgbFloat *) &(arg1)->operator ()(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageRgbFloat_safePixel__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgbFloat *) &(arg1)->safePixel(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageRgbFloat() {
  void * jresult ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)new yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageRgbFloat(void * jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  
  arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_setStrict__SWIG_1(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_interrupt(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_useCallback(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_disableCallback(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderImageRgbFloat(void * jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_getName(void * jarg1) {
  char * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_setReplier(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_release(void * jarg1, void * jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderImageRgbFloat_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TypedReaderCallbackImageRgbFloat(void * jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageRgbFloat_onRead__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TypedReaderCallbackImageRgbFloat_onRead__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg3 = 0 ;
  
  arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TypedReaderCallbackImageRgbFloat() {
  void * jresult ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *result = 0 ;
  
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_onRead__SWIG_0_0(void * jarg1, void * jarg2, void * jarg3) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg3 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > & type is null", 0);
    return ;
  } 
  arg3 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageRgbFloat__SWIG_0() {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *result = 0 ;
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferedPortImageRgbFloat__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *result = 0 ;
  
  arg1 = (yarp::os::Port *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Port & type is null", 0);
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferedPortImageRgbFloat(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_addOutput__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_addOutput__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  yarp::os::ConstString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_addOutput__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::Contact *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::Contact const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_close(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_interrupt(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_resume(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_getPendingReads(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_where(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Contact result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *)arg1)->where();
  jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_getName(void * jarg1) {
  char * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_prepare(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) &(arg1)->prepare();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_unprepare(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_write__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_write__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->write();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_writeStrict(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_waitForWrite(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setStrict__SWIG_0(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setStrict__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_read__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_read__SWIG_1(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_lastRead(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->lastRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_isClosed(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setReplier(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setAdminReader(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_onRead__SWIG_1(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > & type is null", 0);
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_useCallback__SWIG_0(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > & type is null", 0);
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_useCallback__SWIG_1(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_disableCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::PortWriter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortWriter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_getEnvelope(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReader & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_getInputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_getOutputCount(void * jarg1) {
  int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_isWriting(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_getReport(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setReporter(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::PortReport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "yarp::os::PortReport & type is null", 0);
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_acquire(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (void *)(arg1)->acquire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_release(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setTargetPeriod(void * jarg1, double jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  double arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_getType(void * jarg1) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  Type result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (arg1)->getType();
  jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_promiseType(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  Type *arg2 = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (Type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Type const & type is null", 0);
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setInputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setOutputMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setRpcMode(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_acquireProperties(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_releaseProperties(void * jarg1, void * jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::Property *)jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_includeNodeInName(void * jarg1, unsigned int jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_setCallbackLock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  arg2 = (yarp::os::Mutex *)jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_removeCallbackLock(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_lockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_tryLockCallback(void * jarg1) {
  unsigned int jresult ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_unlockCallback(void * jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT yarp::os::PortReader * SWIGSTDCALL CSharp_Portable_SWIGUpcast(yarp::os::Portable *jarg1) {
    return (yarp::os::PortReader *)jarg1;
}

SWIGEXPORT yarp::os::Portable * SWIGSTDCALL CSharp_Value_SWIGUpcast(yarp::os::Value *jarg1) {
    return (yarp::os::Portable *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_UnbufferedContactable_SWIGUpcast(yarp::os::UnbufferedContactable *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

SWIGEXPORT yarp::os::UnbufferedContactable * SWIGSTDCALL CSharp_Port_SWIGUpcast(yarp::os::Port *jarg1) {
    return (yarp::os::UnbufferedContactable *)jarg1;
}

SWIGEXPORT yarp::os::UnbufferedContactable * SWIGSTDCALL CSharp_AbstractContactable_SWIGUpcast(yarp::os::AbstractContactable *jarg1) {
    return (yarp::os::UnbufferedContactable *)jarg1;
}

SWIGEXPORT yarp::os::NetworkBase * SWIGSTDCALL CSharp_Network_SWIGUpcast(yarp::os::Network *jarg1) {
    return (yarp::os::NetworkBase *)jarg1;
}

SWIGEXPORT yarp::os::Portable * SWIGSTDCALL CSharp_PortablePairBase_SWIGUpcast(yarp::os::PortablePairBase *jarg1) {
    return (yarp::os::Portable *)jarg1;
}

SWIGEXPORT yarp::os::Searchable * SWIGSTDCALL CSharp_Property_SWIGUpcast(yarp::os::Property *jarg1) {
    return (yarp::os::Searchable *)jarg1;
}

SWIGEXPORT yarp::os::Portable * SWIGSTDCALL CSharp_Bottle_SWIGUpcast(yarp::os::Bottle *jarg1) {
    return (yarp::os::Portable *)jarg1;
}

SWIGEXPORT yarp::os::PortReader * SWIGSTDCALL CSharp_PortReaderBufferBase_SWIGUpcast(yarp::os::impl::PortReaderBufferBase *jarg1) {
    return (yarp::os::PortReader *)jarg1;
}

SWIGEXPORT yarp::os::PortWriter * SWIGSTDCALL CSharp_PortWriterWrapper_SWIGUpcast(yarp::os::PortWriterWrapper *jarg1) {
    return (yarp::os::PortWriter *)jarg1;
}

SWIGEXPORT yarp::os::RateThread * SWIGSTDCALL CSharp_RateThreadWrapper_SWIGUpcast(yarp::os::RateThreadWrapper *jarg1) {
    return (yarp::os::RateThread *)jarg1;
}

SWIGEXPORT yarp::os::Portable * SWIGSTDCALL CSharp_Stamp_SWIGUpcast(yarp::os::Stamp *jarg1) {
    return (yarp::os::Portable *)jarg1;
}

SWIGEXPORT yarp::os::Searchable * SWIGSTDCALL CSharp_ResourceFinder_SWIGUpcast(yarp::os::ResourceFinder *jarg1) {
    return (yarp::os::Searchable *)jarg1;
}

SWIGEXPORT yarp::os::AbstractContactable * SWIGSTDCALL CSharp_RpcServer_SWIGUpcast(yarp::os::RpcServer *jarg1) {
    return (yarp::os::AbstractContactable *)jarg1;
}

SWIGEXPORT yarp::os::AbstractContactable * SWIGSTDCALL CSharp_RpcClient_SWIGUpcast(yarp::os::RpcClient *jarg1) {
    return (yarp::os::AbstractContactable *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_BufferedPortProperty_SWIGUpcast(yarp::os::BufferedPort< Property > *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_BufferedPortBottle_SWIGUpcast(yarp::os::BufferedPort< Bottle > *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

SWIGEXPORT yarp::os::Portable * SWIGSTDCALL CSharp_Image_SWIGUpcast(yarp::sig::Image *jarg1) {
    return (yarp::os::Portable *)jarg1;
}

SWIGEXPORT yarp::sig::Image * SWIGSTDCALL CSharp_FlexImage_SWIGUpcast(yarp::sig::FlexImage *jarg1) {
    return (yarp::sig::Image *)jarg1;
}

SWIGEXPORT yarp::os::Portable * SWIGSTDCALL CSharp_Sound_SWIGUpcast(yarp::sig::Sound *jarg1) {
    return (yarp::os::Portable *)jarg1;
}

SWIGEXPORT yarp::os::Portable * SWIGSTDCALL CSharp_VectorBase_SWIGUpcast(yarp::sig::VectorBase *jarg1) {
    return (yarp::os::Portable *)jarg1;
}

SWIGEXPORT yarp::os::Portable * SWIGSTDCALL CSharp_Vector_SWIGUpcast(yarp::sig::Vector *jarg1) {
    return (yarp::os::Portable *)jarg1;
}

SWIGEXPORT yarp::os::IConfig * SWIGSTDCALL CSharp_DeviceDriver_SWIGUpcast(yarp::dev::DeviceDriver *jarg1) {
    return (yarp::os::IConfig *)jarg1;
}

SWIGEXPORT yarp::os::PortReader * SWIGSTDCALL CSharp_DeviceResponder_SWIGUpcast(yarp::dev::DeviceResponder *jarg1) {
    return (yarp::os::PortReader *)jarg1;
}

SWIGEXPORT yarp::dev::DeviceDriver * SWIGSTDCALL CSharp_PolyDriver_SWIGUpcast(yarp::dev::PolyDriver *jarg1) {
    return (yarp::dev::DeviceDriver *)jarg1;
}

SWIGEXPORT yarp::dev::DriverCreator * SWIGSTDCALL CSharp_StubDriverCreator_SWIGUpcast(yarp::dev::StubDriverCreator *jarg1) {
    return (yarp::dev::DriverCreator *)jarg1;
}

SWIGEXPORT yarp::dev::IFrameGrabberControls * SWIGSTDCALL CSharp_IFrameGrabberControlsDC1394_SWIGUpcast(yarp::dev::IFrameGrabberControlsDC1394 *jarg1) {
    return (yarp::dev::IFrameGrabberControls *)jarg1;
}

SWIGEXPORT yarp::sig::Image * SWIGSTDCALL CSharp_ImageRgb_SWIGUpcast(yarp::sig::ImageOf< yarp::sig::PixelRgb > *jarg1) {
    return (yarp::sig::Image *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_BufferedPortImageRgb_SWIGUpcast(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

SWIGEXPORT yarp::sig::Image * SWIGSTDCALL CSharp_ImageRgba_SWIGUpcast(yarp::sig::ImageOf< yarp::sig::PixelRgba > *jarg1) {
    return (yarp::sig::Image *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_BufferedPortImageRgba_SWIGUpcast(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

SWIGEXPORT yarp::sig::Image * SWIGSTDCALL CSharp_ImageMono_SWIGUpcast(yarp::sig::ImageOf< yarp::sig::PixelMono > *jarg1) {
    return (yarp::sig::Image *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_BufferedPortImageMono_SWIGUpcast(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

SWIGEXPORT yarp::sig::Image * SWIGSTDCALL CSharp_ImageMono16_SWIGUpcast(yarp::sig::ImageOf< yarp::sig::PixelMono16 > *jarg1) {
    return (yarp::sig::Image *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_BufferedPortImageMono16_SWIGUpcast(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

SWIGEXPORT yarp::sig::Image * SWIGSTDCALL CSharp_ImageInt_SWIGUpcast(yarp::sig::ImageOf< yarp::sig::PixelInt > *jarg1) {
    return (yarp::sig::Image *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_BufferedPortImageInt_SWIGUpcast(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_BufferedPortSound_SWIGUpcast(yarp::os::BufferedPort< yarp::sig::Sound > *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

SWIGEXPORT yarp::sig::Image * SWIGSTDCALL CSharp_ImageFloat_SWIGUpcast(yarp::sig::ImageOf< yarp::sig::PixelFloat > *jarg1) {
    return (yarp::sig::Image *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_BufferedPortImageFloat_SWIGUpcast(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

SWIGEXPORT yarp::sig::Image * SWIGSTDCALL CSharp_ImageRgbFloat_SWIGUpcast(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *jarg1) {
    return (yarp::sig::Image *)jarg1;
}

SWIGEXPORT yarp::os::Contactable * SWIGSTDCALL CSharp_BufferedPortImageRgbFloat_SWIGUpcast(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *jarg1) {
    return (yarp::os::Contactable *)jarg1;
}

#ifdef __cplusplus
}
#endif

