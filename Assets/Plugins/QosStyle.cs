//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class QosStyle : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal QosStyle(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(QosStyle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~QosStyle() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_QosStyle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public QosStyle() : this(yarpPINVOKE.new_QosStyle(), true) {
  }

  public void setPacketPriorityByDscp(QosStyle.PacketPriorityDSCP dscp) {
    yarpPINVOKE.QosStyle_setPacketPriorityByDscp(swigCPtr, (int)dscp);
  }

  public void setPacketPriorityByLevel(QosStyle.PacketPriorityLevel level) {
    yarpPINVOKE.QosStyle_setPacketPriorityByLevel(swigCPtr, (int)level);
  }

  public void setPacketPrioritybyTOS(int tos) {
    yarpPINVOKE.QosStyle_setPacketPrioritybyTOS(swigCPtr, tos);
  }

  public bool setPacketPriority(string priority) {
    bool ret = yarpPINVOKE.QosStyle_setPacketPriority(swigCPtr, priority);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setThreadPriority(int priority) {
    yarpPINVOKE.QosStyle_setThreadPriority(swigCPtr, priority);
  }

  public void setThreadPolicy(int policy) {
    yarpPINVOKE.QosStyle_setThreadPolicy(swigCPtr, policy);
  }

  public int getPacketPriorityAsTOS() {
    int ret = yarpPINVOKE.QosStyle_getPacketPriorityAsTOS(swigCPtr);
    return ret;
  }

  public QosStyle.PacketPriorityDSCP getPacketPriorityAsDSCP() {
    QosStyle.PacketPriorityDSCP ret = (QosStyle.PacketPriorityDSCP)yarpPINVOKE.QosStyle_getPacketPriorityAsDSCP(swigCPtr);
    return ret;
  }

  public QosStyle.PacketPriorityLevel getPacketPriorityAsLevel() {
    QosStyle.PacketPriorityLevel ret = (QosStyle.PacketPriorityLevel)yarpPINVOKE.QosStyle_getPacketPriorityAsLevel(swigCPtr);
    return ret;
  }

  public int getThreadPriority() {
    int ret = yarpPINVOKE.QosStyle_getThreadPriority(swigCPtr);
    return ret;
  }

  public int getThreadPolicy() {
    int ret = yarpPINVOKE.QosStyle_getThreadPolicy(swigCPtr);
    return ret;
  }

  public static QosStyle.PacketPriorityDSCP getDSCPByVocab(int vocab) {
    QosStyle.PacketPriorityDSCP ret = (QosStyle.PacketPriorityDSCP)yarpPINVOKE.QosStyle_getDSCPByVocab(vocab);
    return ret;
  }

  public static QosStyle.PacketPriorityLevel getLevelByVocab(int vocab) {
    QosStyle.PacketPriorityLevel ret = (QosStyle.PacketPriorityLevel)yarpPINVOKE.QosStyle_getLevelByVocab(vocab);
    return ret;
  }

  public enum PacketPriorityLevel {
    PacketPriorityInvalid = -1,
    PacketPriorityNormal = 0,
    PacketPriorityLow = 10,
    PacketPriorityHigh = 36,
    PacketPriorityCritical = 44,
    PacketPriorityUndefined = 0x7FFF
  }

  public enum PacketPriorityDSCP {
    DSCP_Invalid = -1,
    DSCP_CS0 = 0,
    DSCP_CS1 = 8,
    DSCP_CS2 = 16,
    DSCP_CS3 = 24,
    DSCP_CS4 = 32,
    DSCP_CS5 = 40,
    DSCP_CS6 = 48,
    DSCP_CS7 = 56,
    DSCP_AF11 = 10,
    DSCP_AF12 = 12,
    DSCP_AF13 = 14,
    DSCP_AF21 = 18,
    DSCP_AF22 = 20,
    DSCP_AF23 = 22,
    DSCP_AF31 = 26,
    DSCP_AF32 = 28,
    DSCP_AF33 = 30,
    DSCP_AF41 = 34,
    DSCP_AF42 = 36,
    DSCP_AF43 = 38,
    DSCP_VA = 44,
    DSCP_EF = 46,
    DSCP_Undefined = 0x7FFF
  }

}
