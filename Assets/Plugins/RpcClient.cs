/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class RpcClient : AbstractContactable {
  private HandleRef swigCPtr;

  internal RpcClient(IntPtr cPtr, bool cMemoryOwn) : base(yarpPINVOKE.RpcClient_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RpcClient obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RpcClient() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_RpcClient(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public RpcClient() : this(yarpPINVOKE.new_RpcClient(), true) {
  }

  public new bool read(PortReader reader, bool willReply) {
    bool ret = yarpPINVOKE.RpcClient_read__SWIG_0(swigCPtr, PortReader.getCPtr(reader), willReply);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool read(PortReader reader) {
    bool ret = yarpPINVOKE.RpcClient_read__SWIG_1(swigCPtr, PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool reply(PortWriter writer) {
    bool ret = yarpPINVOKE.RpcClient_reply(swigCPtr, PortWriter.getCPtr(writer));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool replyAndDrop(PortWriter writer) {
    bool ret = yarpPINVOKE.RpcClient_replyAndDrop(swigCPtr, PortWriter.getCPtr(writer));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setInputMode(bool expectInput) {
    yarpPINVOKE.RpcClient_setInputMode(swigCPtr, expectInput);
  }

  public override void setOutputMode(bool expectOutput) {
    yarpPINVOKE.RpcClient_setOutputMode(swigCPtr, expectOutput);
  }

  public override void setRpcMode(bool expectRpc) {
    yarpPINVOKE.RpcClient_setRpcMode(swigCPtr, expectRpc);
  }

  public override Port asPort() {
    Port ret = new Port(yarpPINVOKE.RpcClient_asPort__SWIG_0(swigCPtr), false);
    return ret;
  }

  public new bool write(Bottle data1, Bottle data2) {
    bool ret = yarpPINVOKE.RpcClient_write(swigCPtr, Bottle.getCPtr(data1), Bottle.getCPtr(data2));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
