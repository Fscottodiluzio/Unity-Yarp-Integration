/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_yarpJNI = NULL;
    jmethodID director_methids[22];
  }
}

// missing in some old versions of swig
#include <stddef.h>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


#define _SEARCH_H // strange perl clash
// careful shuffling to deal with perl clash on seed name
#ifdef seed
#define seed_c seed
#undef seed
#endif
#include <yarp/os/Random.h>
#ifdef seed_c
#define seed seed_c
#endif

// Bring in the header files that are important to us
#include <vector>
#include <yarp/os/all.h>
#include <yarp/sig/all.h>
#include <yarp/dev/all.h>


// Sometimes ACE redefines main() - we don't want that
#ifdef main
#undef main
#endif

// Bring in the main important namespace
using namespace yarp::os;
using namespace yarp::sig;
using namespace yarp::sig::file;
using namespace yarp::dev;

SWIGINTERN std::string yarp_os_Value_toString(yarp::os::Value *self){
        return self->toString().c_str();
    }
SWIGINTERN bool yarp_os_Contactable_setEnvelope__SWIG_1(yarp::os::Contactable *self,yarp::os::Portable &data){
    return self->setEnvelope(*((PortWriter*)(&data)));
  }
SWIGINTERN bool yarp_os_Port_write__SWIG_4(yarp::os::Port *self,yarp::os::Bottle &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_5(yarp::os::Port *self,yarp::os::Property &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_6(yarp::os::Port *self,yarp::sig::ImageOf< yarp::sig::PixelRgb > &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_7(yarp::os::Port *self,yarp::sig::ImageOf< yarp::sig::PixelFloat > &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_8(yarp::os::Port *self,yarp::os::Bottle &data1,yarp::os::Bottle &data2){
        return self->write(*((PortWriter*)(&data1)), *((PortReader*)(&data2)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_9(yarp::os::Port *self,yarp::os::Bottle &data1,yarp::sig::ImageOf< yarp::sig::PixelFloat > &data2){
        return self->write(*((PortWriter*)(&data1)), *((PortReader*)(&data2)));
    }
SWIGINTERN bool yarp_os_Port_reply__SWIG_1(yarp::os::Port *self,yarp::os::Bottle &data){
        return self->reply(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_NetworkBase_write__SWIG_6(char const *port_name,yarp::os::Bottle &cmd,yarp::os::Bottle &reply){
        return yarp::os::NetworkBase::write(port_name, *((PortWriter*)(&cmd)), *((PortReader*)(&reply)));
    }
SWIGINTERN bool yarp_os_NetworkBase_write__SWIG_7(yarp::os::Contact const &contact,yarp::os::Bottle &cmd,yarp::os::Bottle &reply,yarp::os::ContactStyle const &style){
        return yarp::os::NetworkBase::write(contact, *((PortWriter*)(&cmd)), *((PortReader*)(&reply)), style);
    }
SWIGINTERN bool yarp_os_NetworkBase_write__SWIG_8(yarp::os::Contact const &contact,yarp::os::Bottle &cmd,yarp::os::Bottle &reply,bool admin,bool quiet,double timeout){
        return yarp::os::NetworkBase::write(contact, *((PortWriter*)(&cmd)), *((PortReader*)(&reply)), admin, quiet, timeout);
    }
SWIGINTERN std::string yarp_os_Property_toString(yarp::os::Property *self){
        return self->toString().c_str();
    }
SWIGINTERN std::string yarp_os_Bottle_toString(yarp::os::Bottle *self){
        return self->toString().c_str();
    }
SWIGINTERN bool yarp_os_ResourceFinder_configure__SWIG_3(yarp::os::ResourceFinder *self,std::string const &policyName,std::vector< std::string > &argv,bool skipFirstArgument=true){
        std::vector<const char *> tmp(argv.size());
        for (size_t i=0; i<argv.size(); i++) { tmp[i] = argv[i].c_str(); }
        return self->configure(policyName.c_str(),
                               argv.size(),
                               (char**)&tmp[0]);
    }
SWIGINTERN bool yarp_os_RpcClient_write(yarp::os::RpcClient *self,yarp::os::Bottle &data1,yarp::os::Bottle &data2){
        return self->write(*((PortWriter*)(&data1)), *((PortReader*)(&data2)));
    }
SWIGINTERN yarp::os::Value *yarp_os_Things_asValue(yarp::os::Things *self){
        return self->cast_as<yarp::os::Value>();
    }
SWIGINTERN yarp::os::Bottle *yarp_os_Things_asBottle(yarp::os::Things *self){
        return self->cast_as<yarp::os::Bottle>();
    }
SWIGINTERN yarp::os::Property *yarp_os_Things_asProperty(yarp::os::Things *self){
        return self->cast_as<yarp::os::Property>();
    }
SWIGINTERN yarp::sig::Vector *yarp_os_Things_asVector(yarp::os::Things *self){
        return self->cast_as<yarp::sig::Vector>();
    }
SWIGINTERN yarp::sig::Matrix *yarp_os_Things_asMatrix(yarp::os::Things *self){
        return self->cast_as<yarp::sig::Matrix>();
    }
SWIGINTERN yarp::sig::Image *yarp_os_Things_asImage(yarp::os::Things *self){
        return self->cast_as<yarp::sig::Image>();
    }
SWIGINTERN yarp::sig::ImageOf< yarp::sig::PixelRgb > *yarp_os_Things_asImageOfPixelRgb(yarp::os::Things *self){
        return self->cast_as<yarp::sig::ImageOf<yarp::sig::PixelRgb> >();
    }
SWIGINTERN yarp::sig::ImageOf< yarp::sig::PixelBgr > *yarp_os_Things_asImageOfPixelBgr(yarp::os::Things *self){
        return self->cast_as<yarp::sig::ImageOf<yarp::sig::PixelBgr> >();
    }
SWIGINTERN yarp::sig::ImageOf< yarp::sig::PixelMono > *yarp_os_Things_asImageOfPixelMono(yarp::os::Things *self){
        return self->cast_as<yarp::sig::ImageOf<yarp::sig::PixelMono> >();
    }
SWIGINTERN double yarp_sig_Vector_get(yarp::sig::Vector *self,int j){
        return self->operator [](j);
    }
SWIGINTERN void yarp_sig_Vector_set(yarp::sig::Vector *self,int j,double v){
        self->operator [](j) = v;
    }
SWIGINTERN yarp::dev::IFrameGrabberImage *yarp_dev_PolyDriver_viewFrameGrabberImage(yarp::dev::PolyDriver *self){
        yarp::dev::IFrameGrabberImage *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IPositionControl *yarp_dev_PolyDriver_viewIPositionControl(yarp::dev::PolyDriver *self){
        yarp::dev::IPositionControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IVelocityControl *yarp_dev_PolyDriver_viewIVelocityControl(yarp::dev::PolyDriver *self){
        yarp::dev::IVelocityControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IEncoders *yarp_dev_PolyDriver_viewIEncoders(yarp::dev::PolyDriver *self){
        yarp::dev::IEncoders *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IPidControl *yarp_dev_PolyDriver_viewIPidControl(yarp::dev::PolyDriver *self){
        yarp::dev::IPidControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IAmplifierControl *yarp_dev_PolyDriver_viewIAmplifierControl(yarp::dev::PolyDriver *self){
        yarp::dev::IAmplifierControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IControlLimits *yarp_dev_PolyDriver_viewIControlLimits(yarp::dev::PolyDriver *self){
        yarp::dev::IControlLimits *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::ICartesianControl *yarp_dev_PolyDriver_viewICartesianControl(yarp::dev::PolyDriver *self){
        yarp::dev::ICartesianControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IGazeControl *yarp_dev_PolyDriver_viewIGazeControl(yarp::dev::PolyDriver *self){
      yarp::dev::IGazeControl *result;
      self->view(result);
      return result;
    }
SWIGINTERN yarp::dev::IImpedanceControl *yarp_dev_PolyDriver_viewIImpedanceControl(yarp::dev::PolyDriver *self){
        yarp::dev::IImpedanceControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::ITorqueControl *yarp_dev_PolyDriver_viewITorqueControl(yarp::dev::PolyDriver *self){
        yarp::dev::ITorqueControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IControlMode *yarp_dev_PolyDriver_viewIControlMode(yarp::dev::PolyDriver *self){
        yarp::dev::IControlMode *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IOpenLoopControl *yarp_dev_PolyDriver_viewIOpenLoopControl(yarp::dev::PolyDriver *self){
            yarp::dev::IOpenLoopControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN bool yarp_dev_IPidControl_setReferences__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->setReferences(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getReference__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getReference(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getReferences__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getReferences(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_setErrorLimits__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->setErrorLimits(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getErrorLimit__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getErrorLimit(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getErrorLimits__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getErrorLimits(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getError__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getError(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getErrors__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getErrors(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getOutput__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getOutput(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getOutputs__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getOutputs(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_setPid(yarp::dev::IPidControl *self,int j,yarp::dev::Pid pid){
        return self->setPid(j,pid);
    }
SWIGINTERN bool yarp_dev_IPidControl_setPids__SWIG_1(yarp::dev::IPidControl *self,std::vector< yarp::dev::Pid > pids){
        return self->setPids(&pids[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getPid(yarp::dev::IPidControl *self,int j,std::vector< yarp::dev::Pid > pid){
        return self->getPid(j,&pid[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getPids__SWIG_1(yarp::dev::IPidControl *self,std::vector< yarp::dev::Pid > pids){
        return self->getPids(&pids[0]);
    }
SWIGINTERN bool yarp_dev_IAmplifierControl_getCurrents__SWIG_1(yarp::dev::IAmplifierControl *self,std::vector< double > &data){
        return self->getCurrents(&data[0]);
    }
SWIGINTERN bool yarp_dev_IAmplifierControl_getCurrent__SWIG_1(yarp::dev::IAmplifierControl *self,int j,std::vector< double > &data){
        return self->getCurrent(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IControlLimits_getLimits__SWIG_1(yarp::dev::IControlLimits *self,int axis,std::vector< double > &min,std::vector< double > &max){
        return self->getLimits(axis, &min[0], &max[0]);
    }
SWIGINTERN bool yarp_dev_ICartesianControl_checkMotionDone__SWIG_1(yarp::dev::ICartesianControl *self,std::vector< bool > &flag){
      std::vector<char> data(flag.size());
      bool result = self->checkMotionDone((bool*)(&data[0]));
      for (size_t i=0; i<data.size(); i++) {
        flag[i] = data[i]!=0;
      }
      return result;
    }
SWIGINTERN bool yarp_dev_ICartesianControl_checkMotionDone__SWIG_2(yarp::dev::ICartesianControl *self){
        bool flag;
        if(self->checkMotionDone(&flag)) {
            return flag;
        } else {
            return false;
        }
    }
SWIGINTERN bool yarp_dev_ICartesianControl_isMotionDone(yarp::dev::ICartesianControl *self){
        bool data = true;
        self->checkMotionDone(&data);
        return data;
    }
SWIGINTERN bool yarp_dev_IGazeControl_getTrackingMode__SWIG_1(yarp::dev::IGazeControl *self){
        bool flag;

        if(self->getTrackingMode(&flag)) {
            return flag;
        } else {
            return false; //Not sure what is best to assume here...
        }
    }
SWIGINTERN double yarp_dev_IGazeControl_getNeckTrajTime__SWIG_1(yarp::dev::IGazeControl *self){
              double result;

              if(self->getNeckTrajTime(&result)) {
            return result;
        } else {
            return -1.0; //On error return -1.0
          }
    }
SWIGINTERN double yarp_dev_IGazeControl_getEyesTrajTime__SWIG_1(yarp::dev::IGazeControl *self){
        double result;

        if(self->getEyesTrajTime(&result)) {
            return result;
        } else {
            return -1.0; //On error return -1.0
        }
    }
SWIGINTERN bool yarp_dev_IGazeControl_checkMotionDone__SWIG_1(yarp::dev::IGazeControl *self){
          bool flag;
        if(self->checkMotionDone(&flag)) {
            return flag;
        } else {
            return false;
        }
    }
SWIGINTERN int yarp_dev_IPositionControl_getAxes__SWIG_1(yarp::dev::IPositionControl *self){
        int buffer;
        bool ok = self->getAxes(&buffer);
        if (!ok) return 0;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IPositionControl_positionMove__SWIG_2(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->positionMove(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_relativeMove__SWIG_2(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->relativeMove(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_setRefSpeeds__SWIG_1(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->setRefSpeeds(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefSpeed__SWIG_1(yarp::dev::IPositionControl *self,int j,std::vector< double > &data){
        return self->getRefSpeed(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefSpeeds__SWIG_1(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->getRefSpeeds(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefAcceleration__SWIG_1(yarp::dev::IPositionControl *self,int j,std::vector< double > &data){
        return self->getRefAcceleration(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefAccelerations__SWIG_1(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->getRefAccelerations(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_checkMotionDone__SWIG_2(yarp::dev::IPositionControl *self){
        bool result;
        bool ok = self->checkMotionDone(&result);
        if(!ok) { return 1; } //In case of error tell the motion has been completed
        return result;
    }
SWIGINTERN bool yarp_dev_IPositionControl_checkMotionDone__SWIG_3(yarp::dev::IPositionControl *self,std::vector< bool > &flag){
      // complication: vector<bool> is packed in C++
      // and isn't a regular container.
      std::vector<char> data(flag.size());
      bool result = self->checkMotionDone((bool*)(&data[0]));
      for (size_t i=0; i<data.size(); i++) {
        flag[i] = data[i]!=0;
      }
      return result;
    }
SWIGINTERN bool yarp_dev_IPositionControl_checkMotionDone__SWIG_4(yarp::dev::IPositionControl *self,int i,std::vector< bool > &flag){
      std::vector<char> data(flag.size());
      bool result = self->checkMotionDone(i,(bool*)(&data[0]));
      for (size_t i=0; i<data.size(); i++) {
        flag[i] = data[i]!=0;
      }
      return result;
    }
SWIGINTERN bool yarp_dev_IPositionControl_isMotionDone__SWIG_0(yarp::dev::IPositionControl *self,int i){
        bool buffer;
        self->checkMotionDone(i,&buffer);
        return buffer;
    }
SWIGINTERN bool yarp_dev_IPositionControl_isMotionDone__SWIG_1(yarp::dev::IPositionControl *self){
        int buffer;
        self->getAxes(&buffer);
        bool data = true;
        for (int i=0; i<buffer; i++) {
            bool buffer2;
            self->checkMotionDone(i,&buffer2);
            data = data && buffer2;
            }
        return data;
    }
SWIGINTERN int yarp_dev_IEncoders_getAxes__SWIG_1(yarp::dev::IEncoders *self){
        int buffer;
        bool ok = self->getAxes(&buffer);
        if (!ok) return 0;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IEncoders_setEncoders__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->setEncoders(&data[0]);
    }
SWIGINTERN double yarp_dev_IEncoders_getEncoder__SWIG_1(yarp::dev::IEncoders *self,int j){
        double data;
        bool ok = self->getEncoder(j, &data);
        if (!ok) return 0;
        return data;
    }
SWIGINTERN bool yarp_dev_IEncoders_getEncoders__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->getEncoders(&data[0]);
    }
SWIGINTERN double yarp_dev_IEncoders_getEncoderSpeed__SWIG_1(yarp::dev::IEncoders *self,int j){
        double data;
        bool ok = self->getEncoderSpeed(j, &data);
        if (!ok) return 0;
        return data;
    }
SWIGINTERN bool yarp_dev_IEncoders_getEncoderSpeeds__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->getEncoderSpeeds(&data[0]);
    }
SWIGINTERN double yarp_dev_IEncoders_getEncoderAcceleration__SWIG_1(yarp::dev::IEncoders *self,int j){
        double data;
        bool ok = self->getEncoderAcceleration(j, &data);
        if (!ok) return 0;
        return data;
    }
SWIGINTERN bool yarp_dev_IEncoders_getEncoderAccelerations__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->getEncoderAccelerations(&data[0]);
    }
SWIGINTERN int yarp_dev_IControlMode_getControlMode__SWIG_1(yarp::dev::IControlMode *self,int j){
        int buffer;
        bool ok = self->getControlMode(j, &buffer);
        if (!ok) return -1;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IControlMode_getControlModes__SWIG_1(yarp::dev::IControlMode *self,std::vector< int > &data){
        return self->getControlModes(&data[0]);
    }
SWIGINTERN int yarp_dev_IVelocityControl_getAxes__SWIG_1(yarp::dev::IVelocityControl *self){
        int buffer;
        bool ok = self->getAxes(&buffer);
        if (!ok) return 0;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IVelocityControl_velocityMove__SWIG_2(yarp::dev::IVelocityControl *self,std::vector< double > &data){
        return self->velocityMove(&data[0]);
    }
SWIGINTERN bool yarp_dev_IVelocityControl_setRefAccelerations__SWIG_1(yarp::dev::IVelocityControl *self,std::vector< double > &data){
        return self->setRefAccelerations(&data[0]);
    }
SWIGINTERN bool yarp_dev_IVelocityControl_getRefAcceleration__SWIG_1(yarp::dev::IVelocityControl *self,int j,std::vector< double > &data){
        return self->getRefAcceleration(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IVelocityControl_getRefAccelerations__SWIG_1(yarp::dev::IVelocityControl *self,std::vector< double > &data){
        return self->getRefAccelerations(&data[0]);
    }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< bool >::const_reference std_vector_Sl_bool_Sg__get(std::vector< bool > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_bool_Sg__set(std::vector< bool > *self,int i,std::vector< bool >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< yarp::dev::Pid >::const_reference std_vector_Sl_yarp_dev_Pid_Sg__get(std::vector< yarp::dev::Pid > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg__set(std::vector< yarp::dev::Pid > *self,int i,std::vector< yarp::dev::Pid >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

typedef yarp::sig::ImageOf<yarp::sig::PixelRgb> ImageRgb;
typedef yarp::os::TypedReader<ImageRgb> TypedReaderImageRgb;
typedef yarp::os::TypedReaderCallback<ImageRgb> TypedReaderCallbackImageRgb;
typedef yarp::os::BufferedPort<ImageRgb> BufferedPortImageRgb;


typedef yarp::sig::ImageOf<yarp::sig::PixelRgba> ImageRgba;
typedef yarp::os::TypedReader<ImageRgba> TypedReaderImageRgba;
typedef yarp::os::TypedReaderCallback<ImageRgba> TypedReaderCallbackImageRgba;
typedef yarp::os::BufferedPort<ImageRgba> BufferedPortImageRgba;


typedef yarp::sig::ImageOf<yarp::sig::PixelMono> ImageMono;
typedef yarp::os::TypedReader<ImageMono> TypedReaderImageMono;
typedef yarp::os::TypedReaderCallback<ImageMono> TypedReaderCallbackImageMono;
typedef yarp::os::BufferedPort<ImageMono> BufferedPortImageMono;


typedef yarp::sig::ImageOf<yarp::sig::PixelMono16> ImageMono16;
typedef yarp::os::TypedReader<ImageMono16> TypedReaderImageMono16;
typedef yarp::os::TypedReaderCallback<ImageMono16> TypedReaderCallbackImageMono16;
typedef yarp::os::BufferedPort<ImageMono16> BufferedPortImageMono16;


typedef yarp::sig::ImageOf<yarp::sig::PixelInt> ImageInt;
typedef yarp::os::TypedReader<ImageInt> TypedReaderImageInt;
typedef yarp::os::TypedReaderCallback<ImageInt> TypedReaderCallbackImageInt;
typedef yarp::os::BufferedPort<ImageInt> BufferedPortImageInt;


typedef yarp::os::TypedReader<Sound> TypedReaderSound;
typedef yarp::os::TypedReaderCallback<Sound> TypedReaderCallbackSound;
typedef yarp::os::BufferedPort<Sound> BufferedPortSound;

SWIGINTERN int yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__getPixel(yarp::sig::ImageOf< yarp::sig::PixelInt > *self,int x,int y){
        return self->pixel(x,y);
    }
SWIGINTERN void yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__setPixel(yarp::sig::ImageOf< yarp::sig::PixelInt > *self,int x,int y,int v){
        self->pixel(x,y) = v;
    }

typedef yarp::sig::ImageOf<yarp::sig::PixelFloat> ImageFloat;
typedef yarp::os::TypedReader<ImageFloat> TypedReaderImageFloat;
typedef yarp::os::TypedReaderCallback<ImageFloat> TypedReaderCallbackImageFloat;
typedef yarp::os::BufferedPort<ImageFloat> BufferedPortImageFloat;

SWIGINTERN float yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__getPixel(yarp::sig::ImageOf< yarp::sig::PixelFloat > *self,int x,int y){
       return self->pixel(x,y);
       }
SWIGINTERN void yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__setPixel(yarp::sig::ImageOf< yarp::sig::PixelFloat > *self,int x,int y,float v){
       self->pixel(x,y) = v;
       }

typedef yarp::sig::ImageOf<yarp::sig::PixelRgbFloat> ImageRgbFloat;
typedef yarp::os::TypedReader<ImageRgbFloat> TypedReaderImageRgbFloat;
typedef yarp::os::TypedReaderCallback<ImageRgbFloat> TypedReaderCallbackImageRgbFloat;
typedef yarp::os::BufferedPort<ImageRgbFloat> BufferedPortImageRgbFloat;


typedef unsigned char charArray;

SWIGINTERN charArray *new_charArray(int nelements){
  return new unsigned char[nelements];
}
SWIGINTERN void delete_charArray(charArray *self){
  delete [] self;
}
SWIGINTERN unsigned char charArray_getitem(charArray *self,int index){
  return self[index];
}
SWIGINTERN void charArray_setitem(charArray *self,int index,unsigned char value){
  self[index] = value;
}
SWIGINTERN unsigned char *charArray_cast(charArray *self){
  return self;
}
SWIGINTERN charArray *charArray_frompointer(unsigned char *t){
  return (charArray *) t;
}


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "yarpJAVA_wrap.h"

SwigDirector_PortReader::SwigDirector_PortReader(JNIEnv *jenv) : yarp::os::PortReader(), Swig::Director(jenv) {
}

SwigDirector_PortReader::~SwigDirector_PortReader() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_PortReader::read(yarp::os::ConnectionReader &reader) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jreader = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method yarp::os::PortReader::read.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(yarp::os::ConnectionReader **)&jreader = (yarp::os::ConnectionReader *) &reader; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_yarpJNI, Swig::director_methids[0], swigjobj, jreader);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

Type SwigDirector_PortReader::getReadType() {
  Type c_result = SwigValueInit< Type >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  Type *argp ;
  
  if (!swig_override[1]) {
    return yarp::os::PortReader::getReadType();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_yarpJNI, Swig::director_methids[1], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(Type **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type Type");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_PortReader::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "read", "(Lyarp/ConnectionReader;)Z", NULL 
    },
    {
      "getReadType", "()Lyarp/SWIGTYPE_p_Type;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("yarp/PortReader");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Thread::SwigDirector_Thread(JNIEnv *jenv) : yarp::os::Thread(), Swig::Director(jenv) {
}

SwigDirector_Thread::~SwigDirector_Thread() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Thread::run() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method yarp::os::Thread::run.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_yarpJNI, Swig::director_methids[2], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Thread::onStop() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    yarp::os::Thread::onStop();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_yarpJNI, Swig::director_methids[3], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Thread::beforeStart() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    yarp::os::Thread::beforeStart();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_yarpJNI, Swig::director_methids[4], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Thread::afterStart(bool success) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jsuccess  ;
  
  if (!swig_override[3]) {
    yarp::os::Thread::afterStart(success);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsuccess = (jboolean) success;
    jenv->CallStaticVoidMethod(Swig::jclass_yarpJNI, Swig::director_methids[5], swigjobj, jsuccess);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_Thread::threadInit() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return yarp::os::Thread::threadInit();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_yarpJNI, Swig::director_methids[6], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Thread::threadRelease() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    yarp::os::Thread::threadRelease();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_yarpJNI, Swig::director_methids[7], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Thread::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()V", NULL 
    },
    {
      "onStop", "()V", NULL 
    },
    {
      "beforeStart", "()V", NULL 
    },
    {
      "afterStart", "(Z)V", NULL 
    },
    {
      "threadInit", "()Z", NULL 
    },
    {
      "threadRelease", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("yarp/Thread");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_RFModule::SwigDirector_RFModule(JNIEnv *jenv) : yarp::os::RFModule(), Swig::Director(jenv) {
}

SwigDirector_RFModule::~SwigDirector_RFModule() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


double SwigDirector_RFModule::getPeriod() {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return yarp::os::RFModule::getPeriod();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_yarpJNI, Swig::director_methids[8], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_RFModule::updateModule() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method yarp::os::RFModule::updateModule.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_yarpJNI, Swig::director_methids[9], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_RFModule::runModule() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return yarp::os::RFModule::runModule();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_yarpJNI, Swig::director_methids[10], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_RFModule::runModule(yarp::os::ResourceFinder &rf) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrf = 0 ;
  
  if (!swig_override[3]) {
    return yarp::os::RFModule::runModule(rf);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(yarp::os::ResourceFinder **)&jrf = (yarp::os::ResourceFinder *) &rf; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_yarpJNI, Swig::director_methids[11], swigjobj, jrf);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_RFModule::configure(yarp::os::ResourceFinder &rf) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrf = 0 ;
  
  if (!swig_override[4]) {
    return yarp::os::RFModule::configure(rf);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(yarp::os::ResourceFinder **)&jrf = (yarp::os::ResourceFinder *) &rf; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_yarpJNI, Swig::director_methids[12], swigjobj, jrf);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_RFModule::respond(yarp::os::Bottle const &command, yarp::os::Bottle &reply) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcommand = 0 ;
  jlong jreply = 0 ;
  
  if (!swig_override[5]) {
    return yarp::os::RFModule::respond(command,reply);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(yarp::os::Bottle **)&jcommand = (yarp::os::Bottle *) &command; 
    *(yarp::os::Bottle **)&jreply = (yarp::os::Bottle *) &reply; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_yarpJNI, Swig::director_methids[13], swigjobj, jcommand, jreply);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_RFModule::attach(yarp::os::Port &source) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsource = 0 ;
  
  if (!swig_override[6]) {
    return yarp::os::RFModule::attach(source);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(yarp::os::Port **)&jsource = (yarp::os::Port *) &source; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_yarpJNI, Swig::director_methids[14], swigjobj, jsource);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_RFModule::attach(yarp::os::RpcServer &source) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsource = 0 ;
  
  if (!swig_override[7]) {
    return yarp::os::RFModule::attach(source);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(yarp::os::RpcServer **)&jsource = (yarp::os::RpcServer *) &source; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_yarpJNI, Swig::director_methids[15], swigjobj, jsource);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_RFModule::interruptModule() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[8]) {
    return yarp::os::RFModule::interruptModule();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_yarpJNI, Swig::director_methids[16], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_RFModule::close() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    return yarp::os::RFModule::close();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_yarpJNI, Swig::director_methids[17], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_RFModule::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getPeriod", "()D", NULL 
    },
    {
      "updateModule", "()Z", NULL 
    },
    {
      "runModule", "()I", NULL 
    },
    {
      "runModule", "(Lyarp/ResourceFinder;)I", NULL 
    },
    {
      "configure", "(Lyarp/ResourceFinder;)Z", NULL 
    },
    {
      "respond", "(Lyarp/Bottle;Lyarp/Bottle;)Z", NULL 
    },
    {
      "attach", "(Lyarp/Port;)Z", NULL 
    },
    {
      "attach_rpc_server", "(Lyarp/RpcServer;)Z", NULL 
    },
    {
      "interruptModule", "()Z", NULL 
    },
    {
      "close", "()Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("yarp/RFModule");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 10; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_PropertyCallback::SwigDirector_PropertyCallback(JNIEnv *jenv) : yarp::os::TypedReaderCallback< Property >(), Swig::Director(jenv) {
}

SwigDirector_PropertyCallback::~SwigDirector_PropertyCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_PropertyCallback::onRead(yarp::os::Property &datum) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdatum = 0 ;
  
  if (!swig_override[0]) {
    yarp::os::TypedReaderCallback< Property >::onRead(datum);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(yarp::os::Property **)&jdatum = (yarp::os::Property *) &datum; 
    jenv->CallStaticVoidMethod(Swig::jclass_yarpJNI, Swig::director_methids[18], swigjobj, jdatum);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_PropertyCallback::onRead(yarp::os::Property &datum, yarp::os::TypedReader< yarp::os::Property > const &reader) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdatum = 0 ;
  jlong jreader = 0 ;
  
  if (!swig_override[1]) {
    yarp::os::TypedReaderCallback< Property >::onRead(datum,reader);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(yarp::os::Property **)&jdatum = (yarp::os::Property *) &datum; 
    *(yarp::os::TypedReader< yarp::os::Property > **)&jreader = (yarp::os::TypedReader< yarp::os::Property > *) &reader; 
    jenv->CallStaticVoidMethod(Swig::jclass_yarpJNI, Swig::director_methids[19], swigjobj, jdatum, jreader);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_PropertyCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onRead", "(Lyarp/Property;)V", NULL 
    },
    {
      "onRead", "(Lyarp/Property;Lyarp/TypedReaderProperty;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("yarp/PropertyCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_BottleCallback::SwigDirector_BottleCallback(JNIEnv *jenv) : yarp::os::TypedReaderCallback< Bottle >(), Swig::Director(jenv) {
}

SwigDirector_BottleCallback::~SwigDirector_BottleCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_BottleCallback::onRead(yarp::os::Bottle &datum) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdatum = 0 ;
  
  if (!swig_override[0]) {
    yarp::os::TypedReaderCallback< Bottle >::onRead(datum);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(yarp::os::Bottle **)&jdatum = (yarp::os::Bottle *) &datum; 
    jenv->CallStaticVoidMethod(Swig::jclass_yarpJNI, Swig::director_methids[20], swigjobj, jdatum);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BottleCallback::onRead(yarp::os::Bottle &datum, yarp::os::TypedReader< yarp::os::Bottle > const &reader) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdatum = 0 ;
  jlong jreader = 0 ;
  
  if (!swig_override[1]) {
    yarp::os::TypedReaderCallback< Bottle >::onRead(datum,reader);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(yarp::os::Bottle **)&jdatum = (yarp::os::Bottle *) &datum; 
    *(yarp::os::TypedReader< yarp::os::Bottle > **)&jreader = (yarp::os::TypedReader< yarp::os::Bottle > *) &reader; 
    jenv->CallStaticVoidMethod(Swig::jclass_yarpJNI, Swig::director_methids[21], swigjobj, jdatum, jreader);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_BottleCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onRead", "(Lyarp/Bottle;)V", NULL 
    },
    {
      "onRead", "(Lyarp/Bottle;Lyarp/TypedReaderBottle;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("yarp/BottleCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_YARP_1CONSTSTRING_1IS_1STD_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PortReport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::PortReport *arg1 = (yarp::os::PortReport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::PortReport **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReport_1report(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::PortReport *arg1 = (yarp::os::PortReport *) 0 ;
  yarp::os::PortInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortReport **)&jarg1; 
  arg2 = *(yarp::os::PortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortInfo const & reference is null");
    return ;
  } 
  (arg1)->report((yarp::os::PortInfo const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Contact_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  int arg2 ;
  yarp::os::Contact *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  result = (yarp::os::Contact *)new yarp::os::Contact((yarp::os::ConstString const &)*arg1,arg2);
  *(yarp::os::Contact **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1empty(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::Contact::empty();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1invalid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::Contact::invalid();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1byName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = yarp::os::Contact::byName((std::string const &)*arg1);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1byCarrier(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = yarp::os::Contact::byCarrier((std::string const &)*arg1);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1byConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Searchable *arg1 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Searchable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Searchable & reference is null");
    return 0;
  } 
  result = yarp::os::Contact::byConfig(*arg1);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1addCarrier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((yarp::os::Contact const *)arg1)->addCarrier((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1addHost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((yarp::os::Contact const *)arg1)->addHost((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1addPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  int arg2 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((yarp::os::Contact const *)arg1)->addPort(arg2);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1bySocket(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  int arg3 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = yarp::os::Contact::bySocket((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1addSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  int arg4 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  result = ((yarp::os::Contact const *)arg1)->addSocket((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3,arg4);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1addNested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  NestedContact *arg2 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  arg2 = *(NestedContact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NestedContact const & reference is null");
    return 0;
  } 
  result = ((yarp::os::Contact const *)arg1)->addNested((NestedContact const &)*arg2);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1addName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((yarp::os::Contact const *)arg1)->addName((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Contact_1convertHostToIp(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = yarp::os::Contact::convertHostToIp((char const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Contact_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Contact *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (yarp::os::Contact *)new yarp::os::Contact((yarp::os::Contact const &)*arg1);
  *(yarp::os::Contact **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Contact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Contact_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = ((yarp::os::Contact const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Contact_1getHost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = ((yarp::os::Contact const *)arg1)->getHost();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Contact_1getCarrier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = ((yarp::os::Contact const *)arg1)->getCarrier();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1getNested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  NestedContact *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = (NestedContact *) &((yarp::os::Contact const *)arg1)->getNested();
  *(NestedContact **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Contact_1getPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = (int)((yarp::os::Contact const *)arg1)->getPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Contact_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = ((yarp::os::Contact const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Contact_1toURI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = ((yarp::os::Contact const *)arg1)->toURI();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contact_1fromString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = yarp::os::Contact::fromString((std::string const &)*arg1);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contact_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = (bool)((yarp::os::Contact const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Contact_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Contact *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Contact *)new yarp::os::Contact();
  *(yarp::os::Contact **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contact_1hasTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = (bool)((yarp::os::Contact const *)arg1)->hasTimeout();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contact_1setTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setTimeout(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contact_1setNested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::NestedContact *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  arg2 = *(yarp::os::NestedContact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::NestedContact const & reference is null");
    return ;
  } 
  (arg1)->setNested((yarp::os::NestedContact const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_yarp_yarpJNI_Contact_1getTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = (float)((yarp::os::Contact const *)arg1)->getTimeout();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Contact_1getRegName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  result = ((yarp::os::Contact const *)arg1)->getRegName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contact_1setHost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setHost((yarp::os::ConstString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contact_1setPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPort(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ConnectionReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionReader_1expectBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->expectBlock((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ConnectionReader_1expectText_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  int arg2 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->expectText(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ConnectionReader_1expectText_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (arg1)->expectText();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ConnectionReader_1expectInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (int)(arg1)->expectInt();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionReader_1expectInt64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  YARP_INT64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (arg1)->expectInt64();
  *(YARP_INT64 **)&jresult = new YARP_INT64((const YARP_INT64 &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_ConnectionReader_1expectDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (double)(arg1)->expectDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionReader_1isTextMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (bool)(arg1)->isTextMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionReader_1isBareMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (bool)(arg1)->isBareMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionReader_1convertTextMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (bool)(arg1)->convertTextMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionReader_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionReader_1getWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (yarp::os::ConnectionWriter *)(arg1)->getWriter();
  *(yarp::os::ConnectionWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionReader_1readEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  Bytes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (arg1)->readEnvelope();
  *(Bytes **)&jresult = new Bytes((const Bytes &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionReader_1getReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::Portable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (yarp::os::Portable *)(arg1)->getReference();
  *(yarp::os::Portable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionReader_1getRemoteContact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (arg1)->getRemoteContact();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionReader_1getLocalContact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (arg1)->getLocalContact();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionReader_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionReader_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (bool)(arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionReader_1isError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (bool)(arg1)->isError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionReader_1requestDrop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  (arg1)->requestDrop();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionReader_1getConnectionModifiers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  Searchable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  result = (Searchable *) &(arg1)->getConnectionModifiers();
  *(Searchable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionReader_1pushInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->pushInt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionReader_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionReader_1createConnectionReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  yarp::os::InputStream *arg1 = 0 ;
  yarp::os::ConnectionReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::InputStream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::InputStream & reference is null");
    return 0;
  } 
  result = (yarp::os::ConnectionReader *)yarp::os::ConnectionReader::createConnectionReader(*arg1);
  *(yarp::os::ConnectionReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionReader_1readFromStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::PortReader *arg1 = 0 ;
  yarp::os::InputStream *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortReader **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::InputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::InputStream & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::ConnectionReader::readFromStream(*arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ConnectionWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1appendBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (size_t)jarg3; 
  (arg1)->appendBlock((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1appendInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->appendInt(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1appendInt64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  YARP_INT64 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  arg2 = *(YARP_INT64 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "YARP_INT64 const & reference is null");
    return ;
  } 
  (arg1)->appendInt64((YARP_INT64 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1appendDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->appendDouble(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1appendString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->appendString((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1appendString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->appendString((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1appendExternalBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (size_t)jarg3; 
  (arg1)->appendExternalBlock((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionWriter_1isTextMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  result = (bool)(arg1)->isTextMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionWriter_1isBareMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  result = (bool)(arg1)->isBareMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1declareSizes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  (arg1)->declareSizes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1setReplyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplyHandler(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1setReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::Portable *arg2 = (yarp::os::Portable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  arg2 = *(yarp::os::Portable **)&jarg2; 
  (arg1)->setReference(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionWriter_1convertTextMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  result = (bool)(arg1)->convertTextMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionWriter_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionWriter_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  result = (bool)(arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionWriter_1isError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  result = (bool)(arg1)->isError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1requestDrop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  (arg1)->requestDrop();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionWriter_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  result = (bool)((yarp::os::ConnectionWriter const *)arg1)->isNull();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionWriter_1getBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::SizedWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  result = (yarp::os::SizedWriter *)(arg1)->getBuffer();
  *(yarp::os::SizedWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ConnectionWriter_1appendRawString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->appendRawString((yarp::os::ConstString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ConnectionWriter_1createBufferedConnectionWriter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::ConnectionWriter *)yarp::os::ConnectionWriter::createBufferedConnectionWriter();
  *(yarp::os::ConnectionWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ConnectionWriter_1writeToStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::PortWriter *arg1 = 0 ;
  yarp::os::OutputStream *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::OutputStream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::OutputStream & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::ConnectionWriter::writeToStream(*arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PortReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::PortReader *arg1 = (yarp::os::PortReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::PortReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PortReader_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::PortReader *arg1 = (yarp::os::PortReader *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::PortReader **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortReader_1getReadType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::PortReader *arg1 = (yarp::os::PortReader *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortReader **)&jarg1; 
  result = (arg1)->getReadType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortReader_1getReadTypeSwigExplicitPortReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::PortReader *arg1 = (yarp::os::PortReader *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortReader **)&jarg1; 
  result = (arg1)->yarp::os::PortReader::getReadType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PortReader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::PortReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::PortReader *)new SwigDirector_PortReader(jenv);
  *(yarp::os::PortReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReader_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  yarp::os::PortReader *obj = *((yarp::os::PortReader **)&objarg);
  (void)jcls;
  SwigDirector_PortReader *director = dynamic_cast<SwigDirector_PortReader *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReader_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  yarp::os::PortReader *obj = *((yarp::os::PortReader **)&objarg);
  SwigDirector_PortReader *director = dynamic_cast<SwigDirector_PortReader *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PortWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::PortWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PortWriter_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::PortWriter **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortWriter_1onCompletion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriter **)&jarg1; 
  (arg1)->onCompletion();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortWriter_1onCommencement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriter **)&jarg1; 
  (arg1)->onCommencement();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortWriter_1getWriteType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriter **)&jarg1; 
  result = (arg1)->getWriteType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Portable_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Portable **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Portable_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Portable **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Portable_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Portable **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Portable_1copyPortable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::PortWriter *arg1 = 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::PortWriter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::Portable::copyPortable(*arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Portable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Portable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SearchReport_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_SearchReport_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->key);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SearchReport_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_SearchReport_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->value);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SearchReport_1isFound_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isFound = arg2;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_SearchReport_1isFound_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  result = (bool) ((arg1)->isFound);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SearchReport_1isGroup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isGroup = arg2;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_SearchReport_1isGroup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  result = (bool) ((arg1)->isGroup);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SearchReport_1isComment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isComment = arg2;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_SearchReport_1isComment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  result = (bool) ((arg1)->isComment);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SearchReport_1isDefault_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDefault = arg2;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_SearchReport_1isDefault_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  result = (bool) ((arg1)->isDefault);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1SearchReport(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::SearchReport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::SearchReport *)new yarp::os::SearchReport();
  *(yarp::os::SearchReport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1SearchReport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::SearchReport **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1SearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::SearchMonitor *arg1 = (yarp::os::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::SearchMonitor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SearchMonitor_1report(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  yarp::os::SearchMonitor *arg1 = (yarp::os::SearchMonitor *) 0 ;
  yarp::os::SearchReport *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::SearchMonitor **)&jarg1; 
  arg2 = *(yarp::os::SearchReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::SearchReport const & reference is null");
    return ;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->report((yarp::os::SearchReport const &)*arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Searchable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Searchable_1check_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Searchable_1check_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Searchable_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Value *) &((yarp::os::Searchable const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Searchable_1findGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Bottle *) &((yarp::os::Searchable const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Searchable_1findGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (yarp::os::Bottle *) &((yarp::os::Searchable const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Searchable_1check_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  yarp::os::ConstString arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Searchable_1check_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  result = ((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Searchable_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  result = (bool)((yarp::os::Searchable const *)arg1)->isNull();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Searchable_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  result = ((yarp::os::Searchable const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Searchable_1setMonitor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchMonitor *arg2 = (yarp::os::SearchMonitor *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  arg2 = *(yarp::os::SearchMonitor **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setMonitor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Searchable_1setMonitor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchMonitor *arg2 = (yarp::os::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  arg2 = *(yarp::os::SearchMonitor **)&jarg2; 
  (arg1)->setMonitor(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Searchable_1getMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  result = (yarp::os::SearchMonitor *)((yarp::os::Searchable const *)arg1)->getMonitor();
  *(yarp::os::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Searchable_1getMonitorContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  result = ((yarp::os::Searchable const *)arg1)->getMonitorContext();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Searchable_1reportToMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Searchable **)&jarg1; 
  arg2 = *(yarp::os::SearchReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::SearchReport const & reference is null");
    return ;
  } 
  ((yarp::os::Searchable const *)arg1)->reportToMonitor((yarp::os::SearchReport const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1check_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1check_1_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1check_1_1SWIG_10_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  yarp::os::ConstString arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1check_1_1SWIG_10_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  result = ((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1findGroup_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Bottle *) &((yarp::os::Value const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1findGroup_1_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (yarp::os::Bottle *) &((yarp::os::Value const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Value_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Value *)new yarp::os::Value();
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Value *)new yarp::os::Value(arg1,arg2);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Value_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (yarp::os::Value *)new yarp::os::Value(arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Value_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (yarp::os::Value *)new yarp::os::Value(arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Value_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  bool arg2 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Value *)new yarp::os::Value((yarp::os::ConstString const &)*arg1,arg2);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Value_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (yarp::os::Value *)new yarp::os::Value((yarp::os::ConstString const &)*arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Value_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (yarp::os::Value *)new yarp::os::Value(arg1,arg2);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Value_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  result = (yarp::os::Value *)new yarp::os::Value((yarp::os::Value const &)*arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Value **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isBool();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isInt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isInt64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isInt64();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isString();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isDouble();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isList();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isDict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isDict();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isVocab(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isVocab();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isBlob();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1asBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->asBool();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Value_1asInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (int)((yarp::os::Value const *)arg1)->asInt();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1asInt64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  YARP_INT64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = ((yarp::os::Value const *)arg1)->asInt64();
  *(YARP_INT64 **)&jresult = new YARP_INT64((const YARP_INT64 &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Value_1asVocab(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (int)((yarp::os::Value const *)arg1)->asVocab();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Value_1asDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (double)((yarp::os::Value const *)arg1)->asDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Value_1asString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = ((yarp::os::Value const *)arg1)->asString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1asList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (yarp::os::Bottle *)((yarp::os::Value const *)arg1)->asList();
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1asDict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (yarp::os::Property *)((yarp::os::Value const *)arg1)->asDict();
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1asSearchable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Searchable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (yarp::os::Searchable *)((yarp::os::Value const *)arg1)->asSearchable();
  *(yarp::os::Searchable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Value_1asBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (char *)((yarp::os::Value const *)arg1)->asBlob();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1asBlobLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = ((yarp::os::Value const *)arg1)->asBlobLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Value *) &((yarp::os::Value const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  arg2 = *(yarp::os::Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  result = (bool)((yarp::os::Value const *)arg1)->operator ==((yarp::os::Value const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1notEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  arg2 = *(yarp::os::Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  result = (bool)((yarp::os::Value const *)arg1)->operator !=((yarp::os::Value const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((yarp::os::Value const *)arg1)->operator ==((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1notEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((yarp::os::Value const *)arg1)->operator !=((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Value_1fromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->fromString((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Value_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = ((yarp::os::Value const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (yarp::os::Value *)((yarp::os::Value const *)arg1)->create();
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1clone_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (yarp::os::Value *)((yarp::os::Value const *)arg1)->clone();
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Value_1getCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (int)((yarp::os::Value const *)arg1)->getCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isNull();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Value_1isLeaf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = (bool)((yarp::os::Value const *)arg1)->isLeaf();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1makeInt(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (yarp::os::Value *)yarp::os::Value::makeInt(arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1makeDouble(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (yarp::os::Value *)yarp::os::Value::makeDouble(arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1makeString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (yarp::os::Value *)yarp::os::Value::makeString((std::string const &)*arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1makeVocab_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (yarp::os::Value *)yarp::os::Value::makeVocab(arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1makeVocab_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (yarp::os::Value *)yarp::os::Value::makeVocab((std::string const &)*arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1makeBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (yarp::os::Value *)yarp::os::Value::makeBlob(arg1,arg2);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1makeList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Value *)yarp::os::Value::makeList();
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1makeList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (yarp::os::Value *)yarp::os::Value::makeList((char const *)arg1);
  *(yarp::os::Value **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1makeValue(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (yarp::os::Value *)yarp::os::Value::makeValue((std::string const &)*arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1getNullValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Value *) &yarp::os::Value::getNullValue();
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Value_1toString_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Value **)&jarg1; 
  result = yarp_os_Value_toString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Vocab_1encode(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::NetInt32 result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (yarp::os::NetInt32)yarp::os::Vocab::encode((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Vocab_1decode(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  yarp::os::NetInt32 arg1 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (yarp::os::NetInt32)jarg1; 
  result = yarp::os::Vocab::decode(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Vocab(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Vocab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Vocab *)new yarp::os::Vocab();
  *(yarp::os::Vocab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Vocab(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Vocab *arg1 = (yarp::os::Vocab *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Vocab **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Contactable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = (bool)(arg1)->open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1open_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1open_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contactable_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = ((yarp::os::Contactable const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Contactable_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = ((yarp::os::Contactable const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1setEnvelope_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Contactable_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Contactable_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contactable_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Contactable_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1setReadOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  (arg1)->setReadOnly();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1setWriteOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  (arg1)->setWriteOnly();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1setRpcServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  (arg1)->setRpcServer();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1setRpcClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  (arg1)->setRpcClient();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1setCallbackLock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1setCallbackLock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = (bool)(arg1)->setCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Contactable_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Contactable_1setEnvelope_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Portable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Contactable **)&jarg1; 
  arg2 = *(yarp::os::Portable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Portable & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_Contactable_setEnvelope__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_UnbufferedContactable_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::UnbufferedContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortWriter **)&jarg3; 
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_UnbufferedContactable_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::UnbufferedContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_UnbufferedContactable_1write_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::os::UnbufferedContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::PortWriter **)&jarg4; 
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_UnbufferedContactable_1write_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::UnbufferedContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_UnbufferedContactable_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::UnbufferedContactable **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_UnbufferedContactable_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::UnbufferedContactable **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_UnbufferedContactable_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::UnbufferedContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->reply(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_UnbufferedContactable_1replyAndDrop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::UnbufferedContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->replyAndDrop(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1UnbufferedContactable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::UnbufferedContactable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Port(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Port *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Port *)new yarp::os::Port();
  *(yarp::os::Port **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Port(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Port **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1openFake(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->openFake((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Port_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = ((yarp::os::Port const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortWriter **)&jarg3; 
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1write_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::PortWriter **)&jarg4; 
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1write_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1reply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->reply(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1replyAndDrop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->replyAndDrop(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1setReaderCreator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  PortReaderCreator *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(PortReaderCreator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PortReaderCreator & reference is null");
    return ;
  } 
  (arg1)->setReaderCreator(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1enableBackgroundWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableBackgroundWrite(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Port_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Port_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1setAdminMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAdminMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1setAdminMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  (arg1)->setAdminMode();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1setTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->setTimeout(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1setVerbosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setVerbosity(arg2);
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Port_1getVerbosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = (int)(arg1)->getVerbosity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Port_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Port_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1sharedOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::Port **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->sharedOpen(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = (bool)((yarp::os::Port const *)arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1setCallbackLock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1setCallbackLock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = (bool)(arg1)->setCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Port_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1write_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_4(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1write_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Property & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_5(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1write_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_6(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1write_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_7(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1write_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Bottle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_8(arg1,*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1write_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_Port_write__SWIG_9(arg1,*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Port_1reply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Port **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_Port_reply__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1open_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = (bool)(arg1)->open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1open_1_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1open_1_1SWIG_10_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1open_1_1SWIG_10_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_AbstractContactable_1asPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Port *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = (yarp::os::Port *) &(arg1)->asPort();
  *(yarp::os::Port **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_AbstractContactable_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = ((yarp::os::AbstractContactable const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_AbstractContactable_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = ((yarp::os::AbstractContactable const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_AbstractContactable_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_AbstractContactable_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_AbstractContactable_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_AbstractContactable_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortWriter **)&jarg3; 
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1write_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::PortWriter **)&jarg4; 
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1write_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->reply(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1replyAndDrop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->replyAndDrop(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1setCallbackLock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1setCallbackLock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = (bool)(arg1)->setCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_AbstractContactable_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_AbstractContactable_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1AbstractContactable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::AbstractContactable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_NetworkBase_1initMinimum(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  yarp::os::NetworkBase::initMinimum();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_NetworkBase_1autoInitMinimum(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  yarp::os::NetworkBase::autoInitMinimum();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_NetworkBase_1finiMinimum(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  yarp::os::NetworkBase::finiMinimum();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1connect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1connect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1connect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1connect_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::ContactStyle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ContactStyle const & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::ContactStyle const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1disconnect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)yarp::os::NetworkBase::disconnect((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1disconnect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::os::NetworkBase::disconnect((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1disconnect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::ContactStyle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ContactStyle const & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::disconnect((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::ContactStyle const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1isConnected_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)yarp::os::NetworkBase::isConnected((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1isConnected_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::os::NetworkBase::isConnected((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1isConnected_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::ContactStyle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ContactStyle const & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::isConnected((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::ContactStyle const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (bool)yarp::os::NetworkBase::exists((std::string const &)*arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)yarp::os::NetworkBase::exists((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1exists_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ContactStyle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(yarp::os::ContactStyle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ContactStyle const & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::exists((std::string const &)*arg1,(yarp::os::ContactStyle const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1sync_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (bool)yarp::os::NetworkBase::sync((std::string const &)*arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1sync_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)yarp::os::NetworkBase::sync((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_NetworkBase_1main(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  char **arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = (int)yarp::os::NetworkBase::main(arg1,arg2);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_NetworkBase_1runNameServer(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  char **arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = (int)yarp::os::NetworkBase::runNameServer(arg1,arg2);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_NetworkBase_1assertion(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  yarp::os::NetworkBase::assertion(arg1);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_NetworkBase_1queryName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = yarp::os::NetworkBase::queryName((std::string const &)*arg1);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_NetworkBase_1registerName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = yarp::os::NetworkBase::registerName((std::string const &)*arg1);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_NetworkBase_1registerContact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = yarp::os::NetworkBase::registerContact((yarp::os::Contact const &)*arg1);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_NetworkBase_1unregisterName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = yarp::os::NetworkBase::unregisterName((std::string const &)*arg1);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_NetworkBase_1unregisterContact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = yarp::os::NetworkBase::unregisterContact((yarp::os::Contact const &)*arg1);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1setProperty(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::setProperty((char const *)arg1,(char const *)arg2,(yarp::os::Value const &)*arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_NetworkBase_1getProperty(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (yarp::os::Value *)yarp::os::NetworkBase::getProperty((char const *)arg1,(char const *)arg2);
  *(yarp::os::Value **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_NetworkBase_1getNameServerName(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::NetworkBase::getNameServerName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_NetworkBase_1getNameServerContact(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::NetworkBase::getNameServerContact();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1setNameServerName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)yarp::os::NetworkBase::setNameServerName((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1setLocalMode(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jboolean jresult = 0 ;
  bool arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (bool)yarp::os::NetworkBase::setLocalMode(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1getLocalMode(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)yarp::os::NetworkBase::getLocalMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_NetworkBase_1readString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  bool *arg1 = (bool *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  result = yarp::os::NetworkBase::readString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_NetworkBase_1readString_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::NetworkBase::readString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jdouble jarg6) {
  jboolean jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1write_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1write_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1write_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::ContactStyle *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::ContactStyle **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ContactStyle const & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,(yarp::os::ContactStyle const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1writeToNameServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::PortWriter *arg1 = 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::PortWriter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::ContactStyle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ContactStyle const & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::writeToNameServer(*arg1,*arg2,(yarp::os::ContactStyle const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1write_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::write((std::string const &)*arg1,*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1checkNetwork_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)yarp::os::NetworkBase::checkNetwork();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1checkNetwork_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jboolean jresult = 0 ;
  double arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (bool)yarp::os::NetworkBase::checkNetwork(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1initialized(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)yarp::os::NetworkBase::initialized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_NetworkBase_1setVerbosity(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  yarp::os::NetworkBase::setVerbosity(arg1);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_NetworkBase_1queryBypass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NameStore *arg1 = (NameStore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NameStore **)&jarg1; 
  yarp::os::NetworkBase::queryBypass(arg1);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_NetworkBase_1getQueryBypass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NameStore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NameStore *)yarp::os::NetworkBase::getQueryBypass();
  *(NameStore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_NetworkBase_1getEnvironment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  result = yarp::os::NetworkBase::getEnvironment((char const *)arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_NetworkBase_1getEnvironment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = yarp::os::NetworkBase::getEnvironment((char const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_NetworkBase_1setEnvironment(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  yarp::os::NetworkBase::setEnvironment((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_NetworkBase_1unsetEnvironment(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  yarp::os::ConstString *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  yarp::os::NetworkBase::unsetEnvironment((std::string const &)*arg1);
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_NetworkBase_1getDirectorySeparator(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::NetworkBase::getDirectorySeparator();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_NetworkBase_1getPathSeparator(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::NetworkBase::getPathSeparator();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1registerCarrier(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)yarp::os::NetworkBase::registerCarrier((char const *)arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_NetworkBase_1lock(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  yarp::os::NetworkBase::lock();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_NetworkBase_1unlock(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  yarp::os::NetworkBase::unlock();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1localNetworkAllocation(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)yarp::os::NetworkBase::localNetworkAllocation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_NetworkBase_1detectNameServer(JNIEnv *jenv, jclass jcls, jboolean jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = *(bool **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = yarp::os::NetworkBase::detectNameServer(arg1,*arg2,*arg3);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1setNameServerContact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::setNameServerContact(*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_NetworkBase_1getConfigFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = yarp::os::NetworkBase::getConfigFile((char const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_NetworkBase_1getDefaultPortRange(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)yarp::os::NetworkBase::getDefaultPortRange();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1setConnectionQos_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::QosStyle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::QosStyle const & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::QosStyle **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::QosStyle const & reference is null");
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3,(yarp::os::QosStyle const &)*arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1setConnectionQos_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::QosStyle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::QosStyle const & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::QosStyle **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::QosStyle const & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3,(yarp::os::QosStyle const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1setConnectionQos_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::QosStyle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::QosStyle const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1setConnectionQos_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::QosStyle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::QosStyle const & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1getConnectionQos_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::QosStyle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::QosStyle & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::QosStyle **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::QosStyle & reference is null");
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)yarp::os::NetworkBase::getConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,*arg3,*arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1getConnectionQos_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::QosStyle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::QosStyle & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::QosStyle **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::QosStyle & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::NetworkBase::getConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1write_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Bottle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_NetworkBase_write__SWIG_6((char const *)arg1,*arg2,*arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1write_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  yarp::os::ContactStyle *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Bottle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::ContactStyle **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ContactStyle const & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_NetworkBase_write__SWIG_7((yarp::os::Contact const &)*arg1,*arg2,*arg3,(yarp::os::ContactStyle const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NetworkBase_1write_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jdouble jarg6) {
  jboolean jresult = 0 ;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::Contact **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Bottle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  result = (bool)yarp_os_NetworkBase_write__SWIG_8((yarp::os::Contact const &)*arg1,*arg2,*arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1NetworkBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::NetworkBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::NetworkBase *)new yarp::os::NetworkBase();
  *(yarp::os::NetworkBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1NetworkBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::NetworkBase *arg1 = (yarp::os::NetworkBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::NetworkBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Network(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Network *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Network *)new yarp::os::Network();
  *(yarp::os::Network **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Network(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Network *arg1 = (yarp::os::Network *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Network **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Network_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  yarp::os::Network::init();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Network_1fini(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  yarp::os::Network::fini();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PortablePairBase_1readPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionReader *arg1 = 0 ;
  yarp::os::Portable *arg2 = 0 ;
  yarp::os::Portable *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::ConnectionReader **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::Portable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Portable & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Portable **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Portable & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::PortablePairBase::readPair(*arg1,*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PortablePairBase_1writePair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::ConnectionWriter *arg1 = 0 ;
  yarp::os::Portable *arg2 = 0 ;
  yarp::os::Portable *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::ConnectionWriter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  arg2 = *(yarp::os::Portable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Portable & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Portable **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Portable & reference is null");
    return 0;
  } 
  result = (bool)yarp::os::PortablePairBase::writePair(*arg1,*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PortablePairBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::PortablePairBase *arg1 = (yarp::os::PortablePairBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::PortablePairBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PortReaderCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::PortReaderCreator *arg1 = (yarp::os::PortReaderCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::PortReaderCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortReaderCreator_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::PortReaderCreator *arg1 = (yarp::os::PortReaderCreator *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortReaderCreator **)&jarg1; 
  result = (yarp::os::PortReader *)(arg1)->create();
  *(yarp::os::PortReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1check_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1check_1_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Property_1check_1_1SWIG_10_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  yarp::os::ConstString arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Property_1check_1_1SWIG_10_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  result = ((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Property_1findGroup_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Bottle *) &((yarp::os::Property const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Property_1findGroup_1_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (yarp::os::Bottle *) &((yarp::os::Property const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Property_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (yarp::os::Property *)new yarp::os::Property(arg1);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Property_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Property *)new yarp::os::Property();
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Property_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (yarp::os::Property *)new yarp::os::Property((char const *)arg1);
  *(yarp::os::Property **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Property_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Property *arg1 = 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Property const & reference is null");
    return 0;
  } 
  result = (yarp::os::Property *)new yarp::os::Property((yarp::os::Property const &)*arg1);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Property(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Property **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1put_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->put((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1put_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return ;
  } 
  (arg1)->put((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1put_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->put((yarp::os::ConstString const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1put_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->put((yarp::os::ConstString const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Property_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Property *) &(arg1)->addGroup((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1unput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->unput((yarp::os::ConstString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Property_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Value *) &((yarp::os::Property const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  (arg1)->fromString((yarp::os::ConstString const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->fromString((yarp::os::ConstString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(char ***)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->fromCommand(arg2,arg3,arg4,arg5);
  
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jboolean jarg4) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(char ***)&jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->fromCommand(arg2,arg3,arg4);
  
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromCommand_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(char ***)&jarg3; 
  (arg1)->fromCommand(arg2,arg3);
  
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromArguments_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->fromArguments((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromArguments_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->fromArguments((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1fromConfigFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1fromConfigFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1fromConfigFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Searchable **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Searchable & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1fromConfigFile_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Searchable **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Searchable & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1fromConfigDir_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->fromConfigDir((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1fromConfigDir_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->fromConfigDir((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1fromConfigDir_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->fromConfigDir((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->fromConfig((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->fromConfig((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromConfig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(yarp::os::Searchable **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Searchable & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->fromConfig((char const *)arg2,*arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromConfig_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(yarp::os::Searchable **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Searchable & reference is null");
    return ;
  } 
  (arg1)->fromConfig((char const *)arg2,*arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->fromQuery((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Property_1fromQuery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->fromQuery((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Property_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  result = ((yarp::os::Property const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Property_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Property_1toString_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Property **)&jarg1; 
  result = yarp_os_Property_toString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BOTTLE_1TAG_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BOTTLE_1TAG_1VOCAB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((1+8));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BOTTLE_1TAG_1DOUBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((2+8));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BOTTLE_1TAG_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((4));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BOTTLE_1TAG_1BLOB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((4+8));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BOTTLE_1TAG_1INT64_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((1+16));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BOTTLE_1TAG_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(256);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BOTTLE_1TAG_1DICT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(512);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1check_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1check_1_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1check_1_1SWIG_10_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  yarp::os::ConstString arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1check_1_1SWIG_10_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  result = ((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1findGroup_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Bottle *) &((yarp::os::Bottle const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1findGroup_1_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (yarp::os::Bottle *) &((yarp::os::Bottle const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Bottle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Bottle *)new yarp::os::Bottle();
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Bottle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (yarp::os::Bottle *)new yarp::os::Bottle((yarp::os::ConstString const &)*arg1);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Bottle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return 0;
  } 
  result = (yarp::os::Bottle *)new yarp::os::Bottle((yarp::os::Bottle const &)*arg1);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Bottle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1addInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->addInt(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1addInt64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  YARP_INT64 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(YARP_INT64 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "YARP_INT64 const & reference is null");
    return ;
  } 
  (arg1)->addInt64((YARP_INT64 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1addVocab(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->addVocab(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1addDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->addDouble(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1addString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addString((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Value *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return ;
  } 
  (arg1)->add((yarp::os::Value const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1addList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  result = (yarp::os::Bottle *) &(arg1)->addList();
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1addDict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  result = (yarp::os::Property *) &(arg1)->addDict();
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1pop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  result = (arg1)->pop();
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int arg2 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (yarp::os::Value *) &((yarp::os::Bottle const *)arg1)->get(arg2);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Bottle_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  result = (int)((yarp::os::Bottle const *)arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1fromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->fromString((yarp::os::ConstString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1fromBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->fromBinary((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Bottle_1toBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(size_t **)&jarg2; 
  result = (char *)(arg1)->toBinary(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Bottle_1toBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  result = (char *)(arg1)->toBinary();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Bottle_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  result = ((yarp::os::Bottle const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->write(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1write_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1read_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1onCommencement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  (arg1)->onCommencement();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Value *) &((yarp::os::Bottle const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  result = (bool)((yarp::os::Bottle const *)arg1)->isNull();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->copy((yarp::os::Bottle const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->copy((yarp::os::Bottle const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1copy_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return ;
  } 
  (arg1)->copy((yarp::os::Bottle const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1getNullBottle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Bottle *) &yarp::os::Bottle::getNullBottle();
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator ==((yarp::os::Bottle const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Bottle_1notEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator !=((yarp::os::Bottle const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return ;
  } 
  (arg1)->append((yarp::os::Bottle const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1tail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  result = ((yarp::os::Bottle const *)arg1)->tail();
  *(yarp::os::Bottle **)&jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1hasChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  (arg1)->hasChanged();
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Bottle_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = yarp::os::Bottle::toString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Bottle_1getSpecialization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  result = (int)(arg1)->getSpecialization();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Bottle_1describeBottleCode(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = yarp::os::Bottle::describeBottleCode(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Bottle_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->add((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Bottle_1toString_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Bottle **)&jarg1; 
  result = yarp_os_Bottle_toString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_typedReaderMissingCallback(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  typedReaderMissingCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PortReaderBufferBaseCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::impl::PortReaderBufferBaseCreator *arg1 = (yarp::os::impl::PortReaderBufferBaseCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::impl::PortReaderBufferBaseCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortReaderBufferBaseCreator_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::impl::PortReaderBufferBaseCreator *arg1 = (yarp::os::impl::PortReaderBufferBaseCreator *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBaseCreator **)&jarg1; 
  result = (yarp::os::PortReader *)(arg1)->create();
  *(yarp::os::PortReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PortReaderBufferBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  yarp::os::impl::PortReaderBufferBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (yarp::os::impl::PortReaderBufferBase *)new yarp::os::impl::PortReaderBufferBase(arg1);
  *(yarp::os::impl::PortReaderBufferBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PortReaderBufferBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1setCreator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::impl::PortReaderBufferBaseCreator *arg2 = (yarp::os::impl::PortReaderBufferBaseCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = *(yarp::os::impl::PortReaderBufferBaseCreator **)&jarg2; 
  (arg1)->setCreator(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1setPrune_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPrune(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1setPrune_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  (arg1)->setPrune();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1setAllowReuse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAllowReuse(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1setAllowReuse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  (arg1)->setAllowReuse();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  result = ((yarp::os::impl::PortReaderBufferBase const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1getMaxBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  result = (unsigned int)(arg1)->getMaxBuffer();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  result = (yarp::os::PortReader *)(arg1)->create();
  *(yarp::os::PortReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1release_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  result = (int)(arg1)->check();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1readBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  yarp::os::PortReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = *(bool **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (yarp::os::PortReader *)(arg1)->readBase(*arg2,arg3);
  *(yarp::os::PortReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1attachBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = *(yarp::os::Port **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return ;
  } 
  (arg1)->attachBase(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1acceptObjectBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2; 
  arg3 = *(yarp::os::PortWriter **)&jarg3; 
  result = (bool)(arg1)->acceptObjectBase(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1forgetObjectBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2; 
  arg3 = *(yarp::os::PortWriter **)&jarg3; 
  result = (bool)(arg1)->forgetObjectBase(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1release_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1setAutoRelease_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoRelease(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1setAutoRelease_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::impl::PortReaderBufferBase **)&jarg1; 
  (arg1)->setAutoRelease();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PortWriterBufferManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::PortWriterBufferManager *arg1 = (yarp::os::PortWriterBufferManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::PortWriterBufferManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortWriterBufferManager_1onCompletion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::PortWriterBufferManager *arg1 = (yarp::os::PortWriterBufferManager *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriterBufferManager **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->onCompletion(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortWriterWrapper_1getInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::PortWriterWrapper *arg1 = (yarp::os::PortWriterWrapper *) 0 ;
  yarp::os::PortWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriterWrapper **)&jarg1; 
  result = (yarp::os::PortWriter *)(arg1)->getInternal();
  *(yarp::os::PortWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PortWriterWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::PortWriterWrapper *arg1 = (yarp::os::PortWriterWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::PortWriterWrapper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PortWriterBufferBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::PortWriterBufferBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortWriterBufferBase_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  yarp::os::PortWriterBufferManager *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  yarp::os::PortWriterWrapper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::PortWriterBufferBase **)&jarg1; 
  arg2 = *(yarp::os::PortWriterBufferManager **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriterBufferManager & reference is null");
    return 0;
  } 
  arg3 = *(void **)&jarg3; 
  result = (yarp::os::PortWriterWrapper *)(arg1)->create(*arg2,arg3);
  *(yarp::os::PortWriterWrapper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortWriterBufferBase_1getContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriterBufferBase **)&jarg1; 
  result = (void *)(arg1)->getContent();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PortWriterBufferBase_1releaseContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriterBufferBase **)&jarg1; 
  result = (bool)(arg1)->releaseContent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_PortWriterBufferBase_1getCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriterBufferBase **)&jarg1; 
  result = (int)(arg1)->getCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortWriterBufferBase_1attach(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::PortWriterBufferBase **)&jarg1; 
  arg2 = *(yarp::os::Port **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return ;
  } 
  (arg1)->attach(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortWriterBufferBase_1detach(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriterBufferBase **)&jarg1; 
  (arg1)->detach();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortWriterBufferBase_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriterBufferBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PortWriterBufferBase_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::PortWriterBufferBase **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Random_1uniform_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)yarp::os::Random::uniform();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Random_1normal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)yarp::os::Random::normal(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Random_1seed_1c(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  yarp::os::Random::seed(arg1);
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Random_1normal_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)yarp::os::Random::normal();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Random_1uniform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)yarp::os::Random::uniform(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Random(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Random *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Random *)new yarp::os::Random();
  *(yarp::os::Random **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Random(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Random *arg1 = (yarp::os::Random *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Random **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Semaphore_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  yarp::os::Semaphore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (yarp::os::Semaphore *)new yarp::os::Semaphore(arg1);
  *(yarp::os::Semaphore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Semaphore_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Semaphore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Semaphore *)new yarp::os::Semaphore();
  *(yarp::os::Semaphore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Semaphore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Semaphore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Semaphore_1wait_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Semaphore **)&jarg1; 
  (arg1)->wait();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Semaphore_1waitWithTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Semaphore **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->waitWithTimeout(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Semaphore_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Semaphore **)&jarg1; 
  result = (bool)(arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Semaphore_1post(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Semaphore **)&jarg1; 
  (arg1)->post();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Thread(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Thread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Thread *)new SwigDirector_Thread(jenv);
  *(yarp::os::Thread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Thread(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1onStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  (arg1)->onStop();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1onStopSwigExplicitThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  (arg1)->yarp::os::Thread::onStop();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Thread_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  result = (bool)(arg1)->start();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Thread_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  result = (bool)(arg1)->stop();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1beforeStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  (arg1)->beforeStart();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1beforeStartSwigExplicitThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  (arg1)->yarp::os::Thread::beforeStart();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1afterStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->afterStart(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1afterStartSwigExplicitThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->yarp::os::Thread::afterStart(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Thread_1threadInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  result = (bool)(arg1)->threadInit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Thread_1threadInitSwigExplicitThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  result = (bool)(arg1)->yarp::os::Thread::threadInit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1threadRelease(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  (arg1)->threadRelease();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1threadReleaseSwigExplicitThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  (arg1)->yarp::os::Thread::threadRelease();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Thread_1isStopping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  result = (bool)(arg1)->isStopping();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Thread_1isRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  result = (bool)(arg1)->isRunning();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1setOptions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOptions(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1setOptions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  (arg1)->setOptions();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Thread_1getCount(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)yarp::os::Thread::getCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Thread_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  result = (long)(arg1)->getKey();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Thread_1getKeyOfCaller(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)yarp::os::Thread::getKeyOfCaller();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Thread_1setPriority_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->setPriority(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Thread_1setPriority_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setPriority(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Thread_1getPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  result = (int)(arg1)->getPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Thread_1getPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  result = (int)(arg1)->getPolicy();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1setDefaultStackSize(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  yarp::os::Thread::setDefaultStackSize(arg1);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Thread_1join_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->join(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Thread_1join_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Thread **)&jarg1; 
  result = (bool)(arg1)->join();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  yarp::os::Thread *obj = *((yarp::os::Thread **)&objarg);
  (void)jcls;
  SwigDirector_Thread *director = dynamic_cast<SwigDirector_Thread *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Thread_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  yarp::os::Thread *obj = *((yarp::os::Thread **)&objarg);
  SwigDirector_Thread *director = dynamic_cast<SwigDirector_Thread *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1RateThread(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThread_1threadInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (bool)(arg1)->threadInit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1threadRelease(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  (arg1)->threadRelease();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThread_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (bool)(arg1)->start();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThread_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (bool)(arg1)->step();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1askToStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  (arg1)->askToStop();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThread_1isRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (bool)(arg1)->isRunning();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThread_1isSuspended(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (bool)(arg1)->isSuspended();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThread_1setRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setRate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_RateThread_1getRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (double)(arg1)->getRate();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1suspend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  (arg1)->suspend();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1resetStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  (arg1)->resetStat();
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_RateThread_1getEstPeriod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (double)(arg1)->getEstPeriod();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1getEstPeriod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  (arg1)->getEstPeriod(*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_RateThread_1getIterations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (unsigned int)(arg1)->getIterations();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_RateThread_1getEstUsed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (double)(arg1)->getEstUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1getEstUsed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  (arg1)->getEstUsed(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1beforeStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  (arg1)->beforeStart();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThread_1afterStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->afterStart(arg2);
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_RateThread_1setPriority_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->setPriority(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_RateThread_1setPriority_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->setPriority(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_RateThread_1getPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (int)(arg1)->getPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_RateThread_1getPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThread **)&jarg1; 
  result = (int)(arg1)->getPolicy();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1RateThreadWrapper_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::RateThreadWrapper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::RateThreadWrapper *)new yarp::os::RateThreadWrapper();
  *(yarp::os::RateThreadWrapper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1RateThreadWrapper_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Runnable *arg1 = (Runnable *) 0 ;
  yarp::os::RateThreadWrapper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Runnable **)&jarg1; 
  result = (yarp::os::RateThreadWrapper *)new yarp::os::RateThreadWrapper(arg1);
  *(yarp::os::RateThreadWrapper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1RateThreadWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1detach(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  (arg1)->detach();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1attach_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  Runnable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  arg2 = *(Runnable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Runnable & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->attach(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  double arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->open(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->open(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1open_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  result = (bool)(arg1)->open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1threadInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  result = (bool)(arg1)->threadInit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1threadRelease(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  (arg1)->threadRelease();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1afterStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->afterStart(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1beforeStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  (arg1)->beforeStart();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1getAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  Runnable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RateThreadWrapper **)&jarg1; 
  result = (Runnable *)((yarp::os::RateThreadWrapper const *)arg1)->getAttachment();
  *(Runnable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Time_1delay(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  yarp::os::Time::delay(arg1);
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Time_1now(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)yarp::os::Time::now();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Time_1yield(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  yarp::os::Time::yield();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Time_1turboBoost(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  yarp::os::Time::turboBoost();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Time_1useSystemClock(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  yarp::os::Time::useSystemClock();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Time_1useNetworkClock(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  yarp::os::ConstString *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  yarp::os::Time::useNetworkClock((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Time_1useCustomClock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Clock *arg1 = (Clock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Clock **)&jarg1; 
  yarp::os::Time::useCustomClock(arg1);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Time_1isSystemClock(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)yarp::os::Time::isSystemClock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Time_1isValid(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)yarp::os::Time::isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Time(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Time *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Time *)new yarp::os::Time();
  *(yarp::os::Time **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Time(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Time *arg1 = (yarp::os::Time *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Time **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1RFModule(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::RFModule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::RFModule *)new SwigDirector_RFModule(jenv);
  *(yarp::os::RFModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1RFModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_RFModule_1getPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (double)(arg1)->getPeriod();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_RFModule_1getPeriodSwigExplicitRFModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (double)(arg1)->yarp::os::RFModule::getPeriod();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1updateModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (bool)(arg1)->updateModule();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_RFModule_1runModule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (int)(arg1)->runModule();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_RFModule_1runModuleSwigExplicitRFModule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (int)(arg1)->yarp::os::RFModule::runModule();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_RFModule_1runModule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ResourceFinder *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::ResourceFinder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ResourceFinder & reference is null");
    return 0;
  } 
  result = (int)(arg1)->runModule(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_RFModule_1runModuleSwigExplicitRFModule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ResourceFinder *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::ResourceFinder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ResourceFinder & reference is null");
    return 0;
  } 
  result = (int)(arg1)->yarp::os::RFModule::runModule(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1configure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ResourceFinder *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::ResourceFinder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ResourceFinder & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->configure(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1configureSwigExplicitRFModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ResourceFinder *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::ResourceFinder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ResourceFinder & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->yarp::os::RFModule::configure(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1respond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Bottle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->respond((yarp::os::Bottle const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1respondSwigExplicitRFModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Bottle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->yarp::os::RFModule::respond((yarp::os::Bottle const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1attach(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::Port **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->attach(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1attachSwigExplicitRFModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::Port **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->yarp::os::RFModule::attach(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1attach_1rpc_1server(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::RpcServer *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::RpcServer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::RpcServer & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->attach(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1attach_1rpc_1serverSwigExplicitRFModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::RpcServer *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::RpcServer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::RpcServer & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->yarp::os::RFModule::attach(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1attachTerminal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (bool)(arg1)->attachTerminal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1detachTerminal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (bool)(arg1)->detachTerminal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1interruptModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (bool)(arg1)->interruptModule();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1interruptModuleSwigExplicitRFModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (bool)(arg1)->yarp::os::RFModule::interruptModule();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1closeSwigExplicitRFModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (bool)(arg1)->yarp::os::RFModule::close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RFModule_1stopModule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->stopModule(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RFModule_1stopModule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  (arg1)->stopModule();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1isStopping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (bool)(arg1)->isStopping();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_RFModule_1getName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getName((yarp::os::ConstString const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_RFModule_1getName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RFModule_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RFModule_1safeRespond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::RFModule **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Bottle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->safeRespond((yarp::os::Bottle const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RFModule_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  yarp::os::RFModule *obj = *((yarp::os::RFModule **)&objarg);
  (void)jcls;
  SwigDirector_RFModule *director = dynamic_cast<SwigDirector_RFModule *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RFModule_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  yarp::os::RFModule *obj = *((yarp::os::RFModule **)&objarg);
  SwigDirector_RFModule *director = dynamic_cast<SwigDirector_RFModule *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Stamp_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Stamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Stamp *)new yarp::os::Stamp();
  *(yarp::os::Stamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Stamp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  yarp::os::Stamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (yarp::os::Stamp *)new yarp::os::Stamp(arg1,arg2);
  *(yarp::os::Stamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Stamp_1getCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Stamp **)&jarg1; 
  result = (int)(arg1)->getCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Stamp_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Stamp **)&jarg1; 
  result = (double)(arg1)->getTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Stamp_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Stamp **)&jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Stamp_1getMaxCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Stamp **)&jarg1; 
  result = (int)(arg1)->getMaxCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Stamp_1update_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Stamp **)&jarg1; 
  (arg1)->update();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Stamp_1update_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Stamp **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->update(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Stamp_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Stamp **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Stamp_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Stamp **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Stamp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Stamp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Stamped(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Stamped *arg1 = (yarp::os::Stamped *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Stamped **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Stamped_1getStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Stamped *arg1 = (yarp::os::Stamped *) 0 ;
  yarp::os::Stamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Stamped **)&jarg1; 
  result = ((yarp::os::Stamped const *)arg1)->getStamp();
  *(yarp::os::Stamp **)&jresult = new yarp::os::Stamp((const yarp::os::Stamp &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1NameStore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::NameStore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_NameStore_1query(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::NameStore **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->query((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NameStore_1announce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::NameStore **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->announce((yarp::os::ConstString const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_NameStore_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::Contact *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::os::NameStore **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::Contact **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->process(*arg2,*arg3,(yarp::os::Contact const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ContactStyle_1admin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->admin = arg2;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ContactStyle_1admin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  result = (bool) ((arg1)->admin);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ContactStyle_1quiet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->quiet = arg2;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ContactStyle_1quiet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  result = (bool) ((arg1)->quiet);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ContactStyle_1verboseOnSuccess_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verboseOnSuccess = arg2;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ContactStyle_1verboseOnSuccess_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  result = (bool) ((arg1)->verboseOnSuccess);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ContactStyle_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timeout = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_ContactStyle_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  result = (double) ((arg1)->timeout);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ContactStyle_1carrier_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->carrier = *arg2;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ContactStyle_1carrier_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->carrier);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ContactStyle_1expectReply_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expectReply = arg2;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ContactStyle_1expectReply_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  result = (bool) ((arg1)->expectReply);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ContactStyle_1persistent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->persistent = arg2;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ContactStyle_1persistent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  result = (bool) ((arg1)->persistent);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ContactStyle_1OPENENDED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::ContactStyle::PersistenceType result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::ContactStyle::PersistenceType)yarp::os::ContactStyle::OPENENDED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ContactStyle_1END_1WITH_1FROM_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::ContactStyle::PersistenceType result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::ContactStyle::PersistenceType)yarp::os::ContactStyle::END_WITH_FROM_PORT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ContactStyle_1END_1WITH_1TO_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::ContactStyle::PersistenceType result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::ContactStyle::PersistenceType)yarp::os::ContactStyle::END_WITH_TO_PORT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ContactStyle_1NO_1PERSISTENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::ContactStyle::PersistenceType result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::ContactStyle::PersistenceType)yarp::os::ContactStyle::NO_PERSISTENCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ContactStyle_1persistenceType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ContactStyle::PersistenceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  arg2 = (yarp::os::ContactStyle::PersistenceType)jarg2; 
  if (arg1) (arg1)->persistenceType = arg2;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ContactStyle_1persistenceType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ContactStyle::PersistenceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  result = (yarp::os::ContactStyle::PersistenceType) ((arg1)->persistenceType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1ContactStyle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::ContactStyle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::ContactStyle *)new yarp::os::ContactStyle();
  *(yarp::os::ContactStyle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ContactStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::ContactStyle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1ResourceFinder_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::ResourceFinder *)new yarp::os::ResourceFinder();
  *(yarp::os::ResourceFinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1ResourceFinder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = 0 ;
  yarp::os::ResourceFinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ResourceFinder const & reference is null");
    return 0;
  } 
  result = (yarp::os::ResourceFinder *)new yarp::os::ResourceFinder((yarp::os::ResourceFinder const &)*arg1);
  *(yarp::os::ResourceFinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ResourceFinder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1setVerbose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setVerbose(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1setVerbose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = (bool)(arg1)->setVerbose();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1setQuiet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setQuiet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1setQuiet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = (bool)(arg1)->setQuiet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1configure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(char ***)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->configure((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1configure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(char ***)&jarg4; 
  result = (bool)(arg1)->configure((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1configure_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = (bool)(arg1)->configure(arg2,arg3);
  jresult = (jboolean)result; 
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1setDefaultContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->setDefaultContext((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1setContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->setContext((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1setDefault_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->setDefault((char const *)arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1setDefault_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setDefault((char const *)arg2,(yarp::os::Value const &)*arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1setDefaultConfigFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->setDefaultConfigFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1findFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->findFile((yarp::os::ConstString const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1findFileByName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->findFileByName((yarp::os::ConstString const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1findPath_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->findPath((yarp::os::ConstString const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1findPaths_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->findPaths((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Bottle **)&jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1findPath_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = (arg1)->findPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = (arg1)->getContext();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1getContextPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = (arg1)->getContextPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1getContexts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::Bottle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = (arg1)->getContexts();
  *(yarp::os::Bottle **)&jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1check_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Value *) &((yarp::os::ResourceFinder const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1findGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (yarp::os::Bottle *) &((yarp::os::ResourceFinder const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->isNull();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = ((yarp::os::ResourceFinder const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1findNestedResourceFinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::ResourceFinder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->findNestedResourceFinder((char const *)arg2);
  *(yarp::os::ResourceFinder **)&jresult = new yarp::os::ResourceFinder((const yarp::os::ResourceFinder &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1isConfigured(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->isConfigured();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1getResourceFinderSingleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::ResourceFinder *) &yarp::os::ResourceFinder::getResourceFinderSingleton();
  *(yarp::os::ResourceFinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1check_1_1SWIG_11_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1check_1_1SWIG_11_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  yarp::os::ConstString arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1check_1_1SWIG_11_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(yarp::os::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Value const & reference is null");
    return 0;
  } 
  result = ((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1findGroup_1_1SWIG_11_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (yarp::os::Bottle *) &((yarp::os::ResourceFinder const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1getDataHome(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::ResourceFinder::getDataHome();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1getDataHomeNoCreate(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::ResourceFinder::getDataHomeNoCreate();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1getConfigHome(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::ResourceFinder::getConfigHome();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1getConfigHomeNoCreate(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::ResourceFinder::getConfigHomeNoCreate();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1getHomeContextPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = (arg1)->getHomeContextPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1getHomeRobotPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  result = (arg1)->getHomeRobotPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1getDataDirs(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Bottle result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::ResourceFinder::getDataDirs();
  *(yarp::os::Bottle **)&jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1getConfigDirs(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Bottle result;
  
  (void)jenv;
  (void)jcls;
  result = yarp::os::ResourceFinder::getConfigDirs();
  *(yarp::os::Bottle **)&jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1findPaths_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::Bottle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ResourceFinderOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ResourceFinderOptions const & reference is null");
    return 0;
  } 
  result = (arg1)->findPaths((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  *(yarp::os::Bottle **)&jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1findPath_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ResourceFinderOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ResourceFinderOptions const & reference is null");
    return 0;
  } 
  result = (arg1)->findPath((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1findFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ResourceFinderOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ResourceFinderOptions const & reference is null");
    return 0;
  } 
  result = (arg1)->findFile((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_ResourceFinder_1findFileByName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ResourceFinderOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ResourceFinderOptions const & reference is null");
    return 0;
  } 
  result = (arg1)->findFileByName((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1readConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  ResourceFinderOptions *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Property & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(ResourceFinderOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ResourceFinderOptions const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->readConfig(*arg2,(yarp::os::ConstString const &)*arg3,(ResourceFinderOptions const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1configure_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)yarp_os_ResourceFinder_configure__SWIG_3(arg1,(std::string const &)*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ResourceFinder_1configure_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::os::ResourceFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_ResourceFinder_configure__SWIG_3(arg1,(std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcServer_1open_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  result = (bool)(arg1)->open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcServer_1open_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcServer_1open_1SWIG_10_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcServer_1open_1SWIG_10_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1RpcServer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::RpcServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::RpcServer *)new yarp::os::RpcServer();
  *(yarp::os::RpcServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1RpcServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcServer_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortWriter **)&jarg3; 
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcServer_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcServer_1write_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::PortWriter **)&jarg4; 
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcServer_1write_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::PortReader **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcServer_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcServer_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RpcServer_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RpcServer_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RpcServer_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_RpcServer_1asPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::Port *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RpcServer **)&jarg1; 
  result = (yarp::os::Port *) &(arg1)->asPort();
  *(yarp::os::Port **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1RpcClient(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::RpcClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::RpcClient *)new yarp::os::RpcClient();
  *(yarp::os::RpcClient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1RpcClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::RpcClient **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcClient_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RpcClient **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcClient_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RpcClient **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcClient_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RpcClient **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->reply(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcClient_1replyAndDrop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::RpcClient **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->replyAndDrop(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RpcClient_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RpcClient **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RpcClient_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RpcClient **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_RpcClient_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RpcClient **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_RpcClient_1asPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::Port *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::RpcClient **)&jarg1; 
  result = (yarp::os::Port *) &(arg1)->asPort();
  *(yarp::os::Port **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_RpcClient_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::RpcClient **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Bottle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)yarp_os_RpcClient_write(arg1,*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1DummyConnector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::DummyConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::DummyConnector *)new yarp::os::DummyConnector();
  *(yarp::os::DummyConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1DummyConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::DummyConnector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DummyConnector_1setTextMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::DummyConnector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTextMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_DummyConnector_1getCleanWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::DummyConnector **)&jarg1; 
  result = (yarp::os::ConnectionWriter *) &(arg1)->getCleanWriter();
  *(yarp::os::ConnectionWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_DummyConnector_1getWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::DummyConnector **)&jarg1; 
  result = (yarp::os::ConnectionWriter *) &(arg1)->getWriter();
  *(yarp::os::ConnectionWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_DummyConnector_1getReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  yarp::os::ConnectionReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::DummyConnector **)&jarg1; 
  result = (yarp::os::ConnectionReader *) &(arg1)->getReader();
  *(yarp::os::ConnectionReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DummyConnector_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::DummyConnector **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Things(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::Things *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::Things *)new yarp::os::Things();
  *(yarp::os::Things **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Things(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::Things **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Things_1setPortWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortWriter *arg2 = (yarp::os::PortWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2; 
  (arg1)->setPortWriter(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1getPortWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::os::PortWriter *)(arg1)->getPortWriter();
  *(yarp::os::PortWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Things_1setPortReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2; 
  (arg1)->setPortReader(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1getPortReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::os::PortReader *)(arg1)->getPortReader();
  *(yarp::os::PortReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Things_1setConnectionReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setConnectionReader(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Things_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Things_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Things_1hasBeenRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (bool)(arg1)->hasBeenRead();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1asValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::os::Value *)yarp_os_Things_asValue(arg1);
  *(yarp::os::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1asBottle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::os::Bottle *)yarp_os_Things_asBottle(arg1);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1asProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::os::Property *)yarp_os_Things_asProperty(arg1);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1asVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::Vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::sig::Vector *)yarp_os_Things_asVector(arg1);
  *(yarp::sig::Vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1asMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::Matrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::sig::Matrix *)yarp_os_Things_asMatrix(arg1);
  *(yarp::sig::Matrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1asImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::sig::Image *)yarp_os_Things_asImage(arg1);
  *(yarp::sig::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1asImageOfPixelRgb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)yarp_os_Things_asImageOfPixelRgb(arg1);
  *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1asImageOfPixelBgr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelBgr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelBgr > *)yarp_os_Things_asImageOfPixelBgr(arg1);
  *(yarp::sig::ImageOf< yarp::sig::PixelBgr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Things_1asImageOfPixelMono(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Things **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)yarp_os_Things_asImageOfPixelMono(arg1);
  *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1PacketPriorityInvalid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityLevel)yarp::os::QosStyle::PacketPriorityInvalid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1PacketPriorityNormal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityLevel)yarp::os::QosStyle::PacketPriorityNormal;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1PacketPriorityLow_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityLevel)yarp::os::QosStyle::PacketPriorityLow;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1PacketPriorityHigh_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityLevel)yarp::os::QosStyle::PacketPriorityHigh;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1PacketPriorityCritical_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityLevel)yarp::os::QosStyle::PacketPriorityCritical;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1PacketPriorityUndefined_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityLevel)yarp::os::QosStyle::PacketPriorityUndefined;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1Invalid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_Invalid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1CS0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_CS0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1CS1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_CS1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1CS2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_CS2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1CS3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_CS3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1CS4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_CS4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1CS5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_CS5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1CS6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_CS6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1CS7_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_CS7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF11;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF12;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF13;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF21_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF21;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF22_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF22;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF23_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF23;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF31_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF31;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF32;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF33_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF33;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF41_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF41;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF42_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF42;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1AF43_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_AF43;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1VA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_VA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1EF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_EF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1DSCP_1Undefined_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::DSCP_Undefined;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1QosStyle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::QosStyle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::QosStyle *)new yarp::os::QosStyle();
  *(yarp::os::QosStyle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_QosStyle_1setPacketPriorityByDscp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  arg2 = (yarp::os::QosStyle::PacketPriorityDSCP)jarg2; 
  (arg1)->setPacketPriorityByDscp(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_QosStyle_1setPacketPriorityByLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  arg2 = (yarp::os::QosStyle::PacketPriorityLevel)jarg2; 
  (arg1)->setPacketPriorityByLevel(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_QosStyle_1setPacketPrioritybyTOS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPacketPrioritybyTOS(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_QosStyle_1setPacketPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setPacketPriority((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_QosStyle_1setThreadPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setThreadPriority(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_QosStyle_1setThreadPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setThreadPolicy(arg2);
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1getPacketPriorityAsTOS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  result = (int)((yarp::os::QosStyle const *)arg1)->getPacketPriorityAsTOS();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1getPacketPriorityAsDSCP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  result = (yarp::os::QosStyle::PacketPriorityDSCP)((yarp::os::QosStyle const *)arg1)->getPacketPriorityAsDSCP();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1getPacketPriorityAsLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  result = (yarp::os::QosStyle::PacketPriorityLevel)((yarp::os::QosStyle const *)arg1)->getPacketPriorityAsLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1getThreadPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  result = (int)((yarp::os::QosStyle const *)arg1)->getThreadPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1getThreadPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  result = (int)((yarp::os::QosStyle const *)arg1)->getThreadPolicy();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1getDSCPByVocab(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::getDSCPByVocab(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_QosStyle_1getLevelByVocab(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (yarp::os::QosStyle::PacketPriorityLevel)yarp::os::QosStyle::getLevelByVocab(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1QosStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::QosStyle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->read(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  result = (yarp::os::Property *)(arg1)->read();
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  result = (yarp::os::Property *)(arg1)->lastRead();
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1useCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Property > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::os::Property > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::os::Property > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderProperty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  result = ((yarp::os::TypedReader< Property > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderProperty_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Property > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PropertyCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReaderCallback< Property > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PropertyCallback_1onRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< Property > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Property & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PropertyCallback_1onReadSwigExplicitPropertyCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< Property > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Property & reference is null");
    return ;
  } 
  (arg1)->yarp::os::TypedReaderCallback< Property >::onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PropertyCallback_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Property > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< Property > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Property & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::os::Property > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::os::Property > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Property > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PropertyCallback_1onReadSwigExplicitPropertyCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Property > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< Property > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Property & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::os::Property > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::os::Property > const & reference is null");
    return ;
  } 
  (arg1)->yarp::os::TypedReaderCallback< Property >::onRead(*arg2,(yarp::os::TypedReader< yarp::os::Property > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PropertyCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::TypedReaderCallback< Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::TypedReaderCallback< Property > *)new SwigDirector_PropertyCallback(jenv);
  *(yarp::os::TypedReaderCallback< Property > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PropertyCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  yarp::os::TypedReaderCallback< Property > *obj = *((yarp::os::TypedReaderCallback< Property > **)&objarg);
  (void)jcls;
  SwigDirector_PropertyCallback *director = dynamic_cast<SwigDirector_PropertyCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PropertyCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  yarp::os::TypedReaderCallback< Property > *obj = *((yarp::os::TypedReaderCallback< Property > **)&objarg);
  SwigDirector_PropertyCallback *director = dynamic_cast<SwigDirector_PropertyCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Property > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Property & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::os::Property > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::os::Property > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Property > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::BufferedPort< Property > *)new yarp::os::BufferedPort< Property >();
  *(yarp::os::BufferedPort< Property > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (yarp::os::BufferedPort< Property > *)new yarp::os::BufferedPort< Property >(*arg1);
  *(yarp::os::BufferedPort< Property > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BufferedPortProperty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = ((yarp::os::BufferedPort< Property > const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = ((yarp::os::BufferedPort< Property > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (yarp::os::Property *) &(arg1)->prepare();
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1unprepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  (arg1)->write();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1writeStrict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->read(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (yarp::os::Property *)(arg1)->read();
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (yarp::os::Property *)(arg1)->lastRead();
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Property & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1useCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Property > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::os::Property > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::os::Property > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1useCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1setCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Property > **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  bool arg2 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Bottle *)(arg1)->read(arg2);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  result = (yarp::os::Bottle *)(arg1)->read();
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  result = (yarp::os::Bottle *)(arg1)->lastRead();
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1useCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Bottle > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::os::Bottle > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::os::Bottle > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderBottle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  result = ((yarp::os::TypedReader< Bottle > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderBottle_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< Bottle > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BottleCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReaderCallback< Bottle > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BottleCallback_1onRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BottleCallback_1onReadSwigExplicitBottleCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return ;
  } 
  (arg1)->yarp::os::TypedReaderCallback< Bottle >::onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BottleCallback_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::os::Bottle > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::os::Bottle > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BottleCallback_1onReadSwigExplicitBottleCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::os::Bottle > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::os::Bottle > const & reference is null");
    return ;
  } 
  (arg1)->yarp::os::TypedReaderCallback< Bottle >::onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BottleCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::TypedReaderCallback< Bottle > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::TypedReaderCallback< Bottle > *)new SwigDirector_BottleCallback(jenv);
  *(yarp::os::TypedReaderCallback< Bottle > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BottleCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  yarp::os::TypedReaderCallback< Bottle > *obj = *((yarp::os::TypedReaderCallback< Bottle > **)&objarg);
  (void)jcls;
  SwigDirector_BottleCallback *director = dynamic_cast<SwigDirector_BottleCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BottleCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  yarp::os::TypedReaderCallback< Bottle > *obj = *((yarp::os::TypedReaderCallback< Bottle > **)&objarg);
  SwigDirector_BottleCallback *director = dynamic_cast<SwigDirector_BottleCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::os::Bottle > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::os::Bottle > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortBottle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::BufferedPort< Bottle > *)new yarp::os::BufferedPort< Bottle >();
  *(yarp::os::BufferedPort< Bottle > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortBottle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< Bottle > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (yarp::os::BufferedPort< Bottle > *)new yarp::os::BufferedPort< Bottle >(*arg1);
  *(yarp::os::BufferedPort< Bottle > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BufferedPortBottle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = ((yarp::os::BufferedPort< Bottle > const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = ((yarp::os::BufferedPort< Bottle > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (yarp::os::Bottle *) &(arg1)->prepare();
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1unprepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  (arg1)->write();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1writeStrict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Bottle *)(arg1)->read(arg2);
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (yarp::os::Bottle *)(arg1)->read();
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (yarp::os::Bottle *)(arg1)->lastRead();
  *(yarp::os::Bottle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1useCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Bottle > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::os::Bottle > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::os::Bottle > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1useCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1setCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< Bottle > **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_PAD_1BYTES(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)yarp::sig::PAD_BYTES(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Image_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::Image *)new yarp::sig::Image();
  *(yarp::sig::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Image_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Image *arg1 = 0 ;
  yarp::sig::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Image const & reference is null");
    return 0;
  } 
  result = (yarp::sig::Image *)new yarp::sig::Image((yarp::sig::Image const &)*arg1);
  *(yarp::sig::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Image(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Image_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::sig::Image *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = *(yarp::sig::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Image const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->copy((yarp::sig::Image const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Image_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::sig::Image *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = *(yarp::sig::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Image const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->copy((yarp::sig::Image const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Image_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->width();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Image_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->height();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Image_1getPixelSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getPixelSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Image_1getPixelCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getPixelCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Image_1getRowSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getRowSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Image_1getQuantum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getQuantum();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Image_1getPadding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getPadding();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Image_1getRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char *)(arg1)->getRow(arg2);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Image_1getPixelAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (unsigned char *)((yarp::sig::Image const *)arg1)->getPixelAddress(arg2,arg3);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Image_1isPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((yarp::sig::Image const *)arg1)->isPixel(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Image_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  (arg1)->zero();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Image_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Image_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::sig::Image *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = *(yarp::sig::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Image const & reference is null");
    return ;
  } 
  (arg1)->resize((yarp::sig::Image const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Image_1setExternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setExternal(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Image_1getRawImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (unsigned char *)((yarp::sig::Image const *)arg1)->getRawImage();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Image_1getRawImageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (int)((yarp::sig::Image const *)arg1)->getRawImageSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Image_1getIplImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (void *)(arg1)->getIplImage();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Image_1wrapIplImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->wrapIplImage(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Image_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Image_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Image_1setQuantum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setQuantum(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Image_1topIsLowIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (bool)((yarp::sig::Image const *)arg1)->topIsLowIndex();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Image_1setTopIsLowIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTopIsLowIndex(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Image_1getRowArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1; 
  result = (char **)(arg1)->getRowArray();
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_FlexImage_1setPixelCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::FlexImage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPixelCode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_FlexImage_1setPixelSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::FlexImage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPixelSize(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_FlexImage_1setQuantum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::FlexImage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setQuantum(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1FlexImage(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::FlexImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::FlexImage *)new yarp::sig::FlexImage();
  *(yarp::sig::FlexImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1FlexImage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::FlexImage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_INVALID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1MONO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_MONO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1MONO16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_MONO16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1RGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_RGB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1RGBA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_RGBA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1BGRA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_BGRA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_INT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1HSV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_HSV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1BGR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_BGR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1MONO_1SIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_MONO_SIGNED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1RGB_1SIGNED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_RGB_SIGNED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1RGB_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_RGB_INT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1MONO_1FLOAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_MONO_FLOAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1RGB_1FLOAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_RGB_FLOAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1HSV_1FLOAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_HSV_FLOAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1ENCODING_1BAYER_1GRBG8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_ENCODING_BAYER_GRBG8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1ENCODING_1BAYER_1GRBG16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_ENCODING_BAYER_GRBG16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1ENCODING_1BAYER_1BGGR8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_ENCODING_BAYER_BGGR8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1ENCODING_1BAYER_1BGGR16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_ENCODING_BAYER_BGGR16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1ENCODING_1BAYER_1GBRG8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_ENCODING_BAYER_GBRG8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1ENCODING_1BAYER_1GBRG16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_ENCODING_BAYER_GBRG16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1ENCODING_1BAYER_1RGGB8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_ENCODING_BAYER_RGGB8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1PIXEL_1ENCODING_1BAYER_1RGGB16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  YarpVocabPixelTypesEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (YarpVocabPixelTypesEnum)VOCAB_PIXEL_ENCODING_BAYER_RGGB16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgb_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgb **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelRgb_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgb **)&jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgb_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgb **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelRgb_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgb **)&jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgb_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgb **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelRgb_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgb **)&jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelRgb_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::PixelRgb *)new yarp::sig::PixelRgb();
  *(yarp::sig::PixelRgb **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelRgb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (yarp::sig::PixelRgb *)new yarp::sig::PixelRgb(arg1,arg2,arg3);
  *(yarp::sig::PixelRgb **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PixelRgb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::PixelRgb **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgba_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgba **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelRgba_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgba **)&jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgba_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgba **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelRgba_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgba **)&jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgba_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgba **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelRgba_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgba **)&jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgba_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgba **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelRgba_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgba **)&jarg1; 
  result = (unsigned char) ((arg1)->a);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelRgba_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::PixelRgba *)new yarp::sig::PixelRgba();
  *(yarp::sig::PixelRgba **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelRgba_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (yarp::sig::PixelRgba *)new yarp::sig::PixelRgba(arg1,arg2,arg3,arg4);
  *(yarp::sig::PixelRgba **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PixelRgba(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::PixelRgba **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelBgra_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgra **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelBgra_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgra **)&jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelBgra_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgra **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelBgra_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgra **)&jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelBgra_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgra **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelBgra_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgra **)&jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelBgra_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgra **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelBgra_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgra **)&jarg1; 
  result = (unsigned char) ((arg1)->a);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelBgra_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::PixelBgra *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::PixelBgra *)new yarp::sig::PixelBgra();
  *(yarp::sig::PixelBgra **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelBgra_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  yarp::sig::PixelBgra *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (yarp::sig::PixelBgra *)new yarp::sig::PixelBgra(arg1,arg2,arg3,arg4);
  *(yarp::sig::PixelBgra **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PixelBgra(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::PixelBgra **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelBgr_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgr **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelBgr_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgr **)&jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelBgr_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgr **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelBgr_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgr **)&jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelBgr_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgr **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelBgr_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelBgr **)&jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelBgr_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::PixelBgr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::PixelBgr *)new yarp::sig::PixelBgr();
  *(yarp::sig::PixelBgr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelBgr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  yarp::sig::PixelBgr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (yarp::sig::PixelBgr *)new yarp::sig::PixelBgr(arg1,arg2,arg3);
  *(yarp::sig::PixelBgr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PixelBgr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::PixelBgr **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelHsv_1h_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsv **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelHsv_1h_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsv **)&jarg1; 
  result = (unsigned char) ((arg1)->h);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelHsv_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsv **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelHsv_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsv **)&jarg1; 
  result = (unsigned char) ((arg1)->s);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelHsv_1v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsv **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_PixelHsv_1v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsv **)&jarg1; 
  result = (unsigned char) ((arg1)->v);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelHsv(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::PixelHsv *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::PixelHsv *)new yarp::sig::PixelHsv();
  *(yarp::sig::PixelHsv **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PixelHsv(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::PixelHsv **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgbSigned_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbSigned **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jchar JNICALL Java_yarp_yarpJNI_PixelRgbSigned_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbSigned **)&jarg1; 
  result = (char) ((arg1)->r);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgbSigned_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbSigned **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jchar JNICALL Java_yarp_yarpJNI_PixelRgbSigned_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbSigned **)&jarg1; 
  result = (char) ((arg1)->g);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgbSigned_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbSigned **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jchar JNICALL Java_yarp_yarpJNI_PixelRgbSigned_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbSigned **)&jarg1; 
  result = (char) ((arg1)->b);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelRgbSigned(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::PixelRgbSigned *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::PixelRgbSigned *)new yarp::sig::PixelRgbSigned();
  *(yarp::sig::PixelRgbSigned **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PixelRgbSigned(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::PixelRgbSigned **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgbFloat_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbFloat **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jfloat JNICALL Java_yarp_yarpJNI_PixelRgbFloat_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbFloat **)&jarg1; 
  result = (float) ((arg1)->r);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgbFloat_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbFloat **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jfloat JNICALL Java_yarp_yarpJNI_PixelRgbFloat_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbFloat **)&jarg1; 
  result = (float) ((arg1)->g);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgbFloat_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbFloat **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jfloat JNICALL Java_yarp_yarpJNI_PixelRgbFloat_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbFloat **)&jarg1; 
  result = (float) ((arg1)->b);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelRgbFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::PixelRgbFloat *)new yarp::sig::PixelRgbFloat();
  *(yarp::sig::PixelRgbFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelRgbFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (yarp::sig::PixelRgbFloat *)new yarp::sig::PixelRgbFloat(arg1,arg2,arg3);
  *(yarp::sig::PixelRgbFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PixelRgbFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::PixelRgbFloat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgbInt_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbInt **)&jarg1; 
  arg2 = (yarp::os::NetInt32)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_PixelRgbInt_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbInt **)&jarg1; 
  result = (yarp::os::NetInt32) ((arg1)->r);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgbInt_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbInt **)&jarg1; 
  arg2 = (yarp::os::NetInt32)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_PixelRgbInt_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbInt **)&jarg1; 
  result = (yarp::os::NetInt32) ((arg1)->g);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelRgbInt_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbInt **)&jarg1; 
  arg2 = (yarp::os::NetInt32)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_PixelRgbInt_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelRgbInt **)&jarg1; 
  result = (yarp::os::NetInt32) ((arg1)->b);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelRgbInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::PixelRgbInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::PixelRgbInt *)new yarp::sig::PixelRgbInt();
  *(yarp::sig::PixelRgbInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelRgbInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgbInt *)new yarp::sig::PixelRgbInt(arg1,arg2,arg3);
  *(yarp::sig::PixelRgbInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PixelRgbInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::PixelRgbInt **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelHsvFloat_1h_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsvFloat **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT jfloat JNICALL Java_yarp_yarpJNI_PixelHsvFloat_1h_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsvFloat **)&jarg1; 
  result = (float) ((arg1)->h);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelHsvFloat_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsvFloat **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT jfloat JNICALL Java_yarp_yarpJNI_PixelHsvFloat_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsvFloat **)&jarg1; 
  result = (float) ((arg1)->s);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PixelHsvFloat_1v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsvFloat **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT jfloat JNICALL Java_yarp_yarpJNI_PixelHsvFloat_1v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::PixelHsvFloat **)&jarg1; 
  result = (float) ((arg1)->v);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PixelHsvFloat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::PixelHsvFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::PixelHsvFloat *)new yarp::sig::PixelHsvFloat();
  *(yarp::sig::PixelHsvFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PixelHsvFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::PixelHsvFloat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_FORMAT_1NULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)yarp::sig::file::FORMAT_NULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_FORMAT_1ANY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)yarp::sig::file::FORMAT_ANY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_FORMAT_1PGM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)yarp::sig::file::FORMAT_PGM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_FORMAT_1PPM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)yarp::sig::file::FORMAT_PPM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_FORMAT_1NUMERIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)yarp::sig::file::FORMAT_NUMERIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelBgr > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelBgr > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelBgr > & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_read_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_read_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_read_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< yarp::sig::PixelRgb > const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelBgr > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelBgr > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelBgr > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< yarp::sig::PixelBgr > const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_write_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< yarp::sig::PixelRgba > const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_write_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< unsigned char > const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_write_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< float > const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_write_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::Image *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Image **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Image const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)yarp::sig::file::write((yarp::sig::Image const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Sound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  yarp::sig::Sound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (yarp::sig::Sound *)new yarp::sig::Sound(arg1);
  *(yarp::sig::Sound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Sound_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::Sound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::Sound *)new yarp::sig::Sound();
  *(yarp::sig::Sound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Sound_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Sound *arg1 = 0 ;
  yarp::sig::Sound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Sound const & reference is null");
    return 0;
  } 
  result = (yarp::sig::Sound *)new yarp::sig::Sound((yarp::sig::Sound const &)*arg1);
  *(yarp::sig::Sound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Sound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Sound_1subSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::Sound result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->subSound(arg2,arg3);
  *(yarp::sig::Sound **)&jresult = new yarp::sig::Sound((const yarp::sig::Sound &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Sound_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Sound_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Sound_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((yarp::sig::Sound const *)arg1)->get(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Sound_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((yarp::sig::Sound const *)arg1)->get(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Sound_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Sound_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Sound_1getSafe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getSafe(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Sound_1getSafe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getSafe(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Sound_1setSafe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setSafe(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Sound_1setSafe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setSafe(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Sound_1isSample_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((yarp::sig::Sound const *)arg1)->isSample(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Sound_1isSample_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((yarp::sig::Sound const *)arg1)->isSample(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Sound_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Sound_1getFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  result = (int)((yarp::sig::Sound const *)arg1)->getFrequency();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Sound_1setFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFrequency(arg2);
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Sound_1getBytesPerSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  result = (int)((yarp::sig::Sound const *)arg1)->getBytesPerSample();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Sound_1getSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  result = (int)((yarp::sig::Sound const *)arg1)->getSamples();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Sound_1getChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  result = (int)((yarp::sig::Sound const *)arg1)->getChannels();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Sound_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Sound_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Sound_1getRawData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  result = (unsigned char *)((yarp::sig::Sound const *)arg1)->getRawData();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Sound_1getRawDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Sound **)&jarg1; 
  result = (int)((yarp::sig::Sound const *)arg1)->getRawDataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VectorBase_1getElementSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::VectorBase **)&jarg1; 
  result = (int)((yarp::sig::VectorBase const *)arg1)->getElementSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VectorBase_1getBottleTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::VectorBase **)&jarg1; 
  result = (int)((yarp::sig::VectorBase const *)arg1)->getBottleTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_VectorBase_1getListSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::VectorBase **)&jarg1; 
  result = ((yarp::sig::VectorBase const *)arg1)->getListSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_VectorBase_1getMemoryBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::VectorBase **)&jarg1; 
  result = (char *)((yarp::sig::VectorBase const *)arg1)->getMemoryBlock();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_VectorBase_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::VectorBase **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_VectorBase_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::VectorBase **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_VectorBase_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::VectorBase **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1VectorBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::VectorBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::Vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::Vector *)new yarp::sig::Vector();
  *(yarp::sig::Vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  yarp::sig::Vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (yarp::sig::Vector *)new yarp::sig::Vector(arg1);
  *(yarp::sig::Vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Vector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  yarp::sig::Vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (yarp::sig::Vector *)new yarp::sig::Vector(arg1,(double const &)*arg2);
  *(yarp::sig::Vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Vector_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  yarp::sig::Vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (yarp::sig::Vector *)new yarp::sig::Vector(arg1,(double const *)arg2);
  *(yarp::sig::Vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Vector_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Vector *arg1 = 0 ;
  yarp::sig::Vector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (yarp::sig::Vector *)new yarp::sig::Vector((yarp::sig::Vector const &)*arg1);
  *(yarp::sig::Vector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Vector_1size_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->size(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Vector_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Vector_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->resize(arg2,(double const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Vector_1size_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  result = ((yarp::sig::Vector const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Vector_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  result = ((yarp::sig::Vector const *)arg1)->length();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Vector_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  (arg1)->zero();
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Vector_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ((yarp::sig::Vector const *)arg1)->toString(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Vector_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((yarp::sig::Vector const *)arg1)->toString(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Vector_1toString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  result = ((yarp::sig::Vector const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Vector_1subVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  yarp::sig::Vector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = ((yarp::sig::Vector const *)arg1)->subVector(arg2,arg3);
  *(yarp::sig::Vector **)&jresult = new yarp::sig::Vector((const yarp::sig::Vector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Vector_1setSubvector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setSubvector(arg2,(yarp::sig::Vector const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Vector_1data_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  result = (double *)(arg1)->data();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Vector_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)((yarp::sig::Vector const *)arg1)->operator ==((yarp::sig::Vector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Vector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Vector_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Vector_1getGslVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  result = (void *)(arg1)->getGslVector();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Vector_1access_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (double *) &(arg1)->operator ()(arg2);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Vector_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Vector_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = *(yarp::os::ConnectionWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->write(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)yarp_sig_Vector_get(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::Vector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  yarp_sig_Vector_set(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::IConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IConfig_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::IConfig **)&jarg1; 
  arg2 = *(yarp::os::Searchable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Searchable & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->open(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IConfig_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::IConfig **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IConfig_1configure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::IConfig **)&jarg1; 
  arg2 = *(yarp::os::Searchable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Searchable & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->configure(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1IConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::IConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::IConfig *)new yarp::os::IConfig();
  *(yarp::os::IConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1DeviceDriver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::DeviceDriver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_DeviceDriver_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::DeviceDriver **)&jarg1; 
  arg2 = *(yarp::os::Searchable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Searchable & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->open(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_DeviceDriver_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DeviceDriver **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_DeviceDriver_1getImplementation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DeviceDriver **)&jarg1; 
  result = (yarp::dev::DeviceDriver *)(arg1)->getImplementation();
  *(yarp::dev::DeviceDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1DeviceDriver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::DeviceDriver *)new yarp::dev::DeviceDriver();
  *(yarp::dev::DeviceDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1DeviceResponder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::DeviceResponder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::DeviceResponder *)new yarp::dev::DeviceResponder();
  *(yarp::dev::DeviceResponder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DeviceResponder_1addUsage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addUsage((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DeviceResponder_1addUsage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addUsage((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DeviceResponder_1addUsage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return ;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addUsage((yarp::os::Bottle const &)*arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DeviceResponder_1addUsage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return ;
  } 
  (arg1)->addUsage((yarp::os::Bottle const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_DeviceResponder_1respond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Bottle **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->respond((yarp::os::Bottle const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_DeviceResponder_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  arg2 = *(yarp::os::ConnectionReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConnectionReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->read(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DeviceResponder_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::os::Bottle > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::os::Bottle > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DeviceResponder_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DeviceResponder_1makeUsage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  (arg1)->makeUsage();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DeviceResponder_1attach(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  arg2 = *(yarp::os::TypedReader< yarp::os::Bottle > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::os::Bottle > & reference is null");
    return ;
  } 
  (arg1)->attach(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1DeviceResponder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::DeviceResponder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PolyDriver_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::PolyDriver *)new yarp::dev::PolyDriver();
  *(yarp::dev::PolyDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PolyDriver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::dev::PolyDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  yarp::os::ConstString arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (yarp::dev::PolyDriver *)new yarp::dev::PolyDriver((yarp::os::ConstString const &)*arg1);
  *(yarp::dev::PolyDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PolyDriver_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Searchable *arg1 = 0 ;
  yarp::dev::PolyDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Searchable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Searchable & reference is null");
    return 0;
  } 
  result = (yarp::dev::PolyDriver *)new yarp::dev::PolyDriver(*arg1);
  *(yarp::dev::PolyDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PolyDriver_1open_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PolyDriver_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  arg2 = *(yarp::os::Searchable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Searchable & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->open(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PolyDriver_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::PolyDriver *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  arg2 = *(yarp::dev::PolyDriver **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::PolyDriver & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->link(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1take(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::DeviceDriver *)(arg1)->take();
  *(yarp::dev::DeviceDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PolyDriver_1give(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  arg2 = *(yarp::dev::DeviceDriver **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->give(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PolyDriver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PolyDriver_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PolyDriver_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (bool)((yarp::dev::PolyDriver const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1getOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::os::Bottle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (arg1)->getOptions();
  *(yarp::os::Bottle **)&jresult = new yarp::os::Bottle((const yarp::os::Bottle &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_PolyDriver_1getComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getComment((char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1getDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getDefaultValue((char const *)arg2);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getValue((char const *)arg2);
  *(yarp::os::Value **)&jresult = new yarp::os::Value((const yarp::os::Value &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1getImplementation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::DeviceDriver *)(arg1)->getImplementation();
  *(yarp::dev::DeviceDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewFrameGrabberImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IFrameGrabberImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IFrameGrabberImage *)yarp_dev_PolyDriver_viewFrameGrabberImage(arg1);
  *(yarp::dev::IFrameGrabberImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewIPositionControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IPositionControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IPositionControl *)yarp_dev_PolyDriver_viewIPositionControl(arg1);
  *(yarp::dev::IPositionControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewIVelocityControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IVelocityControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IVelocityControl *)yarp_dev_PolyDriver_viewIVelocityControl(arg1);
  *(yarp::dev::IVelocityControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewIEncoders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IEncoders *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IEncoders *)yarp_dev_PolyDriver_viewIEncoders(arg1);
  *(yarp::dev::IEncoders **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewIPidControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IPidControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IPidControl *)yarp_dev_PolyDriver_viewIPidControl(arg1);
  *(yarp::dev::IPidControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewIAmplifierControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IAmplifierControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IAmplifierControl *)yarp_dev_PolyDriver_viewIAmplifierControl(arg1);
  *(yarp::dev::IAmplifierControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewIControlLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IControlLimits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IControlLimits *)yarp_dev_PolyDriver_viewIControlLimits(arg1);
  *(yarp::dev::IControlLimits **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewICartesianControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::ICartesianControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::ICartesianControl *)yarp_dev_PolyDriver_viewICartesianControl(arg1);
  *(yarp::dev::ICartesianControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewIGazeControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IGazeControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IGazeControl *)yarp_dev_PolyDriver_viewIGazeControl(arg1);
  *(yarp::dev::IGazeControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewIImpedanceControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IImpedanceControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IImpedanceControl *)yarp_dev_PolyDriver_viewIImpedanceControl(arg1);
  *(yarp::dev::IImpedanceControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewITorqueControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::ITorqueControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::ITorqueControl *)yarp_dev_PolyDriver_viewITorqueControl(arg1);
  *(yarp::dev::ITorqueControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewIControlMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IControlMode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IControlMode *)yarp_dev_PolyDriver_viewIControlMode(arg1);
  *(yarp::dev::IControlMode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1viewIOpenLoopControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IOpenLoopControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::PolyDriver **)&jarg1; 
  result = (yarp::dev::IOpenLoopControl *)yarp_dev_PolyDriver_viewIOpenLoopControl(arg1);
  *(yarp::dev::IOpenLoopControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1DriverCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::DriverCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_DriverCreator_1toString_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DriverCreator **)&jarg1; 
  result = (arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_DriverCreator_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DriverCreator **)&jarg1; 
  result = (yarp::dev::DeviceDriver *)(arg1)->create();
  *(yarp::dev::DeviceDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_DriverCreator_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DriverCreator **)&jarg1; 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_DriverCreator_1getWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DriverCreator **)&jarg1; 
  result = (arg1)->getWrapper();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_DriverCreator_1getCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DriverCreator **)&jarg1; 
  result = (arg1)->getCode();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_DriverCreator_1owner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::dev::PolyDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::DriverCreator **)&jarg1; 
  result = (yarp::dev::PolyDriver *)(arg1)->owner();
  *(yarp::dev::PolyDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1StubDriverCreator(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  yarp::dev::StubDriverCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (yarp::dev::StubDriverCreator *)new yarp::dev::StubDriverCreator((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  *(yarp::dev::StubDriverCreator **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_StubDriverCreator_1toString_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::StubDriverCreator **)&jarg1; 
  result = (arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_StubDriverCreator_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::StubDriverCreator **)&jarg1; 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_StubDriverCreator_1getWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::StubDriverCreator **)&jarg1; 
  result = (arg1)->getWrapper();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_StubDriverCreator_1getCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::StubDriverCreator **)&jarg1; 
  result = (arg1)->getCode();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_StubDriverCreator_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::StubDriverCreator **)&jarg1; 
  result = (yarp::dev::DeviceDriver *)(arg1)->create();
  *(yarp::dev::DeviceDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1StubDriverCreator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::StubDriverCreator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Drivers_1factory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::Drivers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::Drivers *) &yarp::dev::Drivers::factory();
  *(yarp::dev::Drivers **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Drivers_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Drivers **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (yarp::dev::DeviceDriver *)(arg1)->open((char const *)arg2);
  *(yarp::dev::DeviceDriver **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Drivers_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::Drivers **)&jarg1; 
  arg2 = *(yarp::os::Searchable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Searchable & reference is null");
    return 0;
  } 
  result = (yarp::dev::DeviceDriver *)(arg1)->open(*arg2);
  *(yarp::dev::DeviceDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_Drivers_1toString_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Drivers **)&jarg1; 
  result = (arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Drivers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::Drivers **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Drivers_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  yarp::dev::DriverCreator *arg2 = (yarp::dev::DriverCreator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::Drivers **)&jarg1; 
  arg2 = *(yarp::dev::DriverCreator **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Drivers_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::dev::DriverCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Drivers **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (yarp::dev::DriverCreator *)(arg1)->find((char const *)arg2);
  *(yarp::dev::DriverCreator **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_Drivers_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Drivers **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->remove((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_Drivers_1yarpdev(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  char **arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = (int)yarp::dev::Drivers::yarpdev(arg1,arg2);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_YARP_1FEATURE_1BRIGHTNESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cameraFeature_id_t result;
  
  (void)jenv;
  (void)jcls;
  result = (cameraFeature_id_t)YARP_FEATURE_BRIGHTNESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IFrameGrabber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IFrameGrabber **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabber_1getRawBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabber **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getRawBuffer(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IFrameGrabber_1getRawBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabber **)&jarg1; 
  result = (int)(arg1)->getRawBufferSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IFrameGrabber_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabber **)&jarg1; 
  result = (int)((yarp::dev::IFrameGrabber const *)arg1)->height();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IFrameGrabber_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabber **)&jarg1; 
  result = (int)((yarp::dev::IFrameGrabber const *)arg1)->width();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IFrameGrabberRgb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IFrameGrabberRgb **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberRgb_1getRgbBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberRgb **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getRgbBuffer(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IFrameGrabberRgb_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberRgb **)&jarg1; 
  result = (int)((yarp::dev::IFrameGrabberRgb const *)arg1)->height();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IFrameGrabberRgb_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberRgb **)&jarg1; 
  result = (int)((yarp::dev::IFrameGrabberRgb const *)arg1)->width();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IFrameGrabberImage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IFrameGrabberImage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberImage_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IFrameGrabberImage **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getImage(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IFrameGrabberImage_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberImage **)&jarg1; 
  result = (int)((yarp::dev::IFrameGrabberImage const *)arg1)->height();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IFrameGrabberImage_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberImage **)&jarg1; 
  result = (int)((yarp::dev::IFrameGrabberImage const *)arg1)->width();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IFrameGrabberImageRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IFrameGrabberImageRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberImageRaw_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IFrameGrabberImageRaw **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getImage(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IFrameGrabberImageRaw_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberImageRaw **)&jarg1; 
  result = (int)((yarp::dev::IFrameGrabberImageRaw const *)arg1)->height();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IFrameGrabberImageRaw_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberImageRaw **)&jarg1; 
  result = (int)((yarp::dev::IFrameGrabberImageRaw const *)arg1)->width();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IFrameWriterImage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IFrameWriterImage *arg1 = (yarp::dev::IFrameWriterImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IFrameWriterImage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameWriterImage_1putImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameWriterImage *arg1 = (yarp::dev::IFrameWriterImage *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IFrameWriterImage **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->putImage(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IFrameGrabberControls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1setBrightness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setBrightness(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1setExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setExposure(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1setSharpness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setSharpness(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1setWhiteBalance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setWhiteBalance(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1setHue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setHue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1setSaturation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setSaturation(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1setGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setGamma(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1setShutter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setShutter(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1setGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setGain(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1setIris(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setIris(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1getBrightness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  result = (double)(arg1)->getBrightness();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1getExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  result = (double)(arg1)->getExposure();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1getSharpness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  result = (double)(arg1)->getSharpness();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1getWhiteBalance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg3 = *(double **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getWhiteBalance(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1getHue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  result = (double)(arg1)->getHue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1getSaturation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  result = (double)(arg1)->getSaturation();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1getGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  result = (double)(arg1)->getGamma();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1getShutter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  result = (double)(arg1)->getShutter();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1getGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  result = (double)(arg1)->getGain();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IFrameGrabberControls_1getIris(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControls **)&jarg1; 
  result = (double)(arg1)->getIris();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1hasFeatureDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasFeatureDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setFeatureDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setFeatureDC1394(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getFeatureDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getFeatureDC1394(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1hasOnOffDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasOnOffDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setActiveDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setActiveDC1394(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getActiveDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getActiveDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1hasAutoDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasAutoDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1hasManualDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasManualDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1hasOnePushDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasOnePushDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setModeDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setModeDC1394(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getModeDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getModeDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setOnePushDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setOnePushDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getVideoModeMaskDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (unsigned int)(arg1)->getVideoModeMaskDC1394();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getVideoModeDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (unsigned int)(arg1)->getVideoModeDC1394();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setVideoModeDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setVideoModeDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getFPSMaskDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (unsigned int)(arg1)->getFPSMaskDC1394();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getFPSDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (unsigned int)(arg1)->getFPSDC1394();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setFPSDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setFPSDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getISOSpeedDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (unsigned int)(arg1)->getISOSpeedDC1394();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setISOSpeedDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setISOSpeedDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getColorCodingMaskDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->getColorCodingMaskDC1394(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getColorCodingDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (unsigned int)(arg1)->getColorCodingDC1394();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setColorCodingDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setColorCodingDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setWhiteBalanceDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setWhiteBalanceDC1394(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getWhiteBalanceDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg3 = *(double **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getWhiteBalanceDC1394(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getFormat7MaxWindowDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  arg3 = *(unsigned int **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  arg4 = *(unsigned int **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  arg5 = *(unsigned int **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  arg6 = *(unsigned int **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  arg7 = *(unsigned int **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getFormat7MaxWindowDC1394(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getFormat7WindowDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  arg3 = *(unsigned int **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  arg4 = *(int **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  arg5 = *(int **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getFormat7WindowDC1394(*arg2,*arg3,*arg4,*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setFormat7WindowDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->setFormat7WindowDC1394(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setOperationModeDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setOperationModeDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getOperationModeDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (bool)(arg1)->getOperationModeDC1394();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setTransmissionDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setTransmissionDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getTransmissionDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (bool)(arg1)->getTransmissionDC1394();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setBroadcastDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setBroadcastDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setDefaultsDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (bool)(arg1)->setDefaultsDC1394();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setResetDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (bool)(arg1)->setResetDC1394();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setPowerDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setPowerDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setCaptureDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setCaptureDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1getBytesPerPacketDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  result = (unsigned int)(arg1)->getBytesPerPacketDC1394();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1setBytesPerPacketDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->setBytesPerPacketDC1394(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IFrameGrabberControlsDC1394(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IAudioVisualGrabber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IAudioVisualGrabber *arg1 = (yarp::dev::IAudioVisualGrabber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IAudioVisualGrabber **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAudioVisualGrabber_1getAudioVisual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IAudioVisualGrabber *arg1 = (yarp::dev::IAudioVisualGrabber *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::sig::Sound *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IAudioVisualGrabber **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Sound **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Sound & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getAudioVisual(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IFrameWriterAudioVisual(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IFrameWriterAudioVisual *arg1 = (yarp::dev::IFrameWriterAudioVisual *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IFrameWriterAudioVisual **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IFrameWriterAudioVisual_1putAudioVisual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IFrameWriterAudioVisual *arg1 = (yarp::dev::IFrameWriterAudioVisual *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::sig::Sound *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IFrameWriterAudioVisual **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Sound **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Sound & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->putAudioVisual(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IAudioVisualStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IAudioVisualStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAudioVisualStream_1hasAudio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAudioVisualStream **)&jarg1; 
  result = (bool)(arg1)->hasAudio();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAudioVisualStream_1hasVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAudioVisualStream **)&jarg1; 
  result = (bool)(arg1)->hasVideo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAudioVisualStream_1hasRawVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAudioVisualStream **)&jarg1; 
  result = (bool)(arg1)->hasRawVideo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1JOINTTYPE_1REVOLUTE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::dev::JointTypeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::JointTypeEnum)yarp::dev::VOCAB_JOINTTYPE_REVOLUTE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1JOINTTYPE_1PRISMATIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::dev::JointTypeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::JointTypeEnum)yarp::dev::VOCAB_JOINTTYPE_PRISMATIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_VOCAB_1JOINTTYPE_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  yarp::dev::JointTypeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::JointTypeEnum)yarp::dev::VOCAB_JOINTTYPE_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CalibrationParameters_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_CalibrationParameters_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  result = (unsigned int) ((arg1)->type);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CalibrationParameters_1param1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->param1 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_CalibrationParameters_1param1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  result = (double) ((arg1)->param1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CalibrationParameters_1param2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->param2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_CalibrationParameters_1param2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  result = (double) ((arg1)->param2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CalibrationParameters_1param3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->param3 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_CalibrationParameters_1param3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  result = (double) ((arg1)->param3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CalibrationParameters_1param4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->param4 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_CalibrationParameters_1param4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  result = (double) ((arg1)->param4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CalibrationParameters_1param5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->param5 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_CalibrationParameters_1param5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  result = (double) ((arg1)->param5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CalibrationParameters_1paramZero_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->paramZero = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_CalibrationParameters_1paramZero_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  result = (double) ((arg1)->paramZero);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1CalibrationParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::CalibrationParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::CalibrationParameters *)new yarp::dev::CalibrationParameters();
  *(yarp::dev::CalibrationParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1CalibrationParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::CalibrationParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IPidControlRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1setPidRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  Pid *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Pid **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Pid const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setPidRaw(arg2,(Pid const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1setPidsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = *(Pid **)&jarg2; 
  result = (bool)(arg1)->setPidsRaw((Pid const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1setReferenceRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setReferenceRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1setReferencesRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setReferencesRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1setErrorLimitRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setErrorLimitRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1setErrorLimitsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setErrorLimitsRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1getErrorRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getErrorRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1getErrorsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getErrorsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1getOutputRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getOutputRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1getOutputsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getOutputsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1getPidRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  Pid *arg3 = (Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Pid **)&jarg3; 
  result = (bool)(arg1)->getPidRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1getPidsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = *(Pid **)&jarg2; 
  result = (bool)(arg1)->getPidsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1getReferenceRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getReferenceRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1getReferencesRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getReferencesRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1getErrorLimitRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getErrorLimitRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1getErrorLimitsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getErrorLimitsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1resetPidRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetPidRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1disablePidRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disablePidRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1enablePidRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enablePidRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControlRaw_1setOffsetRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setOffsetRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IPidControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1setPids_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(Pid **)&jarg2; 
  result = (bool)(arg1)->setPids((Pid const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1setReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setReference(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1setReferences_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setReferences((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1setErrorLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setErrorLimit(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1setErrorLimits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setErrorLimits((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getError(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getErrors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getErrors(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getOutput(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getOutputs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getOutputs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getPids_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(Pid **)&jarg2; 
  result = (bool)(arg1)->getPids(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getReference_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getReference(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getReferences_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getReferences(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getErrorLimit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getErrorLimit(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getErrorLimits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getErrorLimits(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1resetPid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetPid(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1disablePid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disablePid(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1enablePid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enablePid(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1setOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setOffset(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1setReferences_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_setReferences__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getReference_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getReference__SWIG_1(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getReferences_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getReferences__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1setErrorLimits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_setErrorLimits__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getErrorLimit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getErrorLimit__SWIG_1(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getErrorLimits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getErrorLimits__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getError__SWIG_1(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getErrors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getErrors__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getOutput__SWIG_1(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getOutputs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPidControl_getOutputs__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1setPid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  yarp::dev::Pid arg3 ;
  yarp::dev::Pid *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(yarp::dev::Pid **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null yarp::dev::Pid");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)yarp_dev_IPidControl_setPid(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1setPids_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< yarp::dev::Pid > arg2 ;
  std::vector< yarp::dev::Pid > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  argp2 = *(std::vector< yarp::dev::Pid > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< yarp::dev::Pid >");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)yarp_dev_IPidControl_setPids__SWIG_1(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getPid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< yarp::dev::Pid > arg3 ;
  std::vector< yarp::dev::Pid > *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(std::vector< yarp::dev::Pid > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< yarp::dev::Pid >");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)yarp_dev_IPidControl_getPid(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPidControl_1getPids_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< yarp::dev::Pid > arg2 ;
  std::vector< yarp::dev::Pid > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPidControl **)&jarg1; 
  argp2 = *(std::vector< yarp::dev::Pid > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< yarp::dev::Pid >");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)yarp_dev_IPidControl_getPids__SWIG_1(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IAmplifierControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1enableAmp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enableAmp(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1disableAmp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disableAmp(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getAmpStatus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAmpStatus(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getAmpStatus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (bool)(arg1)->getAmpStatus(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getCurrents_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getCurrents(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getCurrent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getCurrent(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getMaxCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getMaxCurrent(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1setMaxCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setMaxCurrent(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getNominalCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getNominalCurrent(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getPeakCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getPeakCurrent(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1setPeakCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setPeakCurrent(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getPWM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getPWM(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getPWMLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getPWMLimit(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1setPWMLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setPWMLimit(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getPowerSupplyVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getPowerSupplyVoltage(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getCurrents_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IAmplifierControl_getCurrents__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControl_1getCurrent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IAmplifierControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IAmplifierControl_getCurrent__SWIG_1(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IAmplifierControlRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1enableAmpRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enableAmpRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1disableAmpRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disableAmpRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1getAmpStatusRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAmpStatusRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1getAmpStatusRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (bool)(arg1)->getAmpStatusRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1getCurrentsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getCurrentsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1getCurrentRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getCurrentRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1setMaxCurrentRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setMaxCurrentRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1getMaxCurrentRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getMaxCurrentRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1getNominalCurrentRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getNominalCurrentRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1getPeakCurrentRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getPeakCurrentRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1setPeakCurrentRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setPeakCurrentRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1getPWMRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getPWMRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1getPWMLimitRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getPWMLimitRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1setPWMLimitRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setPWMLimitRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAmplifierControlRaw_1getPowerSupplyVoltageRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAmplifierControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getPowerSupplyVoltageRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IControlCalibrationRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IControlCalibrationRaw *arg1 = (yarp::dev::IControlCalibrationRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IControlCalibrationRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibrationRaw_1calibrateRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibrationRaw *arg1 = (yarp::dev::IControlCalibrationRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibrationRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->calibrateRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibrationRaw_1doneRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibrationRaw *arg1 = (yarp::dev::IControlCalibrationRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibrationRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->doneRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IControlCalibration2Raw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IControlCalibration2Raw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2Raw_1calibrate2Raw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration2Raw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (bool)(arg1)->calibrate2Raw(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2Raw_1setCalibrationParametersRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  int arg2 ;
  yarp::dev::CalibrationParameters *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IControlCalibration2Raw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::dev::CalibrationParameters **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::CalibrationParameters const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setCalibrationParametersRaw(arg2,(yarp::dev::CalibrationParameters const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2Raw_1doneRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration2Raw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->doneRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IControlCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IControlCalibration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration_1calibrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->calibrate(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration_1done(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->done(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration_1setCalibrator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  ICalibrator *arg2 = (ICalibrator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration **)&jarg1; 
  arg2 = *(ICalibrator **)&jarg2; 
  result = (bool)(arg1)->setCalibrator(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration_1calibrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration **)&jarg1; 
  result = (bool)(arg1)->calibrate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration_1park_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->park(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration_1park_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration **)&jarg1; 
  result = (bool)(arg1)->park();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IControlCalibration2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IControlCalibration2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2_1calibrate2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration2 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (bool)(arg1)->calibrate2(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2_1setCalibrationParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  int arg2 ;
  yarp::dev::CalibrationParameters *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IControlCalibration2 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::dev::CalibrationParameters **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::CalibrationParameters const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setCalibrationParameters(arg2,(yarp::dev::CalibrationParameters const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2_1done(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration2 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->done(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2_1setCalibrator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  ICalibrator *arg2 = (ICalibrator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration2 **)&jarg1; 
  arg2 = *(ICalibrator **)&jarg2; 
  result = (bool)(arg1)->setCalibrator(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2_1calibrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration2 **)&jarg1; 
  result = (bool)(arg1)->calibrate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2_1park_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration2 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->park(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2_1park_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration2 **)&jarg1; 
  result = (bool)(arg1)->park();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2_1abortCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration2 **)&jarg1; 
  result = (bool)(arg1)->abortCalibration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlCalibration2_1abortPark(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlCalibration2 **)&jarg1; 
  result = (bool)(arg1)->abortPark();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IControlDebug(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IControlDebug **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlDebug_1setPrintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  int (*arg2)(char const *,...) = (int (*)(char const *,...)) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlDebug **)&jarg1; 
  arg2 = *(int (**)(char const *,...))&jarg2; 
  result = (bool)(arg1)->setPrintFunction(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlDebug_1loadBootMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlDebug **)&jarg1; 
  result = (bool)(arg1)->loadBootMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlDebug_1saveBootMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlDebug **)&jarg1; 
  result = (bool)(arg1)->saveBootMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IControlLimits(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IControlLimits **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlLimits_1setLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlLimits **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->setLimits(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlLimits_1getLimits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlLimits **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->getLimits(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlLimits_1getLimits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::dev::IControlLimits **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< double > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IControlLimits_getLimits__SWIG_1(arg1,arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IControlLimitsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IControlLimitsRaw *arg1 = (yarp::dev::IControlLimitsRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IControlLimitsRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlLimitsRaw_1setLimitsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::IControlLimitsRaw *arg1 = (yarp::dev::IControlLimitsRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlLimitsRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->setLimitsRaw(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlLimitsRaw_1getLimitsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::IControlLimitsRaw *arg1 = (yarp::dev::IControlLimitsRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlLimitsRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->getLimitsRaw(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IAxisInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IAxisInfo *arg1 = (yarp::dev::IAxisInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IAxisInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAxisInfo_1getAxisName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAxisInfo *arg1 = (yarp::dev::IAxisInfo *) 0 ;
  int arg2 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAxisInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::os::ConstString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConstString & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getAxisName(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAxisInfo_1getJointType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAxisInfo *arg1 = (yarp::dev::IAxisInfo *) 0 ;
  int arg2 ;
  yarp::dev::JointTypeEnum *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAxisInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::dev::JointTypeEnum **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::JointTypeEnum & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getJointType(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IAxisInfoRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IAxisInfoRaw *arg1 = (yarp::dev::IAxisInfoRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IAxisInfoRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAxisInfoRaw_1getAxisNameRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAxisInfoRaw *arg1 = (yarp::dev::IAxisInfoRaw *) 0 ;
  int arg2 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAxisInfoRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::os::ConstString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConstString & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getAxisNameRaw(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IAxisInfoRaw_1getJointTypeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IAxisInfoRaw *arg1 = (yarp::dev::IAxisInfoRaw *) 0 ;
  int arg2 ;
  yarp::dev::JointTypeEnum *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IAxisInfoRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::dev::JointTypeEnum **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::JointTypeEnum & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getJointTypeRaw(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1kp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kp = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Pid_1kp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  result = (double) ((arg1)->kp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1kd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kd = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Pid_1kd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  result = (double) ((arg1)->kd);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1ki_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ki = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Pid_1ki_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  result = (double) ((arg1)->ki);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1max_1int_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max_int = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Pid_1max_1int_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  result = (double) ((arg1)->max_int);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1scale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Pid_1scale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  result = (double) ((arg1)->scale);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1max_1output_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max_output = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Pid_1max_1output_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  result = (double) ((arg1)->max_output);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Pid_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  result = (double) ((arg1)->offset);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1stiction_1up_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->stiction_up_val = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Pid_1stiction_1up_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  result = (double) ((arg1)->stiction_up_val);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1stiction_1down_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->stiction_down_val = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Pid_1stiction_1down_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  result = (double) ((arg1)->stiction_down_val);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1kff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->kff = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_Pid_1kff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  result = (double) ((arg1)->kff);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Pid_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::Pid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::Pid *)new yarp::dev::Pid();
  *(yarp::dev::Pid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1Pid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Pid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  yarp::dev::Pid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (yarp::dev::Pid *)new yarp::dev::Pid(arg1,arg2,arg3,arg4,arg5,arg6);
  *(yarp::dev::Pid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1Pid_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  yarp::dev::Pid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  result = (yarp::dev::Pid *)new yarp::dev::Pid(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(yarp::dev::Pid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1setMaxInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxInt(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1setMaxOut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxOut(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_Pid_1setStictionValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::Pid **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setStictionValues(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CartesianEventParameters_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEventParameters **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_CartesianEventParameters_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEventParameters **)&jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->type);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CartesianEventParameters_1motionOngoingCheckPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEventParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_CartesianEventParameters_1motionOngoingCheckPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEventParameters **)&jarg1; 
  result = (double) ((arg1)->motionOngoingCheckPoint);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1CartesianEventParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::CartesianEventParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::CartesianEventParameters *)new yarp::dev::CartesianEventParameters();
  *(yarp::dev::CartesianEventParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1CartesianEventParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::CartesianEventParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CartesianEventVariables_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEventVariables **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_CartesianEventVariables_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEventVariables **)&jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->type);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CartesianEventVariables_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEventVariables **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->time = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_CartesianEventVariables_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEventVariables **)&jarg1; 
  result = (double) ((arg1)->time);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CartesianEventVariables_1motionOngoingCheckPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEventVariables **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_CartesianEventVariables_1motionOngoingCheckPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEventVariables **)&jarg1; 
  result = (double) ((arg1)->motionOngoingCheckPoint);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1CartesianEventVariables(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::CartesianEventVariables *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::CartesianEventVariables *)new yarp::dev::CartesianEventVariables();
  *(yarp::dev::CartesianEventVariables **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1CartesianEventVariables(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::CartesianEventVariables **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1CartesianEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::CartesianEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CartesianEvent_1cartesianEventParameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventParameters *arg2 = (yarp::dev::CartesianEventParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::CartesianEvent **)&jarg1; 
  arg2 = *(yarp::dev::CartesianEventParameters **)&jarg2; 
  if (arg1) (arg1)->cartesianEventParameters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_CartesianEvent_1cartesianEventParameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEvent **)&jarg1; 
  result = (yarp::dev::CartesianEventParameters *)& ((arg1)->cartesianEventParameters);
  *(yarp::dev::CartesianEventParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CartesianEvent_1cartesianEventVariables_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventVariables *arg2 = (yarp::dev::CartesianEventVariables *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::CartesianEvent **)&jarg1; 
  arg2 = *(yarp::dev::CartesianEventVariables **)&jarg2; 
  if (arg1) (arg1)->cartesianEventVariables = *arg2;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_CartesianEvent_1cartesianEventVariables_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventVariables *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEvent **)&jarg1; 
  result = (yarp::dev::CartesianEventVariables *)& ((arg1)->cartesianEventVariables);
  *(yarp::dev::CartesianEventVariables **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_CartesianEvent_1cartesianEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::CartesianEvent **)&jarg1; 
  (arg1)->cartesianEventCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ICartesianControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1setTrackingMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setTrackingMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getTrackingMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->getTrackingMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1setReferenceMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setReferenceMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getReferenceMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->getReferenceMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1setPosePriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setPosePriority((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getPosePriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::os::ConstString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::ConstString & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getPosePriority(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::Stamp **)&jarg4; 
  result = (bool)(arg1)->getPose(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getPose(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getPose_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::os::Stamp *arg5 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg5 = *(yarp::os::Stamp **)&jarg5; 
  result = (bool)(arg1)->getPose(arg2,*arg3,*arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getPose_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getPose(arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1goToPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->goToPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1goToPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->goToPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1goToPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->goToPosition((yarp::sig::Vector const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1goToPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->goToPosition((yarp::sig::Vector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1goToPoseSync_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->goToPoseSync((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1goToPoseSync_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->goToPoseSync((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1goToPositionSync_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->goToPositionSync((yarp::sig::Vector const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1goToPositionSync_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->goToPositionSync((yarp::sig::Vector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getDesired(*arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1askForPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  yarp::sig::Vector *arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg5 = *(yarp::sig::Vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg6 = *(yarp::sig::Vector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->askForPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,*arg4,*arg5,*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1askForPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  yarp::sig::Vector *arg6 = 0 ;
  yarp::sig::Vector *arg7 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg5 = *(yarp::sig::Vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg6 = *(yarp::sig::Vector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg7 = *(yarp::sig::Vector **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->askForPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,(yarp::sig::Vector const &)*arg4,*arg5,*arg6,*arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1askForPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg5 = *(yarp::sig::Vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->askForPosition((yarp::sig::Vector const &)*arg2,*arg3,*arg4,*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1askForPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  yarp::sig::Vector *arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg5 = *(yarp::sig::Vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg6 = *(yarp::sig::Vector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->askForPosition((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,*arg4,*arg5,*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getDOF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getDOF(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1setDOF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setDOF((yarp::sig::Vector const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getRestPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getRestPos(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1setRestPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setRestPos((yarp::sig::Vector const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getRestWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getRestWeights(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1setRestWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setRestWeights((yarp::sig::Vector const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->getLimits(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1setLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->setLimits(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getTrajTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getTrajTime(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1setTrajTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setTrajTime(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getInTargetTol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getInTargetTol(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1setInTargetTol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setInTargetTol(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getJointsVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getJointsVelocities(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getTaskVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getTaskVelocities(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1setTaskVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setTaskVelocities((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1attachTipFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->attachTipFrame((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getTipFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getTipFrame(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1removeTipFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  result = (bool)(arg1)->removeTipFrame();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1checkMotionDone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->checkMotionDone(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1waitMotionDone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->waitMotionDone(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1waitMotionDone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->waitMotionDone(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1waitMotionDone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  result = (bool)(arg1)->waitMotionDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1stopControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  result = (bool)(arg1)->stopControl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1storeContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->storeContext(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1restoreContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->restoreContext(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1deleteContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->deleteContext(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1getInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getInfo(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1registerEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::dev::CartesianEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::dev::CartesianEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::CartesianEvent & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->registerEvent(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1unregisterEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::dev::CartesianEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::dev::CartesianEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::CartesianEvent & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->unregisterEvent(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1tweakSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->tweakSet((yarp::os::Bottle const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1tweakGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->tweakGet(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1checkMotionDone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  arg2 = *(std::vector< bool > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bool > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_ICartesianControl_checkMotionDone__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1checkMotionDone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  result = (bool)yarp_dev_ICartesianControl_checkMotionDone__SWIG_2(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICartesianControl_1isMotionDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICartesianControl **)&jarg1; 
  result = (bool)yarp_dev_ICartesianControl_isMotionDone(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_GazeEventParameters_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEventParameters **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_GazeEventParameters_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEventParameters **)&jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->type);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_GazeEventParameters_1motionOngoingCheckPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEventParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_GazeEventParameters_1motionOngoingCheckPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEventParameters **)&jarg1; 
  result = (double) ((arg1)->motionOngoingCheckPoint);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1GazeEventParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::GazeEventParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::GazeEventParameters *)new yarp::dev::GazeEventParameters();
  *(yarp::dev::GazeEventParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1GazeEventParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::GazeEventParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_GazeEventVariables_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEventVariables **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_GazeEventVariables_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEventVariables **)&jarg1; 
  result = (yarp::os::ConstString *) & ((arg1)->type);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_GazeEventVariables_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEventVariables **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->time = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_GazeEventVariables_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEventVariables **)&jarg1; 
  result = (double) ((arg1)->time);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_GazeEventVariables_1motionOngoingCheckPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEventVariables **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_GazeEventVariables_1motionOngoingCheckPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEventVariables **)&jarg1; 
  result = (double) ((arg1)->motionOngoingCheckPoint);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1GazeEventVariables(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::GazeEventVariables *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::GazeEventVariables *)new yarp::dev::GazeEventVariables();
  *(yarp::dev::GazeEventVariables **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1GazeEventVariables(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::GazeEventVariables **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1GazeEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::GazeEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_GazeEvent_1gazeEventParameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventParameters *arg2 = (yarp::dev::GazeEventParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::GazeEvent **)&jarg1; 
  arg2 = *(yarp::dev::GazeEventParameters **)&jarg2; 
  if (arg1) (arg1)->gazeEventParameters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_GazeEvent_1gazeEventParameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEvent **)&jarg1; 
  result = (yarp::dev::GazeEventParameters *)& ((arg1)->gazeEventParameters);
  *(yarp::dev::GazeEventParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_GazeEvent_1gazeEventVariables_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventVariables *arg2 = (yarp::dev::GazeEventVariables *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::GazeEvent **)&jarg1; 
  arg2 = *(yarp::dev::GazeEventVariables **)&jarg2; 
  if (arg1) (arg1)->gazeEventVariables = *arg2;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_GazeEvent_1gazeEventVariables_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventVariables *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEvent **)&jarg1; 
  result = (yarp::dev::GazeEventVariables *)& ((arg1)->gazeEventVariables);
  *(yarp::dev::GazeEventVariables **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_GazeEvent_1gazeEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::GazeEvent **)&jarg1; 
  (arg1)->gazeEventCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IGazeControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setTrackingMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setTrackingMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getTrackingMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->getTrackingMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setStabilizationMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setStabilizationMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getStabilizationMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->getStabilizationMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getFixationPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::os::Stamp *arg3 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Stamp **)&jarg3; 
  result = (bool)(arg1)->getFixationPoint(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getFixationPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getFixationPoint(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::os::Stamp *arg3 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::os::Stamp **)&jarg3; 
  result = (bool)(arg1)->getAngles(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getAngles(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1lookAtFixationPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->lookAtFixationPoint((yarp::sig::Vector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1lookAtAbsAngles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->lookAtAbsAngles((yarp::sig::Vector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1lookAtRelAngles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->lookAtRelAngles((yarp::sig::Vector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1lookAtMonoPixel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->lookAtMonoPixel(arg2,(yarp::sig::Vector const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1lookAtMonoPixel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->lookAtMonoPixel(arg2,(yarp::sig::Vector const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1lookAtMonoPixelWithVergence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->lookAtMonoPixelWithVergence(arg2,(yarp::sig::Vector const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1lookAtStereoPixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->lookAtStereoPixels((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getNeckTrajTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getNeckTrajTime(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getEyesTrajTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getEyesTrajTime(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getVORGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getVORGain(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getOCRGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getOCRGain(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getSaccadesMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->getSaccadesMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getSaccadesInhibitionPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getSaccadesInhibitionPeriod(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getSaccadesActivationAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getSaccadesActivationAngle(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getLeftEyePose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::Stamp **)&jarg4; 
  result = (bool)(arg1)->getLeftEyePose(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getLeftEyePose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getLeftEyePose(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getRightEyePose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::Stamp **)&jarg4; 
  result = (bool)(arg1)->getRightEyePose(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getRightEyePose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getRightEyePose(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getHeadPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg4 = *(yarp::os::Stamp **)&jarg4; 
  result = (bool)(arg1)->getHeadPose(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getHeadPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getHeadPose(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1get2DPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->get2DPixel(arg2,(yarp::sig::Vector const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1get3DPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  yarp::sig::Vector *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(yarp::sig::Vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->get3DPoint(arg2,(yarp::sig::Vector const &)*arg3,arg4,*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1get3DPointOnPlane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg5 = *(yarp::sig::Vector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->get3DPointOnPlane(arg2,(yarp::sig::Vector const &)*arg3,(yarp::sig::Vector const &)*arg4,*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1get3DPointFromAngles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->get3DPointFromAngles(arg2,(yarp::sig::Vector const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getAnglesFrom3DPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getAnglesFrom3DPoint((yarp::sig::Vector const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1triangulate3DPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg3 = *(yarp::sig::Vector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector const & reference is null");
    return 0;
  } 
  arg4 = *(yarp::sig::Vector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->triangulate3DPoint((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getJointsDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getJointsDesired(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getJointsVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::sig::Vector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Vector & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getJointsVelocities(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getStereoOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getStereoOptions(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setNeckTrajTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setNeckTrajTime(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setEyesTrajTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setEyesTrajTime(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setVORGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setVORGain(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setOCRGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setOCRGain(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setSaccadesMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setSaccadesMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setSaccadesInhibitionPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setSaccadesInhibitionPeriod(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setSaccadesActivationAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setSaccadesActivationAngle(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setStereoOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setStereoOptions((yarp::os::Bottle const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1bindNeckPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->bindNeckPitch(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1blockNeckPitch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->blockNeckPitch(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1blockNeckPitch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->blockNeckPitch();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1bindNeckRoll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->bindNeckRoll(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1blockNeckRoll_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->blockNeckRoll(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1blockNeckRoll_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->blockNeckRoll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1bindNeckYaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->bindNeckYaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1blockNeckYaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->blockNeckYaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1blockNeckYaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->blockNeckYaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1blockEyes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->blockEyes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1blockEyes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->blockEyes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getNeckPitchRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getNeckPitchRange(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getNeckRollRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getNeckRollRange(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getNeckYawRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getNeckYawRange(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getBlockedVergence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getBlockedVergence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1clearNeckPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->clearNeckPitch();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1clearNeckRoll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->clearNeckRoll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1clearNeckYaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->clearNeckYaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1clearEyes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->clearEyes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getNeckAngleUserTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getNeckAngleUserTolerance(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1setNeckAngleUserTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setNeckAngleUserTolerance(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1checkMotionDone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->checkMotionDone(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1waitMotionDone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->waitMotionDone(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1waitMotionDone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->waitMotionDone(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1waitMotionDone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->waitMotionDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1checkSaccadeDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->checkSaccadeDone(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1waitSaccadeDone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->waitSaccadeDone(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1waitSaccadeDone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->waitSaccadeDone(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1waitSaccadeDone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->waitSaccadeDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1stopControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)(arg1)->stopControl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1storeContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->storeContext(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1restoreContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->restoreContext(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1deleteContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->deleteContext(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getInfo(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1registerEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::dev::GazeEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::dev::GazeEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::GazeEvent & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->registerEvent(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1unregisterEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::dev::GazeEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::dev::GazeEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::GazeEvent & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->unregisterEvent(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1tweakSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->tweakSet((yarp::os::Bottle const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1tweakGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  arg2 = *(yarp::os::Bottle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Bottle & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->tweakGet(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1getTrackingMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)yarp_dev_IGazeControl_getTrackingMode__SWIG_1(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IGazeControl_1getNeckTrajTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (double)yarp_dev_IGazeControl_getNeckTrajTime__SWIG_1(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IGazeControl_1getEyesTrajTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (double)yarp_dev_IGazeControl_getEyesTrajTime__SWIG_1(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IGazeControl_1checkMotionDone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IGazeControl **)&jarg1; 
  result = (bool)yarp_dev_IGazeControl_checkMotionDone__SWIG_1(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IPositionControlRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1getAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1setPositionModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  result = (bool)(arg1)->setPositionModeRaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1positionMoveRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->positionMoveRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1positionMoveRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->positionMoveRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1relativeMoveRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->relativeMoveRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1relativeMoveRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->relativeMoveRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1checkMotionDoneRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (bool)(arg1)->checkMotionDoneRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1checkMotionDoneRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->checkMotionDoneRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1setRefSpeedRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefSpeedRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1setRefSpeedsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setRefSpeedsRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1setRefAccelerationRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefAccelerationRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1setRefAccelerationsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setRefAccelerationsRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1getRefSpeedRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getRefSpeedRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1getRefSpeedsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getRefSpeedsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1getRefAccelerationRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getRefAccelerationRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1getRefAccelerationsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getRefAccelerationsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1stopRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->stopRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControlRaw_1stopRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControlRaw **)&jarg1; 
  result = (bool)(arg1)->stopRaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IPositionControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1getAxes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1setPositionMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  result = (bool)(arg1)->setPositionMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1positionMove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->positionMove(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1positionMove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->positionMove((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1relativeMove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->relativeMove(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1relativeMove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->relativeMove((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1checkMotionDone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (bool)(arg1)->checkMotionDone(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1checkMotionDone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->checkMotionDone(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1setRefSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefSpeed(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1setRefSpeeds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setRefSpeeds((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1setRefAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefAcceleration(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1setRefAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setRefAccelerations((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1getRefSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getRefSpeed(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1getRefSpeeds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getRefSpeeds(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1getRefAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getRefAcceleration(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1getRefAccelerations_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getRefAccelerations(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1stop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->stop(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1stop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  result = (bool)(arg1)->stop();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IPositionControl_1getAxes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  result = (int)yarp_dev_IPositionControl_getAxes__SWIG_1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1positionMove_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_positionMove__SWIG_2(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1relativeMove_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_relativeMove__SWIG_2(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1setRefSpeeds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_setRefSpeeds__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1getRefSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_getRefSpeed__SWIG_1(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1getRefSpeeds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_getRefSpeeds__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1getRefAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_getRefAcceleration__SWIG_1(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1getRefAccelerations_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_getRefAccelerations__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1checkMotionDone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  result = (bool)yarp_dev_IPositionControl_checkMotionDone__SWIG_2(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1checkMotionDone_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = *(std::vector< bool > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bool > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_checkMotionDone__SWIG_3(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1checkMotionDone_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< bool > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bool > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IPositionControl_checkMotionDone__SWIG_4(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1isMotionDone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)yarp_dev_IPositionControl_isMotionDone__SWIG_0(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IPositionControl_1isMotionDone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IPositionControl **)&jarg1; 
  result = (bool)yarp_dev_IPositionControl_isMotionDone__SWIG_1(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IEncodersRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1getAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1resetEncoderRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetEncoderRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1resetEncodersRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  result = (bool)(arg1)->resetEncodersRaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1setEncoderRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setEncoderRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1setEncodersRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setEncodersRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1getEncoderRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getEncoderRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1getEncodersRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getEncodersRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1getEncoderSpeedRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getEncoderSpeedRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1getEncoderSpeedsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getEncoderSpeedsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1getEncoderAccelerationRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getEncoderAccelerationRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncodersRaw_1getEncoderAccelerationsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncodersRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getEncoderAccelerationsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IEncoders(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1getAxes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1resetEncoder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetEncoder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1resetEncoders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  result = (bool)(arg1)->resetEncoders();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1setEncoder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setEncoder(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1setEncoders_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setEncoders((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getEncoder(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoders_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getEncoders(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoderSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getEncoderSpeed(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoderSpeeds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getEncoderSpeeds(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoderAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getEncoderAcceleration(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoderAccelerations_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getEncoderAccelerations(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IEncoders_1getAxes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  result = (int)yarp_dev_IEncoders_getAxes__SWIG_1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1setEncoders_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IEncoders_setEncoders__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)yarp_dev_IEncoders_getEncoder__SWIG_1(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoders_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IEncoders_getEncoders__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoderSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)yarp_dev_IEncoders_getEncoderSpeed__SWIG_1(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoderSpeeds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IEncoders_getEncoderSpeeds__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoderAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)yarp_dev_IEncoders_getEncoderAcceleration__SWIG_1(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IEncoders_1getEncoderAccelerations_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IEncoders **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IEncoders_getEncoderAccelerations__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ICalibrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::ICalibrator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICalibrator_1calibrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICalibrator **)&jarg1; 
  arg2 = *(yarp::dev::DeviceDriver **)&jarg2; 
  result = (bool)(arg1)->calibrate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICalibrator_1park_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICalibrator **)&jarg1; 
  arg2 = *(yarp::dev::DeviceDriver **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->park(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICalibrator_1park_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ICalibrator **)&jarg1; 
  arg2 = *(yarp::dev::DeviceDriver **)&jarg2; 
  result = (bool)(arg1)->park(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICalibrator_1quitCalibrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICalibrator **)&jarg1; 
  result = (bool)(arg1)->quitCalibrate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ICalibrator_1quitPark(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ICalibrator **)&jarg1; 
  result = (bool)(arg1)->quitPark();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IRemoteCalibrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1setCalibratorDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  yarp::dev::IRemoteCalibrator *arg2 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  arg2 = *(yarp::dev::IRemoteCalibrator **)&jarg2; 
  result = (bool)(arg1)->setCalibratorDevice(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1getCalibratorDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  yarp::dev::IRemoteCalibrator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  result = (yarp::dev::IRemoteCalibrator *)(arg1)->getCalibratorDevice();
  *(yarp::dev::IRemoteCalibrator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1isCalibratorDevicePresent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)(arg1)->isCalibratorDevicePresent(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1releaseCalibratorDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  (arg1)->releaseCalibratorDevice();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1calibrateSingleJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->calibrateSingleJoint(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1calibrateWholePart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  result = (bool)(arg1)->calibrateWholePart();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1homingSingleJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->homingSingleJoint(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1homingWholePart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  result = (bool)(arg1)->homingWholePart();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1parkSingleJoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parkSingleJoint(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1parkSingleJoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->parkSingleJoint(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1parkWholePart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  result = (bool)(arg1)->parkWholePart();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1quitCalibrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  result = (bool)(arg1)->quitCalibrate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IRemoteCalibrator_1quitPark(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IRemoteCalibrator **)&jarg1; 
  result = (bool)(arg1)->quitPark();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IControlMode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlMode_1setPositionMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setPositionMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlMode_1setVelocityMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setVelocityMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlMode_1setTorqueMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setTorqueMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlMode_1setImpedancePositionMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setImpedancePositionMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlMode_1setImpedanceVelocityMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setImpedanceVelocityMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlMode_1setOpenLoopMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setOpenLoopMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlMode_1getControlMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (bool)(arg1)->getControlMode(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlMode_1getControlModes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getControlModes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IControlMode_1getControlMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)yarp_dev_IControlMode_getControlMode__SWIG_1(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlMode_1getControlModes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  std::vector< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IControlMode **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IControlMode_getControlModes__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IControlModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IControlModeRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlModeRaw_1setPositionModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlModeRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setPositionModeRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlModeRaw_1setVelocityModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlModeRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setVelocityModeRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlModeRaw_1setTorqueModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlModeRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setTorqueModeRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlModeRaw_1setImpedancePositionModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlModeRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setImpedancePositionModeRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlModeRaw_1setImpedanceVelocityModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlModeRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setImpedanceVelocityModeRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlModeRaw_1setOpenLoopModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlModeRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setOpenLoopModeRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlModeRaw_1getControlModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlModeRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (bool)(arg1)->getControlModeRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IControlModeRaw_1getControlModesRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IControlModeRaw **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getControlModesRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_MotorTorqueParameters_1bemf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::MotorTorqueParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bemf = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_MotorTorqueParameters_1bemf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::MotorTorqueParameters **)&jarg1; 
  result = (double) ((arg1)->bemf);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_MotorTorqueParameters_1bemf_1scale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::MotorTorqueParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bemf_scale = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_MotorTorqueParameters_1bemf_1scale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::MotorTorqueParameters **)&jarg1; 
  result = (double) ((arg1)->bemf_scale);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_MotorTorqueParameters_1ktau_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::MotorTorqueParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ktau = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_MotorTorqueParameters_1ktau_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::MotorTorqueParameters **)&jarg1; 
  result = (double) ((arg1)->ktau);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_MotorTorqueParameters_1ktau_1scale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::MotorTorqueParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ktau_scale = arg2;
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_MotorTorqueParameters_1ktau_1scale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::MotorTorqueParameters **)&jarg1; 
  result = (double) ((arg1)->ktau_scale);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1MotorTorqueParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::dev::MotorTorqueParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::dev::MotorTorqueParameters *)new yarp::dev::MotorTorqueParameters();
  *(yarp::dev::MotorTorqueParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1MotorTorqueParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::MotorTorqueParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ITorqueControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setTorqueMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  result = (bool)(arg1)->setTorqueMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getRefTorques(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getRefTorques(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getRefTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getRefTorque(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setRefTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setRefTorques((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setRefTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefTorque(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setRefTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->setRefTorques(arg2,(int const *)arg3,(double const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getBemfParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getBemfParam(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setBemfParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setBemfParam(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getMotorTorqueParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters *arg3 = (yarp::dev::MotorTorqueParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::dev::MotorTorqueParameters **)&jarg3; 
  result = (bool)(arg1)->getMotorTorqueParams(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setMotorTorqueParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters arg3 ;
  yarp::dev::MotorTorqueParameters const *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(yarp::dev::MotorTorqueParameters **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null yarp::dev::MotorTorqueParameters const");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->setMotorTorqueParams(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setTorquePid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::dev::Pid **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::Pid const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setTorquePid(arg2,(yarp::dev::Pid const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getTorque(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorques(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getTorques(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorqueRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->getTorqueRange(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorqueRanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getTorqueRanges(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setTorquePids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(yarp::dev::Pid **)&jarg2; 
  result = (bool)(arg1)->setTorquePids((yarp::dev::Pid const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setTorqueErrorLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setTorqueErrorLimit(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setTorqueErrorLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setTorqueErrorLimits((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorqueError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getTorqueError(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorqueErrors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getTorqueErrors(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorquePidOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getTorquePidOutput(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorquePidOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getTorquePidOutputs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorquePid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::dev::Pid **)&jarg3; 
  result = (bool)(arg1)->getTorquePid(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorquePids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(yarp::dev::Pid **)&jarg2; 
  result = (bool)(arg1)->getTorquePids(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorqueErrorLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getTorqueErrorLimit(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1getTorqueErrorLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getTorqueErrorLimits(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1resetTorquePid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetTorquePid(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1disableTorquePid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disableTorquePid(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1enableTorquePid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enableTorquePid(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControl_1setTorqueOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setTorqueOffset(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ITorqueControlRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setTorqueModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  result = (bool)(arg1)->setTorqueModeRaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorqueRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getTorqueRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorquesRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getTorquesRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorqueRangeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->getTorqueRangeRaw(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorqueRangesRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getTorqueRangesRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setRefTorquesRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setRefTorquesRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setRefTorqueRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefTorqueRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setRefTorquesRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->setRefTorquesRaw(arg2,(int const *)arg3,(double const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getRefTorquesRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getRefTorquesRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getRefTorqueRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getRefTorqueRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getBemfParamRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getBemfParamRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setBemfParamRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setBemfParamRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getMotorTorqueParamsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters *arg3 = (yarp::dev::MotorTorqueParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::dev::MotorTorqueParameters **)&jarg3; 
  result = (bool)(arg1)->getMotorTorqueParamsRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setMotorTorqueParamsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters arg3 ;
  yarp::dev::MotorTorqueParameters const *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(yarp::dev::MotorTorqueParameters **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null yarp::dev::MotorTorqueParameters const");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->setMotorTorqueParamsRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setTorquePidRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::dev::Pid **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::dev::Pid const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setTorquePidRaw(arg2,(yarp::dev::Pid const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setTorquePidsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(yarp::dev::Pid **)&jarg2; 
  result = (bool)(arg1)->setTorquePidsRaw((yarp::dev::Pid const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setTorqueErrorLimitRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setTorqueErrorLimitRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setTorqueErrorLimitsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setTorqueErrorLimitsRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorqueErrorRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getTorqueErrorRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorqueErrorsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getTorqueErrorsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorquePidOutputRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getTorquePidOutputRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorquePidOutputsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getTorquePidOutputsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorquePidRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(yarp::dev::Pid **)&jarg3; 
  result = (bool)(arg1)->getTorquePidRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorquePidsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(yarp::dev::Pid **)&jarg2; 
  result = (bool)(arg1)->getTorquePidsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorqueErrorLimitRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getTorqueErrorLimitRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1getTorqueErrorLimitsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getTorqueErrorLimitsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1resetTorquePidRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resetTorquePidRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1disableTorquePidRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->disableTorquePidRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1enableTorquePidRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enableTorquePidRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_ITorqueControlRaw_1setTorqueOffsetRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::ITorqueControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setTorqueOffsetRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IImpedanceControlRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IImpedanceControlRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControlRaw_1getAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControlRaw **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControlRaw_1getImpedanceRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->getImpedanceRaw(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControlRaw_1setImpedanceRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->setImpedanceRaw(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControlRaw_1setImpedanceOffsetRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setImpedanceOffsetRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControlRaw_1getImpedanceOffsetRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getImpedanceOffsetRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControlRaw_1getCurrentImpedanceLimitRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (bool)(arg1)->getCurrentImpedanceLimitRaw(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IImpedanceControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IImpedanceControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControl_1getAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControl **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControl_1getImpedance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->getImpedance(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControl_1setImpedance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->setImpedance(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControl_1setImpedanceOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setImpedanceOffset(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControl_1getImpedanceOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getImpedanceOffset(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IImpedanceControl_1getCurrentImpedanceLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IImpedanceControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (bool)(arg1)->getCurrentImpedanceLimit(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IVelocityControlRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControlRaw_1getAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControlRaw_1setVelocityModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  result = (bool)(arg1)->setVelocityModeRaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControlRaw_1velocityMoveRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->velocityMoveRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControlRaw_1velocityMoveRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->velocityMoveRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControlRaw_1setRefAccelerationRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefAccelerationRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControlRaw_1setRefAccelerationsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setRefAccelerationsRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControlRaw_1getRefAccelerationRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getRefAccelerationRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControlRaw_1getRefAccelerationsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getRefAccelerationsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControlRaw_1stopRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->stopRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControlRaw_1stopRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControlRaw **)&jarg1; 
  result = (bool)(arg1)->stopRaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IVelocityControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1getAxes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAxes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1setVelocityMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  result = (bool)(arg1)->setVelocityMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1velocityMove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->velocityMove(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1velocityMove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->velocityMove((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1setRefAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefAcceleration(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1setRefAccelerations_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setRefAccelerations((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1getRefAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getRefAcceleration(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1getRefAccelerations_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getRefAccelerations(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1stop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->stop(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1stop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  result = (bool)(arg1)->stop();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IVelocityControl_1getAxes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  result = (int)yarp_dev_IVelocityControl_getAxes__SWIG_1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1velocityMove_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IVelocityControl_velocityMove__SWIG_2(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1setRefAccelerations_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IVelocityControl_setRefAccelerations__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1getRefAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IVelocityControl_getRefAcceleration__SWIG_1(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVelocityControl_1getRefAccelerations_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::dev::IVelocityControl **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (bool)yarp_dev_IVelocityControl_getRefAccelerations__SWIG_1(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IOpenLoopControlRaw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IOpenLoopControlRaw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControlRaw_1setRefOutputRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefOutputRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControlRaw_1setRefOutputsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setRefOutputsRaw((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControlRaw_1getRefOutputRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getRefOutputRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControlRaw_1getRefOutputsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getRefOutputsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControlRaw_1getOutputRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControlRaw **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getOutputRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControlRaw_1getOutputsRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControlRaw **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getOutputsRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControlRaw_1setOpenLoopModeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControlRaw **)&jarg1; 
  result = (bool)(arg1)->setOpenLoopModeRaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IOpenLoopControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::dev::IOpenLoopControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControl_1setRefOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setRefOutput(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControl_1setRefOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->setRefOutputs((double const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControl_1getRefOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getRefOutput(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControl_1getRefOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getRefOutputs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControl_1getOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getOutput(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControl_1getOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControl **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getOutputs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IOpenLoopControl_1setOpenLoopMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::dev::IOpenLoopControl **)&jarg1; 
  result = (bool)(arg1)->setOpenLoopMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1DVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1DVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_DVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_DVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_DVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_yarp_yarpJNI_DVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_DVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1DVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bool > *)new std::vector< bool >();
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bool >::size_type arg1 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< bool >::size_type)jarg1; 
  result = (std::vector< bool > *)new std::vector< bool >(arg1);
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = (bool)((std::vector< bool > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::value_type *arg2 = 0 ;
  std::vector< bool >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< bool >::value_type const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::const_reference result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bool >::const_reference)std_vector_Sl_bool_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::value_type *arg3 = 0 ;
  std::vector< bool >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__set(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1SVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1SVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_SVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_SVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_SVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_SVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_SVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1SVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1IVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1IVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_IVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_IVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_IVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_IVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_IVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_IVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1IVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PidVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< yarp::dev::Pid > *)new std::vector< yarp::dev::Pid >();
  *(std::vector< yarp::dev::Pid > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1PidVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< yarp::dev::Pid >::size_type arg1 ;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< yarp::dev::Pid >::size_type)jarg1; 
  result = (std::vector< yarp::dev::Pid > *)new std::vector< yarp::dev::Pid >(arg1);
  *(std::vector< yarp::dev::Pid > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PidVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  std::vector< yarp::dev::Pid >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< yarp::dev::Pid > **)&jarg1; 
  result = ((std::vector< yarp::dev::Pid > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PidVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  std::vector< yarp::dev::Pid >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< yarp::dev::Pid > **)&jarg1; 
  result = ((std::vector< yarp::dev::Pid > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PidVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  std::vector< yarp::dev::Pid >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< yarp::dev::Pid > **)&jarg1; 
  arg2 = (std::vector< yarp::dev::Pid >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_PidVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< yarp::dev::Pid > **)&jarg1; 
  result = (bool)((std::vector< yarp::dev::Pid > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PidVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< yarp::dev::Pid > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PidVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  std::vector< yarp::dev::Pid >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< yarp::dev::Pid > **)&jarg1; 
  arg2 = *(std::vector< yarp::dev::Pid >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< yarp::dev::Pid >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< yarp::dev::Pid >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PidVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  std::vector< yarp::dev::Pid >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< yarp::dev::Pid > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< yarp::dev::Pid >::value_type *) &std_vector_Sl_yarp_dev_Pid_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< yarp::dev::Pid >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_PidVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  int arg2 ;
  std::vector< yarp::dev::Pid >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< yarp::dev::Pid > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< yarp::dev::Pid >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< yarp::dev::Pid >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_yarp_dev_Pid_Sg__set(arg1,arg2,(yarp::dev::Pid const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1PidVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< yarp::dev::Pid > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageRgb_1getPixelSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgb > const *)arg1)->getPixelSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageRgb_1getPixelCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgb > const *)arg1)->getPixelCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgb_1pixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgb *) &(arg1)->pixel(arg2,arg3);
  *(yarp::sig::PixelRgb **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgb_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgb *) &(arg1)->operator ()(arg2,arg3);
  *(yarp::sig::PixelRgb **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgb_1safePixel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgb *) &(arg1)->safePixel(arg2,arg3);
  *(yarp::sig::PixelRgb **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1ImageRgb(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)new yarp::sig::ImageOf< yarp::sig::PixelRgb >();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ImageRgb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1useCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderImageRgb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgb_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderCallbackImageRgb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageRgb_1onRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageRgb_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1TypedReaderCallbackImageRgb(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >();
  *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageRgb_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >();
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageRgb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >(*arg1);
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BufferedPortImageRgb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) &(arg1)->prepare();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1unprepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->write();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1writeStrict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgb > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1useCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1useCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1setCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageRgba_1getPixelSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgba > const *)arg1)->getPixelSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageRgba_1getPixelCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgba > const *)arg1)->getPixelCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgba_1pixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgba *) &(arg1)->pixel(arg2,arg3);
  *(yarp::sig::PixelRgba **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgba_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgba *) &(arg1)->operator ()(arg2,arg3);
  *(yarp::sig::PixelRgba **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgba_1safePixel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgba *) &(arg1)->safePixel(arg2,arg3);
  *(yarp::sig::PixelRgba **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1ImageRgba(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)new yarp::sig::ImageOf< yarp::sig::PixelRgba >();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ImageRgba(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1useCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderImageRgba(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgba_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderCallbackImageRgba(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageRgba_1onRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageRgba_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1TypedReaderCallbackImageRgba(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >();
  *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageRgba_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >();
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageRgba_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >(*arg1);
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BufferedPortImageRgba(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) &(arg1)->prepare();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1unprepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->write();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1writeStrict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgba > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1useCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1useCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1setCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageMono_1getPixelSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono > const *)arg1)->getPixelSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageMono_1getPixelCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono > const *)arg1)->getPixelCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageMono_1pixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono *) &(arg1)->pixel(arg2,arg3);
  *(yarp::sig::PixelMono **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageMono_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono *) &(arg1)->operator ()(arg2,arg3);
  *(yarp::sig::PixelMono **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageMono_1safePixel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono *) &(arg1)->safePixel(arg2,arg3);
  *(yarp::sig::PixelMono **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1ImageMono(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)new yarp::sig::ImageOf< yarp::sig::PixelMono >();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ImageMono(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1useCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderImageMono(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderCallbackImageMono(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageMono_1onRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageMono_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1TypedReaderCallbackImageMono(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >();
  *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageMono_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >();
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageMono_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >(*arg1);
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BufferedPortImageMono(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) &(arg1)->prepare();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1unprepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->write();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1writeStrict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1useCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1useCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1setCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageMono16_1getPixelSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono16 > const *)arg1)->getPixelSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageMono16_1getPixelCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono16 > const *)arg1)->getPixelCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageMono16_1pixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono16 *) &(arg1)->pixel(arg2,arg3);
  *(yarp::sig::PixelMono16 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageMono16_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono16 *) &(arg1)->operator ()(arg2,arg3);
  *(yarp::sig::PixelMono16 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageMono16_1safePixel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelMono16 *) &(arg1)->safePixel(arg2,arg3);
  *(yarp::sig::PixelMono16 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1ImageMono16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)new yarp::sig::ImageOf< yarp::sig::PixelMono16 >();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ImageMono16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1useCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderImageMono16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageMono16_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderCallbackImageMono16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageMono16_1onRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono16 > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageMono16_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono16 > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1TypedReaderCallbackImageMono16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >();
  *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono16 > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageMono16_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >();
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageMono16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >(*arg1);
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BufferedPortImageMono16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) &(arg1)->prepare();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1unprepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->write();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1writeStrict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelMono16 > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1useCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1useCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1setCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageInt_1getPixelSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelInt > const *)arg1)->getPixelSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageInt_1getPixelCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelInt > const *)arg1)->getPixelCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageInt_1pixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelInt *) &(arg1)->pixel(arg2,arg3);
  *(yarp::sig::PixelInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageInt_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelInt *) &(arg1)->operator ()(arg2,arg3);
  *(yarp::sig::PixelInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageInt_1safePixel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelInt *) &(arg1)->safePixel(arg2,arg3);
  *(yarp::sig::PixelInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageInt_1getPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__getPixel(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ImageInt_1setPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__setPixel(arg1,arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1ImageInt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)new yarp::sig::ImageOf< yarp::sig::PixelInt >();
  *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ImageInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1useCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderImageInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageInt_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderCallbackImageInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageInt_1onRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelInt > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageInt_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelInt > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1TypedReaderCallbackImageInt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >();
  *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelInt > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >();
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >(*arg1);
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BufferedPortImageInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) &(arg1)->prepare();
  *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1unprepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->write();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1writeStrict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelInt > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1useCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1useCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1setCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderSound_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderSound_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderSound_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  yarp::sig::Sound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::Sound *)(arg1)->read(arg2);
  *(yarp::sig::Sound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderSound_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  result = (yarp::sig::Sound *)(arg1)->read();
  *(yarp::sig::Sound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderSound_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderSound_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  result = (yarp::sig::Sound *)(arg1)->lastRead();
  *(yarp::sig::Sound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_TypedReaderSound_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderSound_1useCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::Sound > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::Sound > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::Sound > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderSound_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_TypedReaderSound_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderSound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_TypedReaderSound_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::Sound > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderSound_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderSound_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderSound_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderSound_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::sig::Sound **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Sound & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::Sound > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::Sound > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::Sound > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortSound_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::BufferedPort< yarp::sig::Sound > *)new yarp::os::BufferedPort< yarp::sig::Sound >();
  *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortSound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::Sound > *)new yarp::os::BufferedPort< yarp::sig::Sound >(*arg1);
  *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BufferedPortSound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortSound_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortSound_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::Sound > const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_BufferedPortSound_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::Sound > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortSound_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (yarp::sig::Sound *) &(arg1)->prepare();
  *(yarp::sig::Sound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1unprepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  (arg1)->write();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1writeStrict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortSound_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  yarp::sig::Sound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::Sound *)(arg1)->read(arg2);
  *(yarp::sig::Sound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortSound_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (yarp::sig::Sound *)(arg1)->read();
  *(yarp::sig::Sound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortSound_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (yarp::sig::Sound *)(arg1)->lastRead();
  *(yarp::sig::Sound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::sig::Sound **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::Sound & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1useCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::Sound > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::Sound > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::Sound > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1useCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortSound_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortSound_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortSound_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortSound_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortSound_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1setCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortSound_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortSound_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageFloat_1getPixelSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelFloat > const *)arg1)->getPixelSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageFloat_1getPixelCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelFloat > const *)arg1)->getPixelCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageFloat_1pixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelFloat *) &(arg1)->pixel(arg2,arg3);
  *(yarp::sig::PixelFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageFloat_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelFloat *) &(arg1)->operator ()(arg2,arg3);
  *(yarp::sig::PixelFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageFloat_1safePixel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelFloat *) &(arg1)->safePixel(arg2,arg3);
  *(yarp::sig::PixelFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_yarp_yarpJNI_ImageFloat_1getPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__getPixel(arg1,arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_ImageFloat_1setPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloat jarg4) {
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__setPixel(arg1,arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1ImageFloat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)new yarp::sig::ImageOf< yarp::sig::PixelFloat >();
  *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ImageFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1useCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderImageFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageFloat_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderCallbackImageFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageFloat_1onRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageFloat_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1TypedReaderCallbackImageFloat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >();
  *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >();
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >(*arg1);
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BufferedPortImageFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) &(arg1)->prepare();
  *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1unprepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->write();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1writeStrict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelFloat > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1useCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1useCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1setCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageRgbFloat_1getPixelSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > const *)arg1)->getPixelSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_ImageRgbFloat_1getPixelCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg1; 
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > const *)arg1)->getPixelCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgbFloat_1pixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgbFloat *) &(arg1)->pixel(arg2,arg3);
  *(yarp::sig::PixelRgbFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgbFloat_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgbFloat *) &(arg1)->operator ()(arg2,arg3);
  *(yarp::sig::PixelRgbFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgbFloat_1safePixel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (yarp::sig::PixelRgbFloat *) &(arg1)->safePixel(arg2,arg3);
  *(yarp::sig::PixelRgbFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1ImageRgbFloat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)new yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1ImageRgbFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1useCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderImageRgbFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderImageRgbFloat_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1TypedReaderCallbackImageRgbFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageRgbFloat_1onRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_TypedReaderCallbackImageRgbFloat_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1TypedReaderCallbackImageRgbFloat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >();
  *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1onRead_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > & reference is null");
    return ;
  } 
  arg3 = *(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageRgbFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >();
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1BufferedPortImageRgbFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::Port **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Port & reference is null");
    return 0;
  } 
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >(*arg1);
  *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1BufferedPortImageRgbFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1addOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1addOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  yarp::os::ConstString arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  yarp::os::ConstString arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1addOutput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::Contact **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::Contact const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1getPendingReads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (int)(arg1)->getPendingReads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1where(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Contact result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *)arg1)->where();
  *(yarp::os::Contact **)&jresult = new yarp::os::Contact((const yarp::os::Contact &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) &(arg1)->prepare();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1unprepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (bool)(arg1)->unprepare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->write();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1writeStrict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->writeStrict();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1waitForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->waitForWrite();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setStrict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStrict(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setStrict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->setStrict();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read(arg2);
  *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1lastRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->lastRead();
  *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (bool)(arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setReplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReplier(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setAdminReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return ;
  } 
  (arg1)->setAdminReader(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1onRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > & reference is null");
    return ;
  } 
  (arg1)->onRead(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1useCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > & reference is null");
    return ;
  } 
  (arg1)->useCallback(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1useCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->useCallback();
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1disableCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->disableCallback();
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortWriter & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1getEnvelope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReader & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getEnvelope(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1getInputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (int)(arg1)->getInputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1getOutputCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (int)(arg1)->getOutputCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1isWriting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (bool)(arg1)->isWriting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1getReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->getReport(*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setReporter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::PortReport **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "yarp::os::PortReport & reference is null");
    return ;
  } 
  (arg1)->setReporter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1acquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (void *)(arg1)->acquire();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->release(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setTargetPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTargetPeriod(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (arg1)->getType();
  *(Type **)&jresult = new Type((const Type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1promiseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  Type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(Type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Type const & reference is null");
    return ;
  } 
  (arg1)->promiseType((Type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setInputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOutputMode(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRpcMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1acquireProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  *(yarp::os::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1releaseProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::Property **)&jarg2; 
  (arg1)->releaseProperties(arg2);
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1includeNodeInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->includeNodeInName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1setCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  arg2 = *(yarp::os::Mutex **)&jarg2; 
  result = (bool)(arg1)->setCallbackLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1removeCallbackLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (bool)(arg1)->removeCallbackLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1lockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (bool)(arg1)->lockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1tryLockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  result = (bool)(arg1)->tryLockCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1unlockCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1; 
  (arg1)->unlockCallback();
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_new_1charArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  charArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (charArray *)new_charArray(arg1);
  *(charArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_delete_1charArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  charArray *arg1 = (charArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(charArray **)&jarg1; 
  delete_charArray(arg1);
}


SWIGEXPORT jshort JNICALL Java_yarp_yarpJNI_charArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  charArray *arg1 = (charArray *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(charArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)charArray_getitem(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_yarp_yarpJNI_charArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  charArray *arg1 = (charArray *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(charArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  charArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_charArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  charArray *arg1 = (charArray *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(charArray **)&jarg1; 
  result = (unsigned char *)charArray_cast(arg1);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_charArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  charArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  result = (charArray *)charArray_frompointer(arg1);
  *(charArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Portable_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::PortReader **)&baseptr = *(yarp::os::Portable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Value_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Portable **)&baseptr = *(yarp::os::Value **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_UnbufferedContactable_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::UnbufferedContactable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Port_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::UnbufferedContactable **)&baseptr = *(yarp::os::Port **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_AbstractContactable_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::UnbufferedContactable **)&baseptr = *(yarp::os::AbstractContactable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Network_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::NetworkBase **)&baseptr = *(yarp::os::Network **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortablePairBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Portable **)&baseptr = *(yarp::os::PortablePairBase **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Property_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Searchable **)&baseptr = *(yarp::os::Property **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Bottle_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Portable **)&baseptr = *(yarp::os::Bottle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortReaderBufferBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::PortReader **)&baseptr = *(yarp::os::impl::PortReaderBufferBase **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PortWriterWrapper_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::PortWriter **)&baseptr = *(yarp::os::PortWriterWrapper **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_RateThreadWrapper_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::RateThread **)&baseptr = *(yarp::os::RateThreadWrapper **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Stamp_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Portable **)&baseptr = *(yarp::os::Stamp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ResourceFinder_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Searchable **)&baseptr = *(yarp::os::ResourceFinder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_RpcServer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::AbstractContactable **)&baseptr = *(yarp::os::RpcServer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_RpcClient_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::AbstractContactable **)&baseptr = *(yarp::os::RpcClient **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortProperty_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::BufferedPort< Property > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortBottle_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::BufferedPort< Bottle > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Image_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Portable **)&baseptr = *(yarp::sig::Image **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_FlexImage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::sig::Image **)&baseptr = *(yarp::sig::FlexImage **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Sound_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Portable **)&baseptr = *(yarp::sig::Sound **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_VectorBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Portable **)&baseptr = *(yarp::sig::VectorBase **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_Vector_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Portable **)&baseptr = *(yarp::sig::Vector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_DeviceDriver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::IConfig **)&baseptr = *(yarp::dev::DeviceDriver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_DeviceResponder_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::PortReader **)&baseptr = *(yarp::dev::DeviceResponder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_PolyDriver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::dev::DeviceDriver **)&baseptr = *(yarp::dev::PolyDriver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_StubDriverCreator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::dev::DriverCreator **)&baseptr = *(yarp::dev::StubDriverCreator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_IFrameGrabberControlsDC1394_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::dev::IFrameGrabberControls **)&baseptr = *(yarp::dev::IFrameGrabberControlsDC1394 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgb_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::sig::Image **)&baseptr = *(yarp::sig::ImageOf< yarp::sig::PixelRgb > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgb_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgba_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::sig::Image **)&baseptr = *(yarp::sig::ImageOf< yarp::sig::PixelRgba > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgba_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageMono_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::sig::Image **)&baseptr = *(yarp::sig::ImageOf< yarp::sig::PixelMono > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageMono16_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::sig::Image **)&baseptr = *(yarp::sig::ImageOf< yarp::sig::PixelMono16 > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageMono16_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageInt_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::sig::Image **)&baseptr = *(yarp::sig::ImageOf< yarp::sig::PixelInt > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageInt_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortSound_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::BufferedPort< yarp::sig::Sound > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageFloat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::sig::Image **)&baseptr = *(yarp::sig::ImageOf< yarp::sig::PixelFloat > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageFloat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_ImageRgbFloat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::sig::Image **)&baseptr = *(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_yarp_yarpJNI_BufferedPortImageRgbFloat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(yarp::os::Contactable **)&baseptr = *(yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_yarp_yarpJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[22] = {
    {
      "SwigDirector_PortReader_read", "(Lyarp/PortReader;J)Z" 
    },
    {
      "SwigDirector_PortReader_getReadType", "(Lyarp/PortReader;)J" 
    },
    {
      "SwigDirector_Thread_run", "(Lyarp/Thread;)V" 
    },
    {
      "SwigDirector_Thread_onStop", "(Lyarp/Thread;)V" 
    },
    {
      "SwigDirector_Thread_beforeStart", "(Lyarp/Thread;)V" 
    },
    {
      "SwigDirector_Thread_afterStart", "(Lyarp/Thread;Z)V" 
    },
    {
      "SwigDirector_Thread_threadInit", "(Lyarp/Thread;)Z" 
    },
    {
      "SwigDirector_Thread_threadRelease", "(Lyarp/Thread;)V" 
    },
    {
      "SwigDirector_RFModule_getPeriod", "(Lyarp/RFModule;)D" 
    },
    {
      "SwigDirector_RFModule_updateModule", "(Lyarp/RFModule;)Z" 
    },
    {
      "SwigDirector_RFModule_runModule__SWIG_0", "(Lyarp/RFModule;)I" 
    },
    {
      "SwigDirector_RFModule_runModule__SWIG_1", "(Lyarp/RFModule;J)I" 
    },
    {
      "SwigDirector_RFModule_configure", "(Lyarp/RFModule;J)Z" 
    },
    {
      "SwigDirector_RFModule_respond", "(Lyarp/RFModule;JJ)Z" 
    },
    {
      "SwigDirector_RFModule_attach", "(Lyarp/RFModule;J)Z" 
    },
    {
      "SwigDirector_RFModule_attach_rpc_server", "(Lyarp/RFModule;J)Z" 
    },
    {
      "SwigDirector_RFModule_interruptModule", "(Lyarp/RFModule;)Z" 
    },
    {
      "SwigDirector_RFModule_close", "(Lyarp/RFModule;)Z" 
    },
    {
      "SwigDirector_PropertyCallback_onRead__SWIG_0", "(Lyarp/PropertyCallback;J)V" 
    },
    {
      "SwigDirector_PropertyCallback_onRead__SWIG_1", "(Lyarp/PropertyCallback;JJ)V" 
    },
    {
      "SwigDirector_BottleCallback_onRead__SWIG_0", "(Lyarp/BottleCallback;J)V" 
    },
    {
      "SwigDirector_BottleCallback_onRead__SWIG_1", "(Lyarp/BottleCallback;JJ)V" 
    }
  };
  Swig::jclass_yarpJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_yarpJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

