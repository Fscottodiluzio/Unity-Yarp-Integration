//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Port : UnbufferedContactable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Port(global::System.IntPtr cPtr, bool cMemoryOwn) : base(yarpPINVOKE.Port_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Port obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Port() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_Port(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Port() : this(yarpPINVOKE.new_Port(), true) {
  }

  public bool openFake(string name) {
    bool ret = yarpPINVOKE.Port_openFake(swigCPtr, name);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool addOutput(string name) {
    bool ret = yarpPINVOKE.Port_addOutput__SWIG_0(swigCPtr, name);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool addOutput(string name, string carrier) {
    bool ret = yarpPINVOKE.Port_addOutput__SWIG_1(swigCPtr, name, carrier);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool addOutput(Contact contact) {
    bool ret = yarpPINVOKE.Port_addOutput__SWIG_2(swigCPtr, Contact.getCPtr(contact));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void close() {
    yarpPINVOKE.Port_close(swigCPtr);
  }

  public override void interrupt() {
    yarpPINVOKE.Port_interrupt(swigCPtr);
  }

  public override void resume() {
    yarpPINVOKE.Port_resume(swigCPtr);
  }

  public override Contact where() {
    Contact ret = new Contact(yarpPINVOKE.Port_where(swigCPtr), true);
    return ret;
  }

  public new bool write(PortWriter writer, PortWriter callback) {
    bool ret = yarpPINVOKE.Port_write__SWIG_0(swigCPtr, PortWriter.getCPtr(writer), PortWriter.getCPtr(callback));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(PortWriter writer) {
    bool ret = yarpPINVOKE.Port_write__SWIG_1(swigCPtr, PortWriter.getCPtr(writer));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(PortWriter writer, PortReader reader, PortWriter callback) {
    bool ret = yarpPINVOKE.Port_write__SWIG_2(swigCPtr, PortWriter.getCPtr(writer), PortReader.getCPtr(reader), PortWriter.getCPtr(callback));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(PortWriter writer, PortReader reader) {
    bool ret = yarpPINVOKE.Port_write__SWIG_3(swigCPtr, PortWriter.getCPtr(writer), PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool read(PortReader reader, bool willReply) {
    bool ret = yarpPINVOKE.Port_read__SWIG_0(swigCPtr, PortReader.getCPtr(reader), willReply);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool read(PortReader reader) {
    bool ret = yarpPINVOKE.Port_read__SWIG_1(swigCPtr, PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool reply(PortWriter writer) {
    bool ret = yarpPINVOKE.Port_reply__SWIG_0(swigCPtr, PortWriter.getCPtr(writer));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool replyAndDrop(PortWriter writer) {
    bool ret = yarpPINVOKE.Port_replyAndDrop(swigCPtr, PortWriter.getCPtr(writer));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setReader(PortReader reader) {
    yarpPINVOKE.Port_setReader(swigCPtr, PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void setAdminReader(PortReader reader) {
    yarpPINVOKE.Port_setAdminReader(swigCPtr, PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setReaderCreator(SWIGTYPE_p_PortReaderCreator creator) {
    yarpPINVOKE.Port_setReaderCreator(swigCPtr, SWIGTYPE_p_PortReaderCreator.getCPtr(creator));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void enableBackgroundWrite(bool backgroundFlag) {
    yarpPINVOKE.Port_enableBackgroundWrite(swigCPtr, backgroundFlag);
  }

  public override bool isWriting() {
    bool ret = yarpPINVOKE.Port_isWriting(swigCPtr);
    return ret;
  }

  public override bool setEnvelope(PortWriter envelope) {
    bool ret = yarpPINVOKE.Port_setEnvelope(swigCPtr, PortWriter.getCPtr(envelope));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool getEnvelope(PortReader envelope) {
    bool ret = yarpPINVOKE.Port_getEnvelope(swigCPtr, PortReader.getCPtr(envelope));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int getInputCount() {
    int ret = yarpPINVOKE.Port_getInputCount(swigCPtr);
    return ret;
  }

  public override int getOutputCount() {
    int ret = yarpPINVOKE.Port_getOutputCount(swigCPtr);
    return ret;
  }

  public override void getReport(PortReport reporter) {
    yarpPINVOKE.Port_getReport(swigCPtr, PortReport.getCPtr(reporter));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void setReporter(PortReport reporter) {
    yarpPINVOKE.Port_setReporter(swigCPtr, PortReport.getCPtr(reporter));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAdminMode(bool adminMode) {
    yarpPINVOKE.Port_setAdminMode__SWIG_0(swigCPtr, adminMode);
  }

  public void setAdminMode() {
    yarpPINVOKE.Port_setAdminMode__SWIG_1(swigCPtr);
  }

  public override void setInputMode(bool expectInput) {
    yarpPINVOKE.Port_setInputMode(swigCPtr, expectInput);
  }

  public override void setOutputMode(bool expectOutput) {
    yarpPINVOKE.Port_setOutputMode(swigCPtr, expectOutput);
  }

  public override void setRpcMode(bool expectRpc) {
    yarpPINVOKE.Port_setRpcMode(swigCPtr, expectRpc);
  }

  public bool setTimeout(float timeout) {
    bool ret = yarpPINVOKE.Port_setTimeout(swigCPtr, timeout);
    return ret;
  }

  public void setVerbosity(int level) {
    yarpPINVOKE.Port_setVerbosity(swigCPtr, level);
  }

  public int getVerbosity() {
    int ret = yarpPINVOKE.Port_getVerbosity(swigCPtr);
    return ret;
  }

  public override SWIGTYPE_p_Type getType() {
    SWIGTYPE_p_Type ret = new SWIGTYPE_p_Type(yarpPINVOKE.Port_getType(swigCPtr), true);
    return ret;
  }

  public override void promiseType(SWIGTYPE_p_Type typ) {
    yarpPINVOKE.Port_promiseType(swigCPtr, SWIGTYPE_p_Type.getCPtr(typ));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Property acquireProperties(bool readOnly) {
    global::System.IntPtr cPtr = yarpPINVOKE.Port_acquireProperties(swigCPtr, readOnly);
    Property ret = (cPtr == global::System.IntPtr.Zero) ? null : new Property(cPtr, false);
    return ret;
  }

  public override void releaseProperties(Property prop) {
    yarpPINVOKE.Port_releaseProperties(swigCPtr, Property.getCPtr(prop));
  }

  public override void includeNodeInName(bool flag) {
    yarpPINVOKE.Port_includeNodeInName(swigCPtr, flag);
  }

  public bool sharedOpen(Port port) {
    bool ret = yarpPINVOKE.Port_sharedOpen(swigCPtr, Port.getCPtr(port));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOpen() {
    bool ret = yarpPINVOKE.Port_isOpen(swigCPtr);
    return ret;
  }

  public override bool setCallbackLock(SWIGTYPE_p_yarp__os__Mutex mutex) {
    bool ret = yarpPINVOKE.Port_setCallbackLock__SWIG_0(swigCPtr, SWIGTYPE_p_yarp__os__Mutex.getCPtr(mutex));
    return ret;
  }

  public override bool setCallbackLock() {
    bool ret = yarpPINVOKE.Port_setCallbackLock__SWIG_1(swigCPtr);
    return ret;
  }

  public override bool removeCallbackLock() {
    bool ret = yarpPINVOKE.Port_removeCallbackLock(swigCPtr);
    return ret;
  }

  public override bool lockCallback() {
    bool ret = yarpPINVOKE.Port_lockCallback(swigCPtr);
    return ret;
  }

  public override bool tryLockCallback() {
    bool ret = yarpPINVOKE.Port_tryLockCallback(swigCPtr);
    return ret;
  }

  public override void unlockCallback() {
    yarpPINVOKE.Port_unlockCallback(swigCPtr);
  }

  public new bool write(Bottle data) {
    bool ret = yarpPINVOKE.Port_write__SWIG_4(swigCPtr, Bottle.getCPtr(data));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(Property data) {
    bool ret = yarpPINVOKE.Port_write__SWIG_5(swigCPtr, Property.getCPtr(data));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(ImageRgb data) {
    bool ret = yarpPINVOKE.Port_write__SWIG_6(swigCPtr, ImageRgb.getCPtr(data));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(ImageFloat data) {
    bool ret = yarpPINVOKE.Port_write__SWIG_7(swigCPtr, ImageFloat.getCPtr(data));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(Bottle data1, Bottle data2) {
    bool ret = yarpPINVOKE.Port_write__SWIG_8(swigCPtr, Bottle.getCPtr(data1), Bottle.getCPtr(data2));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(Bottle data1, ImageFloat data2) {
    bool ret = yarpPINVOKE.Port_write__SWIG_9(swigCPtr, Bottle.getCPtr(data1), ImageFloat.getCPtr(data2));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool reply(Bottle data) {
    bool ret = yarpPINVOKE.Port_reply__SWIG_1(swigCPtr, Bottle.getCPtr(data));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
