/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

// Can be used to create namespaces. Currently used to
// wrap class static methods/variables/constants
typedef struct {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    cls_static;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: namespaces
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  return 0;
}

SWIGINTERN void SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]); // forward declaration
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn); // forward declaration

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State* L, swig_lua_namespace* ns)
{
  int i = 0;
  assert(lua_istable(L,-1));
  /* There must be table at the top of the stack */
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].method);
  }
  lua_pop(L,1);

  /* clear stack - remove metatble */
  lua_pop(L,1);

}

/* helper function. creates namespace table and add it to module table */
SWIGINTERN int SWIG_Lua_namespace_register(lua_State* L, swig_lua_namespace* ns)
{
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table */
  lua_checkstack(L,5);
  lua_pushstring(L, ns->name);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */
  lua_rawset(L,-3); /* add namespace to module table */
}
/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* Constructor proxy. Used when class name entry in module is not class constructor,
but special table instead. */
SWIGINTERN int SWIG_Lua_constructor_proxy(lua_State* L)
{
  /* unlimited number of parameters
     First one is our proxy table and we should remove it
     Other we should pass to real constructor
   */
   assert(lua_istable(L,1));
   lua_pushstring(L,".constructor");
   lua_rawget(L,1);
   assert(!lua_isnil(L,-1));
   lua_replace(L,1); /* replace our table with real constructor */
   lua_call(L,lua_gettop(L)-1,1);
   return 1;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State* L, swig_lua_class* clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, &clss->cls_static);
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State* L, swig_lua_class* clss)
{
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static.name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,&clss->cls_static);

  SWIG_Lua_get_table(L,clss->name); // Get namespace table back
  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    SWIG_Lua_add_function(L,".constructor", clss->constructor);
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", SWIG_Lua_constructor_proxy);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  SWIG_Lua_class_register_static(L,clss);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Bytes swig_types[0]
#define SWIGTYPE_p_Clock swig_types[1]
#define SWIGTYPE_p_ContentType swig_types[2]
#define SWIGTYPE_p_ICalibrator swig_types[3]
#define SWIGTYPE_p_NameStore swig_types[4]
#define SWIGTYPE_p_NestedContact swig_types[5]
#define SWIGTYPE_p_Pid swig_types[6]
#define SWIGTYPE_p_PortReaderCreator swig_types[7]
#define SWIGTYPE_p_ResourceFinderOptions swig_types[8]
#define SWIGTYPE_p_Runnable swig_types[9]
#define SWIGTYPE_p_Searchable swig_types[10]
#define SWIGTYPE_p_Type swig_types[11]
#define SWIGTYPE_p_YARP_INT64 swig_types[12]
#define SWIGTYPE_p_bool swig_types[13]
#define SWIGTYPE_p_cameraFeature_id_t swig_types[14]
#define SWIGTYPE_p_char swig_types[15]
#define SWIGTYPE_p_double swig_types[16]
#define SWIGTYPE_p_f_p_q_const__char_v_______int swig_types[17]
#define SWIGTYPE_p_float swig_types[18]
#define SWIGTYPE_p_int swig_types[19]
#define SWIGTYPE_p_p_char swig_types[20]
#define SWIGTYPE_p_size_t swig_types[21]
#define SWIGTYPE_p_std__string swig_types[22]
#define SWIGTYPE_p_std__vectorT_bool_t swig_types[23]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[24]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[25]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[26]
#define SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t swig_types[27]
#define SWIGTYPE_p_unsigned_char swig_types[28]
#define SWIGTYPE_p_unsigned_int swig_types[29]
#define SWIGTYPE_p_void swig_types[30]
#define SWIGTYPE_p_yarp__dev__CalibrationParameters swig_types[31]
#define SWIGTYPE_p_yarp__dev__CartesianEvent swig_types[32]
#define SWIGTYPE_p_yarp__dev__CartesianEventParameters swig_types[33]
#define SWIGTYPE_p_yarp__dev__CartesianEventVariables swig_types[34]
#define SWIGTYPE_p_yarp__dev__DeviceDriver swig_types[35]
#define SWIGTYPE_p_yarp__dev__DeviceResponder swig_types[36]
#define SWIGTYPE_p_yarp__dev__DriverCreator swig_types[37]
#define SWIGTYPE_p_yarp__dev__Drivers swig_types[38]
#define SWIGTYPE_p_yarp__dev__GazeEvent swig_types[39]
#define SWIGTYPE_p_yarp__dev__GazeEventParameters swig_types[40]
#define SWIGTYPE_p_yarp__dev__GazeEventVariables swig_types[41]
#define SWIGTYPE_p_yarp__dev__IAmplifierControl swig_types[42]
#define SWIGTYPE_p_yarp__dev__IAmplifierControlRaw swig_types[43]
#define SWIGTYPE_p_yarp__dev__IAudioVisualGrabber swig_types[44]
#define SWIGTYPE_p_yarp__dev__IAudioVisualStream swig_types[45]
#define SWIGTYPE_p_yarp__dev__IAxisInfo swig_types[46]
#define SWIGTYPE_p_yarp__dev__IAxisInfoRaw swig_types[47]
#define SWIGTYPE_p_yarp__dev__ICalibrator swig_types[48]
#define SWIGTYPE_p_yarp__dev__ICartesianControl swig_types[49]
#define SWIGTYPE_p_yarp__dev__IControlCalibration swig_types[50]
#define SWIGTYPE_p_yarp__dev__IControlCalibration2 swig_types[51]
#define SWIGTYPE_p_yarp__dev__IControlCalibration2Raw swig_types[52]
#define SWIGTYPE_p_yarp__dev__IControlCalibrationRaw swig_types[53]
#define SWIGTYPE_p_yarp__dev__IControlDebug swig_types[54]
#define SWIGTYPE_p_yarp__dev__IControlLimits swig_types[55]
#define SWIGTYPE_p_yarp__dev__IControlLimitsRaw swig_types[56]
#define SWIGTYPE_p_yarp__dev__IControlMode swig_types[57]
#define SWIGTYPE_p_yarp__dev__IControlModeRaw swig_types[58]
#define SWIGTYPE_p_yarp__dev__IEncoders swig_types[59]
#define SWIGTYPE_p_yarp__dev__IEncodersRaw swig_types[60]
#define SWIGTYPE_p_yarp__dev__IFrameGrabber swig_types[61]
#define SWIGTYPE_p_yarp__dev__IFrameGrabberControls swig_types[62]
#define SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394 swig_types[63]
#define SWIGTYPE_p_yarp__dev__IFrameGrabberImage swig_types[64]
#define SWIGTYPE_p_yarp__dev__IFrameGrabberImageRaw swig_types[65]
#define SWIGTYPE_p_yarp__dev__IFrameGrabberRgb swig_types[66]
#define SWIGTYPE_p_yarp__dev__IFrameWriterAudioVisual swig_types[67]
#define SWIGTYPE_p_yarp__dev__IFrameWriterImage swig_types[68]
#define SWIGTYPE_p_yarp__dev__IGazeControl swig_types[69]
#define SWIGTYPE_p_yarp__dev__IImpedanceControl swig_types[70]
#define SWIGTYPE_p_yarp__dev__IImpedanceControlRaw swig_types[71]
#define SWIGTYPE_p_yarp__dev__IOpenLoopControl swig_types[72]
#define SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw swig_types[73]
#define SWIGTYPE_p_yarp__dev__IPidControl swig_types[74]
#define SWIGTYPE_p_yarp__dev__IPidControlRaw swig_types[75]
#define SWIGTYPE_p_yarp__dev__IPositionControl swig_types[76]
#define SWIGTYPE_p_yarp__dev__IPositionControlRaw swig_types[77]
#define SWIGTYPE_p_yarp__dev__IRemoteCalibrator swig_types[78]
#define SWIGTYPE_p_yarp__dev__ITorqueControl swig_types[79]
#define SWIGTYPE_p_yarp__dev__ITorqueControlRaw swig_types[80]
#define SWIGTYPE_p_yarp__dev__IVelocityControl swig_types[81]
#define SWIGTYPE_p_yarp__dev__IVelocityControlRaw swig_types[82]
#define SWIGTYPE_p_yarp__dev__JointTypeEnum swig_types[83]
#define SWIGTYPE_p_yarp__dev__MotorTorqueParameters swig_types[84]
#define SWIGTYPE_p_yarp__dev__Pid swig_types[85]
#define SWIGTYPE_p_yarp__dev__PolyDriver swig_types[86]
#define SWIGTYPE_p_yarp__dev__StubDriverCreator swig_types[87]
#define SWIGTYPE_p_yarp__os__AbstractContactable swig_types[88]
#define SWIGTYPE_p_yarp__os__Bottle swig_types[89]
#define SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t swig_types[90]
#define SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t swig_types[91]
#define SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t swig_types[92]
#define SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t swig_types[93]
#define SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t swig_types[94]
#define SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t swig_types[95]
#define SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t swig_types[96]
#define SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t swig_types[97]
#define SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t swig_types[98]
#define SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t swig_types[99]
#define SWIGTYPE_p_yarp__os__ConnectionReader swig_types[100]
#define SWIGTYPE_p_yarp__os__ConnectionWriter swig_types[101]
#define SWIGTYPE_p_yarp__os__Contact swig_types[102]
#define SWIGTYPE_p_yarp__os__ContactStyle swig_types[103]
#define SWIGTYPE_p_yarp__os__Contactable swig_types[104]
#define SWIGTYPE_p_yarp__os__DummyConnector swig_types[105]
#define SWIGTYPE_p_yarp__os__IConfig swig_types[106]
#define SWIGTYPE_p_yarp__os__InputStream swig_types[107]
#define SWIGTYPE_p_yarp__os__Mutex swig_types[108]
#define SWIGTYPE_p_yarp__os__NameStore swig_types[109]
#define SWIGTYPE_p_yarp__os__NestedContact swig_types[110]
#define SWIGTYPE_p_yarp__os__NetUint16 swig_types[111]
#define SWIGTYPE_p_yarp__os__Network swig_types[112]
#define SWIGTYPE_p_yarp__os__NetworkBase swig_types[113]
#define SWIGTYPE_p_yarp__os__OutputStream swig_types[114]
#define SWIGTYPE_p_yarp__os__Port swig_types[115]
#define SWIGTYPE_p_yarp__os__PortInfo swig_types[116]
#define SWIGTYPE_p_yarp__os__PortReader swig_types[117]
#define SWIGTYPE_p_yarp__os__PortReaderCreator swig_types[118]
#define SWIGTYPE_p_yarp__os__PortReport swig_types[119]
#define SWIGTYPE_p_yarp__os__PortWriter swig_types[120]
#define SWIGTYPE_p_yarp__os__PortWriterBufferBase swig_types[121]
#define SWIGTYPE_p_yarp__os__PortWriterBufferManager swig_types[122]
#define SWIGTYPE_p_yarp__os__PortWriterWrapper swig_types[123]
#define SWIGTYPE_p_yarp__os__Portable swig_types[124]
#define SWIGTYPE_p_yarp__os__PortablePairBase swig_types[125]
#define SWIGTYPE_p_yarp__os__PortablePairT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_yarp__sig__Sound_t swig_types[126]
#define SWIGTYPE_p_yarp__os__Property swig_types[127]
#define SWIGTYPE_p_yarp__os__QosStyle swig_types[128]
#define SWIGTYPE_p_yarp__os__RFModule swig_types[129]
#define SWIGTYPE_p_yarp__os__Random swig_types[130]
#define SWIGTYPE_p_yarp__os__RateThread swig_types[131]
#define SWIGTYPE_p_yarp__os__RateThreadWrapper swig_types[132]
#define SWIGTYPE_p_yarp__os__ResourceFinder swig_types[133]
#define SWIGTYPE_p_yarp__os__RpcClient swig_types[134]
#define SWIGTYPE_p_yarp__os__RpcServer swig_types[135]
#define SWIGTYPE_p_yarp__os__SearchMonitor swig_types[136]
#define SWIGTYPE_p_yarp__os__SearchReport swig_types[137]
#define SWIGTYPE_p_yarp__os__Searchable swig_types[138]
#define SWIGTYPE_p_yarp__os__Semaphore swig_types[139]
#define SWIGTYPE_p_yarp__os__SizedWriter swig_types[140]
#define SWIGTYPE_p_yarp__os__Stamp swig_types[141]
#define SWIGTYPE_p_yarp__os__Stamped swig_types[142]
#define SWIGTYPE_p_yarp__os__Things swig_types[143]
#define SWIGTYPE_p_yarp__os__Thread swig_types[144]
#define SWIGTYPE_p_yarp__os__Time swig_types[145]
#define SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t swig_types[146]
#define SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t swig_types[147]
#define SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t swig_types[148]
#define SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t swig_types[149]
#define SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t swig_types[150]
#define SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t swig_types[151]
#define SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t swig_types[152]
#define SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t swig_types[153]
#define SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t swig_types[154]
#define SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t swig_types[155]
#define SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t swig_types[156]
#define SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t swig_types[157]
#define SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t swig_types[158]
#define SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t swig_types[159]
#define SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t swig_types[160]
#define SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t swig_types[161]
#define SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t swig_types[162]
#define SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t swig_types[163]
#define SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t swig_types[164]
#define SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t swig_types[165]
#define SWIGTYPE_p_yarp__os__UnbufferedContactable swig_types[166]
#define SWIGTYPE_p_yarp__os__Value swig_types[167]
#define SWIGTYPE_p_yarp__os__Vocab swig_types[168]
#define SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase swig_types[169]
#define SWIGTYPE_p_yarp__os__impl__PortReaderBufferBaseCreator swig_types[170]
#define SWIGTYPE_p_yarp__sig__FlexImage swig_types[171]
#define SWIGTYPE_p_yarp__sig__Image swig_types[172]
#define SWIGTYPE_p_yarp__sig__ImageOfT_float_t swig_types[173]
#define SWIGTYPE_p_yarp__sig__ImageOfT_int_t swig_types[174]
#define SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t swig_types[175]
#define SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t swig_types[176]
#define SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t swig_types[177]
#define SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t swig_types[178]
#define SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t swig_types[179]
#define SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t swig_types[180]
#define SWIGTYPE_p_yarp__sig__Matrix swig_types[181]
#define SWIGTYPE_p_yarp__sig__PixelBgr swig_types[182]
#define SWIGTYPE_p_yarp__sig__PixelBgra swig_types[183]
#define SWIGTYPE_p_yarp__sig__PixelHsv swig_types[184]
#define SWIGTYPE_p_yarp__sig__PixelHsvFloat swig_types[185]
#define SWIGTYPE_p_yarp__sig__PixelRgb swig_types[186]
#define SWIGTYPE_p_yarp__sig__PixelRgbFloat swig_types[187]
#define SWIGTYPE_p_yarp__sig__PixelRgbInt swig_types[188]
#define SWIGTYPE_p_yarp__sig__PixelRgbSigned swig_types[189]
#define SWIGTYPE_p_yarp__sig__PixelRgba swig_types[190]
#define SWIGTYPE_p_yarp__sig__Sound swig_types[191]
#define SWIGTYPE_p_yarp__sig__Vector swig_types[192]
#define SWIGTYPE_p_yarp__sig__VectorBase swig_types[193]
static swig_type_info *swig_types[195];
static swig_module_info swig_module = {swig_types, 194, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "yarp"
#define SWIG_init      luaopen_yarp
#define SWIG_init_user luaopen_yarp_user

#define SWIG_LUACODE   luaopen_yarp_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


// missing in some old versions of swig
#include <stddef.h>


SWIGINTERN int SWIG_argv_size(lua_State* L, int index) {
  int n=0;
  while(1){
    lua_rawgeti(L,index,n);
    if (lua_isnil(L,-1))
      break;
    ++n;
    lua_pop(L,1);
  }
  lua_pop(L,1);
  return n;
}


#include <vector>


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#define _SEARCH_H // strange perl clash
// careful shuffling to deal with perl clash on seed name
#ifdef seed
#define seed_c seed
#undef seed
#endif
#include <yarp/os/Random.h>
#ifdef seed_c
#define seed seed_c
#endif

// Bring in the header files that are important to us
#include <vector>
#include <yarp/os/all.h>
#include <yarp/sig/all.h>
#include <yarp/dev/all.h>


// Sometimes ACE redefines main() - we don't want that
#ifdef main
#undef main
#endif

// Bring in the main important namespace
using namespace yarp::os;
using namespace yarp::sig;
using namespace yarp::sig::file;
using namespace yarp::dev;

SWIGINTERN std::string yarp_os_Value_toString(yarp::os::Value *self){
        return self->toString().c_str();
    }
SWIGINTERN bool yarp_os_Contactable_setEnvelope__SWIG_1(yarp::os::Contactable *self,yarp::os::Portable &data){
    return self->setEnvelope(*((PortWriter*)(&data)));
  }
SWIGINTERN bool yarp_os_Port_write__SWIG_4(yarp::os::Port *self,yarp::os::Bottle &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_5(yarp::os::Port *self,yarp::os::Property &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_6(yarp::os::Port *self,yarp::sig::ImageOf< yarp::sig::PixelRgb > &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_7(yarp::os::Port *self,yarp::sig::ImageOf< yarp::sig::PixelFloat > &data){
        return self->write(*((PortWriter*)(&data)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_8(yarp::os::Port *self,yarp::os::Bottle &data1,yarp::os::Bottle &data2){
        return self->write(*((PortWriter*)(&data1)), *((PortReader*)(&data2)));
    }
SWIGINTERN bool yarp_os_Port_write__SWIG_9(yarp::os::Port *self,yarp::os::Bottle &data1,yarp::sig::ImageOf< yarp::sig::PixelFloat > &data2){
        return self->write(*((PortWriter*)(&data1)), *((PortReader*)(&data2)));
    }
SWIGINTERN bool yarp_os_Port_reply__SWIG_1(yarp::os::Port *self,yarp::os::Bottle &data){
        return self->reply(*((PortWriter*)(&data)));
    }
SWIGINTERN std::string yarp_os_Property_toString(yarp::os::Property *self){
        return self->toString().c_str();
    }
SWIGINTERN std::string yarp_os_Bottle_toString__SWIG_1(yarp::os::Bottle *self){
        return self->toString().c_str();
    }
SWIGINTERN bool yarp_os_ResourceFinder_configure__SWIG_3(yarp::os::ResourceFinder *self,std::string const &policyName,std::vector< std::string > &argv,bool skipFirstArgument=true){
        std::vector<const char *> tmp(argv.size());
        for (size_t i=0; i<argv.size(); i++) { tmp[i] = argv[i].c_str(); }
        return self->configure(policyName.c_str(),
                               argv.size(),
                               (char**)&tmp[0]);
    }
SWIGINTERN bool yarp_os_RpcClient_write(yarp::os::RpcClient *self,yarp::os::Bottle &data1,yarp::os::Bottle &data2){
        return self->write(*((PortWriter*)(&data1)), *((PortReader*)(&data2)));
    }
SWIGINTERN yarp::os::Value *yarp_os_Things_asValue(yarp::os::Things *self){
        return self->cast_as<yarp::os::Value>();
    }
SWIGINTERN yarp::os::Bottle *yarp_os_Things_asBottle(yarp::os::Things *self){
        return self->cast_as<yarp::os::Bottle>();
    }
SWIGINTERN yarp::os::Property *yarp_os_Things_asProperty(yarp::os::Things *self){
        return self->cast_as<yarp::os::Property>();
    }
SWIGINTERN yarp::sig::Vector *yarp_os_Things_asVector(yarp::os::Things *self){
        return self->cast_as<yarp::sig::Vector>();
    }
SWIGINTERN yarp::sig::Matrix *yarp_os_Things_asMatrix(yarp::os::Things *self){
        return self->cast_as<yarp::sig::Matrix>();
    }
SWIGINTERN yarp::sig::Image *yarp_os_Things_asImage(yarp::os::Things *self){
        return self->cast_as<yarp::sig::Image>();
    }
SWIGINTERN yarp::sig::ImageOf< yarp::sig::PixelRgb > *yarp_os_Things_asImageOfPixelRgb(yarp::os::Things *self){
        return self->cast_as<yarp::sig::ImageOf<yarp::sig::PixelRgb> >();
    }
SWIGINTERN yarp::sig::ImageOf< yarp::sig::PixelBgr > *yarp_os_Things_asImageOfPixelBgr(yarp::os::Things *self){
        return self->cast_as<yarp::sig::ImageOf<yarp::sig::PixelBgr> >();
    }
SWIGINTERN yarp::sig::ImageOf< yarp::sig::PixelMono > *yarp_os_Things_asImageOfPixelMono(yarp::os::Things *self){
        return self->cast_as<yarp::sig::ImageOf<yarp::sig::PixelMono> >();
    }
SWIGINTERN double yarp_sig_Vector_get(yarp::sig::Vector *self,int j){
        return self->operator [](j);
    }
SWIGINTERN void yarp_sig_Vector_set(yarp::sig::Vector *self,int j,double v){
        self->operator [](j) = v;
    }
SWIGINTERN yarp::dev::IFrameGrabberImage *yarp_dev_PolyDriver_viewFrameGrabberImage(yarp::dev::PolyDriver *self){
        yarp::dev::IFrameGrabberImage *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IPositionControl *yarp_dev_PolyDriver_viewIPositionControl(yarp::dev::PolyDriver *self){
        yarp::dev::IPositionControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IVelocityControl *yarp_dev_PolyDriver_viewIVelocityControl(yarp::dev::PolyDriver *self){
        yarp::dev::IVelocityControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IEncoders *yarp_dev_PolyDriver_viewIEncoders(yarp::dev::PolyDriver *self){
        yarp::dev::IEncoders *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IPidControl *yarp_dev_PolyDriver_viewIPidControl(yarp::dev::PolyDriver *self){
        yarp::dev::IPidControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IAmplifierControl *yarp_dev_PolyDriver_viewIAmplifierControl(yarp::dev::PolyDriver *self){
        yarp::dev::IAmplifierControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IControlLimits *yarp_dev_PolyDriver_viewIControlLimits(yarp::dev::PolyDriver *self){
        yarp::dev::IControlLimits *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::ICartesianControl *yarp_dev_PolyDriver_viewICartesianControl(yarp::dev::PolyDriver *self){
        yarp::dev::ICartesianControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IGazeControl *yarp_dev_PolyDriver_viewIGazeControl(yarp::dev::PolyDriver *self){
      yarp::dev::IGazeControl *result;
      self->view(result);
      return result;
    }
SWIGINTERN yarp::dev::IImpedanceControl *yarp_dev_PolyDriver_viewIImpedanceControl(yarp::dev::PolyDriver *self){
        yarp::dev::IImpedanceControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::ITorqueControl *yarp_dev_PolyDriver_viewITorqueControl(yarp::dev::PolyDriver *self){
        yarp::dev::ITorqueControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IControlMode *yarp_dev_PolyDriver_viewIControlMode(yarp::dev::PolyDriver *self){
        yarp::dev::IControlMode *result;
        self->view(result);
        return result;
    }
SWIGINTERN yarp::dev::IOpenLoopControl *yarp_dev_PolyDriver_viewIOpenLoopControl(yarp::dev::PolyDriver *self){
            yarp::dev::IOpenLoopControl *result;
        self->view(result);
        return result;
    }
SWIGINTERN bool yarp_dev_IPidControl_setReferences__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->setReferences(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getReference__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getReference(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getReferences__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getReferences(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_setErrorLimits__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->setErrorLimits(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getErrorLimit__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getErrorLimit(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getErrorLimits__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getErrorLimits(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getError__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getError(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getErrors__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getErrors(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getOutput__SWIG_1(yarp::dev::IPidControl *self,int j,std::vector< double > &data){
        return self->getOutput(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getOutputs__SWIG_1(yarp::dev::IPidControl *self,std::vector< double > &data){
        return self->getOutputs(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_setPid(yarp::dev::IPidControl *self,int j,yarp::dev::Pid pid){
        return self->setPid(j,pid);
    }
SWIGINTERN bool yarp_dev_IPidControl_setPids__SWIG_1(yarp::dev::IPidControl *self,std::vector< yarp::dev::Pid > pids){
        return self->setPids(&pids[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getPid(yarp::dev::IPidControl *self,int j,std::vector< yarp::dev::Pid > pid){
        return self->getPid(j,&pid[0]);
    }
SWIGINTERN bool yarp_dev_IPidControl_getPids__SWIG_1(yarp::dev::IPidControl *self,std::vector< yarp::dev::Pid > pids){
        return self->getPids(&pids[0]);
    }
SWIGINTERN bool yarp_dev_IAmplifierControl_getCurrents__SWIG_1(yarp::dev::IAmplifierControl *self,std::vector< double > &data){
        return self->getCurrents(&data[0]);
    }
SWIGINTERN bool yarp_dev_IAmplifierControl_getCurrent__SWIG_1(yarp::dev::IAmplifierControl *self,int j,std::vector< double > &data){
        return self->getCurrent(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IControlLimits_getLimits__SWIG_1(yarp::dev::IControlLimits *self,int axis,std::vector< double > &min,std::vector< double > &max){
        return self->getLimits(axis, &min[0], &max[0]);
    }
SWIGINTERN bool yarp_dev_ICartesianControl_checkMotionDone__SWIG_1(yarp::dev::ICartesianControl *self,std::vector< bool > &flag){
      std::vector<char> data(flag.size());
      bool result = self->checkMotionDone((bool*)(&data[0]));
      for (size_t i=0; i<data.size(); i++) {
        flag[i] = data[i]!=0;
      }
      return result;
    }
SWIGINTERN bool yarp_dev_ICartesianControl_checkMotionDone__SWIG_2(yarp::dev::ICartesianControl *self){
        bool flag;
        if(self->checkMotionDone(&flag)) {
            return flag;
        } else {
            return false;
        }
    }
SWIGINTERN bool yarp_dev_ICartesianControl_isMotionDone(yarp::dev::ICartesianControl *self){
        bool data = true;
        self->checkMotionDone(&data);
        return data;
    }
SWIGINTERN bool yarp_dev_IGazeControl_getTrackingMode__SWIG_1(yarp::dev::IGazeControl *self){
        bool flag;

        if(self->getTrackingMode(&flag)) {
            return flag;
        } else {
            return false; //Not sure what is best to assume here...
        }
    }
SWIGINTERN double yarp_dev_IGazeControl_getNeckTrajTime__SWIG_1(yarp::dev::IGazeControl *self){
              double result;

              if(self->getNeckTrajTime(&result)) {
            return result;
        } else {
            return -1.0; //On error return -1.0
          }
    }
SWIGINTERN double yarp_dev_IGazeControl_getEyesTrajTime__SWIG_1(yarp::dev::IGazeControl *self){
        double result;

        if(self->getEyesTrajTime(&result)) {
            return result;
        } else {
            return -1.0; //On error return -1.0
        }
    }
SWIGINTERN bool yarp_dev_IGazeControl_checkMotionDone__SWIG_1(yarp::dev::IGazeControl *self){
          bool flag;
        if(self->checkMotionDone(&flag)) {
            return flag;
        } else {
            return false;
        }
    }
SWIGINTERN int yarp_dev_IPositionControl_getAxes__SWIG_1(yarp::dev::IPositionControl *self){
        int buffer;
        bool ok = self->getAxes(&buffer);
        if (!ok) return 0;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IPositionControl_positionMove__SWIG_2(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->positionMove(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_relativeMove__SWIG_2(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->relativeMove(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_setRefSpeeds__SWIG_1(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->setRefSpeeds(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefSpeed__SWIG_1(yarp::dev::IPositionControl *self,int j,std::vector< double > &data){
        return self->getRefSpeed(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefSpeeds__SWIG_1(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->getRefSpeeds(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefAcceleration__SWIG_1(yarp::dev::IPositionControl *self,int j,std::vector< double > &data){
        return self->getRefAcceleration(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_getRefAccelerations__SWIG_1(yarp::dev::IPositionControl *self,std::vector< double > &data){
        return self->getRefAccelerations(&data[0]);
    }
SWIGINTERN bool yarp_dev_IPositionControl_checkMotionDone__SWIG_2(yarp::dev::IPositionControl *self){
        bool result;
        bool ok = self->checkMotionDone(&result);
        if(!ok) { return 1; } //In case of error tell the motion has been completed
        return result;
    }
SWIGINTERN bool yarp_dev_IPositionControl_checkMotionDone__SWIG_3(yarp::dev::IPositionControl *self,std::vector< bool > &flag){
      // complication: vector<bool> is packed in C++
      // and isn't a regular container.
      std::vector<char> data(flag.size());
      bool result = self->checkMotionDone((bool*)(&data[0]));
      for (size_t i=0; i<data.size(); i++) {
        flag[i] = data[i]!=0;
      }
      return result;
    }
SWIGINTERN bool yarp_dev_IPositionControl_checkMotionDone__SWIG_4(yarp::dev::IPositionControl *self,int i,std::vector< bool > &flag){
      std::vector<char> data(flag.size());
      bool result = self->checkMotionDone(i,(bool*)(&data[0]));
      for (size_t i=0; i<data.size(); i++) {
        flag[i] = data[i]!=0;
      }
      return result;
    }
SWIGINTERN bool yarp_dev_IPositionControl_isMotionDone__SWIG_0(yarp::dev::IPositionControl *self,int i){
        bool buffer;
        self->checkMotionDone(i,&buffer);
        return buffer;
    }
SWIGINTERN bool yarp_dev_IPositionControl_isMotionDone__SWIG_1(yarp::dev::IPositionControl *self){
        int buffer;
        self->getAxes(&buffer);
        bool data = true;
        for (int i=0; i<buffer; i++) {
            bool buffer2;
            self->checkMotionDone(i,&buffer2);
            data = data && buffer2;
            }
        return data;
    }
SWIGINTERN int yarp_dev_IEncoders_getAxes__SWIG_1(yarp::dev::IEncoders *self){
        int buffer;
        bool ok = self->getAxes(&buffer);
        if (!ok) return 0;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IEncoders_setEncoders__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->setEncoders(&data[0]);
    }
SWIGINTERN double yarp_dev_IEncoders_getEncoder__SWIG_1(yarp::dev::IEncoders *self,int j){
        double data;
        bool ok = self->getEncoder(j, &data);
        if (!ok) return 0;
        return data;
    }
SWIGINTERN bool yarp_dev_IEncoders_getEncoders__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->getEncoders(&data[0]);
    }
SWIGINTERN double yarp_dev_IEncoders_getEncoderSpeed__SWIG_1(yarp::dev::IEncoders *self,int j){
        double data;
        bool ok = self->getEncoderSpeed(j, &data);
        if (!ok) return 0;
        return data;
    }
SWIGINTERN bool yarp_dev_IEncoders_getEncoderSpeeds__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->getEncoderSpeeds(&data[0]);
    }
SWIGINTERN double yarp_dev_IEncoders_getEncoderAcceleration__SWIG_1(yarp::dev::IEncoders *self,int j){
        double data;
        bool ok = self->getEncoderAcceleration(j, &data);
        if (!ok) return 0;
        return data;
    }
SWIGINTERN bool yarp_dev_IEncoders_getEncoderAccelerations__SWIG_1(yarp::dev::IEncoders *self,std::vector< double > &data){
        return self->getEncoderAccelerations(&data[0]);
    }
SWIGINTERN int yarp_dev_IControlMode_getControlMode__SWIG_1(yarp::dev::IControlMode *self,int j){
        int buffer;
        bool ok = self->getControlMode(j, &buffer);
        if (!ok) return -1;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IControlMode_getControlModes__SWIG_1(yarp::dev::IControlMode *self,std::vector< int > &data){
        return self->getControlModes(&data[0]);
    }
SWIGINTERN int yarp_dev_IVelocityControl_getAxes__SWIG_1(yarp::dev::IVelocityControl *self){
        int buffer;
        bool ok = self->getAxes(&buffer);
        if (!ok) return 0;
        return buffer;
    }
SWIGINTERN bool yarp_dev_IVelocityControl_velocityMove__SWIG_2(yarp::dev::IVelocityControl *self,std::vector< double > &data){
        return self->velocityMove(&data[0]);
    }
SWIGINTERN bool yarp_dev_IVelocityControl_setRefAccelerations__SWIG_1(yarp::dev::IVelocityControl *self,std::vector< double > &data){
        return self->setRefAccelerations(&data[0]);
    }
SWIGINTERN bool yarp_dev_IVelocityControl_getRefAcceleration__SWIG_1(yarp::dev::IVelocityControl *self,int j,std::vector< double > &data){
        return self->getRefAcceleration(j, &data[0]);
    }
SWIGINTERN bool yarp_dev_IVelocityControl_getRefAccelerations__SWIG_1(yarp::dev::IVelocityControl *self,std::vector< double > &data){
        return self->getRefAccelerations(&data[0]);
    }
SWIGINTERN double std_vector_Sl_double_Sg____getitem__(std::vector< double > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_double_Sg____setitem__(std::vector< double > *self,unsigned int idx,double val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN bool std_vector_Sl_bool_Sg____getitem__(std::vector< bool > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_bool_Sg____setitem__(std::vector< bool > *self,unsigned int idx,bool val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN std::string std_vector_Sl_std_string_Sg____getitem__(std::vector< std::string > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem__(std::vector< std::string > *self,unsigned int idx,std::string val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int std_vector_Sl_int_Sg____getitem__(std::vector< int > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_int_Sg____setitem__(std::vector< int > *self,unsigned int idx,int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN yarp::dev::Pid std_vector_Sl_yarp_dev_Pid_Sg____getitem__(std::vector< yarp::dev::Pid > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_yarp_dev_Pid_Sg____setitem__(std::vector< yarp::dev::Pid > *self,unsigned int idx,yarp::dev::Pid val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}

typedef yarp::sig::ImageOf<yarp::sig::PixelRgb> ImageRgb;
typedef yarp::os::TypedReader<ImageRgb> TypedReaderImageRgb;
typedef yarp::os::TypedReaderCallback<ImageRgb> TypedReaderCallbackImageRgb;
typedef yarp::os::BufferedPort<ImageRgb> BufferedPortImageRgb;


typedef yarp::sig::ImageOf<yarp::sig::PixelRgba> ImageRgba;
typedef yarp::os::TypedReader<ImageRgba> TypedReaderImageRgba;
typedef yarp::os::TypedReaderCallback<ImageRgba> TypedReaderCallbackImageRgba;
typedef yarp::os::BufferedPort<ImageRgba> BufferedPortImageRgba;


typedef yarp::sig::ImageOf<yarp::sig::PixelMono> ImageMono;
typedef yarp::os::TypedReader<ImageMono> TypedReaderImageMono;
typedef yarp::os::TypedReaderCallback<ImageMono> TypedReaderCallbackImageMono;
typedef yarp::os::BufferedPort<ImageMono> BufferedPortImageMono;


typedef yarp::sig::ImageOf<yarp::sig::PixelMono16> ImageMono16;
typedef yarp::os::TypedReader<ImageMono16> TypedReaderImageMono16;
typedef yarp::os::TypedReaderCallback<ImageMono16> TypedReaderCallbackImageMono16;
typedef yarp::os::BufferedPort<ImageMono16> BufferedPortImageMono16;


typedef yarp::sig::ImageOf<yarp::sig::PixelInt> ImageInt;
typedef yarp::os::TypedReader<ImageInt> TypedReaderImageInt;
typedef yarp::os::TypedReaderCallback<ImageInt> TypedReaderCallbackImageInt;
typedef yarp::os::BufferedPort<ImageInt> BufferedPortImageInt;


typedef yarp::os::TypedReader<Sound> TypedReaderSound;
typedef yarp::os::TypedReaderCallback<Sound> TypedReaderCallbackSound;
typedef yarp::os::BufferedPort<Sound> BufferedPortSound;

SWIGINTERN int yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__getPixel(yarp::sig::ImageOf< yarp::sig::PixelInt > *self,int x,int y){
        return self->pixel(x,y);
    }
SWIGINTERN void yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__setPixel(yarp::sig::ImageOf< yarp::sig::PixelInt > *self,int x,int y,int v){
        self->pixel(x,y) = v;
    }

typedef yarp::sig::ImageOf<yarp::sig::PixelFloat> ImageFloat;
typedef yarp::os::TypedReader<ImageFloat> TypedReaderImageFloat;
typedef yarp::os::TypedReaderCallback<ImageFloat> TypedReaderCallbackImageFloat;
typedef yarp::os::BufferedPort<ImageFloat> BufferedPortImageFloat;

SWIGINTERN float yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__getPixel(yarp::sig::ImageOf< yarp::sig::PixelFloat > *self,int x,int y){
       return self->pixel(x,y);
       }
SWIGINTERN void yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__setPixel(yarp::sig::ImageOf< yarp::sig::PixelFloat > *self,int x,int y,float v){
       self->pixel(x,y) = v;
       }

typedef yarp::sig::ImageOf<yarp::sig::PixelRgbFloat> ImageRgbFloat;
typedef yarp::os::TypedReader<ImageRgbFloat> TypedReaderImageRgbFloat;
typedef yarp::os::TypedReaderCallback<ImageRgbFloat> TypedReaderCallbackImageRgbFloat;
typedef yarp::os::BufferedPort<ImageRgbFloat> BufferedPortImageRgbFloat;

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_string_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_string_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_string_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, { "string", swig_std_string_cls_methods, swig_std_string_cls_attributes, swig_std_string_cls_constants }, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_PortReport_report(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortReport *arg1 = (yarp::os::PortReport *) 0 ;
  yarp::os::PortInfo *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::PortReport::report",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortReport::report",1,"yarp::os::PortReport *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::PortReport::report",2,"yarp::os::PortInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("PortReport_report",1,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortInfo,0))){
    SWIG_fail_ptr("PortReport_report",2,SWIGTYPE_p_yarp__os__PortInfo);
  }
  
  (arg1)->report((yarp::os::PortInfo const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortReport(void *obj) {
yarp::os::PortReport *arg1 = (yarp::os::PortReport *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_PortReport_methods[] = {
    {"report", _wrap_PortReport_report}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_PortReport_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_PortReport_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_PortReport_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_PortReport_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_PortReport_bases[] = {0};
static const char *swig_yarp_os_PortReport_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_PortReport = { "PortReport", &SWIGTYPE_p_yarp__os__PortReport,0, swig_delete_PortReport, swig_yarp_os_PortReport_methods, swig_yarp_os_PortReport_attributes, { "PortReport", swig_yarp_os_PortReport_cls_methods, swig_yarp_os_PortReport_cls_attributes, swig_yarp_os_PortReport_cls_constants }, swig_yarp_os_PortReport_bases, swig_yarp_os_PortReport_base_names };

static int _wrap_new_Contact__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  int arg2 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Contact *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Contact::Contact",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Contact::Contact",1,"yarp::os::ConstString const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Contact::Contact",2,"int");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (yarp::os::Contact *)new yarp::os::Contact((yarp::os::ConstString const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_empty(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::empty",0,0)
  result = yarp::os::Contact::empty();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_invalid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::invalid",0,0)
  result = yarp::os::Contact::invalid();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_byName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::byName",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Contact::byName",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = yarp::os::Contact::byName((std::string const &)*arg1);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_byCarrier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::byCarrier",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Contact::byCarrier",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = yarp::os::Contact::byCarrier((std::string const &)*arg1);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_byConfig(lua_State* L) {
  int SWIG_arg = 0;
  Searchable *arg1 = 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::byConfig",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::Contact::byConfig",1,"Searchable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Searchable,0))){
    SWIG_fail_ptr("Contact_byConfig",1,SWIGTYPE_p_Searchable);
  }
  
  result = yarp::os::Contact::byConfig(*arg1);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_addCarrier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::addCarrier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::addCarrier",1,"yarp::os::Contact const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Contact::addCarrier",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_addCarrier",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((yarp::os::Contact const *)arg1)->addCarrier((yarp::os::ConstString const &)*arg2);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_addHost(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::addHost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::addHost",1,"yarp::os::Contact const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Contact::addHost",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_addHost",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((yarp::os::Contact const *)arg1)->addHost((yarp::os::ConstString const &)*arg2);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_addPort(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  int arg2 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::addPort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::addPort",1,"yarp::os::Contact const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Contact::addPort",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_addPort",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((yarp::os::Contact const *)arg1)->addPort(arg2);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_bySocket(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  int arg3 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::bySocket",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Contact::bySocket",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Contact::bySocket",2,"yarp::os::ConstString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::Contact::bySocket",3,"int");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = yarp::os::Contact::bySocket((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_addSocket(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  int arg4 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::addSocket",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::addSocket",1,"yarp::os::Contact const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Contact::addSocket",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::Contact::addSocket",3,"yarp::os::ConstString const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::os::Contact::addSocket",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_addSocket",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  result = ((yarp::os::Contact const *)arg1)->addSocket((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3,arg4);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_addNested(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  NestedContact *arg2 = 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::addNested",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::addNested",1,"yarp::os::Contact const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contact::addNested",2,"NestedContact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_addNested",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NestedContact,0))){
    SWIG_fail_ptr("Contact_addNested",2,SWIGTYPE_p_NestedContact);
  }
  
  result = ((yarp::os::Contact const *)arg1)->addNested((NestedContact const &)*arg2);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_addName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::addName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::addName",1,"yarp::os::Contact const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Contact::addName",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_addName",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((yarp::os::Contact const *)arg1)->addName((yarp::os::ConstString const &)*arg2);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_convertHostToIp(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Contact::convertHostToIp",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::Contact::convertHostToIp",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = yarp::os::Contact::convertHostToIp((char const *)arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Contact__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Contact *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Contact::Contact",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::Contact::Contact",1,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("new_Contact",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (yarp::os::Contact *)new yarp::os::Contact((yarp::os::Contact const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Contact::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::getName",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_getName",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = ((yarp::os::Contact const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_getHost(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Contact::getHost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::getHost",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_getHost",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = ((yarp::os::Contact const *)arg1)->getHost();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_getCarrier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Contact::getCarrier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::getCarrier",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_getCarrier",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = ((yarp::os::Contact const *)arg1)->getCarrier();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_getNested(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  NestedContact *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Contact::getNested",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::getNested",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_getNested",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (NestedContact *) &((yarp::os::Contact const *)arg1)->getNested();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NestedContact,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_getPort(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Contact::getPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::getPort",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_getPort",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (int)((yarp::os::Contact const *)arg1)->getPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_toString_c(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Contact::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::toString",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_toString_c",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = ((yarp::os::Contact const *)arg1)->toString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_toURI(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Contact::toURI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::toURI",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_toURI",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = ((yarp::os::Contact const *)arg1)->toURI();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_fromString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contact::fromString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Contact::fromString",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = yarp::os::Contact::fromString((std::string const &)*arg1);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_isValid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contact::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::isValid",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_isValid",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)((yarp::os::Contact const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Contact__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Contact::Contact",0,0)
  result = (yarp::os::Contact *)new yarp::os::Contact();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Contact(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Contact__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Contact__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Contact__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Contact'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Contact::Contact(yarp::os::ConstString const &,int)\n"
    "    yarp::os::Contact::Contact(yarp::os::Contact const &)\n"
    "    yarp::os::Contact::Contact()\n");
  lua_error(L);return 0;
}


static int _wrap_Contact_hasTimeout(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contact::hasTimeout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::hasTimeout",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_hasTimeout",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)((yarp::os::Contact const *)arg1)->hasTimeout();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_setTimeout(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("yarp::os::Contact::setTimeout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::setTimeout",1,"yarp::os::Contact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Contact::setTimeout",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_setTimeout",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setTimeout(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_setNested(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::NestedContact *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Contact::setNested",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::setNested",1,"yarp::os::Contact *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contact::setNested",2,"yarp::os::NestedContact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_setNested",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__NestedContact,0))){
    SWIG_fail_ptr("Contact_setNested",2,SWIGTYPE_p_yarp__os__NestedContact);
  }
  
  (arg1)->setNested((yarp::os::NestedContact const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_getTimeout(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  float result;
  
  SWIG_check_num_args("yarp::os::Contact::getTimeout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::getTimeout",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_getTimeout",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (float)((yarp::os::Contact const *)arg1)->getTimeout();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_getRegName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Contact::getRegName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::getRegName",1,"yarp::os::Contact const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_getRegName",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = ((yarp::os::Contact const *)arg1)->getRegName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_setHost(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::Contact::setHost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::setHost",1,"yarp::os::Contact *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Contact::setHost",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_setHost",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->setHost((yarp::os::ConstString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contact_setPort(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = (yarp::os::Contact *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::os::Contact::setPort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contact::setPort",1,"yarp::os::Contact *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Contact::setPort",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contact_setPort",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPort(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Contact(void *obj) {
yarp::os::Contact *arg1 = (yarp::os::Contact *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Contact_methods[] = {
    {"addCarrier", _wrap_Contact_addCarrier}, 
    {"addHost", _wrap_Contact_addHost}, 
    {"addPort", _wrap_Contact_addPort}, 
    {"addSocket", _wrap_Contact_addSocket}, 
    {"addNested", _wrap_Contact_addNested}, 
    {"addName", _wrap_Contact_addName}, 
    {"getName", _wrap_Contact_getName}, 
    {"getHost", _wrap_Contact_getHost}, 
    {"getCarrier", _wrap_Contact_getCarrier}, 
    {"getNested", _wrap_Contact_getNested}, 
    {"getPort", _wrap_Contact_getPort}, 
    {"toString_c", _wrap_Contact_toString_c}, 
    {"toURI", _wrap_Contact_toURI}, 
    {"isValid", _wrap_Contact_isValid}, 
    {"hasTimeout", _wrap_Contact_hasTimeout}, 
    {"setTimeout", _wrap_Contact_setTimeout}, 
    {"setNested", _wrap_Contact_setNested}, 
    {"getTimeout", _wrap_Contact_getTimeout}, 
    {"getRegName", _wrap_Contact_getRegName}, 
    {"setHost", _wrap_Contact_setHost}, 
    {"setPort", _wrap_Contact_setPort}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Contact_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Contact_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Contact_cls_methods[] = {
    {"empty", _wrap_Contact_empty}, 
    {"invalid", _wrap_Contact_invalid}, 
    {"byName", _wrap_Contact_byName}, 
    {"byCarrier", _wrap_Contact_byCarrier}, 
    {"byConfig", _wrap_Contact_byConfig}, 
    {"bySocket", _wrap_Contact_bySocket}, 
    {"convertHostToIp", _wrap_Contact_convertHostToIp}, 
    {"fromString", _wrap_Contact_fromString}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Contact_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Contact_bases[] = {0};
static const char *swig_yarp_os_Contact_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_Contact = { "Contact", &SWIGTYPE_p_yarp__os__Contact,_wrap_new_Contact, swig_delete_Contact, swig_yarp_os_Contact_methods, swig_yarp_os_Contact_attributes, { "Contact", swig_yarp_os_Contact_cls_methods, swig_yarp_os_Contact_cls_attributes, swig_yarp_os_Contact_cls_constants }, swig_yarp_os_Contact_bases, swig_yarp_os_Contact_base_names };

static int _wrap_ConnectionReader_expectBlock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::expectBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::expectBlock",1,"yarp::os::ConnectionReader *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ConnectionReader::expectBlock",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::ConnectionReader::expectBlock",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_expectBlock",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (bool)(arg1)->expectBlock((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_expectText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  int arg2 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::expectText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::expectText",1,"yarp::os::ConnectionReader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::ConnectionReader::expectText",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_expectText",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->expectText(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_expectText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::expectText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::expectText",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_expectText",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (arg1)->expectText();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_expectText(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ConnectionReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConnectionReader_expectText__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ConnectionReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ConnectionReader_expectText__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConnectionReader_expectText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ConnectionReader::expectText(int)\n"
    "    yarp::os::ConnectionReader::expectText()\n");
  lua_error(L);return 0;
}


static int _wrap_ConnectionReader_expectInt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::expectInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::expectInt",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_expectInt",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (int)(arg1)->expectInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_expectInt64(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  YARP_INT64 result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::expectInt64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::expectInt64",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_expectInt64",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (arg1)->expectInt64();
  {
    YARP_INT64 * resultptr = new YARP_INT64((const YARP_INT64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_YARP_INT64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_expectDouble(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::expectDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::expectDouble",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_expectDouble",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (double)(arg1)->expectDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_isTextMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::isTextMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::isTextMode",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_isTextMode",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->isTextMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_isBareMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::isBareMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::isBareMode",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_isBareMode",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->isBareMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_convertTextMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::convertTextMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::convertTextMode",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_convertTextMode",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->convertTextMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_getSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  size_t result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::getSize",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_getSize",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_getWriter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::getWriter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::getWriter",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_getWriter",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (yarp::os::ConnectionWriter *)(arg1)->getWriter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__ConnectionWriter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_readEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  Bytes result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::readEnvelope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::readEnvelope",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_readEnvelope",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (arg1)->readEnvelope();
  {
    Bytes * resultptr = new Bytes((const Bytes &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Bytes,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_getReference(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::Portable *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::getReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::getReference",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_getReference",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (yarp::os::Portable *)(arg1)->getReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Portable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_getRemoteContact(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::getRemoteContact",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::getRemoteContact",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_getRemoteContact",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (arg1)->getRemoteContact();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_getLocalContact(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::getLocalContact",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::getLocalContact",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_getLocalContact",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (arg1)->getLocalContact();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_isValid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::isValid",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_isValid",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_isActive(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::isActive",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_isActive",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_isError(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::isError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::isError",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_isError",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->isError();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_requestDrop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::requestDrop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::requestDrop",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_requestDrop",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  (arg1)->requestDrop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_getConnectionModifiers(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  Searchable *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::getConnectionModifiers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::getConnectionModifiers",1,"yarp::os::ConnectionReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_getConnectionModifiers",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (Searchable *) &(arg1)->getConnectionModifiers();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Searchable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_pushInt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::pushInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::pushInt",1,"yarp::os::ConnectionReader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::ConnectionReader::pushInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_pushInt",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->pushInt(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_setSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::setSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::setSize",1,"yarp::os::ConnectionReader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::ConnectionReader::setSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("ConnectionReader_setSize",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->setSize(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_createConnectionReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::InputStream *arg1 = 0 ;
  yarp::os::ConnectionReader *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::createConnectionReader",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::createConnectionReader",1,"yarp::os::InputStream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__InputStream,0))){
    SWIG_fail_ptr("ConnectionReader_createConnectionReader",1,SWIGTYPE_p_yarp__os__InputStream);
  }
  
  result = (yarp::os::ConnectionReader *)yarp::os::ConnectionReader::createConnectionReader(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__ConnectionReader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionReader_readFromStream(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortReader *arg1 = 0 ;
  yarp::os::InputStream *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionReader::readFromStream",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::ConnectionReader::readFromStream",1,"yarp::os::PortReader &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::ConnectionReader::readFromStream",2,"yarp::os::InputStream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("ConnectionReader_readFromStream",1,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__InputStream,0))){
    SWIG_fail_ptr("ConnectionReader_readFromStream",2,SWIGTYPE_p_yarp__os__InputStream);
  }
  
  result = (bool)yarp::os::ConnectionReader::readFromStream(*arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConnectionReader(void *obj) {
yarp::os::ConnectionReader *arg1 = (yarp::os::ConnectionReader *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_ConnectionReader_methods[] = {
    {"expectBlock", _wrap_ConnectionReader_expectBlock}, 
    {"expectText", _wrap_ConnectionReader_expectText}, 
    {"expectInt", _wrap_ConnectionReader_expectInt}, 
    {"expectInt64", _wrap_ConnectionReader_expectInt64}, 
    {"expectDouble", _wrap_ConnectionReader_expectDouble}, 
    {"isTextMode", _wrap_ConnectionReader_isTextMode}, 
    {"isBareMode", _wrap_ConnectionReader_isBareMode}, 
    {"convertTextMode", _wrap_ConnectionReader_convertTextMode}, 
    {"getSize", _wrap_ConnectionReader_getSize}, 
    {"getWriter", _wrap_ConnectionReader_getWriter}, 
    {"readEnvelope", _wrap_ConnectionReader_readEnvelope}, 
    {"getReference", _wrap_ConnectionReader_getReference}, 
    {"getRemoteContact", _wrap_ConnectionReader_getRemoteContact}, 
    {"getLocalContact", _wrap_ConnectionReader_getLocalContact}, 
    {"isValid", _wrap_ConnectionReader_isValid}, 
    {"isActive", _wrap_ConnectionReader_isActive}, 
    {"isError", _wrap_ConnectionReader_isError}, 
    {"requestDrop", _wrap_ConnectionReader_requestDrop}, 
    {"getConnectionModifiers", _wrap_ConnectionReader_getConnectionModifiers}, 
    {"pushInt", _wrap_ConnectionReader_pushInt}, 
    {"setSize", _wrap_ConnectionReader_setSize}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_ConnectionReader_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_ConnectionReader_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_ConnectionReader_cls_methods[] = {
    {"createConnectionReader", _wrap_ConnectionReader_createConnectionReader}, 
    {"readFromStream", _wrap_ConnectionReader_readFromStream}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_ConnectionReader_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_ConnectionReader_bases[] = {0};
static const char *swig_yarp_os_ConnectionReader_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_ConnectionReader = { "ConnectionReader", &SWIGTYPE_p_yarp__os__ConnectionReader,0, swig_delete_ConnectionReader, swig_yarp_os_ConnectionReader_methods, swig_yarp_os_ConnectionReader_attributes, { "ConnectionReader", swig_yarp_os_ConnectionReader_cls_methods, swig_yarp_os_ConnectionReader_cls_attributes, swig_yarp_os_ConnectionReader_cls_constants }, swig_yarp_os_ConnectionReader_bases, swig_yarp_os_ConnectionReader_base_names };

static int _wrap_ConnectionWriter_appendBlock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::appendBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendBlock",1,"yarp::os::ConnectionWriter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendBlock",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendBlock",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_appendBlock",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->appendBlock((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_appendInt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::appendInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendInt",1,"yarp::os::ConnectionWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_appendInt",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->appendInt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_appendInt64(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  YARP_INT64 *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::appendInt64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendInt64",1,"yarp::os::ConnectionWriter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendInt64",2,"YARP_INT64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_appendInt64",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_YARP_INT64,0))){
    SWIG_fail_ptr("ConnectionWriter_appendInt64",2,SWIGTYPE_p_YARP_INT64);
  }
  
  (arg1)->appendInt64((YARP_INT64 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_appendDouble(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::appendDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendDouble",1,"yarp::os::ConnectionWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendDouble",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_appendDouble",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->appendDouble(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_appendString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::appendString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendString",1,"yarp::os::ConnectionWriter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendString",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendString",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_appendString",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->appendString((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_appendString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::appendString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendString",1,"yarp::os::ConnectionWriter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_appendString",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->appendString((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_appendString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ConnectionWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ConnectionWriter_appendString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ConnectionWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ConnectionWriter_appendString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConnectionWriter_appendString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ConnectionWriter::appendString(char const *,int)\n"
    "    yarp::os::ConnectionWriter::appendString(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ConnectionWriter_appendExternalBlock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::appendExternalBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendExternalBlock",1,"yarp::os::ConnectionWriter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendExternalBlock",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendExternalBlock",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_appendExternalBlock",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->appendExternalBlock((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_isTextMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::isTextMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::isTextMode",1,"yarp::os::ConnectionWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_isTextMode",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->isTextMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_isBareMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::isBareMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::isBareMode",1,"yarp::os::ConnectionWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_isBareMode",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->isBareMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_declareSizes(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::declareSizes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::declareSizes",1,"yarp::os::ConnectionWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::declareSizes",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::os::ConnectionWriter::declareSizes",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_declareSizes",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ConnectionWriter_declareSizes",3,SWIGTYPE_p_int);
  }
  
  (arg1)->declareSizes(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_setReplyHandler(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::setReplyHandler",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::setReplyHandler",1,"yarp::os::ConnectionWriter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::setReplyHandler",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_setReplyHandler",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("ConnectionWriter_setReplyHandler",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplyHandler(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_setReference(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::Portable *arg2 = (yarp::os::Portable *) 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::setReference",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::setReference",1,"yarp::os::ConnectionWriter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::setReference",2,"yarp::os::Portable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_setReference",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Portable,0))){
    SWIG_fail_ptr("ConnectionWriter_setReference",2,SWIGTYPE_p_yarp__os__Portable);
  }
  
  (arg1)->setReference(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_convertTextMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::convertTextMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::convertTextMode",1,"yarp::os::ConnectionWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_convertTextMode",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->convertTextMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_isValid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::isValid",1,"yarp::os::ConnectionWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_isValid",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_isActive(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::isActive",1,"yarp::os::ConnectionWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_isActive",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_isError(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::isError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::isError",1,"yarp::os::ConnectionWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_isError",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->isError();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_requestDrop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::requestDrop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::requestDrop",1,"yarp::os::ConnectionWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_requestDrop",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  (arg1)->requestDrop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_isNull(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::isNull",1,"yarp::os::ConnectionWriter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_isNull",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)((yarp::os::ConnectionWriter const *)arg1)->isNull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_getBuffer(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::SizedWriter *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::getBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::getBuffer",1,"yarp::os::ConnectionWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_getBuffer",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (yarp::os::SizedWriter *)(arg1)->getBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__SizedWriter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_appendRawString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::appendRawString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendRawString",1,"yarp::os::ConnectionWriter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::appendRawString",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_appendRawString",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->appendRawString((yarp::os::ConstString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_createBufferedConnectionWriter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::createBufferedConnectionWriter",0,0)
  result = (yarp::os::ConnectionWriter *)yarp::os::ConnectionWriter::createBufferedConnectionWriter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__ConnectionWriter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConnectionWriter_writeToStream(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriter *arg1 = 0 ;
  yarp::os::OutputStream *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ConnectionWriter::writeToStream",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::ConnectionWriter::writeToStream",1,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::ConnectionWriter::writeToStream",2,"yarp::os::OutputStream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("ConnectionWriter_writeToStream",1,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__OutputStream,0))){
    SWIG_fail_ptr("ConnectionWriter_writeToStream",2,SWIGTYPE_p_yarp__os__OutputStream);
  }
  
  result = (bool)yarp::os::ConnectionWriter::writeToStream(*arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConnectionWriter(void *obj) {
yarp::os::ConnectionWriter *arg1 = (yarp::os::ConnectionWriter *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_ConnectionWriter_methods[] = {
    {"appendBlock", _wrap_ConnectionWriter_appendBlock}, 
    {"appendInt", _wrap_ConnectionWriter_appendInt}, 
    {"appendInt64", _wrap_ConnectionWriter_appendInt64}, 
    {"appendDouble", _wrap_ConnectionWriter_appendDouble}, 
    {"appendString", _wrap_ConnectionWriter_appendString}, 
    {"appendExternalBlock", _wrap_ConnectionWriter_appendExternalBlock}, 
    {"isTextMode", _wrap_ConnectionWriter_isTextMode}, 
    {"isBareMode", _wrap_ConnectionWriter_isBareMode}, 
    {"declareSizes", _wrap_ConnectionWriter_declareSizes}, 
    {"setReplyHandler", _wrap_ConnectionWriter_setReplyHandler}, 
    {"setReference", _wrap_ConnectionWriter_setReference}, 
    {"convertTextMode", _wrap_ConnectionWriter_convertTextMode}, 
    {"isValid", _wrap_ConnectionWriter_isValid}, 
    {"isActive", _wrap_ConnectionWriter_isActive}, 
    {"isError", _wrap_ConnectionWriter_isError}, 
    {"requestDrop", _wrap_ConnectionWriter_requestDrop}, 
    {"isNull", _wrap_ConnectionWriter_isNull}, 
    {"getBuffer", _wrap_ConnectionWriter_getBuffer}, 
    {"appendRawString", _wrap_ConnectionWriter_appendRawString}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_ConnectionWriter_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_ConnectionWriter_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_ConnectionWriter_cls_methods[] = {
    {"createBufferedConnectionWriter", _wrap_ConnectionWriter_createBufferedConnectionWriter}, 
    {"writeToStream", _wrap_ConnectionWriter_writeToStream}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_ConnectionWriter_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_ConnectionWriter_bases[] = {0};
static const char *swig_yarp_os_ConnectionWriter_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_ConnectionWriter = { "ConnectionWriter", &SWIGTYPE_p_yarp__os__ConnectionWriter,0, swig_delete_ConnectionWriter, swig_yarp_os_ConnectionWriter_methods, swig_yarp_os_ConnectionWriter_attributes, { "ConnectionWriter", swig_yarp_os_ConnectionWriter_cls_methods, swig_yarp_os_ConnectionWriter_cls_attributes, swig_yarp_os_ConnectionWriter_cls_constants }, swig_yarp_os_ConnectionWriter_bases, swig_yarp_os_ConnectionWriter_base_names };

static int _wrap_PortReader_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortReader *arg1 = (yarp::os::PortReader *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::PortReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortReader::read",1,"yarp::os::PortReader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::PortReader::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("PortReader_read",1,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("PortReader_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReader_getReadType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortReader *arg1 = (yarp::os::PortReader *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::PortReader::getReadType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortReader::getReadType",1,"yarp::os::PortReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("PortReader_getReadType",1,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (arg1)->getReadType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortReader(void *obj) {
yarp::os::PortReader *arg1 = (yarp::os::PortReader *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_PortReader_methods[] = {
    {"read", _wrap_PortReader_read}, 
    {"getReadType", _wrap_PortReader_getReadType}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_PortReader_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_PortReader_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_PortReader_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_PortReader_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_PortReader_bases[] = {0};
static const char *swig_yarp_os_PortReader_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_PortReader = { "PortReader", &SWIGTYPE_p_yarp__os__PortReader,0, swig_delete_PortReader, swig_yarp_os_PortReader_methods, swig_yarp_os_PortReader_attributes, { "PortReader", swig_yarp_os_PortReader_cls_methods, swig_yarp_os_PortReader_cls_attributes, swig_yarp_os_PortReader_cls_constants }, swig_yarp_os_PortReader_bases, swig_yarp_os_PortReader_base_names };

static int _wrap_PortWriter_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::PortWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriter::write",1,"yarp::os::PortWriter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::PortWriter::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("PortWriter_write",1,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("PortWriter_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortWriter_onCompletion(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  
  SWIG_check_num_args("yarp::os::PortWriter::onCompletion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriter::onCompletion",1,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("PortWriter_onCompletion",1,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  (arg1)->onCompletion();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortWriter_onCommencement(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  
  SWIG_check_num_args("yarp::os::PortWriter::onCommencement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriter::onCommencement",1,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("PortWriter_onCommencement",1,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  (arg1)->onCommencement();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortWriter_getWriteType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::PortWriter::getWriteType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriter::getWriteType",1,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("PortWriter_getWriteType",1,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (arg1)->getWriteType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortWriter(void *obj) {
yarp::os::PortWriter *arg1 = (yarp::os::PortWriter *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_PortWriter_methods[] = {
    {"write", _wrap_PortWriter_write}, 
    {"onCompletion", _wrap_PortWriter_onCompletion}, 
    {"onCommencement", _wrap_PortWriter_onCommencement}, 
    {"getWriteType", _wrap_PortWriter_getWriteType}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_PortWriter_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_PortWriter_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_PortWriter_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_PortWriter_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_PortWriter_bases[] = {0};
static const char *swig_yarp_os_PortWriter_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_PortWriter = { "PortWriter", &SWIGTYPE_p_yarp__os__PortWriter,0, swig_delete_PortWriter, swig_yarp_os_PortWriter_methods, swig_yarp_os_PortWriter_attributes, { "PortWriter", swig_yarp_os_PortWriter_cls_methods, swig_yarp_os_PortWriter_cls_attributes, swig_yarp_os_PortWriter_cls_constants }, swig_yarp_os_PortWriter_bases, swig_yarp_os_PortWriter_base_names };

static int _wrap_Portable_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Portable::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Portable::read",1,"yarp::os::Portable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Portable::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Portable,0))){
    SWIG_fail_ptr("Portable_read",1,SWIGTYPE_p_yarp__os__Portable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("Portable_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Portable_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Portable::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Portable::write",1,"yarp::os::Portable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Portable::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Portable,0))){
    SWIG_fail_ptr("Portable_write",1,SWIGTYPE_p_yarp__os__Portable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("Portable_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Portable_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Portable *arg1 = (yarp::os::Portable *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::Portable::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Portable::getType",1,"yarp::os::Portable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Portable,0))){
    SWIG_fail_ptr("Portable_getType",1,SWIGTYPE_p_yarp__os__Portable);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Portable_copyPortable(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriter *arg1 = 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Portable::copyPortable",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::Portable::copyPortable",1,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Portable::copyPortable",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Portable_copyPortable",1,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Portable_copyPortable",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)yarp::os::Portable::copyPortable(*arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Portable(void *obj) {
yarp::os::Portable *arg1 = (yarp::os::Portable *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Portable_methods[] = {
    {"read", _wrap_Portable_read}, 
    {"write", _wrap_Portable_write}, 
    {"getType", _wrap_Portable_getType}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Portable_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Portable_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Portable_cls_methods[] = {
    {"copyPortable", _wrap_Portable_copyPortable}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Portable_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Portable_bases[] = {0,0,0};
static const char *swig_yarp_os_Portable_base_names[] = {"yarp::os::PortReader *","yarp::os::PortWriter *",0};
static swig_lua_class _wrap_class_yarp_os_Portable = { "Portable", &SWIGTYPE_p_yarp__os__Portable,0, swig_delete_Portable, swig_yarp_os_Portable_methods, swig_yarp_os_Portable_attributes, { "Portable", swig_yarp_os_Portable_cls_methods, swig_yarp_os_Portable_cls_attributes, swig_yarp_os_Portable_cls_constants }, swig_yarp_os_Portable_bases, swig_yarp_os_Portable_base_names };

static int _wrap_SearchReport_key_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::SearchReport::key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::key",1,"yarp::os::SearchReport *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::SearchReport::key",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_key_set",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->key = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_key_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  SWIG_check_num_args("yarp::os::SearchReport::key",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::key",1,"yarp::os::SearchReport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_key_get",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  result = (yarp::os::ConstString *) & ((arg1)->key);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_value_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::SearchReport::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::value",1,"yarp::os::SearchReport *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::SearchReport::value",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_value_set",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->value = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_value_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  SWIG_check_num_args("yarp::os::SearchReport::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::value",1,"yarp::os::SearchReport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_value_get",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  result = (yarp::os::ConstString *) & ((arg1)->value);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_isFound_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::SearchReport::isFound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::isFound",1,"yarp::os::SearchReport *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::SearchReport::isFound",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_isFound_set",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->isFound = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_isFound_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::SearchReport::isFound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::isFound",1,"yarp::os::SearchReport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_isFound_get",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  result = (bool) ((arg1)->isFound);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_isGroup_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::SearchReport::isGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::isGroup",1,"yarp::os::SearchReport *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::SearchReport::isGroup",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_isGroup_set",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->isGroup = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_isGroup_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::SearchReport::isGroup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::isGroup",1,"yarp::os::SearchReport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_isGroup_get",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  result = (bool) ((arg1)->isGroup);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_isComment_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::SearchReport::isComment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::isComment",1,"yarp::os::SearchReport *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::SearchReport::isComment",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_isComment_set",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->isComment = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_isComment_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::SearchReport::isComment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::isComment",1,"yarp::os::SearchReport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_isComment_get",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  result = (bool) ((arg1)->isComment);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_isDefault_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::SearchReport::isDefault",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::isDefault",1,"yarp::os::SearchReport *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::SearchReport::isDefault",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_isDefault_set",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->isDefault = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SearchReport_isDefault_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::SearchReport::isDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchReport::isDefault",1,"yarp::os::SearchReport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchReport_isDefault_get",1,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  result = (bool) ((arg1)->isDefault);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SearchReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchReport *result = 0 ;
  
  SWIG_check_num_args("yarp::os::SearchReport::SearchReport",0,0)
  result = (yarp::os::SearchReport *)new yarp::os::SearchReport();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__SearchReport,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SearchReport(void *obj) {
yarp::os::SearchReport *arg1 = (yarp::os::SearchReport *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_SearchReport_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_os_SearchReport_attributes[] = {
    { "key", _wrap_SearchReport_key_get, _wrap_SearchReport_key_set},
    { "value", _wrap_SearchReport_value_get, _wrap_SearchReport_value_set},
    { "isFound", _wrap_SearchReport_isFound_get, _wrap_SearchReport_isFound_set},
    { "isGroup", _wrap_SearchReport_isGroup_get, _wrap_SearchReport_isGroup_set},
    { "isComment", _wrap_SearchReport_isComment_get, _wrap_SearchReport_isComment_set},
    { "isDefault", _wrap_SearchReport_isDefault_get, _wrap_SearchReport_isDefault_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_SearchReport_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_SearchReport_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_SearchReport_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_SearchReport_bases[] = {0};
static const char *swig_yarp_os_SearchReport_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_SearchReport = { "SearchReport", &SWIGTYPE_p_yarp__os__SearchReport,_wrap_new_SearchReport, swig_delete_SearchReport, swig_yarp_os_SearchReport_methods, swig_yarp_os_SearchReport_attributes, { "SearchReport", swig_yarp_os_SearchReport_cls_methods, swig_yarp_os_SearchReport_cls_attributes, swig_yarp_os_SearchReport_cls_constants }, swig_yarp_os_SearchReport_bases, swig_yarp_os_SearchReport_base_names };

static int _wrap_SearchMonitor_report(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::SearchMonitor *arg1 = (yarp::os::SearchMonitor *) 0 ;
  yarp::os::SearchReport *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::os::SearchMonitor::report",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::SearchMonitor::report",1,"yarp::os::SearchMonitor *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::SearchMonitor::report",2,"yarp::os::SearchReport const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("yarp::os::SearchMonitor::report",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__SearchMonitor,0))){
    SWIG_fail_ptr("SearchMonitor_report",1,SWIGTYPE_p_yarp__os__SearchMonitor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("SearchMonitor_report",2,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->report((yarp::os::SearchReport const &)*arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SearchMonitor(void *obj) {
yarp::os::SearchMonitor *arg1 = (yarp::os::SearchMonitor *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_SearchMonitor_methods[] = {
    {"report", _wrap_SearchMonitor_report}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_SearchMonitor_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_SearchMonitor_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_SearchMonitor_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_SearchMonitor_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_SearchMonitor_bases[] = {0};
static const char *swig_yarp_os_SearchMonitor_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_SearchMonitor = { "SearchMonitor", &SWIGTYPE_p_yarp__os__SearchMonitor,0, swig_delete_SearchMonitor, swig_yarp_os_SearchMonitor_methods, swig_yarp_os_SearchMonitor_attributes, { "SearchMonitor", swig_yarp_os_SearchMonitor_cls_methods, swig_yarp_os_SearchMonitor_cls_attributes, swig_yarp_os_SearchMonitor_cls_constants }, swig_yarp_os_SearchMonitor_bases, swig_yarp_os_SearchMonitor_base_names };

static int _wrap_Searchable_check__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Searchable::check",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::check",1,"yarp::os::Searchable const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Searchable::check",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_check",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_check__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Searchable::check",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::check",1,"yarp::os::Searchable const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Searchable::check",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::Searchable::check",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_check",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_find(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Searchable::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::find",1,"yarp::os::Searchable const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Searchable::find",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_find",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Value *) &((yarp::os::Searchable const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_findGroup__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Searchable::findGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::findGroup",1,"yarp::os::Searchable const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Searchable::findGroup",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_findGroup",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Bottle *) &((yarp::os::Searchable const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_findGroup__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Searchable::findGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::findGroup",1,"yarp::os::Searchable const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Searchable::findGroup",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::Searchable::findGroup",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_findGroup",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (yarp::os::Bottle *) &((yarp::os::Searchable const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_findGroup(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Searchable_findGroup__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Searchable_findGroup__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Searchable_findGroup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Searchable::findGroup(yarp::os::ConstString const &) const\n"
    "    yarp::os::Searchable::findGroup(yarp::os::ConstString const &,yarp::os::ConstString const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Searchable_check__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp4 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("yarp::os::Searchable::check",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::check",1,"yarp::os::Searchable const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Searchable::check",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Searchable::check",3,"yarp::os::Value const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("yarp::os::Searchable::check",4,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_check",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Searchable_check",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = ((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_check__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("yarp::os::Searchable::check",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::check",1,"yarp::os::Searchable const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Searchable::check",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Searchable::check",3,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_check",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Searchable_check",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = ((yarp::os::Searchable const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_check(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Searchable_check__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Searchable_check__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Searchable_check__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Searchable_check__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Searchable_check'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Searchable::check(yarp::os::ConstString const &) const\n"
    "    yarp::os::Searchable::check(yarp::os::ConstString const &,yarp::os::ConstString const &) const\n"
    "    yarp::os::Searchable::check(yarp::os::ConstString const &,yarp::os::Value const &,yarp::os::ConstString const &) const\n"
    "    yarp::os::Searchable::check(yarp::os::ConstString const &,yarp::os::Value const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Searchable_isNull(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Searchable::isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::isNull",1,"yarp::os::Searchable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_isNull",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = (bool)((yarp::os::Searchable const *)arg1)->isNull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_toString_c(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Searchable::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::toString",1,"yarp::os::Searchable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_toString_c",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = ((yarp::os::Searchable const *)arg1)->toString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_setMonitor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchMonitor *arg2 = (yarp::os::SearchMonitor *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::os::Searchable::setMonitor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::setMonitor",1,"yarp::os::Searchable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::Searchable::setMonitor",2,"yarp::os::SearchMonitor *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("yarp::os::Searchable::setMonitor",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_setMonitor",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__SearchMonitor,0))){
    SWIG_fail_ptr("Searchable_setMonitor",2,SWIGTYPE_p_yarp__os__SearchMonitor);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setMonitor(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_setMonitor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchMonitor *arg2 = (yarp::os::SearchMonitor *) 0 ;
  
  SWIG_check_num_args("yarp::os::Searchable::setMonitor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::setMonitor",1,"yarp::os::Searchable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::Searchable::setMonitor",2,"yarp::os::SearchMonitor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_setMonitor",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__SearchMonitor,0))){
    SWIG_fail_ptr("Searchable_setMonitor",2,SWIGTYPE_p_yarp__os__SearchMonitor);
  }
  
  (arg1)->setMonitor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_setMonitor(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__SearchMonitor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Searchable_setMonitor__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__SearchMonitor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Searchable_setMonitor__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Searchable_setMonitor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Searchable::setMonitor(yarp::os::SearchMonitor *,char const *)\n"
    "    yarp::os::Searchable::setMonitor(yarp::os::SearchMonitor *)\n");
  lua_error(L);return 0;
}


static int _wrap_Searchable_getMonitor(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchMonitor *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Searchable::getMonitor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::getMonitor",1,"yarp::os::Searchable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_getMonitor",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = (yarp::os::SearchMonitor *)((yarp::os::Searchable const *)arg1)->getMonitor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__SearchMonitor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_getMonitorContext(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Searchable::getMonitorContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::getMonitorContext",1,"yarp::os::Searchable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_getMonitorContext",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = ((yarp::os::Searchable const *)arg1)->getMonitorContext();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Searchable_reportToMonitor(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = (yarp::os::Searchable *) 0 ;
  yarp::os::SearchReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Searchable::reportToMonitor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Searchable::reportToMonitor",1,"yarp::os::Searchable const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Searchable::reportToMonitor",2,"yarp::os::SearchReport const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Searchable_reportToMonitor",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__SearchReport,0))){
    SWIG_fail_ptr("Searchable_reportToMonitor",2,SWIGTYPE_p_yarp__os__SearchReport);
  }
  
  ((yarp::os::Searchable const *)arg1)->reportToMonitor((yarp::os::SearchReport const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Searchable(void *obj) {
yarp::os::Searchable *arg1 = (yarp::os::Searchable *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Searchable_methods[] = {
    {"find", _wrap_Searchable_find}, 
    {"findGroup", _wrap_Searchable_findGroup}, 
    {"check", _wrap_Searchable_check}, 
    {"isNull", _wrap_Searchable_isNull}, 
    {"toString_c", _wrap_Searchable_toString_c}, 
    {"setMonitor", _wrap_Searchable_setMonitor}, 
    {"getMonitor", _wrap_Searchable_getMonitor}, 
    {"getMonitorContext", _wrap_Searchable_getMonitorContext}, 
    {"reportToMonitor", _wrap_Searchable_reportToMonitor}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Searchable_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Searchable_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Searchable_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Searchable_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Searchable_bases[] = {0};
static const char *swig_yarp_os_Searchable_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_Searchable = { "Searchable", &SWIGTYPE_p_yarp__os__Searchable,0, swig_delete_Searchable, swig_yarp_os_Searchable_methods, swig_yarp_os_Searchable_attributes, { "Searchable", swig_yarp_os_Searchable_cls_methods, swig_yarp_os_Searchable_cls_attributes, swig_yarp_os_Searchable_cls_constants }, swig_yarp_os_Searchable_bases, swig_yarp_os_Searchable_base_names };

static int _wrap_Value_check__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("check",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Value const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_check",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_check__SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("check",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Value const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("check",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_check",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_check__SWIG_0_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp4 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("check",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Value const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("check",3,"yarp::os::Value const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("check",4,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_check",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_check",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = ((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_check__SWIG_0_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("check",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Value const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("check",3,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_check",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_check",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = ((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_findGroup__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("findGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroup",1,"yarp::os::Value const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findGroup",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_findGroup",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Bottle *) &((yarp::os::Value const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_findGroup__SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("findGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroup",1,"yarp::os::Value const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findGroup",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("findGroup",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_findGroup",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (yarp::os::Bottle *) &((yarp::os::Value const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::Value",0,0)
  result = (yarp::os::Value *)new yarp::os::Value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool arg2 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::Value",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Value::Value",1,"int");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Value::Value",2,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Value *)new yarp::os::Value(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::Value",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Value::Value",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (yarp::os::Value *)new yarp::os::Value(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::Value",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Value::Value",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (yarp::os::Value *)new yarp::os::Value(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  bool arg2 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::Value",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Value::Value",1,"yarp::os::ConstString const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Value::Value",2,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Value *)new yarp::os::Value((yarp::os::ConstString const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::Value",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Value::Value",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (yarp::os::Value *)new yarp::os::Value((yarp::os::ConstString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::Value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::Value",1,"void *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Value::Value",2,"int");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"new_Value");
  arg2 = (int)lua_tonumber(L, 2);
  result = (yarp::os::Value *)new yarp::os::Value(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = 0 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::Value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::Value::Value",1,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("new_Value",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (yarp::os::Value *)new yarp::os::Value((yarp::os::Value const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Value__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Value__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Value__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Value__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Value__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Value__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Value::Value()\n"
    "    yarp::os::Value::Value(int,bool)\n"
    "    yarp::os::Value::Value(int)\n"
    "    yarp::os::Value::Value(double)\n"
    "    yarp::os::Value::Value(yarp::os::ConstString const &,bool)\n"
    "    yarp::os::Value::Value(yarp::os::ConstString const &)\n"
    "    yarp::os::Value::Value(void *,int)\n"
    "    yarp::os::Value::Value(yarp::os::Value const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Value_isBool(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isBool",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isBool",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isInt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isInt",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isInt",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isInt();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isInt64(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isInt64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isInt64",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isInt64",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isInt64();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isString",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isString",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isString();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isDouble(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isDouble",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isDouble",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isDouble();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isList(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isList",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isList",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isList();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isDict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isDict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isDict",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isDict",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isDict();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isVocab(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isVocab",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isVocab",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isVocab",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isVocab();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isBlob(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isBlob",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isBlob",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isBlob",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isBlob();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asBool(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::asBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asBool",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asBool",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->asBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asInt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Value::asInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asInt",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asInt",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (int)((yarp::os::Value const *)arg1)->asInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asInt64(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  YARP_INT64 result;
  
  SWIG_check_num_args("yarp::os::Value::asInt64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asInt64",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asInt64",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = ((yarp::os::Value const *)arg1)->asInt64();
  {
    YARP_INT64 * resultptr = new YARP_INT64((const YARP_INT64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_YARP_INT64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asVocab(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Value::asVocab",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asVocab",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asVocab",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (int)((yarp::os::Value const *)arg1)->asVocab();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asDouble(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::os::Value::asDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asDouble",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asDouble",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (double)((yarp::os::Value const *)arg1)->asDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Value::asString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asString",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asString",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = ((yarp::os::Value const *)arg1)->asString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asList(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::asList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asList",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asList",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (yarp::os::Bottle *)((yarp::os::Value const *)arg1)->asList();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asDict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::asDict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asDict",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asDict",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (yarp::os::Property *)((yarp::os::Value const *)arg1)->asDict();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asSearchable(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Searchable *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::asSearchable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asSearchable",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asSearchable",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (yarp::os::Searchable *)((yarp::os::Value const *)arg1)->asSearchable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Searchable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asBlob(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::asBlob",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asBlob",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asBlob",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (char *)((yarp::os::Value const *)arg1)->asBlob();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_asBlobLength(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  size_t result;
  
  SWIG_check_num_args("yarp::os::Value::asBlobLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::asBlobLength",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_asBlobLength",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = ((yarp::os::Value const *)arg1)->asBlobLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::read",1,"yarp::os::Value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Value::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_read",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("Value_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::write",1,"yarp::os::Value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Value::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_write",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("Value_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_check__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::check",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::check",1,"yarp::os::Value const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Value::check",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_check",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((yarp::os::Value const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_check(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value_check__SWIG_0_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value_check__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Value_check__SWIG_0_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Value_check__SWIG_0_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Value_check__SWIG_0_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Value_check'\n"
    "  Possible C/C++ prototypes are:\n"
    "    check(yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::Value const &,yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::Value const &) const\n"
    "    yarp::os::Value::check(yarp::os::ConstString const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Value_find(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::find",1,"yarp::os::Value const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Value::find",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_find",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Value *) &((yarp::os::Value const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_findGroup__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::findGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::findGroup",1,"yarp::os::Value const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Value::findGroup",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_findGroup",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Bottle *) &((yarp::os::Value const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_findGroup(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value_findGroup__SWIG_0_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value_findGroup__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Value_findGroup__SWIG_0_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Value_findGroup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findGroup(yarp::os::ConstString const &) const\n"
    "    findGroup(yarp::os::ConstString const &,yarp::os::ConstString const &) const\n"
    "    yarp::os::Value::findGroup(yarp::os::ConstString const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Value_isEqual__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::operator ==",1,"yarp::os::Value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Value::operator ==",2,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isEqual",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isEqual",2,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->operator ==((yarp::os::Value const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_notEqual__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::operator !=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::operator !=",1,"yarp::os::Value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Value::operator !=",2,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_notEqual",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_notEqual",2,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->operator !=((yarp::os::Value const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isEqual__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::operator ==",1,"yarp::os::Value const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Value::operator ==",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isEqual",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((yarp::os::Value const *)arg1)->operator ==((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isEqual(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Value_isEqual__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value_isEqual__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Value_isEqual'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Value::operator ==(yarp::os::Value const &) const\n"
    "    yarp::os::Value::operator ==(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Value_notEqual__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::operator !=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::operator !=",1,"yarp::os::Value const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Value::operator !=",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_notEqual",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((yarp::os::Value const *)arg1)->operator !=((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_notEqual(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Value_notEqual__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value_notEqual__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Value_notEqual'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Value::operator !=(yarp::os::Value const &) const\n"
    "    yarp::os::Value::operator !=(char const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Value_fromString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::os::Value::fromString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::fromString",1,"yarp::os::Value *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Value::fromString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_fromString",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->fromString((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_toString_c(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Value::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::toString",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_toString_c",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = ((yarp::os::Value const *)arg1)->toString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_create(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::create",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_create",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (yarp::os::Value *)((yarp::os::Value const *)arg1)->create();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_clone(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::clone",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_clone",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (yarp::os::Value *)((yarp::os::Value const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_getCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Value::getCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::getCode",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_getCode",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (int)((yarp::os::Value const *)arg1)->getCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isNull(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isNull",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isNull",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isNull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_isLeaf(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Value::isLeaf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::isLeaf",1,"yarp::os::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_isLeaf",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)((yarp::os::Value const *)arg1)->isLeaf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_makeInt(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::makeInt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Value::makeInt",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (yarp::os::Value *)yarp::os::Value::makeInt(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_makeDouble(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::makeDouble",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Value::makeDouble",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (yarp::os::Value *)yarp::os::Value::makeDouble(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_makeString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::makeString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Value::makeString",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (yarp::os::Value *)yarp::os::Value::makeString((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_makeVocab__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::makeVocab",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Value::makeVocab",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (yarp::os::Value *)yarp::os::Value::makeVocab(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_makeVocab__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::makeVocab",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Value::makeVocab",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (yarp::os::Value *)yarp::os::Value::makeVocab((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_makeVocab(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_Value_makeVocab__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Value_makeVocab__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Value_makeVocab'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Value::makeVocab(int)\n"
    "    yarp::os::Value::makeVocab(yarp::os::ConstString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Value_makeBlob(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::makeBlob",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::makeBlob",1,"void *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Value::makeBlob",2,"int");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"Value_makeBlob");
  arg2 = (int)lua_tonumber(L, 2);
  result = (yarp::os::Value *)yarp::os::Value::makeBlob(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_makeList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::makeList",0,0)
  result = (yarp::os::Value *)yarp::os::Value::makeList();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_makeList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::makeList",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::Value::makeList",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (yarp::os::Value *)yarp::os::Value::makeList((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_makeList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_Value_makeList__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Value_makeList__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Value_makeList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Value::makeList()\n"
    "    yarp::os::Value::makeList(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Value_makeValue(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::makeValue",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Value::makeValue",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (yarp::os::Value *)yarp::os::Value::makeValue((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_getNullValue(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Value::getNullValue",0,0)
  result = (yarp::os::Value *) &yarp::os::Value::getNullValue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_toString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Value *arg1 = (yarp::os::Value *) 0 ;
  std::string result;
  
  SWIG_check_num_args("yarp::os::Value::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Value::toString",1,"yarp::os::Value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Value_toString",1,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = yarp_os_Value_toString(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Value(void *obj) {
yarp::os::Value *arg1 = (yarp::os::Value *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Value_methods[] = {
    {"isBool", _wrap_Value_isBool}, 
    {"isInt", _wrap_Value_isInt}, 
    {"isInt64", _wrap_Value_isInt64}, 
    {"isString", _wrap_Value_isString}, 
    {"isDouble", _wrap_Value_isDouble}, 
    {"isList", _wrap_Value_isList}, 
    {"isDict", _wrap_Value_isDict}, 
    {"isVocab", _wrap_Value_isVocab}, 
    {"isBlob", _wrap_Value_isBlob}, 
    {"asBool", _wrap_Value_asBool}, 
    {"asInt", _wrap_Value_asInt}, 
    {"asInt64", _wrap_Value_asInt64}, 
    {"asVocab", _wrap_Value_asVocab}, 
    {"asDouble", _wrap_Value_asDouble}, 
    {"asString", _wrap_Value_asString}, 
    {"asList", _wrap_Value_asList}, 
    {"asDict", _wrap_Value_asDict}, 
    {"asSearchable", _wrap_Value_asSearchable}, 
    {"asBlob", _wrap_Value_asBlob}, 
    {"asBlobLength", _wrap_Value_asBlobLength}, 
    {"read", _wrap_Value_read}, 
    {"write", _wrap_Value_write}, 
    {"check", _wrap_Value_check}, 
    {"find", _wrap_Value_find}, 
    {"findGroup", _wrap_Value_findGroup}, 
    {"isEqual", _wrap_Value_isEqual}, 
    {"notEqual", _wrap_Value_notEqual}, 
    {"fromString", _wrap_Value_fromString}, 
    {"toString_c", _wrap_Value_toString_c}, 
    {"create", _wrap_Value_create}, 
    {"clone", _wrap_Value_clone}, 
    {"getCode", _wrap_Value_getCode}, 
    {"isNull", _wrap_Value_isNull}, 
    {"isLeaf", _wrap_Value_isLeaf}, 
    {"toString", _wrap_Value_toString}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Value_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Value_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Value_cls_methods[] = {
    {"makeInt", _wrap_Value_makeInt}, 
    {"makeDouble", _wrap_Value_makeDouble}, 
    {"makeString", _wrap_Value_makeString}, 
    {"makeVocab", _wrap_Value_makeVocab}, 
    {"makeBlob", _wrap_Value_makeBlob}, 
    {"makeList", _wrap_Value_makeList}, 
    {"makeValue", _wrap_Value_makeValue}, 
    {"getNullValue", _wrap_Value_getNullValue}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Value_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Value_bases[] = {0,0,0};
static const char *swig_yarp_os_Value_base_names[] = {"yarp::os::Portable *","yarp::os::Searchable *",0};
static swig_lua_class _wrap_class_yarp_os_Value = { "Value", &SWIGTYPE_p_yarp__os__Value,_wrap_new_Value, swig_delete_Value, swig_yarp_os_Value_methods, swig_yarp_os_Value_attributes, { "Value", swig_yarp_os_Value_cls_methods, swig_yarp_os_Value_cls_attributes, swig_yarp_os_Value_cls_constants }, swig_yarp_os_Value_bases, swig_yarp_os_Value_base_names };

static int _wrap_Vocab_encode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::NetInt32 result;
  
  SWIG_check_num_args("yarp::os::Vocab::encode",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Vocab::encode",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (yarp::os::NetInt32)yarp::os::Vocab::encode((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vocab_decode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::NetInt32 arg1 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Vocab::decode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Vocab::decode",1,"yarp::os::NetInt32");
  arg1 = (yarp::os::NetInt32)lua_tonumber(L, 1);
  result = yarp::os::Vocab::decode(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vocab(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Vocab *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Vocab::Vocab",0,0)
  result = (yarp::os::Vocab *)new yarp::os::Vocab();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Vocab,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vocab(void *obj) {
yarp::os::Vocab *arg1 = (yarp::os::Vocab *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Vocab_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Vocab_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Vocab_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Vocab_cls_methods[] = {
    {"encode", _wrap_Vocab_encode}, 
    {"decode", _wrap_Vocab_decode}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Vocab_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Vocab_bases[] = {0};
static const char *swig_yarp_os_Vocab_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_Vocab = { "Vocab", &SWIGTYPE_p_yarp__os__Vocab,_wrap_new_Vocab, swig_delete_Vocab, swig_yarp_os_Vocab_methods, swig_yarp_os_Vocab_attributes, { "Vocab", swig_yarp_os_Vocab_cls_methods, swig_yarp_os_Vocab_cls_attributes, swig_yarp_os_Vocab_cls_constants }, swig_yarp_os_Vocab_bases, swig_yarp_os_Vocab_base_names };

static int _wrap_Contactable_open__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::open",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_open",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = (bool)(arg1)->open();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_open__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::open",1,"yarp::os::Contactable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Contactable::open",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_open",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_open__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::open",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::open",2,"yarp::os::Contact const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Contactable::open",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_open",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contactable_open",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_open__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::open",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::open",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_open",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contactable_open",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_open(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Contactable_open__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Contactable_open__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Contactable_open__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Contactable_open__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Contactable_open'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Contactable::open()\n"
    "    yarp::os::Contactable::open(yarp::os::ConstString const &)\n"
    "    yarp::os::Contactable::open(yarp::os::Contact const &,bool)\n"
    "    yarp::os::Contactable::open(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Contactable_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::addOutput",1,"yarp::os::Contactable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Contactable::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_addOutput",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::addOutput",1,"yarp::os::Contactable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Contactable::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::Contactable::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_addOutput",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::addOutput",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_addOutput",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Contactable_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Contactable_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Contactable_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Contactable_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Contactable_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Contactable::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::Contactable::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::Contactable::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Contactable_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::close",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_close",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::interrupt",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_interrupt",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::resume",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_resume",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Contactable::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::where",1,"yarp::os::Contactable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_where",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = ((yarp::os::Contactable const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Contactable::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::getName",1,"yarp::os::Contactable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_getName",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = ((yarp::os::Contactable const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setEnvelope__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setEnvelope",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setEnvelope",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Contactable_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::getEnvelope",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_getEnvelope",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Contactable_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Contactable::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::getInputCount",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_getInputCount",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Contactable::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::getOutputCount",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_getOutputCount",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::getReport",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_getReport",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("Contactable_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setReporter",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setReporter",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("Contactable_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::isWriting",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_isWriting",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setReader",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setReader",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Contactable_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setAdminReader",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setAdminReader",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Contactable_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Contactable::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setInputMode",1,"yarp::os::Contactable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Contactable::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setInputMode",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Contactable::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setOutputMode",1,"yarp::os::Contactable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Contactable::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setOutputMode",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Contactable::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setRpcMode",1,"yarp::os::Contactable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Contactable::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setRpcMode",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::Contactable::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::getType",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_getType",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::promiseType",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_promiseType",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Contactable_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::acquireProperties",1,"yarp::os::Contactable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Contactable::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_acquireProperties",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::releaseProperties",1,"yarp::os::Contactable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::Contactable::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_releaseProperties",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Contactable_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Contactable::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::includeNodeInName",1,"yarp::os::Contactable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Contactable::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_includeNodeInName",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setReadOnly(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::setReadOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setReadOnly",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setReadOnly",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  (arg1)->setReadOnly();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setWriteOnly(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::setWriteOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setWriteOnly",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setWriteOnly",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  (arg1)->setWriteOnly();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setRpcServer(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::setRpcServer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setRpcServer",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setRpcServer",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  (arg1)->setRpcServer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setRpcClient(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::setRpcClient",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setRpcClient",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setRpcClient",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  (arg1)->setRpcClient();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setCallbackLock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setCallbackLock",1,"yarp::os::Contactable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::Contactable::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setCallbackLock",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("Contactable_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setCallbackLock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::setCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setCallbackLock",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setCallbackLock",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = (bool)(arg1)->setCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setCallbackLock(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Contactable_setCallbackLock__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Mutex, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Contactable_setCallbackLock__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Contactable_setCallbackLock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Contactable::setCallbackLock(yarp::os::Mutex *)\n"
    "    yarp::os::Contactable::setCallbackLock()\n");
  lua_error(L);return 0;
}


static int _wrap_Contactable_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::removeCallbackLock",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_removeCallbackLock",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::lockCallback",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_lockCallback",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::tryLockCallback",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_tryLockCallback",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::Contactable::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::unlockCallback",1,"yarp::os::Contactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_unlockCallback",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setEnvelope__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contactable *arg1 = (yarp::os::Contactable *) 0 ;
  yarp::os::Portable *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Contactable::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Contactable::setEnvelope",1,"yarp::os::Contactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Contactable::setEnvelope",2,"yarp::os::Portable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contactable,0))){
    SWIG_fail_ptr("Contactable_setEnvelope",1,SWIGTYPE_p_yarp__os__Contactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Portable,0))){
    SWIG_fail_ptr("Contactable_setEnvelope",2,SWIGTYPE_p_yarp__os__Portable);
  }
  
  result = (bool)yarp_os_Contactable_setEnvelope__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Contactable_setEnvelope(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Portable, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Contactable_setEnvelope__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Contactable_setEnvelope__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Contactable_setEnvelope'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Contactable::setEnvelope(yarp::os::PortWriter &)\n"
    "    yarp::os::Contactable::setEnvelope(yarp::os::Portable &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Contactable(void *obj) {
yarp::os::Contactable *arg1 = (yarp::os::Contactable *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Contactable_methods[] = {
    {"open", _wrap_Contactable_open}, 
    {"addOutput", _wrap_Contactable_addOutput}, 
    {"close", _wrap_Contactable_close}, 
    {"interrupt", _wrap_Contactable_interrupt}, 
    {"resume", _wrap_Contactable_resume}, 
    {"where", _wrap_Contactable_where}, 
    {"getName", _wrap_Contactable_getName}, 
    {"getEnvelope", _wrap_Contactable_getEnvelope}, 
    {"getInputCount", _wrap_Contactable_getInputCount}, 
    {"getOutputCount", _wrap_Contactable_getOutputCount}, 
    {"getReport", _wrap_Contactable_getReport}, 
    {"setReporter", _wrap_Contactable_setReporter}, 
    {"isWriting", _wrap_Contactable_isWriting}, 
    {"setReader", _wrap_Contactable_setReader}, 
    {"setAdminReader", _wrap_Contactable_setAdminReader}, 
    {"setInputMode", _wrap_Contactable_setInputMode}, 
    {"setOutputMode", _wrap_Contactable_setOutputMode}, 
    {"setRpcMode", _wrap_Contactable_setRpcMode}, 
    {"getType", _wrap_Contactable_getType}, 
    {"promiseType", _wrap_Contactable_promiseType}, 
    {"acquireProperties", _wrap_Contactable_acquireProperties}, 
    {"releaseProperties", _wrap_Contactable_releaseProperties}, 
    {"includeNodeInName", _wrap_Contactable_includeNodeInName}, 
    {"setReadOnly", _wrap_Contactable_setReadOnly}, 
    {"setWriteOnly", _wrap_Contactable_setWriteOnly}, 
    {"setRpcServer", _wrap_Contactable_setRpcServer}, 
    {"setRpcClient", _wrap_Contactable_setRpcClient}, 
    {"setCallbackLock", _wrap_Contactable_setCallbackLock}, 
    {"removeCallbackLock", _wrap_Contactable_removeCallbackLock}, 
    {"lockCallback", _wrap_Contactable_lockCallback}, 
    {"tryLockCallback", _wrap_Contactable_tryLockCallback}, 
    {"unlockCallback", _wrap_Contactable_unlockCallback}, 
    {"setEnvelope", _wrap_Contactable_setEnvelope}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Contactable_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Contactable_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Contactable_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Contactable_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Contactable_bases[] = {0};
static const char *swig_yarp_os_Contactable_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_Contactable = { "Contactable", &SWIGTYPE_p_yarp__os__Contactable,0, swig_delete_Contactable, swig_yarp_os_Contactable_methods, swig_yarp_os_Contactable_attributes, { "Contactable", swig_yarp_os_Contactable_cls_methods, swig_yarp_os_Contactable_cls_attributes, swig_yarp_os_Contactable_cls_constants }, swig_yarp_os_Contactable_bases, swig_yarp_os_Contactable_base_names };

static int _wrap_UnbufferedContactable_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::UnbufferedContactable::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",1,"yarp::os::UnbufferedContactable const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",2,"yarp::os::PortWriter &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",3,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__UnbufferedContactable,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",1,SWIGTYPE_p_yarp__os__UnbufferedContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",3,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnbufferedContactable_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::UnbufferedContactable::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",1,"yarp::os::UnbufferedContactable const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__UnbufferedContactable,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",1,SWIGTYPE_p_yarp__os__UnbufferedContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnbufferedContactable_write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::UnbufferedContactable::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",1,"yarp::os::UnbufferedContactable const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",3,"yarp::os::PortReader &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",4,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__UnbufferedContactable,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",1,SWIGTYPE_p_yarp__os__UnbufferedContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",4,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnbufferedContactable_write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::UnbufferedContactable::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",1,"yarp::os::UnbufferedContactable const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::UnbufferedContactable::write",3,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__UnbufferedContactable,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",1,SWIGTYPE_p_yarp__os__UnbufferedContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("UnbufferedContactable_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)((yarp::os::UnbufferedContactable const *)arg1)->write(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnbufferedContactable_write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__UnbufferedContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UnbufferedContactable_write__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__UnbufferedContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_UnbufferedContactable_write__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__UnbufferedContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_UnbufferedContactable_write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__UnbufferedContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_UnbufferedContactable_write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UnbufferedContactable_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::UnbufferedContactable::write(yarp::os::PortWriter &,yarp::os::PortWriter *) const\n"
    "    yarp::os::UnbufferedContactable::write(yarp::os::PortWriter &) const\n"
    "    yarp::os::UnbufferedContactable::write(yarp::os::PortWriter &,yarp::os::PortReader &,yarp::os::PortWriter *) const\n"
    "    yarp::os::UnbufferedContactable::write(yarp::os::PortWriter &,yarp::os::PortReader &) const\n");
  lua_error(L);return 0;
}


static int _wrap_UnbufferedContactable_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::UnbufferedContactable::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::UnbufferedContactable::read",1,"yarp::os::UnbufferedContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::UnbufferedContactable::read",2,"yarp::os::PortReader &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::UnbufferedContactable::read",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__UnbufferedContactable,0))){
    SWIG_fail_ptr("UnbufferedContactable_read",1,SWIGTYPE_p_yarp__os__UnbufferedContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("UnbufferedContactable_read",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->read(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnbufferedContactable_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::UnbufferedContactable::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::UnbufferedContactable::read",1,"yarp::os::UnbufferedContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::UnbufferedContactable::read",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__UnbufferedContactable,0))){
    SWIG_fail_ptr("UnbufferedContactable_read",1,SWIGTYPE_p_yarp__os__UnbufferedContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("UnbufferedContactable_read",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnbufferedContactable_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__UnbufferedContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UnbufferedContactable_read__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__UnbufferedContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_UnbufferedContactable_read__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UnbufferedContactable_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::UnbufferedContactable::read(yarp::os::PortReader &,bool)\n"
    "    yarp::os::UnbufferedContactable::read(yarp::os::PortReader &)\n");
  lua_error(L);return 0;
}


static int _wrap_UnbufferedContactable_reply(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::UnbufferedContactable::reply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::UnbufferedContactable::reply",1,"yarp::os::UnbufferedContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::UnbufferedContactable::reply",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__UnbufferedContactable,0))){
    SWIG_fail_ptr("UnbufferedContactable_reply",1,SWIGTYPE_p_yarp__os__UnbufferedContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("UnbufferedContactable_reply",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->reply(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnbufferedContactable_replyAndDrop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::UnbufferedContactable::replyAndDrop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::UnbufferedContactable::replyAndDrop",1,"yarp::os::UnbufferedContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::UnbufferedContactable::replyAndDrop",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__UnbufferedContactable,0))){
    SWIG_fail_ptr("UnbufferedContactable_replyAndDrop",1,SWIGTYPE_p_yarp__os__UnbufferedContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("UnbufferedContactable_replyAndDrop",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->replyAndDrop(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UnbufferedContactable(void *obj) {
yarp::os::UnbufferedContactable *arg1 = (yarp::os::UnbufferedContactable *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_UnbufferedContactable_methods[] = {
    {"write", _wrap_UnbufferedContactable_write}, 
    {"read", _wrap_UnbufferedContactable_read}, 
    {"reply", _wrap_UnbufferedContactable_reply}, 
    {"replyAndDrop", _wrap_UnbufferedContactable_replyAndDrop}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_UnbufferedContactable_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_UnbufferedContactable_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_UnbufferedContactable_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_UnbufferedContactable_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_UnbufferedContactable_bases[] = {0,0};
static const char *swig_yarp_os_UnbufferedContactable_base_names[] = {"yarp::os::Contactable *",0};
static swig_lua_class _wrap_class_yarp_os_UnbufferedContactable = { "UnbufferedContactable", &SWIGTYPE_p_yarp__os__UnbufferedContactable,0, swig_delete_UnbufferedContactable, swig_yarp_os_UnbufferedContactable_methods, swig_yarp_os_UnbufferedContactable_attributes, { "UnbufferedContactable", swig_yarp_os_UnbufferedContactable_cls_methods, swig_yarp_os_UnbufferedContactable_cls_attributes, swig_yarp_os_UnbufferedContactable_cls_constants }, swig_yarp_os_UnbufferedContactable_bases, swig_yarp_os_UnbufferedContactable_base_names };

static int _wrap_new_Port(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Port::Port",0,0)
  result = (yarp::os::Port *)new yarp::os::Port();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Port,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_openFake(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::openFake",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::openFake",1,"yarp::os::Port *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Port::openFake",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_openFake",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->openFake((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::addOutput",1,"yarp::os::Port *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Port::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_addOutput",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::addOutput",1,"yarp::os::Port *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Port::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::Port::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_addOutput",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::addOutput",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_addOutput",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("Port_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Port_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Port_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Port_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Port_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Port::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::Port::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::Port::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Port_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  SWIG_check_num_args("yarp::os::Port::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::close",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_close",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  SWIG_check_num_args("yarp::os::Port::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::interrupt",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_interrupt",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  SWIG_check_num_args("yarp::os::Port::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::resume",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_resume",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::Port::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::where",1,"yarp::os::Port const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_where",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = ((yarp::os::Port const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::write",1,"yarp::os::Port const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::write",2,"yarp::os::PortWriter &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::os::Port::write",3,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_write",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Port_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Port_write",3,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::write",1,"yarp::os::Port const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::write",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_write",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Port_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::write",1,"yarp::os::Port const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Port::write",3,"yarp::os::PortReader &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::os::Port::write",4,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_write",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Port_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Port_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Port_write",4,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::write",1,"yarp::os::Port const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Port::write",3,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_write",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Port_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Port_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)((yarp::os::Port const *)arg1)->write(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::read",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::read",2,"yarp::os::PortReader &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Port::read",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_read",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Port_read",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->read(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::read",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::read",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_read",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Port_read",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Port_read__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Port_read__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Port_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Port::read(yarp::os::PortReader &,bool)\n"
    "    yarp::os::Port::read(yarp::os::PortReader &)\n");
  lua_error(L);return 0;
}


static int _wrap_Port_reply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::reply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::reply",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::reply",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_reply",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Port_reply",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->reply(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_replyAndDrop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::replyAndDrop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::replyAndDrop",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::replyAndDrop",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_replyAndDrop",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Port_replyAndDrop",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->replyAndDrop(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Port::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setReader",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setReader",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Port_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Port::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setAdminReader",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setAdminReader",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Port_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setReaderCreator(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  PortReaderCreator *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Port::setReaderCreator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setReaderCreator",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::setReaderCreator",2,"PortReaderCreator &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setReaderCreator",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PortReaderCreator,0))){
    SWIG_fail_ptr("Port_setReaderCreator",2,SWIGTYPE_p_PortReaderCreator);
  }
  
  (arg1)->setReaderCreator(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_enableBackgroundWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Port::enableBackgroundWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::enableBackgroundWrite",1,"yarp::os::Port *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Port::enableBackgroundWrite",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_enableBackgroundWrite",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableBackgroundWrite(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::isWriting",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_isWriting",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setEnvelope",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setEnvelope",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Port_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::getEnvelope",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_getEnvelope",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Port_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Port::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::getInputCount",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_getInputCount",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Port::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::getOutputCount",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_getOutputCount",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Port::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::getReport",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_getReport",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("Port_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Port::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setReporter",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setReporter",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("Port_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setAdminMode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Port::setAdminMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setAdminMode",1,"yarp::os::Port *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Port::setAdminMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setAdminMode",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAdminMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setAdminMode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  SWIG_check_num_args("yarp::os::Port::setAdminMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setAdminMode",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setAdminMode",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  (arg1)->setAdminMode();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setAdminMode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Port_setAdminMode__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Port_setAdminMode__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Port_setAdminMode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Port::setAdminMode(bool)\n"
    "    yarp::os::Port::setAdminMode()\n");
  lua_error(L);return 0;
}


static int _wrap_Port_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Port::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setInputMode",1,"yarp::os::Port *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Port::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setInputMode",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Port::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setOutputMode",1,"yarp::os::Port *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Port::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setOutputMode",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Port::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setRpcMode",1,"yarp::os::Port *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Port::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setRpcMode",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setTimeout(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::setTimeout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setTimeout",1,"yarp::os::Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Port::setTimeout",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setTimeout",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)(arg1)->setTimeout(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setVerbosity(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::os::Port::setVerbosity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setVerbosity",1,"yarp::os::Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Port::setVerbosity",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setVerbosity",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setVerbosity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_getVerbosity(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Port::getVerbosity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::getVerbosity",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_getVerbosity",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (int)(arg1)->getVerbosity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::Port::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::getType",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_getType",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Port::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::promiseType",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_promiseType",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Port_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Port::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::acquireProperties",1,"yarp::os::Port *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Port::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_acquireProperties",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::Port::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::releaseProperties",1,"yarp::os::Port *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::Port::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_releaseProperties",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Port_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Port::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::includeNodeInName",1,"yarp::os::Port *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Port::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_includeNodeInName",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_sharedOpen(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::sharedOpen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::sharedOpen",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::sharedOpen",2,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_sharedOpen",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_sharedOpen",2,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (bool)(arg1)->sharedOpen(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_isOpen(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::isOpen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::isOpen",1,"yarp::os::Port const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_isOpen",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (bool)((yarp::os::Port const *)arg1)->isOpen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setCallbackLock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setCallbackLock",1,"yarp::os::Port *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::Port::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setCallbackLock",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("Port_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setCallbackLock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::setCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::setCallbackLock",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_setCallbackLock",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (bool)(arg1)->setCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_setCallbackLock(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Port_setCallbackLock__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Mutex, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Port_setCallbackLock__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Port_setCallbackLock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Port::setCallbackLock(yarp::os::Mutex *)\n"
    "    yarp::os::Port::setCallbackLock()\n");
  lua_error(L);return 0;
}


static int _wrap_Port_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::removeCallbackLock",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_removeCallbackLock",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::lockCallback",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_lockCallback",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::tryLockCallback",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_tryLockCallback",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  
  SWIG_check_num_args("yarp::os::Port::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::unlockCallback",1,"yarp::os::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_unlockCallback",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::write",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::write",2,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_write",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Port_write",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)yarp_os_Port_write__SWIG_4(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::write",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::write",2,"yarp::os::Property &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_write",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Port_write",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  result = (bool)yarp_os_Port_write__SWIG_5(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::write",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::write",2,"yarp::sig::ImageOf< yarp::sig::PixelRgb > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_write",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("Port_write",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  result = (bool)yarp_os_Port_write__SWIG_6(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::write",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::write",2,"yarp::sig::ImageOf< yarp::sig::PixelFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_write",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("Port_write",2,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  result = (bool)yarp_os_Port_write__SWIG_7(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::write",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::write",2,"yarp::os::Bottle &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Port::write",3,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_write",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Port_write",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Port_write",3,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)yarp_os_Port_write__SWIG_8(arg1,*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::write",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::write",2,"yarp::os::Bottle &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Port::write",3,"yarp::sig::ImageOf< yarp::sig::PixelFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_write",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Port_write",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("Port_write",3,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  result = (bool)yarp_os_Port_write__SWIG_9(arg1,*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Port_write__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Port_write__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Port_write__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Port_write__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Port_write__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Port_write__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Port_write__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Port_write__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Port_write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Port_write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Port_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Port::write(yarp::os::PortWriter &,yarp::os::PortWriter *) const\n"
    "    yarp::os::Port::write(yarp::os::PortWriter &) const\n"
    "    yarp::os::Port::write(yarp::os::PortWriter &,yarp::os::PortReader &,yarp::os::PortWriter *) const\n"
    "    yarp::os::Port::write(yarp::os::PortWriter &,yarp::os::PortReader &) const\n"
    "    yarp::os::Port::write(yarp::os::Bottle &)\n"
    "    yarp::os::Port::write(yarp::os::Property &)\n"
    "    yarp::os::Port::write(yarp::sig::ImageOf< yarp::sig::PixelRgb > &)\n"
    "    yarp::os::Port::write(yarp::sig::ImageOf< yarp::sig::PixelFloat > &)\n"
    "    yarp::os::Port::write(yarp::os::Bottle &,yarp::os::Bottle &)\n"
    "    yarp::os::Port::write(yarp::os::Bottle &,yarp::sig::ImageOf< yarp::sig::PixelFloat > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Port_reply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = (yarp::os::Port *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Port::reply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Port::reply",1,"yarp::os::Port *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Port::reply",2,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("Port_reply",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Port_reply",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)yarp_os_Port_reply__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_reply(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Port_reply__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Port_reply__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Port_reply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Port::reply(yarp::os::PortWriter &)\n"
    "    yarp::os::Port::reply(yarp::os::Bottle &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Port(void *obj) {
yarp::os::Port *arg1 = (yarp::os::Port *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Port_methods[] = {
    {"openFake", _wrap_Port_openFake}, 
    {"addOutput", _wrap_Port_addOutput}, 
    {"close", _wrap_Port_close}, 
    {"interrupt", _wrap_Port_interrupt}, 
    {"resume", _wrap_Port_resume}, 
    {"where", _wrap_Port_where}, 
    {"read", _wrap_Port_read}, 
    {"replyAndDrop", _wrap_Port_replyAndDrop}, 
    {"setReader", _wrap_Port_setReader}, 
    {"setAdminReader", _wrap_Port_setAdminReader}, 
    {"setReaderCreator", _wrap_Port_setReaderCreator}, 
    {"enableBackgroundWrite", _wrap_Port_enableBackgroundWrite}, 
    {"isWriting", _wrap_Port_isWriting}, 
    {"setEnvelope", _wrap_Port_setEnvelope}, 
    {"getEnvelope", _wrap_Port_getEnvelope}, 
    {"getInputCount", _wrap_Port_getInputCount}, 
    {"getOutputCount", _wrap_Port_getOutputCount}, 
    {"getReport", _wrap_Port_getReport}, 
    {"setReporter", _wrap_Port_setReporter}, 
    {"setAdminMode", _wrap_Port_setAdminMode}, 
    {"setInputMode", _wrap_Port_setInputMode}, 
    {"setOutputMode", _wrap_Port_setOutputMode}, 
    {"setRpcMode", _wrap_Port_setRpcMode}, 
    {"setTimeout", _wrap_Port_setTimeout}, 
    {"setVerbosity", _wrap_Port_setVerbosity}, 
    {"getVerbosity", _wrap_Port_getVerbosity}, 
    {"getType", _wrap_Port_getType}, 
    {"promiseType", _wrap_Port_promiseType}, 
    {"acquireProperties", _wrap_Port_acquireProperties}, 
    {"releaseProperties", _wrap_Port_releaseProperties}, 
    {"includeNodeInName", _wrap_Port_includeNodeInName}, 
    {"sharedOpen", _wrap_Port_sharedOpen}, 
    {"isOpen", _wrap_Port_isOpen}, 
    {"setCallbackLock", _wrap_Port_setCallbackLock}, 
    {"removeCallbackLock", _wrap_Port_removeCallbackLock}, 
    {"lockCallback", _wrap_Port_lockCallback}, 
    {"tryLockCallback", _wrap_Port_tryLockCallback}, 
    {"unlockCallback", _wrap_Port_unlockCallback}, 
    {"write", _wrap_Port_write}, 
    {"reply", _wrap_Port_reply}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Port_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Port_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Port_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Port_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Port_bases[] = {0,0};
static const char *swig_yarp_os_Port_base_names[] = {"yarp::os::UnbufferedContactable *",0};
static swig_lua_class _wrap_class_yarp_os_Port = { "Port", &SWIGTYPE_p_yarp__os__Port,_wrap_new_Port, swig_delete_Port, swig_yarp_os_Port_methods, swig_yarp_os_Port_attributes, { "Port", swig_yarp_os_Port_cls_methods, swig_yarp_os_Port_cls_attributes, swig_yarp_os_Port_cls_constants }, swig_yarp_os_Port_bases, swig_yarp_os_Port_base_names };

static int _wrap_AbstractContactable_open__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_open",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (bool)(arg1)->open();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_open__SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"yarp::os::AbstractContactable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("open",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_open",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_open__SWIG_0_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open",2,"yarp::os::Contact const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("open",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_open",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("AbstractContactable_open",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_open__SWIG_0_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_open",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("AbstractContactable_open",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_asPort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Port *result = 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::asPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::asPort",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_asPort",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (yarp::os::Port *) &(arg1)->asPort();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Port,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_asPort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Port *result = 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::asPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::asPort",1,"yarp::os::AbstractContactable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_asPort",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (yarp::os::Port *) &((yarp::os::AbstractContactable const *)arg1)->asPort();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Port,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_asPort(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AbstractContactable_asPort__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AbstractContactable_asPort__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AbstractContactable_asPort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::AbstractContactable::asPort()\n"
    "    yarp::os::AbstractContactable::asPort() const\n");
  lua_error(L);return 0;
}


static int _wrap_AbstractContactable_open__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::open",1,"yarp::os::AbstractContactable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::open",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_open",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_open__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::open",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::open",2,"yarp::os::Contact const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::AbstractContactable::open",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_open",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("AbstractContactable_open",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_open__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::open",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::open",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_open",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("AbstractContactable_open",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_open(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AbstractContactable_open__SWIG_0_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractContactable_open__SWIG_0_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractContactable_open__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractContactable_open__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractContactable_open__SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractContactable_open__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractContactable_open__SWIG_0_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AbstractContactable_open'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open()\n"
    "    open(yarp::os::ConstString const &)\n"
    "    open(yarp::os::Contact const &,bool)\n"
    "    open(yarp::os::Contact const &)\n"
    "    yarp::os::AbstractContactable::open(yarp::os::ConstString const &)\n"
    "    yarp::os::AbstractContactable::open(yarp::os::Contact const &,bool)\n"
    "    yarp::os::AbstractContactable::open(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AbstractContactable_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::addOutput",1,"yarp::os::AbstractContactable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_addOutput",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::addOutput",1,"yarp::os::AbstractContactable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::AbstractContactable::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_addOutput",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::addOutput",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_addOutput",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("AbstractContactable_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractContactable_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AbstractContactable_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractContactable_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AbstractContactable_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::AbstractContactable::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::AbstractContactable::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::AbstractContactable::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AbstractContactable_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::close",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_close",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::interrupt",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_interrupt",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::resume",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_resume",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::where",1,"yarp::os::AbstractContactable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_where",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = ((yarp::os::AbstractContactable const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::getName",1,"yarp::os::AbstractContactable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_getName",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = ((yarp::os::AbstractContactable const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::setEnvelope",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_setEnvelope",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("AbstractContactable_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::getEnvelope",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_getEnvelope",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("AbstractContactable_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::getInputCount",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_getInputCount",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::getOutputCount",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_getOutputCount",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::getReport",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_getReport",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("AbstractContactable_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::setReporter",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_setReporter",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("AbstractContactable_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::isWriting",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_isWriting",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::setReader",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_setReader",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("AbstractContactable_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::setAdminReader",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_setAdminReader",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("AbstractContactable_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::setInputMode",1,"yarp::os::AbstractContactable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_setInputMode",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::setOutputMode",1,"yarp::os::AbstractContactable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_setOutputMode",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::setRpcMode",1,"yarp::os::AbstractContactable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_setRpcMode",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::getType",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_getType",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::promiseType",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_promiseType",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("AbstractContactable_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::acquireProperties",1,"yarp::os::AbstractContactable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_acquireProperties",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::releaseProperties",1,"yarp::os::AbstractContactable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_releaseProperties",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("AbstractContactable_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::write",1,"yarp::os::AbstractContactable const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::write",2,"yarp::os::PortWriter &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::os::AbstractContactable::write",3,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_write",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("AbstractContactable_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("AbstractContactable_write",3,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::write",1,"yarp::os::AbstractContactable const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::write",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_write",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("AbstractContactable_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::write",1,"yarp::os::AbstractContactable const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::AbstractContactable::write",3,"yarp::os::PortReader &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::os::AbstractContactable::write",4,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_write",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("AbstractContactable_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("AbstractContactable_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("AbstractContactable_write",4,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::write",1,"yarp::os::AbstractContactable const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::AbstractContactable::write",3,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_write",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("AbstractContactable_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("AbstractContactable_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)((yarp::os::AbstractContactable const *)arg1)->write(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractContactable_write__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AbstractContactable_write__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AbstractContactable_write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AbstractContactable_write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AbstractContactable_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::AbstractContactable::write(yarp::os::PortWriter &,yarp::os::PortWriter *) const\n"
    "    yarp::os::AbstractContactable::write(yarp::os::PortWriter &) const\n"
    "    yarp::os::AbstractContactable::write(yarp::os::PortWriter &,yarp::os::PortReader &,yarp::os::PortWriter *) const\n"
    "    yarp::os::AbstractContactable::write(yarp::os::PortWriter &,yarp::os::PortReader &) const\n");
  lua_error(L);return 0;
}


static int _wrap_AbstractContactable_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::read",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::read",2,"yarp::os::PortReader &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::AbstractContactable::read",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_read",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("AbstractContactable_read",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->read(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::read",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::read",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_read",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("AbstractContactable_read",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractContactable_read__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AbstractContactable_read__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AbstractContactable_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::AbstractContactable::read(yarp::os::PortReader &,bool)\n"
    "    yarp::os::AbstractContactable::read(yarp::os::PortReader &)\n");
  lua_error(L);return 0;
}


static int _wrap_AbstractContactable_reply(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::reply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::reply",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::reply",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_reply",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("AbstractContactable_reply",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->reply(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_replyAndDrop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::replyAndDrop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::replyAndDrop",1,"yarp::os::AbstractContactable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::replyAndDrop",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_replyAndDrop",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("AbstractContactable_replyAndDrop",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->replyAndDrop(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::includeNodeInName",1,"yarp::os::AbstractContactable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_includeNodeInName",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_setCallbackLock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::setCallbackLock",1,"yarp::os::AbstractContactable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::AbstractContactable::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_setCallbackLock",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("AbstractContactable_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_setCallbackLock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::setCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::setCallbackLock",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_setCallbackLock",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (bool)(arg1)->setCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_setCallbackLock(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AbstractContactable_setCallbackLock__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__AbstractContactable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Mutex, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AbstractContactable_setCallbackLock__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AbstractContactable_setCallbackLock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::AbstractContactable::setCallbackLock(yarp::os::Mutex *)\n"
    "    yarp::os::AbstractContactable::setCallbackLock()\n");
  lua_error(L);return 0;
}


static int _wrap_AbstractContactable_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::removeCallbackLock",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_removeCallbackLock",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::lockCallback",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_lockCallback",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::tryLockCallback",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_tryLockCallback",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AbstractContactable_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) 0 ;
  
  SWIG_check_num_args("yarp::os::AbstractContactable::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::AbstractContactable::unlockCallback",1,"yarp::os::AbstractContactable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__AbstractContactable,0))){
    SWIG_fail_ptr("AbstractContactable_unlockCallback",1,SWIGTYPE_p_yarp__os__AbstractContactable);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AbstractContactable(void *obj) {
yarp::os::AbstractContactable *arg1 = (yarp::os::AbstractContactable *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_AbstractContactable_methods[] = {
    {"asPort", _wrap_AbstractContactable_asPort}, 
    {"open", _wrap_AbstractContactable_open}, 
    {"addOutput", _wrap_AbstractContactable_addOutput}, 
    {"close", _wrap_AbstractContactable_close}, 
    {"interrupt", _wrap_AbstractContactable_interrupt}, 
    {"resume", _wrap_AbstractContactable_resume}, 
    {"where", _wrap_AbstractContactable_where}, 
    {"getName", _wrap_AbstractContactable_getName}, 
    {"setEnvelope", _wrap_AbstractContactable_setEnvelope}, 
    {"getEnvelope", _wrap_AbstractContactable_getEnvelope}, 
    {"getInputCount", _wrap_AbstractContactable_getInputCount}, 
    {"getOutputCount", _wrap_AbstractContactable_getOutputCount}, 
    {"getReport", _wrap_AbstractContactable_getReport}, 
    {"setReporter", _wrap_AbstractContactable_setReporter}, 
    {"isWriting", _wrap_AbstractContactable_isWriting}, 
    {"setReader", _wrap_AbstractContactable_setReader}, 
    {"setAdminReader", _wrap_AbstractContactable_setAdminReader}, 
    {"setInputMode", _wrap_AbstractContactable_setInputMode}, 
    {"setOutputMode", _wrap_AbstractContactable_setOutputMode}, 
    {"setRpcMode", _wrap_AbstractContactable_setRpcMode}, 
    {"getType", _wrap_AbstractContactable_getType}, 
    {"promiseType", _wrap_AbstractContactable_promiseType}, 
    {"acquireProperties", _wrap_AbstractContactable_acquireProperties}, 
    {"releaseProperties", _wrap_AbstractContactable_releaseProperties}, 
    {"write", _wrap_AbstractContactable_write}, 
    {"read", _wrap_AbstractContactable_read}, 
    {"reply", _wrap_AbstractContactable_reply}, 
    {"replyAndDrop", _wrap_AbstractContactable_replyAndDrop}, 
    {"includeNodeInName", _wrap_AbstractContactable_includeNodeInName}, 
    {"setCallbackLock", _wrap_AbstractContactable_setCallbackLock}, 
    {"removeCallbackLock", _wrap_AbstractContactable_removeCallbackLock}, 
    {"lockCallback", _wrap_AbstractContactable_lockCallback}, 
    {"tryLockCallback", _wrap_AbstractContactable_tryLockCallback}, 
    {"unlockCallback", _wrap_AbstractContactable_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_AbstractContactable_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_AbstractContactable_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_AbstractContactable_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_AbstractContactable_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_AbstractContactable_bases[] = {0,0};
static const char *swig_yarp_os_AbstractContactable_base_names[] = {"yarp::os::UnbufferedContactable *",0};
static swig_lua_class _wrap_class_yarp_os_AbstractContactable = { "AbstractContactable", &SWIGTYPE_p_yarp__os__AbstractContactable,0, swig_delete_AbstractContactable, swig_yarp_os_AbstractContactable_methods, swig_yarp_os_AbstractContactable_attributes, { "AbstractContactable", swig_yarp_os_AbstractContactable_cls_methods, swig_yarp_os_AbstractContactable_cls_attributes, swig_yarp_os_AbstractContactable_cls_constants }, swig_yarp_os_AbstractContactable_bases, swig_yarp_os_AbstractContactable_base_names };

static int _wrap_NetworkBase_initMinimum(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("yarp::os::NetworkBase::initMinimum",0,0)
  yarp::os::NetworkBase::initMinimum();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_autoInitMinimum(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("yarp::os::NetworkBase::autoInitMinimum",0,0)
  yarp::os::NetworkBase::autoInitMinimum();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_finiMinimum(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("yarp::os::NetworkBase::finiMinimum",0,0)
  yarp::os::NetworkBase::finiMinimum();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_connect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool arg4 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::connect",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::connect",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::connect",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::connect",3,"yarp::os::ConstString const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::connect",4,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_connect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::connect",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::connect",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::connect",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::connect",3,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_connect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::connect",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::connect",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::connect",2,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_connect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::connect",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::connect",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::connect",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::connect",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::connect",4,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)yarp::os::NetworkBase::connect((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_connect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::connect",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::connect",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::connect",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::connect",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)yarp::os::NetworkBase::connect((char const *)arg1,(char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_connect__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::connect",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::connect",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::connect",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::connect",3,"yarp::os::ContactStyle const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("NetworkBase_connect",3,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool)yarp::os::NetworkBase::connect((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::ContactStyle const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_connect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetworkBase_connect__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__ContactStyle, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NetworkBase_connect__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkBase_connect__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkBase_connect__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkBase_connect__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkBase_connect__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_connect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::connect(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::ConstString const &,bool)\n"
    "    yarp::os::NetworkBase::connect(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::NetworkBase::connect(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::NetworkBase::connect(char const *,char const *,char const *,bool)\n"
    "    yarp::os::NetworkBase::connect(char const *,char const *,char const *)\n"
    "    yarp::os::NetworkBase::connect(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::ContactStyle const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkBase_disconnect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::disconnect",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::disconnect",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::disconnect",2,"yarp::os::ConstString const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::disconnect",3,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)yarp::os::NetworkBase::disconnect((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_disconnect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::disconnect",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::disconnect",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::disconnect",2,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::os::NetworkBase::disconnect((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_disconnect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::disconnect",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::disconnect",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::disconnect",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::disconnect",3,"yarp::os::ContactStyle const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("NetworkBase_disconnect",3,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool)yarp::os::NetworkBase::disconnect((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::ContactStyle const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_disconnect(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetworkBase_disconnect__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__ContactStyle, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NetworkBase_disconnect__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkBase_disconnect__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_disconnect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::disconnect(yarp::os::ConstString const &,yarp::os::ConstString const &,bool)\n"
    "    yarp::os::NetworkBase::disconnect(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::NetworkBase::disconnect(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::ContactStyle const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkBase_isConnected__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::isConnected",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::isConnected",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::isConnected",2,"yarp::os::ConstString const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::isConnected",3,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)yarp::os::NetworkBase::isConnected((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_isConnected__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::isConnected",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::isConnected",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::isConnected",2,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::os::NetworkBase::isConnected((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_isConnected__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::isConnected",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::isConnected",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::isConnected",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::isConnected",3,"yarp::os::ContactStyle const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("NetworkBase_isConnected",3,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool)yarp::os::NetworkBase::isConnected((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::ContactStyle const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_isConnected(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetworkBase_isConnected__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__ContactStyle, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NetworkBase_isConnected__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkBase_isConnected__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_isConnected'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::isConnected(yarp::os::ConstString const &,yarp::os::ConstString const &,bool)\n"
    "    yarp::os::NetworkBase::isConnected(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::NetworkBase::isConnected(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::ContactStyle const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkBase_exists__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  bool arg2 ;
  yarp::os::ConstString temp1 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::exists",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::exists",1,"yarp::os::ConstString const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::exists",2,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)yarp::os::NetworkBase::exists((std::string const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_exists__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::exists",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::exists",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (bool)yarp::os::NetworkBase::exists((std::string const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_exists__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ContactStyle *arg2 = 0 ;
  yarp::os::ConstString temp1 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::exists",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::exists",1,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::exists",2,"yarp::os::ContactStyle const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("NetworkBase_exists",2,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool)yarp::os::NetworkBase::exists((std::string const &)*arg1,(yarp::os::ContactStyle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_exists(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_NetworkBase_exists__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__ContactStyle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NetworkBase_exists__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetworkBase_exists__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_exists'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::exists(yarp::os::ConstString const &,bool)\n"
    "    yarp::os::NetworkBase::exists(yarp::os::ConstString const &)\n"
    "    yarp::os::NetworkBase::exists(yarp::os::ConstString const &,yarp::os::ContactStyle const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkBase_sync__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  bool arg2 ;
  yarp::os::ConstString temp1 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::sync",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::sync",1,"yarp::os::ConstString const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::sync",2,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)yarp::os::NetworkBase::sync((std::string const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_sync__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::sync",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::sync",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (bool)yarp::os::NetworkBase::sync((std::string const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_sync(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_NetworkBase_sync__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetworkBase_sync__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_sync'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::sync(yarp::os::ConstString const &,bool)\n"
    "    yarp::os::NetworkBase::sync(yarp::os::ConstString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkBase_main(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char **arg2 ;
  int result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::main",1,1)
  {
    if (lua_istable(L,1)) {
      int i, size = SWIG_argv_size(L,1);
      arg1 = (int) size;
      arg2 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,1,i);
        if (lua_isnil(L,-1))
        break;
        arg2[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg2[i]=NULL;
    } else {
      arg1 = 0; arg2 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  result = (int)yarp::os::NetworkBase::main(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  {
    free((char *) arg2);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg2);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_runNameServer(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char **arg2 ;
  int result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::runNameServer",1,1)
  {
    if (lua_istable(L,1)) {
      int i, size = SWIG_argv_size(L,1);
      arg1 = (int) size;
      arg2 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,1,i);
        if (lua_isnil(L,-1))
        break;
        arg2[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg2[i]=NULL;
    } else {
      arg1 = 0; arg2 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  result = (int)yarp::os::NetworkBase::runNameServer(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  {
    free((char *) arg2);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg2);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_assertion(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("yarp::os::NetworkBase::assertion",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::assertion",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  yarp::os::NetworkBase::assertion(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_queryName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::queryName",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::queryName",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = yarp::os::NetworkBase::queryName((std::string const &)*arg1);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_registerName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::registerName",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::registerName",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = yarp::os::NetworkBase::registerName((std::string const &)*arg1);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_registerContact(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::registerContact",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::registerContact",1,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("NetworkBase_registerContact",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = yarp::os::NetworkBase::registerContact((yarp::os::Contact const &)*arg1);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_unregisterName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::unregisterName",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::unregisterName",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = yarp::os::NetworkBase::unregisterName((std::string const &)*arg1);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_unregisterContact(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::unregisterContact",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::unregisterContact",1,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("NetworkBase_unregisterContact",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = yarp::os::NetworkBase::unregisterContact((yarp::os::Contact const &)*arg1);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_setProperty(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::setProperty",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::setProperty",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::setProperty",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::setProperty",3,"yarp::os::Value const &");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("NetworkBase_setProperty",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)yarp::os::NetworkBase::setProperty((char const *)arg1,(char const *)arg2,(yarp::os::Value const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getProperty",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::getProperty",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::getProperty",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (yarp::os::Value *)yarp::os::NetworkBase::getProperty((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getNameServerName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getNameServerName",0,0)
  result = yarp::os::NetworkBase::getNameServerName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getNameServerContact(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getNameServerContact",0,0)
  result = yarp::os::NetworkBase::getNameServerContact();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_setNameServerName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::setNameServerName",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::setNameServerName",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (bool)yarp::os::NetworkBase::setNameServerName((std::string const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_setLocalMode(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::setLocalMode",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::setLocalMode",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (bool)yarp::os::NetworkBase::setLocalMode(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getLocalMode(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getLocalMode",0,0)
  result = (bool)yarp::os::NetworkBase::getLocalMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_readString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool *arg1 = (bool *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::readString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::readString",1,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("NetworkBase_readString",1,SWIGTYPE_p_bool);
  }
  
  result = yarp::os::NetworkBase::readString(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_readString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::readString",0,0)
  result = yarp::os::NetworkBase::readString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_readString(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_NetworkBase_readString__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NetworkBase_readString__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_readString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::readString(bool *)\n"
    "    yarp::os::NetworkBase::readString()\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkBase_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::write",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::write",1,"yarp::os::Contact const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::write",3,"yarp::os::PortReader &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::write",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("yarp::os::NetworkBase::write",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("yarp::os::NetworkBase::write",6,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("NetworkBase_write",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("NetworkBase_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("NetworkBase_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (double)lua_tonumber(L, 6);
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::write",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::write",1,"yarp::os::Contact const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::write",3,"yarp::os::PortReader &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::write",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("yarp::os::NetworkBase::write",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("NetworkBase_write",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("NetworkBase_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("NetworkBase_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::write",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::write",1,"yarp::os::Contact const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::write",3,"yarp::os::PortReader &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::write",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("NetworkBase_write",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("NetworkBase_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("NetworkBase_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::write",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::write",1,"yarp::os::Contact const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::write",3,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("NetworkBase_write",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("NetworkBase_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("NetworkBase_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::ContactStyle *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::write",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::write",1,"yarp::os::Contact const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::write",3,"yarp::os::PortReader &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::write",4,"yarp::os::ContactStyle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("NetworkBase_write",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("NetworkBase_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("NetworkBase_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("NetworkBase_write",4,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool)yarp::os::NetworkBase::write((yarp::os::Contact const &)*arg1,*arg2,*arg3,(yarp::os::ContactStyle const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_writeToNameServer(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriter *arg1 = 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  yarp::os::ContactStyle *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::writeToNameServer",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::writeToNameServer",1,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::writeToNameServer",2,"yarp::os::PortReader &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::writeToNameServer",3,"yarp::os::ContactStyle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("NetworkBase_writeToNameServer",1,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("NetworkBase_writeToNameServer",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("NetworkBase_writeToNameServer",3,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool)yarp::os::NetworkBase::writeToNameServer(*arg1,*arg2,(yarp::os::ContactStyle const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_write__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::ConstString temp1 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::write",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::write",1,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::write",3,"yarp::os::PortReader &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("NetworkBase_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("NetworkBase_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)yarp::os::NetworkBase::write((std::string const &)*arg1,*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_write(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NetworkBase_write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NetworkBase_write__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__ContactStyle, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_NetworkBase_write__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkBase_write__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_NetworkBase_write__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_NetworkBase_write__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::write(yarp::os::Contact const &,yarp::os::PortWriter &,yarp::os::PortReader &,bool,bool,double)\n"
    "    yarp::os::NetworkBase::write(yarp::os::Contact const &,yarp::os::PortWriter &,yarp::os::PortReader &,bool,bool)\n"
    "    yarp::os::NetworkBase::write(yarp::os::Contact const &,yarp::os::PortWriter &,yarp::os::PortReader &,bool)\n"
    "    yarp::os::NetworkBase::write(yarp::os::Contact const &,yarp::os::PortWriter &,yarp::os::PortReader &)\n"
    "    yarp::os::NetworkBase::write(yarp::os::Contact const &,yarp::os::PortWriter &,yarp::os::PortReader &,yarp::os::ContactStyle const &)\n"
    "    yarp::os::NetworkBase::write(yarp::os::ConstString const &,yarp::os::PortWriter &,yarp::os::PortReader &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkBase_checkNetwork__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::checkNetwork",0,0)
  result = (bool)yarp::os::NetworkBase::checkNetwork();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_checkNetwork__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::checkNetwork",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::checkNetwork",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (bool)yarp::os::NetworkBase::checkNetwork(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_checkNetwork(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_NetworkBase_checkNetwork__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_NetworkBase_checkNetwork__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_checkNetwork'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::checkNetwork()\n"
    "    yarp::os::NetworkBase::checkNetwork(double)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkBase_initialized(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::initialized",0,0)
  result = (bool)yarp::os::NetworkBase::initialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_setVerbosity(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("yarp::os::NetworkBase::setVerbosity",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::setVerbosity",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  yarp::os::NetworkBase::setVerbosity(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_queryBypass(lua_State* L) {
  int SWIG_arg = 0;
  NameStore *arg1 = (NameStore *) 0 ;
  
  SWIG_check_num_args("yarp::os::NetworkBase::queryBypass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::queryBypass",1,"NameStore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NameStore,0))){
    SWIG_fail_ptr("NetworkBase_queryBypass",1,SWIGTYPE_p_NameStore);
  }
  
  yarp::os::NetworkBase::queryBypass(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getQueryBypass(lua_State* L) {
  int SWIG_arg = 0;
  NameStore *result = 0 ;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getQueryBypass",0,0)
  result = (NameStore *)yarp::os::NetworkBase::getQueryBypass();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NameStore,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getEnvironment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getEnvironment",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::getEnvironment",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::getEnvironment",2,"bool *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("NetworkBase_getEnvironment",2,SWIGTYPE_p_bool);
  }
  
  result = yarp::os::NetworkBase::getEnvironment((char const *)arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getEnvironment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getEnvironment",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::getEnvironment",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = yarp::os::NetworkBase::getEnvironment((char const *)arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getEnvironment(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_NetworkBase_getEnvironment__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NetworkBase_getEnvironment__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_getEnvironment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::getEnvironment(char const *,bool *)\n"
    "    yarp::os::NetworkBase::getEnvironment(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkBase_setEnvironment(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::NetworkBase::setEnvironment",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::setEnvironment",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::setEnvironment",2,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  yarp::os::NetworkBase::setEnvironment((std::string const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_unsetEnvironment(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  
  SWIG_check_num_args("yarp::os::NetworkBase::unsetEnvironment",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::unsetEnvironment",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  yarp::os::NetworkBase::unsetEnvironment((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getDirectorySeparator(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getDirectorySeparator",0,0)
  result = yarp::os::NetworkBase::getDirectorySeparator();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getPathSeparator(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getPathSeparator",0,0)
  result = yarp::os::NetworkBase::getPathSeparator();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_registerCarrier(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::registerCarrier",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::registerCarrier",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::registerCarrier",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)yarp::os::NetworkBase::registerCarrier((char const *)arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_lock(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("yarp::os::NetworkBase::lock",0,0)
  yarp::os::NetworkBase::lock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_unlock(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("yarp::os::NetworkBase::unlock",0,0)
  yarp::os::NetworkBase::unlock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_localNetworkAllocation(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::localNetworkAllocation",0,0)
  result = (bool)yarp::os::NetworkBase::localNetworkAllocation();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_detectNameServer(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::detectNameServer",3,3)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::detectNameServer",1,"bool");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::detectNameServer",2,"bool &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::detectNameServer",3,"bool &");
  arg1 = (lua_toboolean(L, 1)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("NetworkBase_detectNameServer",2,SWIGTYPE_p_bool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("NetworkBase_detectNameServer",3,SWIGTYPE_p_bool);
  }
  
  result = yarp::os::NetworkBase::detectNameServer(arg1,*arg2,*arg3);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_setNameServerContact(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Contact *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::setNameServerContact",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::setNameServerContact",1,"yarp::os::Contact &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("NetworkBase_setNameServerContact",1,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)yarp::os::NetworkBase::setNameServerContact(*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getConfigFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getConfigFile",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::getConfigFile",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = yarp::os::NetworkBase::getConfigFile((char const *)arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getDefaultPortRange(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getDefaultPortRange",0,0)
  result = (int)yarp::os::NetworkBase::getDefaultPortRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_setConnectionQos__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  bool arg5 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::setConnectionQos",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",3,"yarp::os::QosStyle const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",4,"yarp::os::QosStyle const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",5,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("NetworkBase_setConnectionQos",3,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("NetworkBase_setConnectionQos",4,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3,(yarp::os::QosStyle const &)*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_setConnectionQos__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::setConnectionQos",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",3,"yarp::os::QosStyle const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",4,"yarp::os::QosStyle const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("NetworkBase_setConnectionQos",3,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("NetworkBase_setConnectionQos",4,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3,(yarp::os::QosStyle const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_setConnectionQos__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  bool arg4 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::setConnectionQos",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",3,"yarp::os::QosStyle const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",4,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("NetworkBase_setConnectionQos",3,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_setConnectionQos__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::setConnectionQos",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::setConnectionQos",3,"yarp::os::QosStyle const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("NetworkBase_setConnectionQos",3,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  result = (bool)yarp::os::NetworkBase::setConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,(yarp::os::QosStyle const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_setConnectionQos(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__QosStyle, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NetworkBase_setConnectionQos__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__QosStyle, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__QosStyle, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_NetworkBase_setConnectionQos__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__QosStyle, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkBase_setConnectionQos__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__QosStyle, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__QosStyle, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_NetworkBase_setConnectionQos__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_setConnectionQos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::setConnectionQos(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::QosStyle const &,yarp::os::QosStyle const &,bool)\n"
    "    yarp::os::NetworkBase::setConnectionQos(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::QosStyle const &,yarp::os::QosStyle const &)\n"
    "    yarp::os::NetworkBase::setConnectionQos(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::QosStyle const &,bool)\n"
    "    yarp::os::NetworkBase::setConnectionQos(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::QosStyle const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkBase_getConnectionQos__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  bool arg5 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getConnectionQos",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::getConnectionQos",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::getConnectionQos",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::getConnectionQos",3,"yarp::os::QosStyle &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::getConnectionQos",4,"yarp::os::QosStyle &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("yarp::os::NetworkBase::getConnectionQos",5,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("NetworkBase_getConnectionQos",3,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("NetworkBase_getConnectionQos",4,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (bool)yarp::os::NetworkBase::getConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,*arg3,*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getConnectionQos__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::QosStyle *arg3 = 0 ;
  yarp::os::QosStyle *arg4 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NetworkBase::getConnectionQos",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::NetworkBase::getConnectionQos",1,"yarp::os::ConstString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NetworkBase::getConnectionQos",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NetworkBase::getConnectionQos",3,"yarp::os::QosStyle &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::os::NetworkBase::getConnectionQos",4,"yarp::os::QosStyle &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("NetworkBase_getConnectionQos",3,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("NetworkBase_getConnectionQos",4,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  result = (bool)yarp::os::NetworkBase::getConnectionQos((std::string const &)*arg1,(std::string const &)*arg2,*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkBase_getConnectionQos(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__QosStyle, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__QosStyle, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_NetworkBase_getConnectionQos__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__QosStyle, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__QosStyle, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_NetworkBase_getConnectionQos__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkBase_getConnectionQos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::NetworkBase::getConnectionQos(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::QosStyle &,yarp::os::QosStyle &,bool)\n"
    "    yarp::os::NetworkBase::getConnectionQos(yarp::os::ConstString const &,yarp::os::ConstString const &,yarp::os::QosStyle &,yarp::os::QosStyle &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_NetworkBase(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::NetworkBase *result = 0 ;
  
  SWIG_check_num_args("yarp::os::NetworkBase::NetworkBase",0,0)
  result = (yarp::os::NetworkBase *)new yarp::os::NetworkBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__NetworkBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkBase(void *obj) {
yarp::os::NetworkBase *arg1 = (yarp::os::NetworkBase *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_NetworkBase_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_os_NetworkBase_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_NetworkBase_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_NetworkBase_cls_methods[] = {
    {"initMinimum", _wrap_NetworkBase_initMinimum}, 
    {"autoInitMinimum", _wrap_NetworkBase_autoInitMinimum}, 
    {"finiMinimum", _wrap_NetworkBase_finiMinimum}, 
    {"connect", _wrap_NetworkBase_connect}, 
    {"disconnect", _wrap_NetworkBase_disconnect}, 
    {"isConnected", _wrap_NetworkBase_isConnected}, 
    {"exists", _wrap_NetworkBase_exists}, 
    {"sync", _wrap_NetworkBase_sync}, 
    {"main", _wrap_NetworkBase_main}, 
    {"runNameServer", _wrap_NetworkBase_runNameServer}, 
    {"assertion", _wrap_NetworkBase_assertion}, 
    {"queryName", _wrap_NetworkBase_queryName}, 
    {"registerName", _wrap_NetworkBase_registerName}, 
    {"registerContact", _wrap_NetworkBase_registerContact}, 
    {"unregisterName", _wrap_NetworkBase_unregisterName}, 
    {"unregisterContact", _wrap_NetworkBase_unregisterContact}, 
    {"setProperty", _wrap_NetworkBase_setProperty}, 
    {"getProperty", _wrap_NetworkBase_getProperty}, 
    {"getNameServerName", _wrap_NetworkBase_getNameServerName}, 
    {"getNameServerContact", _wrap_NetworkBase_getNameServerContact}, 
    {"setNameServerName", _wrap_NetworkBase_setNameServerName}, 
    {"setLocalMode", _wrap_NetworkBase_setLocalMode}, 
    {"getLocalMode", _wrap_NetworkBase_getLocalMode}, 
    {"readString", _wrap_NetworkBase_readString}, 
    {"writeToNameServer", _wrap_NetworkBase_writeToNameServer}, 
    {"write", _wrap_NetworkBase_write}, 
    {"checkNetwork", _wrap_NetworkBase_checkNetwork}, 
    {"initialized", _wrap_NetworkBase_initialized}, 
    {"setVerbosity", _wrap_NetworkBase_setVerbosity}, 
    {"queryBypass", _wrap_NetworkBase_queryBypass}, 
    {"getQueryBypass", _wrap_NetworkBase_getQueryBypass}, 
    {"getEnvironment", _wrap_NetworkBase_getEnvironment}, 
    {"setEnvironment", _wrap_NetworkBase_setEnvironment}, 
    {"unsetEnvironment", _wrap_NetworkBase_unsetEnvironment}, 
    {"getDirectorySeparator", _wrap_NetworkBase_getDirectorySeparator}, 
    {"getPathSeparator", _wrap_NetworkBase_getPathSeparator}, 
    {"registerCarrier", _wrap_NetworkBase_registerCarrier}, 
    {"lock", _wrap_NetworkBase_lock}, 
    {"unlock", _wrap_NetworkBase_unlock}, 
    {"localNetworkAllocation", _wrap_NetworkBase_localNetworkAllocation}, 
    {"detectNameServer", _wrap_NetworkBase_detectNameServer}, 
    {"setNameServerContact", _wrap_NetworkBase_setNameServerContact}, 
    {"getConfigFile", _wrap_NetworkBase_getConfigFile}, 
    {"getDefaultPortRange", _wrap_NetworkBase_getDefaultPortRange}, 
    {"setConnectionQos", _wrap_NetworkBase_setConnectionQos}, 
    {"getConnectionQos", _wrap_NetworkBase_getConnectionQos}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_NetworkBase_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_NetworkBase_bases[] = {0};
static const char *swig_yarp_os_NetworkBase_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_NetworkBase = { "NetworkBase", &SWIGTYPE_p_yarp__os__NetworkBase,_wrap_new_NetworkBase, swig_delete_NetworkBase, swig_yarp_os_NetworkBase_methods, swig_yarp_os_NetworkBase_attributes, { "NetworkBase", swig_yarp_os_NetworkBase_cls_methods, swig_yarp_os_NetworkBase_cls_attributes, swig_yarp_os_NetworkBase_cls_constants }, swig_yarp_os_NetworkBase_bases, swig_yarp_os_NetworkBase_base_names };

static int _wrap_new_Network(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Network *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Network::Network",0,0)
  result = (yarp::os::Network *)new yarp::os::Network();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Network,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Network_init(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("yarp::os::Network::init",0,0)
  yarp::os::Network::init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Network_fini(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("yarp::os::Network::fini",0,0)
  yarp::os::Network::fini();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Network(void *obj) {
yarp::os::Network *arg1 = (yarp::os::Network *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Network_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Network_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Network_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Network_cls_methods[] = {
    {"init", _wrap_Network_init}, 
    {"fini", _wrap_Network_fini}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Network_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Network_bases[] = {0,0};
static const char *swig_yarp_os_Network_base_names[] = {"yarp::os::NetworkBase *",0};
static swig_lua_class _wrap_class_yarp_os_Network = { "Network", &SWIGTYPE_p_yarp__os__Network,_wrap_new_Network, swig_delete_Network, swig_yarp_os_Network_methods, swig_yarp_os_Network_attributes, { "Network", swig_yarp_os_Network_cls_methods, swig_yarp_os_Network_cls_attributes, swig_yarp_os_Network_cls_constants }, swig_yarp_os_Network_bases, swig_yarp_os_Network_base_names };

static int _wrap_PortablePairBase_readPair(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionReader *arg1 = 0 ;
  yarp::os::Portable *arg2 = 0 ;
  yarp::os::Portable *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::PortablePairBase::readPair",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::PortablePairBase::readPair",1,"yarp::os::ConnectionReader &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::PortablePairBase::readPair",2,"yarp::os::Portable &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::PortablePairBase::readPair",3,"yarp::os::Portable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("PortablePairBase_readPair",1,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Portable,0))){
    SWIG_fail_ptr("PortablePairBase_readPair",2,SWIGTYPE_p_yarp__os__Portable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Portable,0))){
    SWIG_fail_ptr("PortablePairBase_readPair",3,SWIGTYPE_p_yarp__os__Portable);
  }
  
  result = (bool)yarp::os::PortablePairBase::readPair(*arg1,*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortablePairBase_writePair(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConnectionWriter *arg1 = 0 ;
  yarp::os::Portable *arg2 = 0 ;
  yarp::os::Portable *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::PortablePairBase::writePair",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::PortablePairBase::writePair",1,"yarp::os::ConnectionWriter &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::PortablePairBase::writePair",2,"yarp::os::Portable &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::PortablePairBase::writePair",3,"yarp::os::Portable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("PortablePairBase_writePair",1,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Portable,0))){
    SWIG_fail_ptr("PortablePairBase_writePair",2,SWIGTYPE_p_yarp__os__Portable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Portable,0))){
    SWIG_fail_ptr("PortablePairBase_writePair",3,SWIGTYPE_p_yarp__os__Portable);
  }
  
  result = (bool)yarp::os::PortablePairBase::writePair(*arg1,*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortablePairBase(void *obj) {
yarp::os::PortablePairBase *arg1 = (yarp::os::PortablePairBase *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_PortablePairBase_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_os_PortablePairBase_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_PortablePairBase_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_PortablePairBase_cls_methods[] = {
    {"readPair", _wrap_PortablePairBase_readPair}, 
    {"writePair", _wrap_PortablePairBase_writePair}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_PortablePairBase_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_PortablePairBase_bases[] = {0,0};
static const char *swig_yarp_os_PortablePairBase_base_names[] = {"yarp::os::Portable *",0};
static swig_lua_class _wrap_class_yarp_os_PortablePairBase = { "PortablePairBase", &SWIGTYPE_p_yarp__os__PortablePairBase,0, swig_delete_PortablePairBase, swig_yarp_os_PortablePairBase_methods, swig_yarp_os_PortablePairBase_attributes, { "PortablePairBase", swig_yarp_os_PortablePairBase_cls_methods, swig_yarp_os_PortablePairBase_cls_attributes, swig_yarp_os_PortablePairBase_cls_constants }, swig_yarp_os_PortablePairBase_bases, swig_yarp_os_PortablePairBase_base_names };

static int _wrap_PortReaderCreator_create(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortReaderCreator *arg1 = (yarp::os::PortReaderCreator *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  SWIG_check_num_args("yarp::os::PortReaderCreator::create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortReaderCreator::create",1,"yarp::os::PortReaderCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortReaderCreator,0))){
    SWIG_fail_ptr("PortReaderCreator_create",1,SWIGTYPE_p_yarp__os__PortReaderCreator);
  }
  
  result = (yarp::os::PortReader *)(arg1)->create();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__PortReader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortReaderCreator(void *obj) {
yarp::os::PortReaderCreator *arg1 = (yarp::os::PortReaderCreator *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_PortReaderCreator_methods[] = {
    {"create", _wrap_PortReaderCreator_create}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_PortReaderCreator_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_PortReaderCreator_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_PortReaderCreator_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_PortReaderCreator_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_PortReaderCreator_bases[] = {0};
static const char *swig_yarp_os_PortReaderCreator_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_PortReaderCreator = { "PortReaderCreator", &SWIGTYPE_p_yarp__os__PortReaderCreator,0, swig_delete_PortReaderCreator, swig_yarp_os_PortReaderCreator_methods, swig_yarp_os_PortReaderCreator_attributes, { "PortReaderCreator", swig_yarp_os_PortReaderCreator_cls_methods, swig_yarp_os_PortReaderCreator_cls_attributes, swig_yarp_os_PortReaderCreator_cls_constants }, swig_yarp_os_PortReaderCreator_bases, swig_yarp_os_PortReaderCreator_base_names };

static int _wrap_Property_check__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("check",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Property const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_check",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_check__SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("check",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Property const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("check",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_check",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_check__SWIG_0_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp4 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("check",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Property const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("check",3,"yarp::os::Value const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("check",4,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_check",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Property_check",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = ((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_check__SWIG_0_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("check",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Property const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("check",3,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_check",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Property_check",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = ((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_findGroup__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("findGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroup",1,"yarp::os::Property const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findGroup",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_findGroup",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Bottle *) &((yarp::os::Property const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_findGroup__SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("findGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroup",1,"yarp::os::Property const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findGroup",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("findGroup",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_findGroup",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (yarp::os::Bottle *) &((yarp::os::Property const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Property__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Property::Property",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Property::Property",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (yarp::os::Property *)new yarp::os::Property(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Property__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Property::Property",0,0)
  result = (yarp::os::Property *)new yarp::os::Property();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Property__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Property::Property",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::os::Property::Property",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (yarp::os::Property *)new yarp::os::Property((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Property__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = 0 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Property::Property",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::Property::Property",1,"yarp::os::Property const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("new_Property",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  result = (yarp::os::Property *)new yarp::os::Property((yarp::os::Property const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Property(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Property__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Property__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Property__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Property__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Property'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Property::Property(int)\n"
    "    yarp::os::Property::Property()\n"
    "    yarp::os::Property::Property(char const *)\n"
    "    yarp::os::Property::Property(yarp::os::Property const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Property_check__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Property::check",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::check",1,"yarp::os::Property const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::check",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_check",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((yarp::os::Property const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_check(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Property_check__SWIG_0_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Property_check__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Property_check__SWIG_0_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_check__SWIG_0_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Property_check__SWIG_0_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Property_check'\n"
    "  Possible C/C++ prototypes are:\n"
    "    check(yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::Value const &,yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::Value const &) const\n"
    "    yarp::os::Property::check(yarp::os::ConstString const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Property_put__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  
  SWIG_check_num_args("yarp::os::Property::put",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::put",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::put",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::Property::put",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_put",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->put((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_put__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::Property::put",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::put",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::put",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Property::put",3,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_put",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Property_put",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  (arg1)->put((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_put__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = (yarp::os::Value *) 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::Property::put",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::put",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::put",2,"yarp::os::ConstString const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::os::Property::put",3,"yarp::os::Value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_put",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Property_put",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  (arg1)->put((yarp::os::ConstString const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_put__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  int arg3 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::Property::put",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::put",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::put",2,"yarp::os::ConstString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::Property::put",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_put",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->put((yarp::os::ConstString const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_put__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  double arg3 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::Property::put",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::put",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::put",2,"yarp::os::ConstString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::Property::put",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_put",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->put((yarp::os::ConstString const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_put(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Property_put__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Property_put__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_put__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_put__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_put__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Property_put'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Property::put(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::Property::put(yarp::os::ConstString const &,yarp::os::Value const &)\n"
    "    yarp::os::Property::put(yarp::os::ConstString const &,yarp::os::Value *)\n"
    "    yarp::os::Property::put(yarp::os::ConstString const &,int)\n"
    "    yarp::os::Property::put(yarp::os::ConstString const &,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Property_addGroup(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Property::addGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::addGroup",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::addGroup",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_addGroup",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Property *) &(arg1)->addGroup((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_unput(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::Property::unput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::unput",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::unput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_unput",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->unput((yarp::os::ConstString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_find(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Property::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::find",1,"yarp::os::Property const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::find",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_find",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Value *) &((yarp::os::Property const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_findGroup__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Property::findGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::findGroup",1,"yarp::os::Property const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::findGroup",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_findGroup",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Bottle *) &((yarp::os::Property const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_findGroup(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Property_findGroup__SWIG_0_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Property_findGroup__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_findGroup__SWIG_0_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Property_findGroup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findGroup(yarp::os::ConstString const &) const\n"
    "    findGroup(yarp::os::ConstString const &,yarp::os::ConstString const &) const\n"
    "    yarp::os::Property::findGroup(yarp::os::ConstString const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Property_clear(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::Property::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::clear",1,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_clear",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::Property::fromString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromString",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromString",2,"yarp::os::ConstString const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Property::fromString",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromString",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->fromString((yarp::os::ConstString const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::Property::fromString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromString",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromString",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromString",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->fromString((yarp::os::ConstString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Property_fromString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_fromString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Property_fromString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Property::fromString(yarp::os::ConstString const &,bool)\n"
    "    yarp::os::Property::fromString(yarp::os::ConstString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Property_fromCommand__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("yarp::os::Property::fromCommand",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromCommand",1,"yarp::os::Property *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Property::fromCommand",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::Property::fromCommand",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromCommand",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  {
    if (lua_istable(L,2)) {
      int i, size = SWIG_argv_size(L,2);
      arg2 = (int) size;
      arg3 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,2,i);
        if (lua_isnil(L,-1))
        break;
        arg3[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg3[i]=NULL;
    } else {
      arg2 = 0; arg3 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  arg4 = (lua_toboolean(L, 3)!=0);
  arg5 = (lua_toboolean(L, 4)!=0);
  (arg1)->fromCommand(arg2,arg3,arg4,arg5);
  
  {
    free((char *) arg3);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg3);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromCommand__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("yarp::os::Property::fromCommand",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromCommand",1,"yarp::os::Property *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Property::fromCommand",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromCommand",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  {
    if (lua_istable(L,2)) {
      int i, size = SWIG_argv_size(L,2);
      arg2 = (int) size;
      arg3 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,2,i);
        if (lua_isnil(L,-1))
        break;
        arg3[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg3[i]=NULL;
    } else {
      arg2 = 0; arg3 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  arg4 = (lua_toboolean(L, 3)!=0);
  (arg1)->fromCommand(arg2,arg3,arg4);
  
  {
    free((char *) arg3);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg3);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromCommand__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  
  SWIG_check_num_args("yarp::os::Property::fromCommand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromCommand",1,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromCommand",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  {
    if (lua_istable(L,2)) {
      int i, size = SWIG_argv_size(L,2);
      arg2 = (int) size;
      arg3 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,2,i);
        if (lua_isnil(L,-1))
        break;
        arg3[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg3[i]=NULL;
    } else {
      arg2 = 0; arg3 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  (arg1)->fromCommand(arg2,arg3);
  
  {
    free((char *) arg3);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg3);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromCommand__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("yarp::os::Property::fromCommand",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromCommand",1,"yarp::os::Property *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Property::fromCommand",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::Property::fromCommand",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromCommand",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  {
    if (lua_istable(L,2)) {
      int i, size = SWIG_argv_size(L,2);
      arg2 = (int) size;
      arg3 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,2,i);
        if (lua_isnil(L,-1))
        break;
        arg3[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg3[i]=NULL;
    } else {
      arg2 = 0; arg3 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  arg4 = (lua_toboolean(L, 3)!=0);
  arg5 = (lua_toboolean(L, 4)!=0);
  (arg1)->fromCommand(arg2,(char const *(*))arg3,arg4,arg5);
  
  {
    free((char *) arg3);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg3);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromCommand__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("yarp::os::Property::fromCommand",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromCommand",1,"yarp::os::Property *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Property::fromCommand",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromCommand",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  {
    if (lua_istable(L,2)) {
      int i, size = SWIG_argv_size(L,2);
      arg2 = (int) size;
      arg3 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,2,i);
        if (lua_isnil(L,-1))
        break;
        arg3[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg3[i]=NULL;
    } else {
      arg2 = 0; arg3 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  arg4 = (lua_toboolean(L, 3)!=0);
  (arg1)->fromCommand(arg2,(char const *(*))arg3,arg4);
  
  {
    free((char *) arg3);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg3);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromCommand__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  int arg2 ;
  char **arg3 ;
  
  SWIG_check_num_args("yarp::os::Property::fromCommand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromCommand",1,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromCommand",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  {
    if (lua_istable(L,2)) {
      int i, size = SWIG_argv_size(L,2);
      arg2 = (int) size;
      arg3 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,2,i);
        if (lua_isnil(L,-1))
        break;
        arg3[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg3[i]=NULL;
    } else {
      arg2 = 0; arg3 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  (arg1)->fromCommand(arg2,(char const *(*))arg3);
  
  {
    free((char *) arg3);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg3);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromCommand(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_istable(L,argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Property_fromCommand__SWIG_2(L);
        }
        return _wrap_Property_fromCommand__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_istable(L,argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Property_fromCommand__SWIG_5(L);
        }
        return _wrap_Property_fromCommand__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_istable(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_fromCommand__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_istable(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_fromCommand__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_istable(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Property_fromCommand__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_istable(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Property_fromCommand__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Property_fromCommand'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Property::fromCommand(int,char *[],bool,bool)\n"
    "    yarp::os::Property::fromCommand(int,char *[],bool)\n"
    "    yarp::os::Property::fromCommand(int,char *[])\n"
    "    yarp::os::Property::fromCommand(int,char const *[],bool,bool)\n"
    "    yarp::os::Property::fromCommand(int,char const *[],bool)\n"
    "    yarp::os::Property::fromCommand(int,char const *[])\n");
  lua_error(L);return 0;
}


static int _wrap_Property_fromArguments__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("yarp::os::Property::fromArguments",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromArguments",1,"yarp::os::Property *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromArguments",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Property::fromArguments",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromArguments",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->fromArguments((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromArguments__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::os::Property::fromArguments",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromArguments",1,"yarp::os::Property *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromArguments",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromArguments",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->fromArguments((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromArguments(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Property_fromArguments__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_fromArguments__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Property_fromArguments'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Property::fromArguments(char const *,bool)\n"
    "    yarp::os::Property::fromArguments(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Property_fromConfigFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool arg3 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Property::fromConfigFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",2,"yarp::os::ConstString const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfigFile",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfigFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Property::fromConfigFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfigFile",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfigFile__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  bool arg4 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Property::fromConfigFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",3,"yarp::os::Searchable &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfigFile",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Property_fromConfigFile",3,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfigFile__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Property::fromConfigFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Property::fromConfigFile",3,"yarp::os::Searchable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfigFile",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Property_fromConfigFile",3,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = (bool)(arg1)->fromConfigFile((yarp::os::ConstString const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfigFile(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Property_fromConfigFile__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Property_fromConfigFile__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_fromConfigFile__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Property_fromConfigFile__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Property_fromConfigFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Property::fromConfigFile(yarp::os::ConstString const &,bool)\n"
    "    yarp::os::Property::fromConfigFile(yarp::os::ConstString const &)\n"
    "    yarp::os::Property::fromConfigFile(yarp::os::ConstString const &,yarp::os::Searchable &,bool)\n"
    "    yarp::os::Property::fromConfigFile(yarp::os::ConstString const &,yarp::os::Searchable &)\n");
  lua_error(L);return 0;
}


static int _wrap_Property_fromConfigDir__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool arg4 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Property::fromConfigDir",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfigDir",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfigDir",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::Property::fromConfigDir",3,"yarp::os::ConstString const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::Property::fromConfigDir",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfigDir",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->fromConfigDir((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfigDir__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Property::fromConfigDir",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfigDir",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfigDir",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::Property::fromConfigDir",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfigDir",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->fromConfigDir((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfigDir__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Property::fromConfigDir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfigDir",1,"yarp::os::Property *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfigDir",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfigDir",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->fromConfigDir((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfigDir(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Property_fromConfigDir__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_fromConfigDir__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Property_fromConfigDir__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Property_fromConfigDir'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Property::fromConfigDir(yarp::os::ConstString const &,yarp::os::ConstString const &,bool)\n"
    "    yarp::os::Property::fromConfigDir(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::Property::fromConfigDir(yarp::os::ConstString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Property_fromConfig__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("yarp::os::Property::fromConfig",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfig",1,"yarp::os::Property *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfig",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Property::fromConfig",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfig",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->fromConfig((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfig__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::os::Property::fromConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfig",1,"yarp::os::Property *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfig",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfig",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->fromConfig((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfig__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("yarp::os::Property::fromConfig",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfig",1,"yarp::os::Property *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfig",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Property::fromConfig",3,"yarp::os::Searchable &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::Property::fromConfig",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfig",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Property_fromConfig",3,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->fromConfig((char const *)arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfig__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Searchable *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::Property::fromConfig",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromConfig",1,"yarp::os::Property *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromConfig",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::Property::fromConfig",3,"yarp::os::Searchable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromConfig",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Property_fromConfig",3,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  (arg1)->fromConfig((char const *)arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromConfig(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Property_fromConfig__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Property_fromConfig__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_fromConfig__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Property_fromConfig__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Property_fromConfig'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Property::fromConfig(char const *,bool)\n"
    "    yarp::os::Property::fromConfig(char const *)\n"
    "    yarp::os::Property::fromConfig(char const *,yarp::os::Searchable &,bool)\n"
    "    yarp::os::Property::fromConfig(char const *,yarp::os::Searchable &)\n");
  lua_error(L);return 0;
}


static int _wrap_Property_fromQuery__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("yarp::os::Property::fromQuery",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromQuery",1,"yarp::os::Property *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromQuery",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Property::fromQuery",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromQuery",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->fromQuery((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromQuery__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::os::Property::fromQuery",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::fromQuery",1,"yarp::os::Property *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Property::fromQuery",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_fromQuery",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->fromQuery((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromQuery(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Property_fromQuery__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Property_fromQuery__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Property_fromQuery'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Property::fromQuery(char const *,bool)\n"
    "    yarp::os::Property::fromQuery(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Property_toString_c(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Property::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::toString",1,"yarp::os::Property const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_toString_c",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  result = ((yarp::os::Property const *)arg1)->toString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Property::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::read",1,"yarp::os::Property *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Property::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_read",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("Property_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Property::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::write",1,"yarp::os::Property *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Property::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_write",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("Property_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_toString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Property *arg1 = (yarp::os::Property *) 0 ;
  std::string result;
  
  SWIG_check_num_args("yarp::os::Property::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Property::toString",1,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("Property_toString",1,SWIGTYPE_p_yarp__os__Property);
  }
  
  result = yarp_os_Property_toString(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Property(void *obj) {
yarp::os::Property *arg1 = (yarp::os::Property *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Property_methods[] = {
    {"check", _wrap_Property_check}, 
    {"put", _wrap_Property_put}, 
    {"addGroup", _wrap_Property_addGroup}, 
    {"unput", _wrap_Property_unput}, 
    {"find", _wrap_Property_find}, 
    {"findGroup", _wrap_Property_findGroup}, 
    {"clear", _wrap_Property_clear}, 
    {"fromString", _wrap_Property_fromString}, 
    {"fromCommand", _wrap_Property_fromCommand}, 
    {"fromArguments", _wrap_Property_fromArguments}, 
    {"fromConfigFile", _wrap_Property_fromConfigFile}, 
    {"fromConfigDir", _wrap_Property_fromConfigDir}, 
    {"fromConfig", _wrap_Property_fromConfig}, 
    {"fromQuery", _wrap_Property_fromQuery}, 
    {"toString_c", _wrap_Property_toString_c}, 
    {"read", _wrap_Property_read}, 
    {"write", _wrap_Property_write}, 
    {"toString", _wrap_Property_toString}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Property_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Property_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Property_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Property_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Property_bases[] = {0,0,0};
static const char *swig_yarp_os_Property_base_names[] = {"yarp::os::Searchable *","yarp::os::Portable *",0};
static swig_lua_class _wrap_class_yarp_os_Property = { "Property", &SWIGTYPE_p_yarp__os__Property,_wrap_new_Property, swig_delete_Property, swig_yarp_os_Property_methods, swig_yarp_os_Property_attributes, { "Property", swig_yarp_os_Property_cls_methods, swig_yarp_os_Property_cls_attributes, swig_yarp_os_Property_cls_constants }, swig_yarp_os_Property_bases, swig_yarp_os_Property_base_names };

static int _wrap_Bottle_check__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("check",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Bottle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_check",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_check__SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("check",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Bottle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("check",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_check",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_check__SWIG_0_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp4 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("check",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Bottle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("check",3,"yarp::os::Value const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("check",4,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_check",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Bottle_check",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = ((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_check__SWIG_0_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("check",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::Bottle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("check",3,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_check",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Bottle_check",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = ((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_findGroup__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("findGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroup",1,"yarp::os::Bottle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findGroup",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_findGroup",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Bottle *) &((yarp::os::Bottle const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_findGroup__SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("findGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroup",1,"yarp::os::Bottle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findGroup",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("findGroup",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_findGroup",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (yarp::os::Bottle *) &((yarp::os::Bottle const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Bottle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::Bottle",0,0)
  result = (yarp::os::Bottle *)new yarp::os::Bottle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Bottle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::Bottle",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Bottle::Bottle",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (yarp::os::Bottle *)new yarp::os::Bottle((yarp::os::ConstString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Bottle__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = 0 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::Bottle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::Bottle::Bottle",1,"yarp::os::Bottle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("new_Bottle",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (yarp::os::Bottle *)new yarp::os::Bottle((yarp::os::Bottle const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Bottle(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Bottle__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Bottle__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Bottle__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Bottle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Bottle::Bottle()\n"
    "    yarp::os::Bottle::Bottle(yarp::os::ConstString const &)\n"
    "    yarp::os::Bottle::Bottle(yarp::os::Bottle const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Bottle_clear(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::clear",1,"yarp::os::Bottle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_clear",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_addInt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::os::Bottle::addInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::addInt",1,"yarp::os::Bottle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Bottle::addInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_addInt",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->addInt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_addInt64(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  YARP_INT64 *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::addInt64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::addInt64",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::addInt64",2,"YARP_INT64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_addInt64",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_YARP_INT64,0))){
    SWIG_fail_ptr("Bottle_addInt64",2,SWIGTYPE_p_YARP_INT64);
  }
  
  (arg1)->addInt64((YARP_INT64 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_addVocab(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::os::Bottle::addVocab",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::addVocab",1,"yarp::os::Bottle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Bottle::addVocab",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_addVocab",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->addVocab(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_addDouble(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::Bottle::addDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::addDouble",1,"yarp::os::Bottle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Bottle::addDouble",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_addDouble",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->addDouble(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_addString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::addString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::addString",1,"yarp::os::Bottle *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Bottle::addString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_addString",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addString((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_addString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::Bottle::addString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::addString",1,"yarp::os::Bottle *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Bottle::addString",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_addString",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->addString((yarp::os::ConstString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_addString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Bottle_addString__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Bottle_addString__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bottle_addString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Bottle::addString(char const *)\n"
    "    yarp::os::Bottle::addString(yarp::os::ConstString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Bottle_add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Value *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::add",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::add",2,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_add",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("Bottle_add",2,SWIGTYPE_p_yarp__os__Value);
  }
  
  (arg1)->add((yarp::os::Value const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_addList(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::addList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::addList",1,"yarp::os::Bottle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_addList",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (yarp::os::Bottle *) &(arg1)->addList();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_addDict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::addDict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::addDict",1,"yarp::os::Bottle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_addDict",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (yarp::os::Property *) &(arg1)->addDict();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_pop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("yarp::os::Bottle::pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::pop",1,"yarp::os::Bottle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_pop",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (arg1)->pop();
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int arg2 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::get",1,"yarp::os::Bottle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Bottle::get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_get",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (yarp::os::Value *) &((yarp::os::Bottle const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_size(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Bottle::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::size",1,"yarp::os::Bottle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_size",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (int)((yarp::os::Bottle const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_fromString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::Bottle::fromString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::fromString",1,"yarp::os::Bottle *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Bottle::fromString",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_fromString",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->fromString((yarp::os::ConstString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_fromBinary(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("yarp::os::Bottle::fromBinary",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::fromBinary",1,"yarp::os::Bottle *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Bottle::fromBinary",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::Bottle::fromBinary",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_fromBinary",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->fromBinary((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_toBinary__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::toBinary",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::toBinary",1,"yarp::os::Bottle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::Bottle::toBinary",2,"size_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_toBinary",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("Bottle_toBinary",2,SWIGTYPE_p_size_t);
  }
  
  result = (char *)(arg1)->toBinary(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_toBinary__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::toBinary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::toBinary",1,"yarp::os::Bottle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_toBinary",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (char *)(arg1)->toBinary();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_toBinary(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Bottle_toBinary__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_size_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Bottle_toBinary__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bottle_toBinary'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Bottle::toBinary(size_t *)\n"
    "    yarp::os::Bottle::toBinary()\n");
  lua_error(L);return 0;
}


static int _wrap_Bottle_toString_c(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Bottle::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::toString",1,"yarp::os::Bottle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_toString_c",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = ((yarp::os::Bottle const *)arg1)->toString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Bottle::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::write",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_write",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("Bottle_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Bottle::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::read",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_read",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("Bottle_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Bottle::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::write",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::write",2,"yarp::os::PortReader &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Bottle::write",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_write",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Bottle_write",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->write(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Bottle::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::write",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::write",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_write",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Bottle_write",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__ConnectionWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Bottle_write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Bottle_write__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Bottle_write__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bottle_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Bottle::write(yarp::os::ConnectionWriter &)\n"
    "    yarp::os::Bottle::write(yarp::os::PortReader &,bool)\n"
    "    yarp::os::Bottle::write(yarp::os::PortReader &)\n");
  lua_error(L);return 0;
}


static int _wrap_Bottle_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Bottle::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::read",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::read",2,"yarp::os::PortWriter &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::Bottle::read",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_read",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Bottle_read",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->read(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Bottle::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::read",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::read",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_read",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Bottle_read",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__ConnectionReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Bottle_read__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Bottle_read__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Bottle_read__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bottle_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Bottle::read(yarp::os::ConnectionReader &)\n"
    "    yarp::os::Bottle::read(yarp::os::PortWriter &,bool)\n"
    "    yarp::os::Bottle::read(yarp::os::PortWriter &)\n");
  lua_error(L);return 0;
}


static int _wrap_Bottle_onCommencement(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::onCommencement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::onCommencement",1,"yarp::os::Bottle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_onCommencement",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  (arg1)->onCommencement();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_check__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Bottle::check",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::check",1,"yarp::os::Bottle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Bottle::check",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_check",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((yarp::os::Bottle const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_check(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Bottle_check__SWIG_0_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Bottle_check__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Bottle_check__SWIG_0_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Bottle_check__SWIG_0_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Bottle_check__SWIG_0_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bottle_check'\n"
    "  Possible C/C++ prototypes are:\n"
    "    check(yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::Value const &,yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::Value const &) const\n"
    "    yarp::os::Bottle::check(yarp::os::ConstString const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Bottle_find(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::find",1,"yarp::os::Bottle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Bottle::find",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_find",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Value *) &((yarp::os::Bottle const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_findGroup__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::findGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::findGroup",1,"yarp::os::Bottle const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::Bottle::findGroup",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_findGroup",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Bottle *) &((yarp::os::Bottle const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_findGroup(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Bottle_findGroup__SWIG_0_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Bottle_findGroup__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Bottle_findGroup__SWIG_0_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bottle_findGroup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findGroup(yarp::os::ConstString const &) const\n"
    "    findGroup(yarp::os::ConstString const &,yarp::os::ConstString const &) const\n"
    "    yarp::os::Bottle::findGroup(yarp::os::ConstString const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Bottle_isNull(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Bottle::isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::isNull",1,"yarp::os::Bottle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_isNull",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)((yarp::os::Bottle const *)arg1)->isNull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("yarp::os::Bottle::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::copy",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::copy",2,"yarp::os::Bottle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::Bottle::copy",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::os::Bottle::copy",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_copy",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_copy",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->copy((yarp::os::Bottle const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("yarp::os::Bottle::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::copy",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::copy",2,"yarp::os::Bottle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::Bottle::copy",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_copy",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_copy",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->copy((yarp::os::Bottle const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_copy__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::copy",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::copy",2,"yarp::os::Bottle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_copy",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_copy",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  (arg1)->copy((yarp::os::Bottle const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_copy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Bottle_copy__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Bottle_copy__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Bottle_copy__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bottle_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Bottle::copy(yarp::os::Bottle const &,int,int)\n"
    "    yarp::os::Bottle::copy(yarp::os::Bottle const &,int)\n"
    "    yarp::os::Bottle::copy(yarp::os::Bottle const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Bottle_getNullBottle(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::getNullBottle",0,0)
  result = (yarp::os::Bottle *) &yarp::os::Bottle::getNullBottle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_isEqual(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Bottle::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::operator ==",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::operator ==",2,"yarp::os::Bottle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_isEqual",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_isEqual",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->operator ==((yarp::os::Bottle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_notEqual(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Bottle::operator !=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::operator !=",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::operator !=",2,"yarp::os::Bottle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_notEqual",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_notEqual",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->operator !=((yarp::os::Bottle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_append(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::append",1,"yarp::os::Bottle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Bottle::append",2,"yarp::os::Bottle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_append",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_append",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  (arg1)->append((yarp::os::Bottle const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_tail(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  yarp::os::Bottle result;
  
  SWIG_check_num_args("yarp::os::Bottle::tail",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::tail",1,"yarp::os::Bottle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_tail",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = ((yarp::os::Bottle const *)arg1)->tail();
  {
    yarp::os::Bottle * resultptr = new yarp::os::Bottle((const yarp::os::Bottle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Bottle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_hasChanged(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::hasChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::hasChanged",1,"yarp::os::Bottle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_hasChanged",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  (arg1)->hasChanged();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_toString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Bottle::toString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Bottle::toString",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = yarp::os::Bottle::toString(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_getSpecialization(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Bottle::getSpecialization",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::getSpecialization",1,"yarp::os::Bottle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_getSpecialization",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (int)(arg1)->getSpecialization();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_describeBottleCode(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::Bottle::describeBottleCode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Bottle::describeBottleCode",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = yarp::os::Bottle::describeBottleCode(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::os::Bottle::add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::add",1,"yarp::os::Bottle *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::Bottle::add",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_add",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->add((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Bottle_add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Bottle_add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bottle_add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Bottle::add(yarp::os::Value const &)\n"
    "    yarp::os::Bottle::add(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Bottle_toString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle *arg1 = (yarp::os::Bottle *) 0 ;
  std::string result;
  
  SWIG_check_num_args("yarp::os::Bottle::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Bottle::toString",1,"yarp::os::Bottle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("Bottle_toString",1,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = yarp_os_Bottle_toString__SWIG_1(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bottle_toString(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Bottle_toString__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_Bottle_toString__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bottle_toString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Bottle::toString(int)\n"
    "    yarp::os::Bottle::toString()\n");
  lua_error(L);return 0;
}


static void swig_delete_Bottle(void *obj) {
yarp::os::Bottle *arg1 = (yarp::os::Bottle *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Bottle_methods[] = {
    {"clear", _wrap_Bottle_clear}, 
    {"addInt", _wrap_Bottle_addInt}, 
    {"addInt64", _wrap_Bottle_addInt64}, 
    {"addVocab", _wrap_Bottle_addVocab}, 
    {"addDouble", _wrap_Bottle_addDouble}, 
    {"addString", _wrap_Bottle_addString}, 
    {"addList", _wrap_Bottle_addList}, 
    {"addDict", _wrap_Bottle_addDict}, 
    {"pop", _wrap_Bottle_pop}, 
    {"get", _wrap_Bottle_get}, 
    {"size", _wrap_Bottle_size}, 
    {"fromString", _wrap_Bottle_fromString}, 
    {"fromBinary", _wrap_Bottle_fromBinary}, 
    {"toBinary", _wrap_Bottle_toBinary}, 
    {"toString_c", _wrap_Bottle_toString_c}, 
    {"write", _wrap_Bottle_write}, 
    {"read", _wrap_Bottle_read}, 
    {"onCommencement", _wrap_Bottle_onCommencement}, 
    {"check", _wrap_Bottle_check}, 
    {"find", _wrap_Bottle_find}, 
    {"findGroup", _wrap_Bottle_findGroup}, 
    {"isNull", _wrap_Bottle_isNull}, 
    {"copy", _wrap_Bottle_copy}, 
    {"isEqual", _wrap_Bottle_isEqual}, 
    {"notEqual", _wrap_Bottle_notEqual}, 
    {"append", _wrap_Bottle_append}, 
    {"tail", _wrap_Bottle_tail}, 
    {"hasChanged", _wrap_Bottle_hasChanged}, 
    {"getSpecialization", _wrap_Bottle_getSpecialization}, 
    {"add", _wrap_Bottle_add}, 
    {"toString", _wrap_Bottle_toString}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Bottle_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Bottle_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Bottle_cls_methods[] = {
    {"getNullBottle", _wrap_Bottle_getNullBottle}, 
    {"describeBottleCode", _wrap_Bottle_describeBottleCode}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Bottle_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Bottle_bases[] = {0,0,0};
static const char *swig_yarp_os_Bottle_base_names[] = {"yarp::os::Portable *","yarp::os::Searchable *",0};
static swig_lua_class _wrap_class_yarp_os_Bottle = { "Bottle", &SWIGTYPE_p_yarp__os__Bottle,_wrap_new_Bottle, swig_delete_Bottle, swig_yarp_os_Bottle_methods, swig_yarp_os_Bottle_attributes, { "Bottle", swig_yarp_os_Bottle_cls_methods, swig_yarp_os_Bottle_cls_attributes, swig_yarp_os_Bottle_cls_constants }, swig_yarp_os_Bottle_bases, swig_yarp_os_Bottle_base_names };

static int _wrap_typedReaderMissingCallback(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("typedReaderMissingCallback",0,0)
  typedReaderMissingCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBaseCreator_create(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBaseCreator *arg1 = (yarp::os::impl::PortReaderBufferBaseCreator *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBaseCreator::create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBaseCreator::create",1,"yarp::os::impl::PortReaderBufferBaseCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBaseCreator,0))){
    SWIG_fail_ptr("PortReaderBufferBaseCreator_create",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBaseCreator);
  }
  
  result = (yarp::os::PortReader *)(arg1)->create();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__PortReader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortReaderBufferBaseCreator(void *obj) {
yarp::os::impl::PortReaderBufferBaseCreator *arg1 = (yarp::os::impl::PortReaderBufferBaseCreator *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_impl_PortReaderBufferBaseCreator_methods[] = {
    {"create", _wrap_PortReaderBufferBaseCreator_create}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_impl_PortReaderBufferBaseCreator_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_impl_PortReaderBufferBaseCreator_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_impl_PortReaderBufferBaseCreator_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_impl_PortReaderBufferBaseCreator_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_impl_PortReaderBufferBaseCreator_bases[] = {0};
static const char *swig_yarp_os_impl_PortReaderBufferBaseCreator_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_impl_PortReaderBufferBaseCreator = { "PortReaderBufferBaseCreator", &SWIGTYPE_p_yarp__os__impl__PortReaderBufferBaseCreator,0, swig_delete_PortReaderBufferBaseCreator, swig_yarp_os_impl_PortReaderBufferBaseCreator_methods, swig_yarp_os_impl_PortReaderBufferBaseCreator_attributes, { "PortReaderBufferBaseCreator", swig_yarp_os_impl_PortReaderBufferBaseCreator_cls_methods, swig_yarp_os_impl_PortReaderBufferBaseCreator_cls_attributes, swig_yarp_os_impl_PortReaderBufferBaseCreator_cls_constants }, swig_yarp_os_impl_PortReaderBufferBaseCreator_bases, swig_yarp_os_impl_PortReaderBufferBaseCreator_base_names };

static int _wrap_new_PortReaderBufferBase(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  yarp::os::impl::PortReaderBufferBase *result = 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::PortReaderBufferBase",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::PortReaderBufferBase",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (yarp::os::impl::PortReaderBufferBase *)new yarp::os::impl::PortReaderBufferBase(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_setCreator(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::impl::PortReaderBufferBaseCreator *arg2 = (yarp::os::impl::PortReaderBufferBaseCreator *) 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::setCreator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setCreator",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setCreator",2,"yarp::os::impl::PortReaderBufferBaseCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setCreator",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBaseCreator,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setCreator",2,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBaseCreator);
  }
  
  (arg1)->setCreator(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setReplier",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setReplier",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_setPrune__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::setPrune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setPrune",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setPrune",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setPrune",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setPrune(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_setPrune__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::setPrune",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setPrune",1,"yarp::os::impl::PortReaderBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setPrune",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  (arg1)->setPrune();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_setPrune(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PortReaderBufferBase_setPrune__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_PortReaderBufferBase_setPrune__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PortReaderBufferBase_setPrune'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::impl::PortReaderBufferBase::setPrune(bool)\n"
    "    yarp::os::impl::PortReaderBufferBase::setPrune()\n");
  lua_error(L);return 0;
}


static int _wrap_PortReaderBufferBase_setAllowReuse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::setAllowReuse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setAllowReuse",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setAllowReuse",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setAllowReuse",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAllowReuse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_setAllowReuse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::setAllowReuse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setAllowReuse",1,"yarp::os::impl::PortReaderBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setAllowReuse",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  (arg1)->setAllowReuse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_setAllowReuse(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PortReaderBufferBase_setAllowReuse__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_PortReaderBufferBase_setAllowReuse__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PortReaderBufferBase_setAllowReuse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::impl::PortReaderBufferBase::setAllowReuse(bool)\n"
    "    yarp::os::impl::PortReaderBufferBase::setAllowReuse()\n");
  lua_error(L);return 0;
}


static int _wrap_PortReaderBufferBase_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setTargetPeriod",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setTargetPeriod",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::getName",1,"yarp::os::impl::PortReaderBufferBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_getName",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  result = ((yarp::os::impl::PortReaderBufferBase const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_getMaxBuffer(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::getMaxBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::getMaxBuffer",1,"yarp::os::impl::PortReaderBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_getMaxBuffer",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  result = (unsigned int)(arg1)->getMaxBuffer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::isClosed",1,"yarp::os::impl::PortReaderBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_isClosed",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_clear(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::clear",1,"yarp::os::impl::PortReaderBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_clear",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_create(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::create",1,"yarp::os::impl::PortReaderBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_create",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  result = (yarp::os::PortReader *)(arg1)->create();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__PortReader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_release__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::release",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::release",2,"yarp::os::PortReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_release",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("PortReaderBufferBase_release",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_check(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::check",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::check",1,"yarp::os::impl::PortReaderBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_check",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  result = (int)(arg1)->check();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::read",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_read",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("PortReaderBufferBase_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_readBase(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  yarp::os::PortReader *result = 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::readBase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::readBase",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::readBase",2,"bool &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::readBase",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_readBase",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("PortReaderBufferBase_readBase",2,SWIGTYPE_p_bool);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (yarp::os::PortReader *)(arg1)->readBase(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__PortReader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::interrupt",1,"yarp::os::impl::PortReaderBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_interrupt",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_attachBase(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::attachBase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::attachBase",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::attachBase",2,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_attachBase",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("PortReaderBufferBase_attachBase",2,SWIGTYPE_p_yarp__os__Port);
  }
  
  (arg1)->attachBase(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_acceptObjectBase(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::acceptObjectBase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::acceptObjectBase",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::acceptObjectBase",2,"yarp::os::PortReader *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::acceptObjectBase",3,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_acceptObjectBase",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("PortReaderBufferBase_acceptObjectBase",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("PortReaderBufferBase_acceptObjectBase",3,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->acceptObjectBase(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_forgetObjectBase(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::forgetObjectBase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::forgetObjectBase",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::forgetObjectBase",2,"yarp::os::PortReader *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::forgetObjectBase",3,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_forgetObjectBase",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("PortReaderBufferBase_forgetObjectBase",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("PortReaderBufferBase_forgetObjectBase",3,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->forgetObjectBase(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::getEnvelope",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_getEnvelope",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("PortReaderBufferBase_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::acquire",1,"yarp::os::impl::PortReaderBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_acquire",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_release__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::release",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_release",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PortReaderBufferBase_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_release(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PortReaderBufferBase_release__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PortReaderBufferBase_release__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PortReaderBufferBase_release'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::impl::PortReaderBufferBase::release(yarp::os::PortReader *)\n"
    "    yarp::os::impl::PortReaderBufferBase::release(void *)\n");
  lua_error(L);return 0;
}


static int _wrap_PortReaderBufferBase_setAutoRelease__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::setAutoRelease",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setAutoRelease",1,"yarp::os::impl::PortReaderBufferBase *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setAutoRelease",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setAutoRelease",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAutoRelease(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_setAutoRelease__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) 0 ;
  
  SWIG_check_num_args("yarp::os::impl::PortReaderBufferBase::setAutoRelease",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::impl::PortReaderBufferBase::setAutoRelease",1,"yarp::os::impl::PortReaderBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,0))){
    SWIG_fail_ptr("PortReaderBufferBase_setAutoRelease",1,SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase);
  }
  
  (arg1)->setAutoRelease();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortReaderBufferBase_setAutoRelease(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PortReaderBufferBase_setAutoRelease__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_PortReaderBufferBase_setAutoRelease__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PortReaderBufferBase_setAutoRelease'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::impl::PortReaderBufferBase::setAutoRelease(bool)\n"
    "    yarp::os::impl::PortReaderBufferBase::setAutoRelease()\n");
  lua_error(L);return 0;
}


static void swig_delete_PortReaderBufferBase(void *obj) {
yarp::os::impl::PortReaderBufferBase *arg1 = (yarp::os::impl::PortReaderBufferBase *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_impl_PortReaderBufferBase_methods[] = {
    {"setCreator", _wrap_PortReaderBufferBase_setCreator}, 
    {"setReplier", _wrap_PortReaderBufferBase_setReplier}, 
    {"setPrune", _wrap_PortReaderBufferBase_setPrune}, 
    {"setAllowReuse", _wrap_PortReaderBufferBase_setAllowReuse}, 
    {"setTargetPeriod", _wrap_PortReaderBufferBase_setTargetPeriod}, 
    {"getName", _wrap_PortReaderBufferBase_getName}, 
    {"getMaxBuffer", _wrap_PortReaderBufferBase_getMaxBuffer}, 
    {"isClosed", _wrap_PortReaderBufferBase_isClosed}, 
    {"clear", _wrap_PortReaderBufferBase_clear}, 
    {"create", _wrap_PortReaderBufferBase_create}, 
    {"check", _wrap_PortReaderBufferBase_check}, 
    {"read", _wrap_PortReaderBufferBase_read}, 
    {"readBase", _wrap_PortReaderBufferBase_readBase}, 
    {"interrupt", _wrap_PortReaderBufferBase_interrupt}, 
    {"attachBase", _wrap_PortReaderBufferBase_attachBase}, 
    {"acceptObjectBase", _wrap_PortReaderBufferBase_acceptObjectBase}, 
    {"forgetObjectBase", _wrap_PortReaderBufferBase_forgetObjectBase}, 
    {"getEnvelope", _wrap_PortReaderBufferBase_getEnvelope}, 
    {"acquire", _wrap_PortReaderBufferBase_acquire}, 
    {"release", _wrap_PortReaderBufferBase_release}, 
    {"setAutoRelease", _wrap_PortReaderBufferBase_setAutoRelease}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_impl_PortReaderBufferBase_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_impl_PortReaderBufferBase_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_impl_PortReaderBufferBase_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_impl_PortReaderBufferBase_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_impl_PortReaderBufferBase_bases[] = {0,0};
static const char *swig_yarp_os_impl_PortReaderBufferBase_base_names[] = {"yarp::os::PortReader *",0};
static swig_lua_class _wrap_class_yarp_os_impl_PortReaderBufferBase = { "PortReaderBufferBase", &SWIGTYPE_p_yarp__os__impl__PortReaderBufferBase,_wrap_new_PortReaderBufferBase, swig_delete_PortReaderBufferBase, swig_yarp_os_impl_PortReaderBufferBase_methods, swig_yarp_os_impl_PortReaderBufferBase_attributes, { "PortReaderBufferBase", swig_yarp_os_impl_PortReaderBufferBase_cls_methods, swig_yarp_os_impl_PortReaderBufferBase_cls_attributes, swig_yarp_os_impl_PortReaderBufferBase_cls_constants }, swig_yarp_os_impl_PortReaderBufferBase_bases, swig_yarp_os_impl_PortReaderBufferBase_base_names };

static int _wrap_PortWriterBufferManager_onCompletion(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriterBufferManager *arg1 = (yarp::os::PortWriterBufferManager *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::PortWriterBufferManager::onCompletion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriterBufferManager::onCompletion",1,"yarp::os::PortWriterBufferManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::PortWriterBufferManager::onCompletion",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriterBufferManager,0))){
    SWIG_fail_ptr("PortWriterBufferManager_onCompletion",1,SWIGTYPE_p_yarp__os__PortWriterBufferManager);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PortWriterBufferManager_onCompletion");
  (arg1)->onCompletion(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortWriterBufferManager(void *obj) {
yarp::os::PortWriterBufferManager *arg1 = (yarp::os::PortWriterBufferManager *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_PortWriterBufferManager_methods[] = {
    {"onCompletion", _wrap_PortWriterBufferManager_onCompletion}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_PortWriterBufferManager_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_PortWriterBufferManager_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_PortWriterBufferManager_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_PortWriterBufferManager_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_PortWriterBufferManager_bases[] = {0};
static const char *swig_yarp_os_PortWriterBufferManager_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_PortWriterBufferManager = { "PortWriterBufferManager", &SWIGTYPE_p_yarp__os__PortWriterBufferManager,0, swig_delete_PortWriterBufferManager, swig_yarp_os_PortWriterBufferManager_methods, swig_yarp_os_PortWriterBufferManager_attributes, { "PortWriterBufferManager", swig_yarp_os_PortWriterBufferManager_cls_methods, swig_yarp_os_PortWriterBufferManager_cls_attributes, swig_yarp_os_PortWriterBufferManager_cls_constants }, swig_yarp_os_PortWriterBufferManager_bases, swig_yarp_os_PortWriterBufferManager_base_names };

static int _wrap_PortWriterWrapper_getInternal(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriterWrapper *arg1 = (yarp::os::PortWriterWrapper *) 0 ;
  yarp::os::PortWriter *result = 0 ;
  
  SWIG_check_num_args("yarp::os::PortWriterWrapper::getInternal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriterWrapper::getInternal",1,"yarp::os::PortWriterWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriterWrapper,0))){
    SWIG_fail_ptr("PortWriterWrapper_getInternal",1,SWIGTYPE_p_yarp__os__PortWriterWrapper);
  }
  
  result = (yarp::os::PortWriter *)(arg1)->getInternal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__PortWriter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortWriterWrapper(void *obj) {
yarp::os::PortWriterWrapper *arg1 = (yarp::os::PortWriterWrapper *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_PortWriterWrapper_methods[] = {
    {"getInternal", _wrap_PortWriterWrapper_getInternal}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_PortWriterWrapper_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_PortWriterWrapper_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_PortWriterWrapper_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_PortWriterWrapper_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_PortWriterWrapper_bases[] = {0,0};
static const char *swig_yarp_os_PortWriterWrapper_base_names[] = {"yarp::os::PortWriter *",0};
static swig_lua_class _wrap_class_yarp_os_PortWriterWrapper = { "PortWriterWrapper", &SWIGTYPE_p_yarp__os__PortWriterWrapper,0, swig_delete_PortWriterWrapper, swig_yarp_os_PortWriterWrapper_methods, swig_yarp_os_PortWriterWrapper_attributes, { "PortWriterWrapper", swig_yarp_os_PortWriterWrapper_cls_methods, swig_yarp_os_PortWriterWrapper_cls_attributes, swig_yarp_os_PortWriterWrapper_cls_constants }, swig_yarp_os_PortWriterWrapper_bases, swig_yarp_os_PortWriterWrapper_base_names };

static int _wrap_PortWriterBufferBase_create(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  yarp::os::PortWriterBufferManager *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  yarp::os::PortWriterWrapper *result = 0 ;
  
  SWIG_check_num_args("yarp::os::PortWriterBufferBase::create",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::create",1,"yarp::os::PortWriterBufferBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::create",2,"yarp::os::PortWriterBufferManager &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::create",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriterBufferBase,0))){
    SWIG_fail_ptr("PortWriterBufferBase_create",1,SWIGTYPE_p_yarp__os__PortWriterBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriterBufferManager,0))){
    SWIG_fail_ptr("PortWriterBufferBase_create",2,SWIGTYPE_p_yarp__os__PortWriterBufferManager);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PortWriterBufferBase_create");
  result = (yarp::os::PortWriterWrapper *)(arg1)->create(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__PortWriterWrapper,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortWriterBufferBase_getContent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::PortWriterBufferBase::getContent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::getContent",1,"yarp::os::PortWriterBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriterBufferBase,0))){
    SWIG_fail_ptr("PortWriterBufferBase_getContent",1,SWIGTYPE_p_yarp__os__PortWriterBufferBase);
  }
  
  result = (void *)(arg1)->getContent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortWriterBufferBase_releaseContent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::PortWriterBufferBase::releaseContent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::releaseContent",1,"yarp::os::PortWriterBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriterBufferBase,0))){
    SWIG_fail_ptr("PortWriterBufferBase_releaseContent",1,SWIGTYPE_p_yarp__os__PortWriterBufferBase);
  }
  
  result = (bool)(arg1)->releaseContent();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortWriterBufferBase_getCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::PortWriterBufferBase::getCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::getCount",1,"yarp::os::PortWriterBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriterBufferBase,0))){
    SWIG_fail_ptr("PortWriterBufferBase_getCount",1,SWIGTYPE_p_yarp__os__PortWriterBufferBase);
  }
  
  result = (int)(arg1)->getCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortWriterBufferBase_attach(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::PortWriterBufferBase::attach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::attach",1,"yarp::os::PortWriterBufferBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::attach",2,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriterBufferBase,0))){
    SWIG_fail_ptr("PortWriterBufferBase_attach",1,SWIGTYPE_p_yarp__os__PortWriterBufferBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("PortWriterBufferBase_attach",2,SWIGTYPE_p_yarp__os__Port);
  }
  
  (arg1)->attach(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortWriterBufferBase_detach(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  
  SWIG_check_num_args("yarp::os::PortWriterBufferBase::detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::detach",1,"yarp::os::PortWriterBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriterBufferBase,0))){
    SWIG_fail_ptr("PortWriterBufferBase_detach",1,SWIGTYPE_p_yarp__os__PortWriterBufferBase);
  }
  
  (arg1)->detach();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortWriterBufferBase_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::PortWriterBufferBase::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::write",1,"yarp::os::PortWriterBufferBase *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriterBufferBase,0))){
    SWIG_fail_ptr("PortWriterBufferBase_write",1,SWIGTYPE_p_yarp__os__PortWriterBufferBase);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortWriterBufferBase_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) 0 ;
  
  SWIG_check_num_args("yarp::os::PortWriterBufferBase::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::PortWriterBufferBase::waitForWrite",1,"yarp::os::PortWriterBufferBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__PortWriterBufferBase,0))){
    SWIG_fail_ptr("PortWriterBufferBase_waitForWrite",1,SWIGTYPE_p_yarp__os__PortWriterBufferBase);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortWriterBufferBase(void *obj) {
yarp::os::PortWriterBufferBase *arg1 = (yarp::os::PortWriterBufferBase *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_PortWriterBufferBase_methods[] = {
    {"create", _wrap_PortWriterBufferBase_create}, 
    {"getContent", _wrap_PortWriterBufferBase_getContent}, 
    {"releaseContent", _wrap_PortWriterBufferBase_releaseContent}, 
    {"getCount", _wrap_PortWriterBufferBase_getCount}, 
    {"attach", _wrap_PortWriterBufferBase_attach}, 
    {"detach", _wrap_PortWriterBufferBase_detach}, 
    {"write", _wrap_PortWriterBufferBase_write}, 
    {"waitForWrite", _wrap_PortWriterBufferBase_waitForWrite}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_PortWriterBufferBase_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_PortWriterBufferBase_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_PortWriterBufferBase_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_PortWriterBufferBase_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_PortWriterBufferBase_bases[] = {0};
static const char *swig_yarp_os_PortWriterBufferBase_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_PortWriterBufferBase = { "PortWriterBufferBase", &SWIGTYPE_p_yarp__os__PortWriterBufferBase,0, swig_delete_PortWriterBufferBase, swig_yarp_os_PortWriterBufferBase_methods, swig_yarp_os_PortWriterBufferBase_attributes, { "PortWriterBufferBase", swig_yarp_os_PortWriterBufferBase_cls_methods, swig_yarp_os_PortWriterBufferBase_cls_attributes, swig_yarp_os_PortWriterBufferBase_cls_constants }, swig_yarp_os_PortWriterBufferBase_bases, swig_yarp_os_PortWriterBufferBase_base_names };

static int _wrap_Random_uniform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("yarp::os::Random::uniform",0,0)
  result = (double)yarp::os::Random::uniform();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_normal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("yarp::os::Random::normal",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Random::normal",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Random::normal",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)yarp::os::Random::normal(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_seed_c(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("yarp::os::Random::seed",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Random::seed",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  yarp::os::Random::seed(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_normal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("yarp::os::Random::normal",0,0)
  result = (double)yarp::os::Random::normal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_normal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_Random_normal__SWIG_1(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Random_normal__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Random_normal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Random::normal(double,double)\n"
    "    yarp::os::Random::normal()\n");
  lua_error(L);return 0;
}


static int _wrap_Random_uniform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Random::uniform",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Random::uniform",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Random::uniform",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)yarp::os::Random::uniform(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_uniform(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_Random_uniform__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Random_uniform__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Random_uniform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Random::uniform()\n"
    "    yarp::os::Random::uniform(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Random(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Random *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Random::Random",0,0)
  result = (yarp::os::Random *)new yarp::os::Random();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Random,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Random(void *obj) {
yarp::os::Random *arg1 = (yarp::os::Random *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Random_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Random_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Random_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Random_cls_methods[] = {
    {"seed_c", _wrap_Random_seed_c}, 
    {"normal", _wrap_Random_normal}, 
    {"uniform", _wrap_Random_uniform}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Random_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Random_bases[] = {0};
static const char *swig_yarp_os_Random_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_Random = { "Random", &SWIGTYPE_p_yarp__os__Random,_wrap_new_Random, swig_delete_Random, swig_yarp_os_Random_methods, swig_yarp_os_Random_attributes, { "Random", swig_yarp_os_Random_cls_methods, swig_yarp_os_Random_cls_attributes, swig_yarp_os_Random_cls_constants }, swig_yarp_os_Random_bases, swig_yarp_os_Random_base_names };

static int _wrap_new_Semaphore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  yarp::os::Semaphore *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Semaphore::Semaphore",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Semaphore::Semaphore",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (yarp::os::Semaphore *)new yarp::os::Semaphore(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Semaphore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Semaphore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Semaphore *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Semaphore::Semaphore",0,0)
  result = (yarp::os::Semaphore *)new yarp::os::Semaphore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Semaphore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Semaphore(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Semaphore__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Semaphore__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Semaphore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Semaphore::Semaphore(unsigned int)\n"
    "    yarp::os::Semaphore::Semaphore()\n");
  lua_error(L);return 0;
}


static int _wrap_Semaphore_wait(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  
  SWIG_check_num_args("yarp::os::Semaphore::wait",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Semaphore::wait",1,"yarp::os::Semaphore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Semaphore,0))){
    SWIG_fail_ptr("Semaphore_wait",1,SWIGTYPE_p_yarp__os__Semaphore);
  }
  
  (arg1)->wait();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Semaphore_waitWithTimeout(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Semaphore::waitWithTimeout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Semaphore::waitWithTimeout",1,"yarp::os::Semaphore *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Semaphore::waitWithTimeout",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Semaphore,0))){
    SWIG_fail_ptr("Semaphore_waitWithTimeout",1,SWIGTYPE_p_yarp__os__Semaphore);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->waitWithTimeout(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Semaphore_check(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Semaphore::check",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Semaphore::check",1,"yarp::os::Semaphore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Semaphore,0))){
    SWIG_fail_ptr("Semaphore_check",1,SWIGTYPE_p_yarp__os__Semaphore);
  }
  
  result = (bool)(arg1)->check();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Semaphore_post(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) 0 ;
  
  SWIG_check_num_args("yarp::os::Semaphore::post",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Semaphore::post",1,"yarp::os::Semaphore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Semaphore,0))){
    SWIG_fail_ptr("Semaphore_post",1,SWIGTYPE_p_yarp__os__Semaphore);
  }
  
  (arg1)->post();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Semaphore(void *obj) {
yarp::os::Semaphore *arg1 = (yarp::os::Semaphore *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Semaphore_methods[] = {
    {"wait", _wrap_Semaphore_wait}, 
    {"waitWithTimeout", _wrap_Semaphore_waitWithTimeout}, 
    {"check", _wrap_Semaphore_check}, 
    {"post", _wrap_Semaphore_post}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Semaphore_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Semaphore_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Semaphore_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Semaphore_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Semaphore_bases[] = {0};
static const char *swig_yarp_os_Semaphore_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_Semaphore = { "Semaphore", &SWIGTYPE_p_yarp__os__Semaphore,_wrap_new_Semaphore, swig_delete_Semaphore, swig_yarp_os_Semaphore_methods, swig_yarp_os_Semaphore_attributes, { "Semaphore", swig_yarp_os_Semaphore_cls_methods, swig_yarp_os_Semaphore_cls_attributes, swig_yarp_os_Semaphore_cls_constants }, swig_yarp_os_Semaphore_bases, swig_yarp_os_Semaphore_base_names };

static int _wrap_Thread_run(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  SWIG_check_num_args("yarp::os::Thread::run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::run",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_run",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  (arg1)->run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_onStop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  SWIG_check_num_args("yarp::os::Thread::onStop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::onStop",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_onStop",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  (arg1)->onStop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_start(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Thread::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::start",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_start",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  result = (bool)(arg1)->start();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_stop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Thread::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::stop",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_stop",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  result = (bool)(arg1)->stop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_beforeStart(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  SWIG_check_num_args("yarp::os::Thread::beforeStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::beforeStart",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_beforeStart",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  (arg1)->beforeStart();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_afterStart(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::Thread::afterStart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::afterStart",1,"yarp::os::Thread *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::Thread::afterStart",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_afterStart",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->afterStart(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_threadInit(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Thread::threadInit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::threadInit",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_threadInit",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  result = (bool)(arg1)->threadInit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_threadRelease(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  SWIG_check_num_args("yarp::os::Thread::threadRelease",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::threadRelease",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_threadRelease",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  (arg1)->threadRelease();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_isStopping(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Thread::isStopping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::isStopping",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_isStopping",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  result = (bool)(arg1)->isStopping();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_isRunning(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Thread::isRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::isRunning",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_isRunning",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  result = (bool)(arg1)->isRunning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_setOptions__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::os::Thread::setOptions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::setOptions",1,"yarp::os::Thread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Thread::setOptions",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_setOptions",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setOptions(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_setOptions__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  
  SWIG_check_num_args("yarp::os::Thread::setOptions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::setOptions",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_setOptions",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  (arg1)->setOptions();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_setOptions(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Thread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Thread_setOptions__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Thread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Thread_setOptions__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Thread_setOptions'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Thread::setOptions(int)\n"
    "    yarp::os::Thread::setOptions()\n");
  lua_error(L);return 0;
}


static int _wrap_Thread_getCount(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("yarp::os::Thread::getCount",0,0)
  result = (int)yarp::os::Thread::getCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_getKey(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  long result;
  
  SWIG_check_num_args("yarp::os::Thread::getKey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::getKey",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_getKey",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  result = (long)(arg1)->getKey();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_getKeyOfCaller(lua_State* L) {
  int SWIG_arg = 0;
  long result;
  
  SWIG_check_num_args("yarp::os::Thread::getKeyOfCaller",0,0)
  result = (long)yarp::os::Thread::getKeyOfCaller();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_setPriority__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Thread::setPriority",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::setPriority",1,"yarp::os::Thread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Thread::setPriority",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::Thread::setPriority",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_setPriority",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->setPriority(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_setPriority__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Thread::setPriority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::setPriority",1,"yarp::os::Thread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Thread::setPriority",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_setPriority",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->setPriority(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_setPriority(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Thread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Thread_setPriority__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Thread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Thread_setPriority__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Thread_setPriority'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Thread::setPriority(int,int)\n"
    "    yarp::os::Thread::setPriority(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Thread_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Thread::getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::getPriority",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_getPriority",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  result = (int)(arg1)->getPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_getPolicy(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Thread::getPolicy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::getPolicy",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_getPolicy",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  result = (int)(arg1)->getPolicy();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_setDefaultStackSize(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("yarp::os::Thread::setDefaultStackSize",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Thread::setDefaultStackSize",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  yarp::os::Thread::setDefaultStackSize(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_join__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Thread::join",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::join",1,"yarp::os::Thread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Thread::join",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_join",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->join(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_join__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Thread *arg1 = (yarp::os::Thread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Thread::join",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Thread::join",1,"yarp::os::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Thread,0))){
    SWIG_fail_ptr("Thread_join",1,SWIGTYPE_p_yarp__os__Thread);
  }
  
  result = (bool)(arg1)->join();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_join(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Thread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Thread_join__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Thread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Thread_join__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Thread_join'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Thread::join(double)\n"
    "    yarp::os::Thread::join()\n");
  lua_error(L);return 0;
}


static void swig_delete_Thread(void *obj) {
yarp::os::Thread *arg1 = (yarp::os::Thread *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Thread_methods[] = {
    {"run", _wrap_Thread_run}, 
    {"onStop", _wrap_Thread_onStop}, 
    {"start", _wrap_Thread_start}, 
    {"stop", _wrap_Thread_stop}, 
    {"beforeStart", _wrap_Thread_beforeStart}, 
    {"afterStart", _wrap_Thread_afterStart}, 
    {"threadInit", _wrap_Thread_threadInit}, 
    {"threadRelease", _wrap_Thread_threadRelease}, 
    {"isStopping", _wrap_Thread_isStopping}, 
    {"isRunning", _wrap_Thread_isRunning}, 
    {"setOptions", _wrap_Thread_setOptions}, 
    {"getKey", _wrap_Thread_getKey}, 
    {"setPriority", _wrap_Thread_setPriority}, 
    {"getPriority", _wrap_Thread_getPriority}, 
    {"getPolicy", _wrap_Thread_getPolicy}, 
    {"join", _wrap_Thread_join}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Thread_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Thread_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Thread_cls_methods[] = {
    {"getCount", _wrap_Thread_getCount}, 
    {"getKeyOfCaller", _wrap_Thread_getKeyOfCaller}, 
    {"setDefaultStackSize", _wrap_Thread_setDefaultStackSize}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Thread_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Thread_bases[] = {0};
static const char *swig_yarp_os_Thread_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_Thread = { "Thread", &SWIGTYPE_p_yarp__os__Thread,0, swig_delete_Thread, swig_yarp_os_Thread_methods, swig_yarp_os_Thread_attributes, { "Thread", swig_yarp_os_Thread_cls_methods, swig_yarp_os_Thread_cls_attributes, swig_yarp_os_Thread_cls_constants }, swig_yarp_os_Thread_bases, swig_yarp_os_Thread_base_names };

static int _wrap_RateThread_threadInit(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThread::threadInit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::threadInit",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_threadInit",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (bool)(arg1)->threadInit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_threadRelease(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThread::threadRelease",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::threadRelease",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_threadRelease",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  (arg1)->threadRelease();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_run(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThread::run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::run",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_run",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  (arg1)->run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_start(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThread::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::start",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_start",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (bool)(arg1)->start();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_step(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThread::step",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::step",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_step",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (bool)(arg1)->step();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_stop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThread::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::stop",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_stop",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_askToStop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThread::askToStop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::askToStop",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_askToStop",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  (arg1)->askToStop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_isRunning(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThread::isRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::isRunning",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_isRunning",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (bool)(arg1)->isRunning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_isSuspended(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThread::isSuspended",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::isSuspended",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_isSuspended",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (bool)(arg1)->isSuspended();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_setRate(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThread::setRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::setRate",1,"yarp::os::RateThread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::RateThread::setRate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_setRate",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setRate(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_getRate(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::os::RateThread::getRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::getRate",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_getRate",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (double)(arg1)->getRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_suspend(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThread::suspend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::suspend",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_suspend",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  (arg1)->suspend();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThread::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::resume",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_resume",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_resetStat(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThread::resetStat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::resetStat",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_resetStat",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  (arg1)->resetStat();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_getEstPeriod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::os::RateThread::getEstPeriod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::getEstPeriod",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_getEstPeriod",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (double)(arg1)->getEstPeriod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_getEstPeriod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::RateThread::getEstPeriod",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::getEstPeriod",1,"yarp::os::RateThread *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RateThread::getEstPeriod",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::RateThread::getEstPeriod",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_getEstPeriod",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RateThread_getEstPeriod",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RateThread_getEstPeriod",3,SWIGTYPE_p_double);
  }
  
  (arg1)->getEstPeriod(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_getEstPeriod(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RateThread_getEstPeriod__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RateThread_getEstPeriod__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RateThread_getEstPeriod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RateThread::getEstPeriod()\n"
    "    yarp::os::RateThread::getEstPeriod(double &,double &)\n");
  lua_error(L);return 0;
}


static int _wrap_RateThread_getIterations(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::os::RateThread::getIterations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::getIterations",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_getIterations",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (unsigned int)(arg1)->getIterations();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_getEstUsed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::os::RateThread::getEstUsed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::getEstUsed",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_getEstUsed",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (double)(arg1)->getEstUsed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_getEstUsed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::RateThread::getEstUsed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::getEstUsed",1,"yarp::os::RateThread *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RateThread::getEstUsed",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::RateThread::getEstUsed",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_getEstUsed",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RateThread_getEstUsed",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RateThread_getEstUsed",3,SWIGTYPE_p_double);
  }
  
  (arg1)->getEstUsed(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_getEstUsed(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RateThread_getEstUsed__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RateThread_getEstUsed__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RateThread_getEstUsed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RateThread::getEstUsed()\n"
    "    yarp::os::RateThread::getEstUsed(double &,double &)\n");
  lua_error(L);return 0;
}


static int _wrap_RateThread_beforeStart(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThread::beforeStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::beforeStart",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_beforeStart",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  (arg1)->beforeStart();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_afterStart(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::RateThread::afterStart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::afterStart",1,"yarp::os::RateThread *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::RateThread::afterStart",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_afterStart",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->afterStart(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_setPriority__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("yarp::os::RateThread::setPriority",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::setPriority",1,"yarp::os::RateThread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::RateThread::setPriority",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::RateThread::setPriority",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_setPriority",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->setPriority(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_setPriority__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("yarp::os::RateThread::setPriority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::setPriority",1,"yarp::os::RateThread *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::RateThread::setPriority",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_setPriority",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->setPriority(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_setPriority(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RateThread_setPriority__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RateThread_setPriority__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RateThread_setPriority'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RateThread::setPriority(int,int)\n"
    "    yarp::os::RateThread::setPriority(int)\n");
  lua_error(L);return 0;
}


static int _wrap_RateThread_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::RateThread::getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::getPriority",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_getPriority",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (int)(arg1)->getPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThread_getPolicy(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThread *arg1 = (yarp::os::RateThread *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::RateThread::getPolicy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThread::getPolicy",1,"yarp::os::RateThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThread,0))){
    SWIG_fail_ptr("RateThread_getPolicy",1,SWIGTYPE_p_yarp__os__RateThread);
  }
  
  result = (int)(arg1)->getPolicy();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RateThread(void *obj) {
yarp::os::RateThread *arg1 = (yarp::os::RateThread *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_RateThread_methods[] = {
    {"threadInit", _wrap_RateThread_threadInit}, 
    {"threadRelease", _wrap_RateThread_threadRelease}, 
    {"run", _wrap_RateThread_run}, 
    {"start", _wrap_RateThread_start}, 
    {"step", _wrap_RateThread_step}, 
    {"stop", _wrap_RateThread_stop}, 
    {"askToStop", _wrap_RateThread_askToStop}, 
    {"isRunning", _wrap_RateThread_isRunning}, 
    {"isSuspended", _wrap_RateThread_isSuspended}, 
    {"setRate", _wrap_RateThread_setRate}, 
    {"getRate", _wrap_RateThread_getRate}, 
    {"suspend", _wrap_RateThread_suspend}, 
    {"resume", _wrap_RateThread_resume}, 
    {"resetStat", _wrap_RateThread_resetStat}, 
    {"getEstPeriod", _wrap_RateThread_getEstPeriod}, 
    {"getIterations", _wrap_RateThread_getIterations}, 
    {"getEstUsed", _wrap_RateThread_getEstUsed}, 
    {"beforeStart", _wrap_RateThread_beforeStart}, 
    {"afterStart", _wrap_RateThread_afterStart}, 
    {"setPriority", _wrap_RateThread_setPriority}, 
    {"getPriority", _wrap_RateThread_getPriority}, 
    {"getPolicy", _wrap_RateThread_getPolicy}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_RateThread_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_RateThread_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_RateThread_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_RateThread_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_RateThread_bases[] = {0};
static const char *swig_yarp_os_RateThread_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_RateThread = { "RateThread", &SWIGTYPE_p_yarp__os__RateThread,0, swig_delete_RateThread, swig_yarp_os_RateThread_methods, swig_yarp_os_RateThread_attributes, { "RateThread", swig_yarp_os_RateThread_cls_methods, swig_yarp_os_RateThread_cls_attributes, swig_yarp_os_RateThread_cls_constants }, swig_yarp_os_RateThread_bases, swig_yarp_os_RateThread_base_names };

static int _wrap_new_RateThreadWrapper__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *result = 0 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::RateThreadWrapper",0,0)
  result = (yarp::os::RateThreadWrapper *)new yarp::os::RateThreadWrapper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__RateThreadWrapper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RateThreadWrapper__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Runnable *arg1 = (Runnable *) 0 ;
  yarp::os::RateThreadWrapper *result = 0 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::RateThreadWrapper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::RateThreadWrapper",1,"Runnable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Runnable,0))){
    SWIG_fail_ptr("new_RateThreadWrapper",1,SWIGTYPE_p_Runnable);
  }
  
  result = (yarp::os::RateThreadWrapper *)new yarp::os::RateThreadWrapper(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__RateThreadWrapper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RateThreadWrapper__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Runnable *arg1 = 0 ;
  yarp::os::RateThreadWrapper *result = 0 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::RateThreadWrapper",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::RateThreadWrapper",1,"Runnable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Runnable,0))){
    SWIG_fail_ptr("new_RateThreadWrapper",1,SWIGTYPE_p_Runnable);
  }
  
  result = (yarp::os::RateThreadWrapper *)new yarp::os::RateThreadWrapper(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__RateThreadWrapper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RateThreadWrapper(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RateThreadWrapper__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Runnable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RateThreadWrapper__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Runnable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RateThreadWrapper__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RateThreadWrapper'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RateThreadWrapper::RateThreadWrapper()\n"
    "    yarp::os::RateThreadWrapper::RateThreadWrapper(Runnable *)\n"
    "    yarp::os::RateThreadWrapper::RateThreadWrapper(Runnable &)\n");
  lua_error(L);return 0;
}


static int _wrap_RateThreadWrapper_detach(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::detach",1,"yarp::os::RateThreadWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_detach",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  (arg1)->detach();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_attach__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  Runnable *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::attach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::attach",1,"yarp::os::RateThreadWrapper *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RateThreadWrapper::attach",2,"Runnable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_attach",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Runnable,0))){
    SWIG_fail_ptr("RateThreadWrapper_attach",2,SWIGTYPE_p_Runnable);
  }
  
  result = (bool)(arg1)->attach(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_attach__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  Runnable *arg2 = (Runnable *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::attach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::attach",1,"yarp::os::RateThreadWrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::RateThreadWrapper::attach",2,"Runnable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_attach",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Runnable,0))){
    SWIG_fail_ptr("RateThreadWrapper_attach",2,SWIGTYPE_p_Runnable);
  }
  
  result = (bool)(arg1)->attach(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_attach(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThreadWrapper, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Runnable, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RateThreadWrapper_attach__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThreadWrapper, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Runnable, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RateThreadWrapper_attach__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RateThreadWrapper_attach'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RateThreadWrapper::attach(Runnable &)\n"
    "    yarp::os::RateThreadWrapper::attach(Runnable *)\n");
  lua_error(L);return 0;
}


static int _wrap_RateThreadWrapper_open__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  double arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::open",1,"yarp::os::RateThreadWrapper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::RateThreadWrapper::open",2,"double");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::RateThreadWrapper::open",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_open",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->open(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_open__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::open",1,"yarp::os::RateThreadWrapper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::RateThreadWrapper::open",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_open",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->open(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_open__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::open",1,"yarp::os::RateThreadWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_open",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  result = (bool)(arg1)->open();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_open(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThreadWrapper, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RateThreadWrapper_open__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThreadWrapper, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RateThreadWrapper_open__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RateThreadWrapper, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_RateThreadWrapper_open__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RateThreadWrapper_open'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RateThreadWrapper::open(double,bool)\n"
    "    yarp::os::RateThreadWrapper::open(double)\n"
    "    yarp::os::RateThreadWrapper::open()\n");
  lua_error(L);return 0;
}


static int _wrap_RateThreadWrapper_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::close",1,"yarp::os::RateThreadWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_close",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_stop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::stop",1,"yarp::os::RateThreadWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_stop",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_run(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::run",1,"yarp::os::RateThreadWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_run",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  (arg1)->run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_threadInit(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::threadInit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::threadInit",1,"yarp::os::RateThreadWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_threadInit",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  result = (bool)(arg1)->threadInit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_threadRelease(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::threadRelease",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::threadRelease",1,"yarp::os::RateThreadWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_threadRelease",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  (arg1)->threadRelease();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_afterStart(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::afterStart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::afterStart",1,"yarp::os::RateThreadWrapper *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::RateThreadWrapper::afterStart",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_afterStart",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->afterStart(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_beforeStart(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::beforeStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::beforeStart",1,"yarp::os::RateThreadWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_beforeStart",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  (arg1)->beforeStart();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RateThreadWrapper_getAttachment(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) 0 ;
  Runnable *result = 0 ;
  
  SWIG_check_num_args("yarp::os::RateThreadWrapper::getAttachment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RateThreadWrapper::getAttachment",1,"yarp::os::RateThreadWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RateThreadWrapper,0))){
    SWIG_fail_ptr("RateThreadWrapper_getAttachment",1,SWIGTYPE_p_yarp__os__RateThreadWrapper);
  }
  
  result = (Runnable *)((yarp::os::RateThreadWrapper const *)arg1)->getAttachment();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Runnable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RateThreadWrapper(void *obj) {
yarp::os::RateThreadWrapper *arg1 = (yarp::os::RateThreadWrapper *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_RateThreadWrapper_methods[] = {
    {"detach", _wrap_RateThreadWrapper_detach}, 
    {"attach", _wrap_RateThreadWrapper_attach}, 
    {"open", _wrap_RateThreadWrapper_open}, 
    {"close", _wrap_RateThreadWrapper_close}, 
    {"stop", _wrap_RateThreadWrapper_stop}, 
    {"run", _wrap_RateThreadWrapper_run}, 
    {"threadInit", _wrap_RateThreadWrapper_threadInit}, 
    {"threadRelease", _wrap_RateThreadWrapper_threadRelease}, 
    {"afterStart", _wrap_RateThreadWrapper_afterStart}, 
    {"beforeStart", _wrap_RateThreadWrapper_beforeStart}, 
    {"getAttachment", _wrap_RateThreadWrapper_getAttachment}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_RateThreadWrapper_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_RateThreadWrapper_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_RateThreadWrapper_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_RateThreadWrapper_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_RateThreadWrapper_bases[] = {0,0};
static const char *swig_yarp_os_RateThreadWrapper_base_names[] = {"yarp::os::RateThread *",0};
static swig_lua_class _wrap_class_yarp_os_RateThreadWrapper = { "RateThreadWrapper", &SWIGTYPE_p_yarp__os__RateThreadWrapper,_wrap_new_RateThreadWrapper, swig_delete_RateThreadWrapper, swig_yarp_os_RateThreadWrapper_methods, swig_yarp_os_RateThreadWrapper_attributes, { "RateThreadWrapper", swig_yarp_os_RateThreadWrapper_cls_methods, swig_yarp_os_RateThreadWrapper_cls_attributes, swig_yarp_os_RateThreadWrapper_cls_constants }, swig_yarp_os_RateThreadWrapper_bases, swig_yarp_os_RateThreadWrapper_base_names };

static int _wrap_Time_delay(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  
  SWIG_check_num_args("yarp::os::Time::delay",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Time::delay",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  yarp::os::Time::delay(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Time_now(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("yarp::os::Time::now",0,0)
  result = (double)yarp::os::Time::now();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Time_yield(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("yarp::os::Time::yield",0,0)
  yarp::os::Time::yield();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Time_turboBoost(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("yarp::os::Time::turboBoost",0,0)
  yarp::os::Time::turboBoost();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Time_useSystemClock(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("yarp::os::Time::useSystemClock",0,0)
  yarp::os::Time::useSystemClock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Time_useNetworkClock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  
  SWIG_check_num_args("yarp::os::Time::useNetworkClock",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::os::Time::useNetworkClock",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  yarp::os::Time::useNetworkClock((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Time_useCustomClock(lua_State* L) {
  int SWIG_arg = 0;
  Clock *arg1 = (Clock *) 0 ;
  
  SWIG_check_num_args("yarp::os::Time::useCustomClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Time::useCustomClock",1,"Clock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Clock,0))){
    SWIG_fail_ptr("Time_useCustomClock",1,SWIGTYPE_p_Clock);
  }
  
  yarp::os::Time::useCustomClock(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Time_isSystemClock(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("yarp::os::Time::isSystemClock",0,0)
  result = (bool)yarp::os::Time::isSystemClock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Time_isValid(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("yarp::os::Time::isValid",0,0)
  result = (bool)yarp::os::Time::isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Time(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Time *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Time::Time",0,0)
  result = (yarp::os::Time *)new yarp::os::Time();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Time,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Time(void *obj) {
yarp::os::Time *arg1 = (yarp::os::Time *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Time_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Time_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Time_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Time_cls_methods[] = {
    {"delay", _wrap_Time_delay}, 
    {"now", _wrap_Time_now}, 
    {"yield", _wrap_Time_yield}, 
    {"turboBoost", _wrap_Time_turboBoost}, 
    {"useSystemClock", _wrap_Time_useSystemClock}, 
    {"useNetworkClock", _wrap_Time_useNetworkClock}, 
    {"useCustomClock", _wrap_Time_useCustomClock}, 
    {"isSystemClock", _wrap_Time_isSystemClock}, 
    {"isValid", _wrap_Time_isValid}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Time_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Time_bases[] = {0};
static const char *swig_yarp_os_Time_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_Time = { "Time", &SWIGTYPE_p_yarp__os__Time,_wrap_new_Time, swig_delete_Time, swig_yarp_os_Time_methods, swig_yarp_os_Time_attributes, { "Time", swig_yarp_os_Time_cls_methods, swig_yarp_os_Time_cls_attributes, swig_yarp_os_Time_cls_constants }, swig_yarp_os_Time_bases, swig_yarp_os_Time_base_names };

static int _wrap_RFModule_getPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::os::RFModule::getPeriod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::getPeriod",1,"yarp::os::RFModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_getPeriod",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  result = (double)(arg1)->getPeriod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_updateModule(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::updateModule",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::updateModule",1,"yarp::os::RFModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_updateModule",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  result = (bool)(arg1)->updateModule();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_runModule__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::RFModule::runModule",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::runModule",1,"yarp::os::RFModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_runModule",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  result = (int)(arg1)->runModule();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_runModule__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ResourceFinder *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::RFModule::runModule",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::runModule",1,"yarp::os::RFModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RFModule::runModule",2,"yarp::os::ResourceFinder &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_runModule",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("RFModule_runModule",2,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (int)(arg1)->runModule(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_runModule(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RFModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RFModule_runModule__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RFModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RFModule_runModule__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RFModule_runModule'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RFModule::runModule()\n"
    "    yarp::os::RFModule::runModule(yarp::os::ResourceFinder &)\n");
  lua_error(L);return 0;
}


static int _wrap_RFModule_configure(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ResourceFinder *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::configure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::configure",1,"yarp::os::RFModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RFModule::configure",2,"yarp::os::ResourceFinder &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_configure",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("RFModule_configure",2,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (bool)(arg1)->configure(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_respond(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::respond",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::respond",1,"yarp::os::RFModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RFModule::respond",2,"yarp::os::Bottle const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::RFModule::respond",3,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_respond",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("RFModule_respond",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("RFModule_respond",3,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->respond((yarp::os::Bottle const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_attach(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Port *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::attach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::attach",1,"yarp::os::RFModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RFModule::attach",2,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_attach",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("RFModule_attach",2,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (bool)(arg1)->attach(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_attach_rpc_server(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::RpcServer *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::attach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::attach",1,"yarp::os::RFModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RFModule::attach",2,"yarp::os::RpcServer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_attach_rpc_server",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RFModule_attach_rpc_server",2,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  result = (bool)(arg1)->attach(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_attachTerminal(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::attachTerminal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::attachTerminal",1,"yarp::os::RFModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_attachTerminal",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  result = (bool)(arg1)->attachTerminal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_detachTerminal(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::detachTerminal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::detachTerminal",1,"yarp::os::RFModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_detachTerminal",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  result = (bool)(arg1)->detachTerminal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_interruptModule(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::interruptModule",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::interruptModule",1,"yarp::os::RFModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_interruptModule",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  result = (bool)(arg1)->interruptModule();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::close",1,"yarp::os::RFModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_close",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_stopModule__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::RFModule::stopModule",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::stopModule",1,"yarp::os::RFModule *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::RFModule::stopModule",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_stopModule",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->stopModule(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_stopModule__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  
  SWIG_check_num_args("yarp::os::RFModule::stopModule",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::stopModule",1,"yarp::os::RFModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_stopModule",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  (arg1)->stopModule();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_stopModule(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RFModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RFModule_stopModule__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RFModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_RFModule_stopModule__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RFModule_stopModule'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RFModule::stopModule(bool)\n"
    "    yarp::os::RFModule::stopModule()\n");
  lua_error(L);return 0;
}


static int _wrap_RFModule_isStopping(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::isStopping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::isStopping",1,"yarp::os::RFModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_isStopping",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  result = (bool)(arg1)->isStopping();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_getName__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::RFModule::getName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::getName",1,"yarp::os::RFModule *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::RFModule::getName",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_getName",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->getName((yarp::os::ConstString const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_getName__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::RFModule::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::getName",1,"yarp::os::RFModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_getName",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  result = (arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_getName(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RFModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RFModule_getName__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RFModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_RFModule_getName__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RFModule_getName'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RFModule::getName(yarp::os::ConstString const &)\n"
    "    yarp::os::RFModule::getName()\n");
  lua_error(L);return 0;
}


static int _wrap_RFModule_setName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::os::RFModule::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::setName",1,"yarp::os::RFModule *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::RFModule::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_setName",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RFModule_safeRespond(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RFModule *arg1 = (yarp::os::RFModule *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RFModule::safeRespond",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RFModule::safeRespond",1,"yarp::os::RFModule *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RFModule::safeRespond",2,"yarp::os::Bottle const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::RFModule::safeRespond",3,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RFModule,0))){
    SWIG_fail_ptr("RFModule_safeRespond",1,SWIGTYPE_p_yarp__os__RFModule);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("RFModule_safeRespond",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("RFModule_safeRespond",3,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->safeRespond((yarp::os::Bottle const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RFModule(void *obj) {
yarp::os::RFModule *arg1 = (yarp::os::RFModule *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_RFModule_methods[] = {
    {"getPeriod", _wrap_RFModule_getPeriod}, 
    {"updateModule", _wrap_RFModule_updateModule}, 
    {"runModule", _wrap_RFModule_runModule}, 
    {"configure", _wrap_RFModule_configure}, 
    {"respond", _wrap_RFModule_respond}, 
    {"attach", _wrap_RFModule_attach}, 
    {"attach_rpc_server", _wrap_RFModule_attach_rpc_server}, 
    {"attachTerminal", _wrap_RFModule_attachTerminal}, 
    {"detachTerminal", _wrap_RFModule_detachTerminal}, 
    {"interruptModule", _wrap_RFModule_interruptModule}, 
    {"close", _wrap_RFModule_close}, 
    {"stopModule", _wrap_RFModule_stopModule}, 
    {"isStopping", _wrap_RFModule_isStopping}, 
    {"getName", _wrap_RFModule_getName}, 
    {"setName", _wrap_RFModule_setName}, 
    {"safeRespond", _wrap_RFModule_safeRespond}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_RFModule_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_RFModule_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_RFModule_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_RFModule_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_RFModule_bases[] = {0};
static const char *swig_yarp_os_RFModule_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_RFModule = { "RFModule", &SWIGTYPE_p_yarp__os__RFModule,0, swig_delete_RFModule, swig_yarp_os_RFModule_methods, swig_yarp_os_RFModule_attributes, { "RFModule", swig_yarp_os_RFModule_cls_methods, swig_yarp_os_RFModule_cls_attributes, swig_yarp_os_RFModule_cls_constants }, swig_yarp_os_RFModule_bases, swig_yarp_os_RFModule_base_names };

static int _wrap_new_Stamp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Stamp *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Stamp::Stamp",0,0)
  result = (yarp::os::Stamp *)new yarp::os::Stamp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Stamp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Stamp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  yarp::os::Stamp *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Stamp::Stamp",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::Stamp::Stamp",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Stamp::Stamp",2,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (yarp::os::Stamp *)new yarp::os::Stamp(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Stamp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Stamp(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Stamp__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Stamp__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Stamp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Stamp::Stamp()\n"
    "    yarp::os::Stamp::Stamp(int,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Stamp_getCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Stamp::getCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Stamp::getCount",1,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("Stamp_getCount",1,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (int)(arg1)->getCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stamp_getTime(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::os::Stamp::getTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Stamp::getTime",1,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("Stamp_getTime",1,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (double)(arg1)->getTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stamp_isValid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Stamp::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Stamp::isValid",1,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("Stamp_isValid",1,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (bool)(arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stamp_getMaxCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::Stamp::getMaxCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Stamp::getMaxCount",1,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("Stamp_getMaxCount",1,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (int)(arg1)->getMaxCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stamp_update__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  
  SWIG_check_num_args("yarp::os::Stamp::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Stamp::update",1,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("Stamp_update",1,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stamp_update__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::Stamp::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Stamp::update",1,"yarp::os::Stamp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::Stamp::update",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("Stamp_update",1,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stamp_update(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Stamp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Stamp_update__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Stamp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Stamp_update__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Stamp_update'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::Stamp::update()\n"
    "    yarp::os::Stamp::update(double)\n");
  lua_error(L);return 0;
}


static int _wrap_Stamp_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Stamp::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Stamp::read",1,"yarp::os::Stamp *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Stamp::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("Stamp_read",1,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("Stamp_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stamp_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Stamp *arg1 = (yarp::os::Stamp *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Stamp::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Stamp::write",1,"yarp::os::Stamp *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Stamp::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("Stamp_write",1,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("Stamp_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Stamp(void *obj) {
yarp::os::Stamp *arg1 = (yarp::os::Stamp *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Stamp_methods[] = {
    {"getCount", _wrap_Stamp_getCount}, 
    {"getTime", _wrap_Stamp_getTime}, 
    {"isValid", _wrap_Stamp_isValid}, 
    {"getMaxCount", _wrap_Stamp_getMaxCount}, 
    {"update", _wrap_Stamp_update}, 
    {"read", _wrap_Stamp_read}, 
    {"write", _wrap_Stamp_write}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Stamp_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Stamp_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Stamp_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Stamp_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Stamp_bases[] = {0,0};
static const char *swig_yarp_os_Stamp_base_names[] = {"yarp::os::Portable *",0};
static swig_lua_class _wrap_class_yarp_os_Stamp = { "Stamp", &SWIGTYPE_p_yarp__os__Stamp,_wrap_new_Stamp, swig_delete_Stamp, swig_yarp_os_Stamp_methods, swig_yarp_os_Stamp_attributes, { "Stamp", swig_yarp_os_Stamp_cls_methods, swig_yarp_os_Stamp_cls_attributes, swig_yarp_os_Stamp_cls_constants }, swig_yarp_os_Stamp_bases, swig_yarp_os_Stamp_base_names };

static int _wrap_Stamped_getStamp(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Stamped *arg1 = (yarp::os::Stamped *) 0 ;
  yarp::os::Stamp result;
  
  SWIG_check_num_args("yarp::os::Stamped::getStamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Stamped::getStamp",1,"yarp::os::Stamped const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Stamped,0))){
    SWIG_fail_ptr("Stamped_getStamp",1,SWIGTYPE_p_yarp__os__Stamped);
  }
  
  result = ((yarp::os::Stamped const *)arg1)->getStamp();
  {
    yarp::os::Stamp * resultptr = new yarp::os::Stamp((const yarp::os::Stamp &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Stamp,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Stamped(void *obj) {
yarp::os::Stamped *arg1 = (yarp::os::Stamped *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Stamped_methods[] = {
    {"getStamp", _wrap_Stamped_getStamp}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Stamped_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Stamped_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Stamped_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Stamped_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Stamped_bases[] = {0};
static const char *swig_yarp_os_Stamped_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_Stamped = { "Stamped", &SWIGTYPE_p_yarp__os__Stamped,0, swig_delete_Stamped, swig_yarp_os_Stamped_methods, swig_yarp_os_Stamped_attributes, { "Stamped", swig_yarp_os_Stamped_cls_methods, swig_yarp_os_Stamped_cls_attributes, swig_yarp_os_Stamped_cls_constants }, swig_yarp_os_Stamped_bases, swig_yarp_os_Stamped_base_names };

static int _wrap_NameStore_query(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::NameStore::query",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::NameStore::query",1,"yarp::os::NameStore *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NameStore::query",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__NameStore,0))){
    SWIG_fail_ptr("NameStore_query",1,SWIGTYPE_p_yarp__os__NameStore);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->query((yarp::os::ConstString const &)*arg2);
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NameStore_announce(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  int arg3 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NameStore::announce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::NameStore::announce",1,"yarp::os::NameStore *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::NameStore::announce",2,"yarp::os::ConstString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::os::NameStore::announce",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__NameStore,0))){
    SWIG_fail_ptr("NameStore_announce",1,SWIGTYPE_p_yarp__os__NameStore);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->announce((yarp::os::ConstString const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NameStore_process(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::NameStore *arg1 = (yarp::os::NameStore *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::Contact *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::NameStore::process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::NameStore::process",1,"yarp::os::NameStore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::NameStore::process",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::NameStore::process",3,"yarp::os::PortReader &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::os::NameStore::process",4,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__NameStore,0))){
    SWIG_fail_ptr("NameStore_process",1,SWIGTYPE_p_yarp__os__NameStore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("NameStore_process",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("NameStore_process",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("NameStore_process",4,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->process(*arg2,*arg3,(yarp::os::Contact const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NameStore(void *obj) {
yarp::os::NameStore *arg1 = (yarp::os::NameStore *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_NameStore_methods[] = {
    {"query", _wrap_NameStore_query}, 
    {"announce", _wrap_NameStore_announce}, 
    {"process", _wrap_NameStore_process}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_NameStore_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_NameStore_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_NameStore_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_NameStore_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_NameStore_bases[] = {0};
static const char *swig_yarp_os_NameStore_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_NameStore = { "NameStore", &SWIGTYPE_p_yarp__os__NameStore,0, swig_delete_NameStore, swig_yarp_os_NameStore_methods, swig_yarp_os_NameStore_attributes, { "NameStore", swig_yarp_os_NameStore_cls_methods, swig_yarp_os_NameStore_cls_attributes, swig_yarp_os_NameStore_cls_constants }, swig_yarp_os_NameStore_bases, swig_yarp_os_NameStore_base_names };

static int _wrap_ContactStyle_admin_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::ContactStyle::admin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::admin",1,"yarp::os::ContactStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::ContactStyle::admin",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_admin_set",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->admin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_admin_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ContactStyle::admin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::admin",1,"yarp::os::ContactStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_admin_get",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool) ((arg1)->admin);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_quiet_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::ContactStyle::quiet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::quiet",1,"yarp::os::ContactStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::ContactStyle::quiet",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_quiet_set",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->quiet = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_quiet_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ContactStyle::quiet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::quiet",1,"yarp::os::ContactStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_quiet_get",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool) ((arg1)->quiet);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_verboseOnSuccess_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::ContactStyle::verboseOnSuccess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::verboseOnSuccess",1,"yarp::os::ContactStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::ContactStyle::verboseOnSuccess",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_verboseOnSuccess_set",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->verboseOnSuccess = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_verboseOnSuccess_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ContactStyle::verboseOnSuccess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::verboseOnSuccess",1,"yarp::os::ContactStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_verboseOnSuccess_get",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool) ((arg1)->verboseOnSuccess);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_timeout_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::ContactStyle::timeout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::timeout",1,"yarp::os::ContactStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::ContactStyle::timeout",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_timeout_set",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->timeout = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_timeout_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::os::ContactStyle::timeout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::timeout",1,"yarp::os::ContactStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_timeout_get",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (double) ((arg1)->timeout);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_carrier_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::os::ContactStyle::carrier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::carrier",1,"yarp::os::ContactStyle *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ContactStyle::carrier",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_carrier_set",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->carrier = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_carrier_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ContactStyle::carrier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::carrier",1,"yarp::os::ContactStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_carrier_get",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (yarp::os::ConstString *) & ((arg1)->carrier);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_expectReply_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::ContactStyle::expectReply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::expectReply",1,"yarp::os::ContactStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::ContactStyle::expectReply",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_expectReply_set",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->expectReply = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_expectReply_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ContactStyle::expectReply",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::expectReply",1,"yarp::os::ContactStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_expectReply_get",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool) ((arg1)->expectReply);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_persistent_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::ContactStyle::persistent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::persistent",1,"yarp::os::ContactStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::ContactStyle::persistent",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_persistent_set",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->persistent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_persistent_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ContactStyle::persistent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::persistent",1,"yarp::os::ContactStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_persistent_get",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (bool) ((arg1)->persistent);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_persistenceType_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ContactStyle::PersistenceType arg2 ;
  
  SWIG_check_num_args("yarp::os::ContactStyle::persistenceType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::persistenceType",1,"yarp::os::ContactStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::ContactStyle::persistenceType",2,"yarp::os::ContactStyle::PersistenceType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_persistenceType_set",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  arg2 = (yarp::os::ContactStyle::PersistenceType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->persistenceType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContactStyle_persistenceType_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) 0 ;
  yarp::os::ContactStyle::PersistenceType result;
  
  SWIG_check_num_args("yarp::os::ContactStyle::persistenceType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ContactStyle::persistenceType",1,"yarp::os::ContactStyle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ContactStyle,0))){
    SWIG_fail_ptr("ContactStyle_persistenceType_get",1,SWIGTYPE_p_yarp__os__ContactStyle);
  }
  
  result = (yarp::os::ContactStyle::PersistenceType) ((arg1)->persistenceType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ContactStyle(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ContactStyle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ContactStyle::ContactStyle",0,0)
  result = (yarp::os::ContactStyle *)new yarp::os::ContactStyle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__ContactStyle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ContactStyle(void *obj) {
yarp::os::ContactStyle *arg1 = (yarp::os::ContactStyle *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_ContactStyle_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_os_ContactStyle_attributes[] = {
    { "admin", _wrap_ContactStyle_admin_get, _wrap_ContactStyle_admin_set},
    { "quiet", _wrap_ContactStyle_quiet_get, _wrap_ContactStyle_quiet_set},
    { "verboseOnSuccess", _wrap_ContactStyle_verboseOnSuccess_get, _wrap_ContactStyle_verboseOnSuccess_set},
    { "timeout", _wrap_ContactStyle_timeout_get, _wrap_ContactStyle_timeout_set},
    { "carrier", _wrap_ContactStyle_carrier_get, _wrap_ContactStyle_carrier_set},
    { "expectReply", _wrap_ContactStyle_expectReply_get, _wrap_ContactStyle_expectReply_set},
    { "persistent", _wrap_ContactStyle_persistent_get, _wrap_ContactStyle_persistent_set},
    { "persistenceType", _wrap_ContactStyle_persistenceType_get, _wrap_ContactStyle_persistenceType_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_ContactStyle_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_ContactStyle_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_ContactStyle_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("OPENENDED", yarp::os::ContactStyle::OPENENDED)},
    {SWIG_LUA_CONSTTAB_INT("END_WITH_FROM_PORT", yarp::os::ContactStyle::END_WITH_FROM_PORT)},
    {SWIG_LUA_CONSTTAB_INT("END_WITH_TO_PORT", yarp::os::ContactStyle::END_WITH_TO_PORT)},
    {SWIG_LUA_CONSTTAB_INT("NO_PERSISTENCE", yarp::os::ContactStyle::NO_PERSISTENCE)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_ContactStyle_bases[] = {0};
static const char *swig_yarp_os_ContactStyle_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_ContactStyle = { "ContactStyle", &SWIGTYPE_p_yarp__os__ContactStyle,_wrap_new_ContactStyle, swig_delete_ContactStyle, swig_yarp_os_ContactStyle_methods, swig_yarp_os_ContactStyle_attributes, { "ContactStyle", swig_yarp_os_ContactStyle_cls_methods, swig_yarp_os_ContactStyle_cls_attributes, swig_yarp_os_ContactStyle_cls_constants }, swig_yarp_os_ContactStyle_bases, swig_yarp_os_ContactStyle_base_names };

static int _wrap_new_ResourceFinder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::ResourceFinder",0,0)
  result = (yarp::os::ResourceFinder *)new yarp::os::ResourceFinder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__ResourceFinder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ResourceFinder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = 0 ;
  yarp::os::ResourceFinder *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::ResourceFinder",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::ResourceFinder",1,"yarp::os::ResourceFinder const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("new_ResourceFinder",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (yarp::os::ResourceFinder *)new yarp::os::ResourceFinder((yarp::os::ResourceFinder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__ResourceFinder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ResourceFinder(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ResourceFinder__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ResourceFinder__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ResourceFinder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::ResourceFinder()\n"
    "    yarp::os::ResourceFinder::ResourceFinder(yarp::os::ResourceFinder const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ResourceFinder_setVerbose__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::setVerbose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::setVerbose",1,"yarp::os::ResourceFinder *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::setVerbose",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_setVerbose",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setVerbose(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_setVerbose__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::setVerbose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::setVerbose",1,"yarp::os::ResourceFinder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_setVerbose",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (bool)(arg1)->setVerbose();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_setVerbose(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ResourceFinder_setVerbose__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ResourceFinder_setVerbose__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResourceFinder_setVerbose'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::setVerbose(bool)\n"
    "    yarp::os::ResourceFinder::setVerbose()\n");
  lua_error(L);return 0;
}


static int _wrap_ResourceFinder_setQuiet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::setQuiet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::setQuiet",1,"yarp::os::ResourceFinder *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::setQuiet",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_setQuiet",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setQuiet(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_setQuiet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::setQuiet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::setQuiet",1,"yarp::os::ResourceFinder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_setQuiet",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (bool)(arg1)->setQuiet();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_setQuiet(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ResourceFinder_setQuiet__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ResourceFinder_setQuiet__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResourceFinder_setQuiet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::setQuiet(bool)\n"
    "    yarp::os::ResourceFinder::setQuiet()\n");
  lua_error(L);return 0;
}


static int _wrap_ResourceFinder_configure__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 ;
  bool arg5 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::configure",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",1,"yarp::os::ResourceFinder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",2,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_configure",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (lua_istable(L,3)) {
      int i, size = SWIG_argv_size(L,3);
      arg3 = (int) size;
      arg4 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,3,i);
        if (lua_isnil(L,-1))
        break;
        arg4[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg4[i]=NULL;
    } else {
      arg3 = 0; arg4 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  arg5 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->configure((char const *)arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  {
    free((char *) arg4);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg4);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_configure__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::configure",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",1,"yarp::os::ResourceFinder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_configure",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (lua_istable(L,3)) {
      int i, size = SWIG_argv_size(L,3);
      arg3 = (int) size;
      arg4 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,3,i);
        if (lua_isnil(L,-1))
        break;
        arg4[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg4[i]=NULL;
    } else {
      arg3 = 0; arg4 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  result = (bool)(arg1)->configure((char const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  {
    free((char *) arg4);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg4);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_configure__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::configure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",1,"yarp::os::ResourceFinder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_configure",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  {
    if (lua_istable(L,2)) {
      int i, size = SWIG_argv_size(L,2);
      arg2 = (int) size;
      arg3 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,2,i);
        if (lua_isnil(L,-1))
        break;
        arg3[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg3[i]=NULL;
    } else {
      arg2 = 0; arg3 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  result = (bool)(arg1)->configure(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  {
    free((char *) arg3);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg3);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_setDefaultContext(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::setDefaultContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::setDefaultContext",1,"yarp::os::ResourceFinder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::setDefaultContext",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_setDefaultContext",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->setDefaultContext((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_setContext(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::setContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::setContext",1,"yarp::os::ResourceFinder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::setContext",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_setContext",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->setContext((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_setDefault__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::setDefault",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::setDefault",1,"yarp::os::ResourceFinder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::setDefault",2,"char const *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::ResourceFinder::setDefault",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_setDefault",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->setDefault((char const *)arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_setDefault__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::setDefault",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::setDefault",1,"yarp::os::ResourceFinder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::setDefault",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::ResourceFinder::setDefault",3,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_setDefault",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("ResourceFinder_setDefault",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = (bool)(arg1)->setDefault((char const *)arg2,(yarp::os::Value const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_setDefault(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ResourceFinder_setDefault__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ResourceFinder_setDefault__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResourceFinder_setDefault'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::setDefault(char const *,yarp::os::ConstString const &)\n"
    "    yarp::os::ResourceFinder::setDefault(char const *,yarp::os::Value const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ResourceFinder_setDefaultConfigFile(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::setDefaultConfigFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::setDefaultConfigFile",1,"yarp::os::ResourceFinder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::setDefaultConfigFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_setDefaultConfigFile",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->setDefaultConfigFile((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findFile",1,"yarp::os::ResourceFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::findFile",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findFile",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->findFile((yarp::os::ConstString const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findFileByName__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findFileByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findFileByName",1,"yarp::os::ResourceFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::findFileByName",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findFileByName",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->findFileByName((yarp::os::ConstString const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findPath__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findPath",1,"yarp::os::ResourceFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::findPath",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findPath",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->findPath((yarp::os::ConstString const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findPaths__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Bottle result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findPaths",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findPaths",1,"yarp::os::ResourceFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::findPaths",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findPaths",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->findPaths((yarp::os::ConstString const &)*arg2);
  {
    yarp::os::Bottle * resultptr = new yarp::os::Bottle((const yarp::os::Bottle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Bottle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findPath__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findPath",1,"yarp::os::ResourceFinder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findPath",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (arg1)->findPath();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getContext(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::getContext",1,"yarp::os::ResourceFinder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_getContext",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (arg1)->getContext();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getContextPath(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getContextPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::getContextPath",1,"yarp::os::ResourceFinder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_getContextPath",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (arg1)->getContextPath();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getContexts(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::Bottle result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getContexts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::getContexts",1,"yarp::os::ResourceFinder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_getContexts",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (arg1)->getContexts();
  {
    yarp::os::Bottle * resultptr = new yarp::os::Bottle((const yarp::os::Bottle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Bottle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_check__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::check",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::check",1,"yarp::os::ResourceFinder const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::check",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_check",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_find(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::find",1,"yarp::os::ResourceFinder const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::find",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_find",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Value *) &((yarp::os::ResourceFinder const *)arg1)->find((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findGroup__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findGroup",1,"yarp::os::ResourceFinder const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::findGroup",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findGroup",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (yarp::os::Bottle *) &((yarp::os::ResourceFinder const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_isNull(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::isNull",1,"yarp::os::ResourceFinder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_isNull",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->isNull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_toString_c(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::toString",1,"yarp::os::ResourceFinder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_toString_c",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = ((yarp::os::ResourceFinder const *)arg1)->toString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findNestedResourceFinder(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::ResourceFinder result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findNestedResourceFinder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findNestedResourceFinder",1,"yarp::os::ResourceFinder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::findNestedResourceFinder",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findNestedResourceFinder",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->findNestedResourceFinder((char const *)arg2);
  {
    yarp::os::ResourceFinder * resultptr = new yarp::os::ResourceFinder((const yarp::os::ResourceFinder &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__ResourceFinder,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_isConfigured(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::isConfigured",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::isConfigured",1,"yarp::os::ResourceFinder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_isConfigured",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->isConfigured();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getResourceFinderSingleton(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *result = 0 ;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getResourceFinderSingleton",0,0)
  result = (yarp::os::ResourceFinder *) &yarp::os::ResourceFinder::getResourceFinderSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__ResourceFinder,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_check__SWIG_1_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("check",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::ResourceFinder const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("check",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_check",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_check__SWIG_1_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString *arg4 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp4 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("check",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::ResourceFinder const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("check",3,"yarp::os::Value const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("check",4,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_check",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("ResourceFinder_check",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = ((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3,(yarp::os::ConstString const &)*arg4);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_check__SWIG_1_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::Value *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("check",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("check",1,"yarp::os::ResourceFinder const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("check",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("check",3,"yarp::os::Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_check",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Value,0))){
    SWIG_fail_ptr("ResourceFinder_check",3,SWIGTYPE_p_yarp__os__Value);
  }
  
  result = ((yarp::os::ResourceFinder const *)arg1)->check((yarp::os::ConstString const &)*arg2,(yarp::os::Value const &)*arg3);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_check(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ResourceFinder_check__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ResourceFinder_check__SWIG_1_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ResourceFinder_check__SWIG_1_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Value, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_ResourceFinder_check__SWIG_1_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResourceFinder_check'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::check(yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::Value const &,yarp::os::ConstString const &) const\n"
    "    check(yarp::os::ConstString const &,yarp::os::Value const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ResourceFinder_findGroup__SWIG_1_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("findGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroup",1,"yarp::os::ResourceFinder const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findGroup",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("findGroup",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findGroup",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (yarp::os::Bottle *) &((yarp::os::ResourceFinder const *)arg1)->findGroup((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findGroup(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ResourceFinder_findGroup__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ResourceFinder_findGroup__SWIG_1_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResourceFinder_findGroup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::findGroup(yarp::os::ConstString const &) const\n"
    "    findGroup(yarp::os::ConstString const &,yarp::os::ConstString const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ResourceFinder_getDataHome(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getDataHome",0,0)
  result = yarp::os::ResourceFinder::getDataHome();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getDataHomeNoCreate(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getDataHomeNoCreate",0,0)
  result = yarp::os::ResourceFinder::getDataHomeNoCreate();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getConfigHome(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getConfigHome",0,0)
  result = yarp::os::ResourceFinder::getConfigHome();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getConfigHomeNoCreate(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getConfigHomeNoCreate",0,0)
  result = yarp::os::ResourceFinder::getConfigHomeNoCreate();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getHomeContextPath(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getHomeContextPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::getHomeContextPath",1,"yarp::os::ResourceFinder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_getHomeContextPath",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (arg1)->getHomeContextPath();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getHomeRobotPath(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getHomeRobotPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::getHomeRobotPath",1,"yarp::os::ResourceFinder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_getHomeRobotPath",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  result = (arg1)->getHomeRobotPath();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getDataDirs(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getDataDirs",0,0)
  result = yarp::os::ResourceFinder::getDataDirs();
  {
    yarp::os::Bottle * resultptr = new yarp::os::Bottle((const yarp::os::Bottle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Bottle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_getConfigDirs(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Bottle result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::getConfigDirs",0,0)
  result = yarp::os::ResourceFinder::getConfigDirs();
  {
    yarp::os::Bottle * resultptr = new yarp::os::Bottle((const yarp::os::Bottle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Bottle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findPaths__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::Bottle result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findPaths",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findPaths",1,"yarp::os::ResourceFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::findPaths",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::ResourceFinder::findPaths",3,"ResourceFinderOptions const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findPaths",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ResourceFinderOptions,0))){
    SWIG_fail_ptr("ResourceFinder_findPaths",3,SWIGTYPE_p_ResourceFinderOptions);
  }
  
  result = (arg1)->findPaths((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  {
    yarp::os::Bottle * resultptr = new yarp::os::Bottle((const yarp::os::Bottle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Bottle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findPaths(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ResourceFinder_findPaths__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ResourceFinderOptions, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ResourceFinder_findPaths__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResourceFinder_findPaths'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::findPaths(yarp::os::ConstString const &)\n"
    "    yarp::os::ResourceFinder::findPaths(yarp::os::ConstString const &,ResourceFinderOptions const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ResourceFinder_findPath__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findPath",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findPath",1,"yarp::os::ResourceFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::findPath",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::ResourceFinder::findPath",3,"ResourceFinderOptions const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findPath",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ResourceFinderOptions,0))){
    SWIG_fail_ptr("ResourceFinder_findPath",3,SWIGTYPE_p_ResourceFinderOptions);
  }
  
  result = (arg1)->findPath((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findPath(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ResourceFinder_findPath__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ResourceFinder_findPath__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ResourceFinderOptions, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ResourceFinder_findPath__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResourceFinder_findPath'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::findPath(yarp::os::ConstString const &)\n"
    "    yarp::os::ResourceFinder::findPath()\n"
    "    yarp::os::ResourceFinder::findPath(yarp::os::ConstString const &,ResourceFinderOptions const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ResourceFinder_findFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findFile",1,"yarp::os::ResourceFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::findFile",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::ResourceFinder::findFile",3,"ResourceFinderOptions const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findFile",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ResourceFinderOptions,0))){
    SWIG_fail_ptr("ResourceFinder_findFile",3,SWIGTYPE_p_ResourceFinderOptions);
  }
  
  result = (arg1)->findFile((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findFile(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ResourceFinder_findFile__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ResourceFinderOptions, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ResourceFinder_findFile__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResourceFinder_findFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::findFile(yarp::os::ConstString const &)\n"
    "    yarp::os::ResourceFinder::findFile(yarp::os::ConstString const &,ResourceFinderOptions const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ResourceFinder_findFileByName__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  ResourceFinderOptions *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::findFileByName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::findFileByName",1,"yarp::os::ResourceFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::findFileByName",2,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::ResourceFinder::findFileByName",3,"ResourceFinderOptions const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_findFileByName",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ResourceFinderOptions,0))){
    SWIG_fail_ptr("ResourceFinder_findFileByName",3,SWIGTYPE_p_ResourceFinderOptions);
  }
  
  result = (arg1)->findFileByName((yarp::os::ConstString const &)*arg2,(ResourceFinderOptions const &)*arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_findFileByName(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ResourceFinder_findFileByName__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ResourceFinderOptions, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ResourceFinder_findFileByName__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResourceFinder_findFileByName'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::findFileByName(yarp::os::ConstString const &)\n"
    "    yarp::os::ResourceFinder::findFileByName(yarp::os::ConstString const &,ResourceFinderOptions const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ResourceFinder_readConfig(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  ResourceFinderOptions *arg4 = 0 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::readConfig",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::readConfig",1,"yarp::os::ResourceFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::readConfig",2,"yarp::os::Property &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::ResourceFinder::readConfig",3,"yarp::os::ConstString const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::os::ResourceFinder::readConfig",4,"ResourceFinderOptions const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_readConfig",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("ResourceFinder_readConfig",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ResourceFinderOptions,0))){
    SWIG_fail_ptr("ResourceFinder_readConfig",4,SWIGTYPE_p_ResourceFinderOptions);
  }
  
  result = (bool)(arg1)->readConfig(*arg2,(yarp::os::ConstString const &)*arg3,(ResourceFinderOptions const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_configure__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  bool arg4 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::configure",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",1,"yarp::os::ResourceFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",3,"std::vector< std::string > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_configure",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("ResourceFinder_configure",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)yarp_os_ResourceFinder_configure__SWIG_3(arg1,(std::string const &)*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_configure__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::ResourceFinder::configure",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",1,"yarp::os::ResourceFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::ResourceFinder::configure",3,"std::vector< std::string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__ResourceFinder,0))){
    SWIG_fail_ptr("ResourceFinder_configure",1,SWIGTYPE_p_yarp__os__ResourceFinder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("ResourceFinder_configure",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (bool)yarp_os_ResourceFinder_configure__SWIG_3(arg1,(std::string const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResourceFinder_configure(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_istable(L,argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_ResourceFinder_configure__SWIG_2(L);
        }
        return _wrap_ResourceFinder_configure__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ResourceFinder_configure__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_istable(L,argv[2]);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_ResourceFinder_configure__SWIG_1(L);
          }
          return _wrap_ResourceFinder_configure__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ResourceFinder_configure__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__ResourceFinder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_istable(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ResourceFinder_configure__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResourceFinder_configure'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::ResourceFinder::configure(char const *,int,char *[],bool)\n"
    "    yarp::os::ResourceFinder::configure(char const *,int,char *[])\n"
    "    yarp::os::ResourceFinder::configure(int,char *[])\n"
    "    yarp::os::ResourceFinder::configure(std::string const &,std::vector< std::string > &,bool)\n"
    "    yarp::os::ResourceFinder::configure(std::string const &,std::vector< std::string > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ResourceFinder(void *obj) {
yarp::os::ResourceFinder *arg1 = (yarp::os::ResourceFinder *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_ResourceFinder_methods[] = {
    {"setVerbose", _wrap_ResourceFinder_setVerbose}, 
    {"setQuiet", _wrap_ResourceFinder_setQuiet}, 
    {"setDefaultContext", _wrap_ResourceFinder_setDefaultContext}, 
    {"setContext", _wrap_ResourceFinder_setContext}, 
    {"setDefault", _wrap_ResourceFinder_setDefault}, 
    {"setDefaultConfigFile", _wrap_ResourceFinder_setDefaultConfigFile}, 
    {"getContext", _wrap_ResourceFinder_getContext}, 
    {"getContextPath", _wrap_ResourceFinder_getContextPath}, 
    {"getContexts", _wrap_ResourceFinder_getContexts}, 
    {"find", _wrap_ResourceFinder_find}, 
    {"isNull", _wrap_ResourceFinder_isNull}, 
    {"toString_c", _wrap_ResourceFinder_toString_c}, 
    {"findNestedResourceFinder", _wrap_ResourceFinder_findNestedResourceFinder}, 
    {"isConfigured", _wrap_ResourceFinder_isConfigured}, 
    {"check", _wrap_ResourceFinder_check}, 
    {"findGroup", _wrap_ResourceFinder_findGroup}, 
    {"getHomeContextPath", _wrap_ResourceFinder_getHomeContextPath}, 
    {"getHomeRobotPath", _wrap_ResourceFinder_getHomeRobotPath}, 
    {"findPaths", _wrap_ResourceFinder_findPaths}, 
    {"findPath", _wrap_ResourceFinder_findPath}, 
    {"findFile", _wrap_ResourceFinder_findFile}, 
    {"findFileByName", _wrap_ResourceFinder_findFileByName}, 
    {"readConfig", _wrap_ResourceFinder_readConfig}, 
    {"configure", _wrap_ResourceFinder_configure}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_ResourceFinder_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_ResourceFinder_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_ResourceFinder_cls_methods[] = {
    {"getResourceFinderSingleton", _wrap_ResourceFinder_getResourceFinderSingleton}, 
    {"getDataHome", _wrap_ResourceFinder_getDataHome}, 
    {"getDataHomeNoCreate", _wrap_ResourceFinder_getDataHomeNoCreate}, 
    {"getConfigHome", _wrap_ResourceFinder_getConfigHome}, 
    {"getConfigHomeNoCreate", _wrap_ResourceFinder_getConfigHomeNoCreate}, 
    {"getDataDirs", _wrap_ResourceFinder_getDataDirs}, 
    {"getConfigDirs", _wrap_ResourceFinder_getConfigDirs}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_ResourceFinder_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_ResourceFinder_bases[] = {0,0};
static const char *swig_yarp_os_ResourceFinder_base_names[] = {"yarp::os::Searchable *",0};
static swig_lua_class _wrap_class_yarp_os_ResourceFinder = { "ResourceFinder", &SWIGTYPE_p_yarp__os__ResourceFinder,_wrap_new_ResourceFinder, swig_delete_ResourceFinder, swig_yarp_os_ResourceFinder_methods, swig_yarp_os_ResourceFinder_attributes, { "ResourceFinder", swig_yarp_os_ResourceFinder_cls_methods, swig_yarp_os_ResourceFinder_cls_attributes, swig_yarp_os_ResourceFinder_cls_constants }, swig_yarp_os_ResourceFinder_bases, swig_yarp_os_ResourceFinder_base_names };

static int _wrap_RpcServer_open_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool result;
  
  SWIG_check_num_args("open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"yarp::os::RpcServer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_open",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  result = (bool)(arg1)->open();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_open_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"yarp::os::RpcServer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("open",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_open",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_open_SWIG_0_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"yarp::os::RpcServer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open",2,"yarp::os::Contact const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("open",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_open",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("RpcServer_open",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_open_SWIG_0_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"yarp::os::RpcServer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_open",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("RpcServer_open",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->open((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_open(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RpcServer_open_SWIG_0_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RpcServer_open_SWIG_0_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_RpcServer_open_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_RpcServer_open_SWIG_0_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RpcServer_open'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open()\n"
    "    open(yarp::os::ConstString const &)\n"
    "    open(yarp::os::Contact const &,bool)\n"
    "    open(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_RpcServer(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *result = 0 ;
  
  SWIG_check_num_args("yarp::os::RpcServer::RpcServer",0,0)
  result = (yarp::os::RpcServer *)new yarp::os::RpcServer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__RpcServer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortWriter *arg3 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcServer::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::write",1,"yarp::os::RpcServer const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcServer::write",2,"yarp::os::PortWriter &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::os::RpcServer::write",3,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_write",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("RpcServer_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("RpcServer_write",3,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcServer::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::write",1,"yarp::os::RpcServer const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcServer::write",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_write",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("RpcServer_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  yarp::os::PortWriter *arg4 = (yarp::os::PortWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcServer::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::write",1,"yarp::os::RpcServer const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcServer::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::RpcServer::write",3,"yarp::os::PortReader &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::os::RpcServer::write",4,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_write",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("RpcServer_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("RpcServer_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("RpcServer_write",4,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  yarp::os::PortReader *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcServer::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::write",1,"yarp::os::RpcServer const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcServer::write",2,"yarp::os::PortWriter &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::RpcServer::write",3,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_write",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("RpcServer_write",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("RpcServer_write",3,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)((yarp::os::RpcServer const *)arg1)->write(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RpcServer_write__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RpcServer_write__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RpcServer_write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__PortWriter, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RpcServer_write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RpcServer_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RpcServer::write(yarp::os::PortWriter &,yarp::os::PortWriter *) const\n"
    "    yarp::os::RpcServer::write(yarp::os::PortWriter &) const\n"
    "    yarp::os::RpcServer::write(yarp::os::PortWriter &,yarp::os::PortReader &,yarp::os::PortWriter *) const\n"
    "    yarp::os::RpcServer::write(yarp::os::PortWriter &,yarp::os::PortReader &) const\n");
  lua_error(L);return 0;
}


static int _wrap_RpcServer_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcServer::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::read",1,"yarp::os::RpcServer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcServer::read",2,"yarp::os::PortReader &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::RpcServer::read",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_read",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("RpcServer_read",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->read(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcServer::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::read",1,"yarp::os::RpcServer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcServer::read",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_read",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("RpcServer_read",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RpcServer_read__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_RpcServer_read__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RpcServer_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RpcServer::read(yarp::os::PortReader &,bool)\n"
    "    yarp::os::RpcServer::read(yarp::os::PortReader &)\n");
  lua_error(L);return 0;
}


static int _wrap_RpcServer_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::RpcServer::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::setInputMode",1,"yarp::os::RpcServer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::RpcServer::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_setInputMode",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::RpcServer::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::setOutputMode",1,"yarp::os::RpcServer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::RpcServer::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_setOutputMode",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::RpcServer::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::setRpcMode",1,"yarp::os::RpcServer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::RpcServer::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_setRpcMode",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_asPort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::Port *result = 0 ;
  
  SWIG_check_num_args("yarp::os::RpcServer::asPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::asPort",1,"yarp::os::RpcServer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_asPort",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  result = (yarp::os::Port *) &(arg1)->asPort();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Port,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_asPort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) 0 ;
  yarp::os::Port *result = 0 ;
  
  SWIG_check_num_args("yarp::os::RpcServer::asPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcServer::asPort",1,"yarp::os::RpcServer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcServer,0))){
    SWIG_fail_ptr("RpcServer_asPort",1,SWIGTYPE_p_yarp__os__RpcServer);
  }
  
  result = (yarp::os::Port *) &((yarp::os::RpcServer const *)arg1)->asPort();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Port,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcServer_asPort(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RpcServer_asPort__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RpcServer_asPort__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RpcServer_asPort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RpcServer::asPort()\n"
    "    yarp::os::RpcServer::asPort() const\n");
  lua_error(L);return 0;
}


static void swig_delete_RpcServer(void *obj) {
yarp::os::RpcServer *arg1 = (yarp::os::RpcServer *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_RpcServer_methods[] = {
    {"open", _wrap_RpcServer_open}, 
    {"write", _wrap_RpcServer_write}, 
    {"read", _wrap_RpcServer_read}, 
    {"setInputMode", _wrap_RpcServer_setInputMode}, 
    {"setOutputMode", _wrap_RpcServer_setOutputMode}, 
    {"setRpcMode", _wrap_RpcServer_setRpcMode}, 
    {"asPort", _wrap_RpcServer_asPort}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_RpcServer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_RpcServer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_RpcServer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_RpcServer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_RpcServer_bases[] = {0,0};
static const char *swig_yarp_os_RpcServer_base_names[] = {"yarp::os::AbstractContactable *",0};
static swig_lua_class _wrap_class_yarp_os_RpcServer = { "RpcServer", &SWIGTYPE_p_yarp__os__RpcServer,_wrap_new_RpcServer, swig_delete_RpcServer, swig_yarp_os_RpcServer_methods, swig_yarp_os_RpcServer_attributes, { "RpcServer", swig_yarp_os_RpcServer_cls_methods, swig_yarp_os_RpcServer_cls_attributes, swig_yarp_os_RpcServer_cls_constants }, swig_yarp_os_RpcServer_bases, swig_yarp_os_RpcServer_base_names };

static int _wrap_new_RpcClient(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *result = 0 ;
  
  SWIG_check_num_args("yarp::os::RpcClient::RpcClient",0,0)
  result = (yarp::os::RpcClient *)new yarp::os::RpcClient();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__RpcClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcClient_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcClient::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcClient::read",1,"yarp::os::RpcClient *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcClient::read",2,"yarp::os::PortReader &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::os::RpcClient::read",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcClient,0))){
    SWIG_fail_ptr("RpcClient_read",1,SWIGTYPE_p_yarp__os__RpcClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("RpcClient_read",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->read(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcClient_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcClient::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcClient::read",1,"yarp::os::RpcClient *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcClient::read",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcClient,0))){
    SWIG_fail_ptr("RpcClient_read",1,SWIGTYPE_p_yarp__os__RpcClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("RpcClient_read",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcClient_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RpcClient_read__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__PortReader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_RpcClient_read__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RpcClient_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RpcClient::read(yarp::os::PortReader &,bool)\n"
    "    yarp::os::RpcClient::read(yarp::os::PortReader &)\n");
  lua_error(L);return 0;
}


static int _wrap_RpcClient_reply(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcClient::reply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcClient::reply",1,"yarp::os::RpcClient *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcClient::reply",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcClient,0))){
    SWIG_fail_ptr("RpcClient_reply",1,SWIGTYPE_p_yarp__os__RpcClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("RpcClient_reply",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->reply(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcClient_replyAndDrop(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcClient::replyAndDrop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcClient::replyAndDrop",1,"yarp::os::RpcClient *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcClient::replyAndDrop",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcClient,0))){
    SWIG_fail_ptr("RpcClient_replyAndDrop",1,SWIGTYPE_p_yarp__os__RpcClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("RpcClient_replyAndDrop",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->replyAndDrop(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcClient_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::RpcClient::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcClient::setInputMode",1,"yarp::os::RpcClient *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::RpcClient::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcClient,0))){
    SWIG_fail_ptr("RpcClient_setInputMode",1,SWIGTYPE_p_yarp__os__RpcClient);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcClient_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::RpcClient::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcClient::setOutputMode",1,"yarp::os::RpcClient *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::RpcClient::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcClient,0))){
    SWIG_fail_ptr("RpcClient_setOutputMode",1,SWIGTYPE_p_yarp__os__RpcClient);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcClient_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::RpcClient::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcClient::setRpcMode",1,"yarp::os::RpcClient *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::RpcClient::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcClient,0))){
    SWIG_fail_ptr("RpcClient_setRpcMode",1,SWIGTYPE_p_yarp__os__RpcClient);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcClient_asPort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::Port *result = 0 ;
  
  SWIG_check_num_args("yarp::os::RpcClient::asPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcClient::asPort",1,"yarp::os::RpcClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcClient,0))){
    SWIG_fail_ptr("RpcClient_asPort",1,SWIGTYPE_p_yarp__os__RpcClient);
  }
  
  result = (yarp::os::Port *) &(arg1)->asPort();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Port,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcClient_asPort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::Port *result = 0 ;
  
  SWIG_check_num_args("yarp::os::RpcClient::asPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcClient::asPort",1,"yarp::os::RpcClient const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcClient,0))){
    SWIG_fail_ptr("RpcClient_asPort",1,SWIGTYPE_p_yarp__os__RpcClient);
  }
  
  result = (yarp::os::Port *) &((yarp::os::RpcClient const *)arg1)->asPort();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Port,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RpcClient_asPort(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RpcClient_asPort__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__RpcClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RpcClient_asPort__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RpcClient_asPort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::RpcClient::asPort()\n"
    "    yarp::os::RpcClient::asPort() const\n");
  lua_error(L);return 0;
}


static int _wrap_RpcClient_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::RpcClient::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::RpcClient::write",1,"yarp::os::RpcClient *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::RpcClient::write",2,"yarp::os::Bottle &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::RpcClient::write",3,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__RpcClient,0))){
    SWIG_fail_ptr("RpcClient_write",1,SWIGTYPE_p_yarp__os__RpcClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("RpcClient_write",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("RpcClient_write",3,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)yarp_os_RpcClient_write(arg1,*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RpcClient(void *obj) {
yarp::os::RpcClient *arg1 = (yarp::os::RpcClient *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_RpcClient_methods[] = {
    {"read", _wrap_RpcClient_read}, 
    {"reply", _wrap_RpcClient_reply}, 
    {"replyAndDrop", _wrap_RpcClient_replyAndDrop}, 
    {"setInputMode", _wrap_RpcClient_setInputMode}, 
    {"setOutputMode", _wrap_RpcClient_setOutputMode}, 
    {"setRpcMode", _wrap_RpcClient_setRpcMode}, 
    {"asPort", _wrap_RpcClient_asPort}, 
    {"write", _wrap_RpcClient_write}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_RpcClient_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_RpcClient_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_RpcClient_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_RpcClient_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_RpcClient_bases[] = {0,0};
static const char *swig_yarp_os_RpcClient_base_names[] = {"yarp::os::AbstractContactable *",0};
static swig_lua_class _wrap_class_yarp_os_RpcClient = { "RpcClient", &SWIGTYPE_p_yarp__os__RpcClient,_wrap_new_RpcClient, swig_delete_RpcClient, swig_yarp_os_RpcClient_methods, swig_yarp_os_RpcClient_attributes, { "RpcClient", swig_yarp_os_RpcClient_cls_methods, swig_yarp_os_RpcClient_cls_attributes, swig_yarp_os_RpcClient_cls_constants }, swig_yarp_os_RpcClient_bases, swig_yarp_os_RpcClient_base_names };

static int _wrap_new_DummyConnector(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::DummyConnector *result = 0 ;
  
  SWIG_check_num_args("yarp::os::DummyConnector::DummyConnector",0,0)
  result = (yarp::os::DummyConnector *)new yarp::os::DummyConnector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__DummyConnector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DummyConnector_setTextMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::DummyConnector::setTextMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::DummyConnector::setTextMode",1,"yarp::os::DummyConnector *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::DummyConnector::setTextMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__DummyConnector,0))){
    SWIG_fail_ptr("DummyConnector_setTextMode",1,SWIGTYPE_p_yarp__os__DummyConnector);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setTextMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DummyConnector_getCleanWriter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  SWIG_check_num_args("yarp::os::DummyConnector::getCleanWriter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::DummyConnector::getCleanWriter",1,"yarp::os::DummyConnector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__DummyConnector,0))){
    SWIG_fail_ptr("DummyConnector_getCleanWriter",1,SWIGTYPE_p_yarp__os__DummyConnector);
  }
  
  result = (yarp::os::ConnectionWriter *) &(arg1)->getCleanWriter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__ConnectionWriter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DummyConnector_getWriter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  yarp::os::ConnectionWriter *result = 0 ;
  
  SWIG_check_num_args("yarp::os::DummyConnector::getWriter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::DummyConnector::getWriter",1,"yarp::os::DummyConnector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__DummyConnector,0))){
    SWIG_fail_ptr("DummyConnector_getWriter",1,SWIGTYPE_p_yarp__os__DummyConnector);
  }
  
  result = (yarp::os::ConnectionWriter *) &(arg1)->getWriter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__ConnectionWriter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DummyConnector_getReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  yarp::os::ConnectionReader *result = 0 ;
  
  SWIG_check_num_args("yarp::os::DummyConnector::getReader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::DummyConnector::getReader",1,"yarp::os::DummyConnector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__DummyConnector,0))){
    SWIG_fail_ptr("DummyConnector_getReader",1,SWIGTYPE_p_yarp__os__DummyConnector);
  }
  
  result = (yarp::os::ConnectionReader *) &(arg1)->getReader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__ConnectionReader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DummyConnector_reset(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) 0 ;
  
  SWIG_check_num_args("yarp::os::DummyConnector::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::DummyConnector::reset",1,"yarp::os::DummyConnector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__DummyConnector,0))){
    SWIG_fail_ptr("DummyConnector_reset",1,SWIGTYPE_p_yarp__os__DummyConnector);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DummyConnector(void *obj) {
yarp::os::DummyConnector *arg1 = (yarp::os::DummyConnector *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_DummyConnector_methods[] = {
    {"setTextMode", _wrap_DummyConnector_setTextMode}, 
    {"getCleanWriter", _wrap_DummyConnector_getCleanWriter}, 
    {"getWriter", _wrap_DummyConnector_getWriter}, 
    {"getReader", _wrap_DummyConnector_getReader}, 
    {"reset", _wrap_DummyConnector_reset}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_DummyConnector_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_DummyConnector_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_DummyConnector_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_DummyConnector_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_DummyConnector_bases[] = {0};
static const char *swig_yarp_os_DummyConnector_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_DummyConnector = { "DummyConnector", &SWIGTYPE_p_yarp__os__DummyConnector,_wrap_new_DummyConnector, swig_delete_DummyConnector, swig_yarp_os_DummyConnector_methods, swig_yarp_os_DummyConnector_attributes, { "DummyConnector", swig_yarp_os_DummyConnector_cls_methods, swig_yarp_os_DummyConnector_cls_attributes, swig_yarp_os_DummyConnector_cls_constants }, swig_yarp_os_DummyConnector_bases, swig_yarp_os_DummyConnector_base_names };

static int _wrap_new_Things(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::Things",0,0)
  result = (yarp::os::Things *)new yarp::os::Things();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Things,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_setPortWriter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortWriter *arg2 = (yarp::os::PortWriter *) 0 ;
  
  SWIG_check_num_args("yarp::os::Things::setPortWriter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::setPortWriter",1,"yarp::os::Things *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::Things::setPortWriter",2,"yarp::os::PortWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_setPortWriter",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("Things_setPortWriter",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  (arg1)->setPortWriter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_getPortWriter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortWriter *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::getPortWriter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::getPortWriter",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_getPortWriter",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::os::PortWriter *)(arg1)->getPortWriter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__PortWriter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_setPortReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortReader *arg2 = (yarp::os::PortReader *) 0 ;
  
  SWIG_check_num_args("yarp::os::Things::setPortReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::setPortReader",1,"yarp::os::Things *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::Things::setPortReader",2,"yarp::os::PortReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_setPortReader",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("Things_setPortReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setPortReader(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_getPortReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::PortReader *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::getPortReader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::getPortReader",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_getPortReader",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::os::PortReader *)(arg1)->getPortReader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__PortReader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_setConnectionReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Things::setConnectionReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::setConnectionReader",1,"yarp::os::Things *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Things::setConnectionReader",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_setConnectionReader",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("Things_setConnectionReader",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->setConnectionReader(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Things::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::write",1,"yarp::os::Things *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::Things::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_write",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("Things_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_reset(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  
  SWIG_check_num_args("yarp::os::Things::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::reset",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_reset",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_hasBeenRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::Things::hasBeenRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::hasBeenRead",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_hasBeenRead",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (bool)(arg1)->hasBeenRead();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_asValue(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::Value *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::asValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::asValue",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_asValue",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::os::Value *)yarp_os_Things_asValue(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_asBottle(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::asBottle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::asBottle",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_asBottle",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::os::Bottle *)yarp_os_Things_asBottle(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_asProperty(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::asProperty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::asProperty",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_asProperty",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::os::Property *)yarp_os_Things_asProperty(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_asVector(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::Vector *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::asVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::asVector",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_asVector",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::sig::Vector *)yarp_os_Things_asVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Vector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_asMatrix(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::Matrix *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::asMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::asMatrix",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_asMatrix",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::sig::Matrix *)yarp_os_Things_asMatrix(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Matrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_asImage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::Image *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::asImage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::asImage",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_asImage",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::sig::Image *)yarp_os_Things_asImage(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Image,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_asImageOfPixelRgb(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::asImageOfPixelRgb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::asImageOfPixelRgb",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_asImageOfPixelRgb",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)yarp_os_Things_asImageOfPixelRgb(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_asImageOfPixelBgr(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelBgr > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::asImageOfPixelBgr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::asImageOfPixelBgr",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_asImageOfPixelBgr",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelBgr > *)yarp_os_Things_asImageOfPixelBgr(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Things_asImageOfPixelMono(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Things *arg1 = (yarp::os::Things *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::Things::asImageOfPixelMono",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::Things::asImageOfPixelMono",1,"yarp::os::Things *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Things,0))){
    SWIG_fail_ptr("Things_asImageOfPixelMono",1,SWIGTYPE_p_yarp__os__Things);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)yarp_os_Things_asImageOfPixelMono(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Things(void *obj) {
yarp::os::Things *arg1 = (yarp::os::Things *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_Things_methods[] = {
    {"setPortWriter", _wrap_Things_setPortWriter}, 
    {"getPortWriter", _wrap_Things_getPortWriter}, 
    {"setPortReader", _wrap_Things_setPortReader}, 
    {"getPortReader", _wrap_Things_getPortReader}, 
    {"setConnectionReader", _wrap_Things_setConnectionReader}, 
    {"write", _wrap_Things_write}, 
    {"reset", _wrap_Things_reset}, 
    {"hasBeenRead", _wrap_Things_hasBeenRead}, 
    {"asValue", _wrap_Things_asValue}, 
    {"asBottle", _wrap_Things_asBottle}, 
    {"asProperty", _wrap_Things_asProperty}, 
    {"asVector", _wrap_Things_asVector}, 
    {"asMatrix", _wrap_Things_asMatrix}, 
    {"asImage", _wrap_Things_asImage}, 
    {"asImageOfPixelRgb", _wrap_Things_asImageOfPixelRgb}, 
    {"asImageOfPixelBgr", _wrap_Things_asImageOfPixelBgr}, 
    {"asImageOfPixelMono", _wrap_Things_asImageOfPixelMono}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_Things_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_Things_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_Things_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_Things_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_Things_bases[] = {0};
static const char *swig_yarp_os_Things_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_Things = { "Things", &SWIGTYPE_p_yarp__os__Things,_wrap_new_Things, swig_delete_Things, swig_yarp_os_Things_methods, swig_yarp_os_Things_attributes, { "Things", swig_yarp_os_Things_cls_methods, swig_yarp_os_Things_cls_attributes, swig_yarp_os_Things_cls_constants }, swig_yarp_os_Things_bases, swig_yarp_os_Things_base_names };

static int _wrap_new_QosStyle(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::QosStyle::QosStyle",0,0)
  result = (yarp::os::QosStyle *)new yarp::os::QosStyle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__QosStyle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_setPacketPriorityByDscp(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP arg2 ;
  
  SWIG_check_num_args("yarp::os::QosStyle::setPacketPriorityByDscp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::setPacketPriorityByDscp",1,"yarp::os::QosStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::QosStyle::setPacketPriorityByDscp",2,"yarp::os::QosStyle::PacketPriorityDSCP");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_setPacketPriorityByDscp",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  arg2 = (yarp::os::QosStyle::PacketPriorityDSCP)(int)lua_tonumber(L, 2);
  (arg1)->setPacketPriorityByDscp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_setPacketPriorityByLevel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityLevel arg2 ;
  
  SWIG_check_num_args("yarp::os::QosStyle::setPacketPriorityByLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::setPacketPriorityByLevel",1,"yarp::os::QosStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::QosStyle::setPacketPriorityByLevel",2,"yarp::os::QosStyle::PacketPriorityLevel");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_setPacketPriorityByLevel",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  arg2 = (yarp::os::QosStyle::PacketPriorityLevel)(int)lua_tonumber(L, 2);
  (arg1)->setPacketPriorityByLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_setPacketPrioritybyTOS(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::os::QosStyle::setPacketPrioritybyTOS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::setPacketPrioritybyTOS",1,"yarp::os::QosStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::QosStyle::setPacketPrioritybyTOS",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_setPacketPrioritybyTOS",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPacketPrioritybyTOS(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_setPacketPriority(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::QosStyle::setPacketPriority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::setPacketPriority",1,"yarp::os::QosStyle *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::QosStyle::setPacketPriority",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_setPacketPriority",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->setPacketPriority((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_setThreadPriority(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::os::QosStyle::setThreadPriority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::setThreadPriority",1,"yarp::os::QosStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::QosStyle::setThreadPriority",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_setThreadPriority",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setThreadPriority(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_setThreadPolicy(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::os::QosStyle::setThreadPolicy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::setThreadPolicy",1,"yarp::os::QosStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::QosStyle::setThreadPolicy",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_setThreadPolicy",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setThreadPolicy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_getPacketPriorityAsTOS(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::QosStyle::getPacketPriorityAsTOS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::getPacketPriorityAsTOS",1,"yarp::os::QosStyle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_getPacketPriorityAsTOS",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  result = (int)((yarp::os::QosStyle const *)arg1)->getPacketPriorityAsTOS();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_getPacketPriorityAsDSCP(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  SWIG_check_num_args("yarp::os::QosStyle::getPacketPriorityAsDSCP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::getPacketPriorityAsDSCP",1,"yarp::os::QosStyle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_getPacketPriorityAsDSCP",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  result = (yarp::os::QosStyle::PacketPriorityDSCP)((yarp::os::QosStyle const *)arg1)->getPacketPriorityAsDSCP();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_getPacketPriorityAsLevel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  SWIG_check_num_args("yarp::os::QosStyle::getPacketPriorityAsLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::getPacketPriorityAsLevel",1,"yarp::os::QosStyle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_getPacketPriorityAsLevel",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  result = (yarp::os::QosStyle::PacketPriorityLevel)((yarp::os::QosStyle const *)arg1)->getPacketPriorityAsLevel();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_getThreadPriority(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::QosStyle::getThreadPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::getThreadPriority",1,"yarp::os::QosStyle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_getThreadPriority",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  result = (int)((yarp::os::QosStyle const *)arg1)->getThreadPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_getThreadPolicy(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::QosStyle::getThreadPolicy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::QosStyle::getThreadPolicy",1,"yarp::os::QosStyle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__QosStyle,0))){
    SWIG_fail_ptr("QosStyle_getThreadPolicy",1,SWIGTYPE_p_yarp__os__QosStyle);
  }
  
  result = (int)((yarp::os::QosStyle const *)arg1)->getThreadPolicy();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_getDSCPByVocab(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  yarp::os::QosStyle::PacketPriorityDSCP result;
  
  SWIG_check_num_args("yarp::os::QosStyle::getDSCPByVocab",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::QosStyle::getDSCPByVocab",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (yarp::os::QosStyle::PacketPriorityDSCP)yarp::os::QosStyle::getDSCPByVocab(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QosStyle_getLevelByVocab(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  yarp::os::QosStyle::PacketPriorityLevel result;
  
  SWIG_check_num_args("yarp::os::QosStyle::getLevelByVocab",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::os::QosStyle::getLevelByVocab",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (yarp::os::QosStyle::PacketPriorityLevel)yarp::os::QosStyle::getLevelByVocab(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_QosStyle(void *obj) {
yarp::os::QosStyle *arg1 = (yarp::os::QosStyle *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_QosStyle_methods[] = {
    {"setPacketPriorityByDscp", _wrap_QosStyle_setPacketPriorityByDscp}, 
    {"setPacketPriorityByLevel", _wrap_QosStyle_setPacketPriorityByLevel}, 
    {"setPacketPrioritybyTOS", _wrap_QosStyle_setPacketPrioritybyTOS}, 
    {"setPacketPriority", _wrap_QosStyle_setPacketPriority}, 
    {"setThreadPriority", _wrap_QosStyle_setThreadPriority}, 
    {"setThreadPolicy", _wrap_QosStyle_setThreadPolicy}, 
    {"getPacketPriorityAsTOS", _wrap_QosStyle_getPacketPriorityAsTOS}, 
    {"getPacketPriorityAsDSCP", _wrap_QosStyle_getPacketPriorityAsDSCP}, 
    {"getPacketPriorityAsLevel", _wrap_QosStyle_getPacketPriorityAsLevel}, 
    {"getThreadPriority", _wrap_QosStyle_getThreadPriority}, 
    {"getThreadPolicy", _wrap_QosStyle_getThreadPolicy}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_QosStyle_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_QosStyle_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_QosStyle_cls_methods[] = {
    {"getDSCPByVocab", _wrap_QosStyle_getDSCPByVocab}, 
    {"getLevelByVocab", _wrap_QosStyle_getLevelByVocab}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_os_QosStyle_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("PacketPriorityInvalid", yarp::os::QosStyle::PacketPriorityInvalid)},
    {SWIG_LUA_CONSTTAB_INT("PacketPriorityNormal", yarp::os::QosStyle::PacketPriorityNormal)},
    {SWIG_LUA_CONSTTAB_INT("PacketPriorityLow", yarp::os::QosStyle::PacketPriorityLow)},
    {SWIG_LUA_CONSTTAB_INT("PacketPriorityHigh", yarp::os::QosStyle::PacketPriorityHigh)},
    {SWIG_LUA_CONSTTAB_INT("PacketPriorityCritical", yarp::os::QosStyle::PacketPriorityCritical)},
    {SWIG_LUA_CONSTTAB_INT("PacketPriorityUndefined", yarp::os::QosStyle::PacketPriorityUndefined)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_Invalid", yarp::os::QosStyle::DSCP_Invalid)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_CS0", yarp::os::QosStyle::DSCP_CS0)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_CS1", yarp::os::QosStyle::DSCP_CS1)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_CS2", yarp::os::QosStyle::DSCP_CS2)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_CS3", yarp::os::QosStyle::DSCP_CS3)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_CS4", yarp::os::QosStyle::DSCP_CS4)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_CS5", yarp::os::QosStyle::DSCP_CS5)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_CS6", yarp::os::QosStyle::DSCP_CS6)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_CS7", yarp::os::QosStyle::DSCP_CS7)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF11", yarp::os::QosStyle::DSCP_AF11)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF12", yarp::os::QosStyle::DSCP_AF12)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF13", yarp::os::QosStyle::DSCP_AF13)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF21", yarp::os::QosStyle::DSCP_AF21)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF22", yarp::os::QosStyle::DSCP_AF22)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF23", yarp::os::QosStyle::DSCP_AF23)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF31", yarp::os::QosStyle::DSCP_AF31)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF32", yarp::os::QosStyle::DSCP_AF32)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF33", yarp::os::QosStyle::DSCP_AF33)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF41", yarp::os::QosStyle::DSCP_AF41)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF42", yarp::os::QosStyle::DSCP_AF42)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_AF43", yarp::os::QosStyle::DSCP_AF43)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_VA", yarp::os::QosStyle::DSCP_VA)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_EF", yarp::os::QosStyle::DSCP_EF)},
    {SWIG_LUA_CONSTTAB_INT("DSCP_Undefined", yarp::os::QosStyle::DSCP_Undefined)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_QosStyle_bases[] = {0};
static const char *swig_yarp_os_QosStyle_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_QosStyle = { "QosStyle", &SWIGTYPE_p_yarp__os__QosStyle,_wrap_new_QosStyle, swig_delete_QosStyle, swig_yarp_os_QosStyle_methods, swig_yarp_os_QosStyle_attributes, { "QosStyle", swig_yarp_os_QosStyle_cls_methods, swig_yarp_os_QosStyle_cls_attributes, swig_yarp_os_QosStyle_cls_constants }, swig_yarp_os_QosStyle_bases, swig_yarp_os_QosStyle_base_names };

static int _wrap_TypedReaderProperty_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::setStrict",1,"yarp::os::TypedReader< Property > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Property >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::setStrict",1,"yarp::os::TypedReader< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderProperty_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderProperty_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderProperty_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< Property >::setStrict(bool)\n"
    "    yarp::os::TypedReader< Property >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderProperty_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::read",1,"yarp::os::TypedReader< Property > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Property >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::read",1,"yarp::os::TypedReader< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  result = (yarp::os::Property *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderProperty_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderProperty_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderProperty_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< Property >::read(bool)\n"
    "    yarp::os::TypedReader< Property >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderProperty_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::interrupt",1,"yarp::os::TypedReader< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_interrupt",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::lastRead",1,"yarp::os::TypedReader< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_lastRead",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  result = (yarp::os::Property *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::isClosed",1,"yarp::os::TypedReader< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_isClosed",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_useCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Property > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::useCallback",1,"yarp::os::TypedReader< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Property >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::os::Property > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_useCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::disableCallback",1,"yarp::os::TypedReader< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_disableCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::getPendingReads",1,"yarp::os::TypedReader< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_getPendingReads",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::getName",1,"yarp::os::TypedReader< Property > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_getName",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  result = ((yarp::os::TypedReader< Property > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::setReplier",1,"yarp::os::TypedReader< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Property >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_setReplier",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("TypedReaderProperty_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::acquire",1,"yarp::os::TypedReader< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_acquire",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::release",1,"yarp::os::TypedReader< Property > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Property >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_release",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TypedReaderProperty_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderProperty_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Property >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Property >::setTargetPeriod",1,"yarp::os::TypedReader< Property > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Property >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("TypedReaderProperty_setTargetPeriod",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderProperty(void *obj) {
yarp::os::TypedReader< Property > *arg1 = (yarp::os::TypedReader< Property > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReader_Sl_Property_Sg__methods[] = {
    {"setStrict", _wrap_TypedReaderProperty_setStrict}, 
    {"read", _wrap_TypedReaderProperty_read}, 
    {"interrupt", _wrap_TypedReaderProperty_interrupt}, 
    {"lastRead", _wrap_TypedReaderProperty_lastRead}, 
    {"isClosed", _wrap_TypedReaderProperty_isClosed}, 
    {"useCallback", _wrap_TypedReaderProperty_useCallback}, 
    {"disableCallback", _wrap_TypedReaderProperty_disableCallback}, 
    {"getPendingReads", _wrap_TypedReaderProperty_getPendingReads}, 
    {"getName", _wrap_TypedReaderProperty_getName}, 
    {"setReplier", _wrap_TypedReaderProperty_setReplier}, 
    {"acquire", _wrap_TypedReaderProperty_acquire}, 
    {"release", _wrap_TypedReaderProperty_release}, 
    {"setTargetPeriod", _wrap_TypedReaderProperty_setTargetPeriod}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_Property_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_Property_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReader_Sl_Property_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReader_Sl_Property_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReader_Sl_Property_Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReader_Sl_Property_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReader_Sl_Property_Sg_ = { "TypedReaderProperty", &SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0, swig_delete_TypedReaderProperty, swig_yarp_os_TypedReader_Sl_Property_Sg__methods, swig_yarp_os_TypedReader_Sl_Property_Sg__attributes, { "TypedReaderProperty", swig_yarp_os_TypedReader_Sl_Property_Sg__cls_methods, swig_yarp_os_TypedReader_Sl_Property_Sg__cls_attributes, swig_yarp_os_TypedReader_Sl_Property_Sg__cls_constants }, swig_yarp_os_TypedReader_Sl_Property_Sg__bases, swig_yarp_os_TypedReader_Sl_Property_Sg__base_names };

static int _wrap_PropertyCallback_onRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< Property >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< Property >::onRead",1,"yarp::os::TypedReaderCallback< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< Property >::onRead",2,"yarp::os::Property &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("PropertyCallback_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("PropertyCallback_onRead",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertyCallback_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Property > *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< Property >::onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< Property >::onRead",1,"yarp::os::TypedReaderCallback< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< Property >::onRead",2,"yarp::os::Property &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::TypedReaderCallback< Property >::onRead",3,"yarp::os::TypedReader< yarp::os::Property > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("PropertyCallback_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("PropertyCallback_onRead",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("PropertyCallback_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Property > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertyCallback_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PropertyCallback_onRead__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PropertyCallback_onRead__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PropertyCallback_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReaderCallback< Property >::onRead(yarp::os::Property &)\n"
    "    yarp::os::TypedReaderCallback< Property >::onRead(yarp::os::Property &,yarp::os::TypedReader< yarp::os::Property > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_PropertyCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< Property > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< Property >::TypedReaderCallback",0,0)
  result = (yarp::os::TypedReaderCallback< Property > *)new yarp::os::TypedReaderCallback< Property >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PropertyCallback(void *obj) {
yarp::os::TypedReaderCallback< Property > *arg1 = (yarp::os::TypedReaderCallback< Property > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__methods[] = {
    {"onRead", _wrap_PropertyCallback_onRead}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReaderCallback_Sl_Property_Sg_ = { "PropertyCallback", &SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t,_wrap_new_PropertyCallback, swig_delete_PropertyCallback, swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__methods, swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__attributes, { "PropertyCallback", swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__cls_methods, swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__cls_attributes, swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__cls_constants }, swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__bases, swig_yarp_os_TypedReaderCallback_Sl_Property_Sg__base_names };

static int _wrap_BufferedPortProperty_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Property > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::os::Property &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::os::Property > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortProperty_onRead",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Property > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortProperty__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::BufferedPort",0,0)
  result = (yarp::os::BufferedPort< Property > *)new yarp::os::BufferedPort< Property >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortProperty__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< Property > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::BufferedPort",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::BufferedPort",1,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("new_BufferedPortProperty",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (yarp::os::BufferedPort< Property > *)new yarp::os::BufferedPort< Property >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortProperty(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BufferedPortProperty__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BufferedPortProperty__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BufferedPortProperty'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Property >::BufferedPort()\n"
    "    yarp::os::BufferedPort< Property >::BufferedPort(yarp::os::Port &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortProperty_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::addOutput",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::addOutput",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::addOutput",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("BufferedPortProperty_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortProperty_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortProperty_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BufferedPortProperty_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortProperty_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Property >::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< Property >::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< Property >::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortProperty_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::close",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_close",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::interrupt",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_interrupt",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::resume",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_resume",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::getPendingReads",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_getPendingReads",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::where",1,"yarp::os::BufferedPort< Property > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_where",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = ((yarp::os::BufferedPort< Property > const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::getName",1,"yarp::os::BufferedPort< Property > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_getName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = ((yarp::os::BufferedPort< Property > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_prepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::prepare",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_prepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (yarp::os::Property *) &(arg1)->prepare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_unprepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::unprepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::unprepare",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_unprepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (bool)(arg1)->unprepare();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::write",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::write",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  (arg1)->write();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortProperty_write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortProperty_write__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortProperty_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Property >::write(bool)\n"
    "    yarp::os::BufferedPort< Property >::write()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortProperty_writeStrict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::writeStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::writeStrict",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_writeStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  (arg1)->writeStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::waitForWrite",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_waitForWrite",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setStrict",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setStrict",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortProperty_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortProperty_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortProperty_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Property >::setStrict(bool)\n"
    "    yarp::os::BufferedPort< Property >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortProperty_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::read",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::read",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (yarp::os::Property *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortProperty_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortProperty_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortProperty_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Property >::read(bool)\n"
    "    yarp::os::BufferedPort< Property >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortProperty_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::lastRead",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_lastRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (yarp::os::Property *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::isClosed",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_isClosed",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setReplier",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setReplier",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortProperty_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setReader",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortProperty_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setAdminReader",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setAdminReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortProperty_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::onRead",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::onRead",2,"yarp::os::Property &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortProperty_onRead",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortProperty_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Property, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Property_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BufferedPortProperty_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortProperty_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::os::Property &,yarp::os::TypedReader< yarp::os::Property > const &)\n"
    "    yarp::os::BufferedPort< Property >::onRead(yarp::os::Property &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortProperty_useCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Property > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::useCallback",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::os::Property > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_useCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::useCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::useCallback",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  (arg1)->useCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_useCallback(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortProperty_useCallback__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortProperty_useCallback__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortProperty_useCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Property >::useCallback(yarp::os::TypedReaderCallback< yarp::os::Property > &)\n"
    "    yarp::os::BufferedPort< Property >::useCallback()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortProperty_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::disableCallback",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_disableCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setEnvelope",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("BufferedPortProperty_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::getEnvelope",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_getEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortProperty_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::getInputCount",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_getInputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::getOutputCount",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_getOutputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::isWriting",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_isWriting",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::getReport",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_getReport",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortProperty_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setReporter",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setReporter",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortProperty_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::acquire",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_acquire",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::release",1,"yarp::os::BufferedPort< Property > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_release",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BufferedPortProperty_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setTargetPeriod",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setTargetPeriod",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::getType",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_getType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::promiseType",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_promiseType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("BufferedPortProperty_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setInputMode",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setInputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setOutputMode",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setOutputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setRpcMode",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setRpcMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::acquireProperties",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_acquireProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::releaseProperties",1,"yarp::os::BufferedPort< Property > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_releaseProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortProperty_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::includeNodeInName",1,"yarp::os::BufferedPort< Property > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_includeNodeInName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_setCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setCallbackLock",1,"yarp::os::BufferedPort< Property > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_setCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("BufferedPortProperty_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::removeCallbackLock",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_removeCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::lockCallback",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_lockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::tryLockCallback",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_tryLockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortProperty_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Property >::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Property >::unlockCallback",1,"yarp::os::BufferedPort< Property > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,0))){
    SWIG_fail_ptr("BufferedPortProperty_unlockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferedPortProperty(void *obj) {
yarp::os::BufferedPort< Property > *arg1 = (yarp::os::BufferedPort< Property > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_BufferedPort_Sl_Property_Sg__methods[] = {
    {"addOutput", _wrap_BufferedPortProperty_addOutput}, 
    {"close", _wrap_BufferedPortProperty_close}, 
    {"interrupt", _wrap_BufferedPortProperty_interrupt}, 
    {"resume", _wrap_BufferedPortProperty_resume}, 
    {"getPendingReads", _wrap_BufferedPortProperty_getPendingReads}, 
    {"where", _wrap_BufferedPortProperty_where}, 
    {"getName", _wrap_BufferedPortProperty_getName}, 
    {"prepare", _wrap_BufferedPortProperty_prepare}, 
    {"unprepare", _wrap_BufferedPortProperty_unprepare}, 
    {"write", _wrap_BufferedPortProperty_write}, 
    {"writeStrict", _wrap_BufferedPortProperty_writeStrict}, 
    {"waitForWrite", _wrap_BufferedPortProperty_waitForWrite}, 
    {"setStrict", _wrap_BufferedPortProperty_setStrict}, 
    {"read", _wrap_BufferedPortProperty_read}, 
    {"lastRead", _wrap_BufferedPortProperty_lastRead}, 
    {"isClosed", _wrap_BufferedPortProperty_isClosed}, 
    {"setReplier", _wrap_BufferedPortProperty_setReplier}, 
    {"setReader", _wrap_BufferedPortProperty_setReader}, 
    {"setAdminReader", _wrap_BufferedPortProperty_setAdminReader}, 
    {"onRead", _wrap_BufferedPortProperty_onRead}, 
    {"useCallback", _wrap_BufferedPortProperty_useCallback}, 
    {"disableCallback", _wrap_BufferedPortProperty_disableCallback}, 
    {"setEnvelope", _wrap_BufferedPortProperty_setEnvelope}, 
    {"getEnvelope", _wrap_BufferedPortProperty_getEnvelope}, 
    {"getInputCount", _wrap_BufferedPortProperty_getInputCount}, 
    {"getOutputCount", _wrap_BufferedPortProperty_getOutputCount}, 
    {"isWriting", _wrap_BufferedPortProperty_isWriting}, 
    {"getReport", _wrap_BufferedPortProperty_getReport}, 
    {"setReporter", _wrap_BufferedPortProperty_setReporter}, 
    {"acquire", _wrap_BufferedPortProperty_acquire}, 
    {"release", _wrap_BufferedPortProperty_release}, 
    {"setTargetPeriod", _wrap_BufferedPortProperty_setTargetPeriod}, 
    {"getType", _wrap_BufferedPortProperty_getType}, 
    {"promiseType", _wrap_BufferedPortProperty_promiseType}, 
    {"setInputMode", _wrap_BufferedPortProperty_setInputMode}, 
    {"setOutputMode", _wrap_BufferedPortProperty_setOutputMode}, 
    {"setRpcMode", _wrap_BufferedPortProperty_setRpcMode}, 
    {"acquireProperties", _wrap_BufferedPortProperty_acquireProperties}, 
    {"releaseProperties", _wrap_BufferedPortProperty_releaseProperties}, 
    {"includeNodeInName", _wrap_BufferedPortProperty_includeNodeInName}, 
    {"setCallbackLock", _wrap_BufferedPortProperty_setCallbackLock}, 
    {"removeCallbackLock", _wrap_BufferedPortProperty_removeCallbackLock}, 
    {"lockCallback", _wrap_BufferedPortProperty_lockCallback}, 
    {"tryLockCallback", _wrap_BufferedPortProperty_tryLockCallback}, 
    {"unlockCallback", _wrap_BufferedPortProperty_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_Property_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_Property_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_BufferedPort_Sl_Property_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_BufferedPort_Sl_Property_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_BufferedPort_Sl_Property_Sg__bases[] = {0,0,0,0};
static const char *swig_yarp_os_BufferedPort_Sl_Property_Sg__base_names[] = {"yarp::os::Contactable *","yarp::os::TypedReader< Property > *","yarp::os::TypedReaderCallback< Property > *",0};
static swig_lua_class _wrap_class_yarp_os_BufferedPort_Sl_Property_Sg_ = { "BufferedPortProperty", &SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Property_t,_wrap_new_BufferedPortProperty, swig_delete_BufferedPortProperty, swig_yarp_os_BufferedPort_Sl_Property_Sg__methods, swig_yarp_os_BufferedPort_Sl_Property_Sg__attributes, { "BufferedPortProperty", swig_yarp_os_BufferedPort_Sl_Property_Sg__cls_methods, swig_yarp_os_BufferedPort_Sl_Property_Sg__cls_attributes, swig_yarp_os_BufferedPort_Sl_Property_Sg__cls_constants }, swig_yarp_os_BufferedPort_Sl_Property_Sg__bases, swig_yarp_os_BufferedPort_Sl_Property_Sg__base_names };

static int _wrap_TypedReaderBottle_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::setStrict",1,"yarp::os::TypedReader< Bottle > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::setStrict",1,"yarp::os::TypedReader< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderBottle_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderBottle_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderBottle_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< Bottle >::setStrict(bool)\n"
    "    yarp::os::TypedReader< Bottle >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderBottle_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  bool arg2 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::read",1,"yarp::os::TypedReader< Bottle > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Bottle *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::read",1,"yarp::os::TypedReader< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  result = (yarp::os::Bottle *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderBottle_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderBottle_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderBottle_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< Bottle >::read(bool)\n"
    "    yarp::os::TypedReader< Bottle >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderBottle_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::interrupt",1,"yarp::os::TypedReader< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_interrupt",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::lastRead",1,"yarp::os::TypedReader< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_lastRead",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  result = (yarp::os::Bottle *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::isClosed",1,"yarp::os::TypedReader< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_isClosed",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_useCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Bottle > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::useCallback",1,"yarp::os::TypedReader< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::os::Bottle > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_useCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::disableCallback",1,"yarp::os::TypedReader< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_disableCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::getPendingReads",1,"yarp::os::TypedReader< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_getPendingReads",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::getName",1,"yarp::os::TypedReader< Bottle > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_getName",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  result = ((yarp::os::TypedReader< Bottle > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::setReplier",1,"yarp::os::TypedReader< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_setReplier",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("TypedReaderBottle_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::acquire",1,"yarp::os::TypedReader< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_acquire",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::release",1,"yarp::os::TypedReader< Bottle > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_release",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TypedReaderBottle_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderBottle_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< Bottle >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::setTargetPeriod",1,"yarp::os::TypedReader< Bottle > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::TypedReader< Bottle >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("TypedReaderBottle_setTargetPeriod",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderBottle(void *obj) {
yarp::os::TypedReader< Bottle > *arg1 = (yarp::os::TypedReader< Bottle > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReader_Sl_Bottle_Sg__methods[] = {
    {"setStrict", _wrap_TypedReaderBottle_setStrict}, 
    {"read", _wrap_TypedReaderBottle_read}, 
    {"interrupt", _wrap_TypedReaderBottle_interrupt}, 
    {"lastRead", _wrap_TypedReaderBottle_lastRead}, 
    {"isClosed", _wrap_TypedReaderBottle_isClosed}, 
    {"useCallback", _wrap_TypedReaderBottle_useCallback}, 
    {"disableCallback", _wrap_TypedReaderBottle_disableCallback}, 
    {"getPendingReads", _wrap_TypedReaderBottle_getPendingReads}, 
    {"getName", _wrap_TypedReaderBottle_getName}, 
    {"setReplier", _wrap_TypedReaderBottle_setReplier}, 
    {"acquire", _wrap_TypedReaderBottle_acquire}, 
    {"release", _wrap_TypedReaderBottle_release}, 
    {"setTargetPeriod", _wrap_TypedReaderBottle_setTargetPeriod}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_Bottle_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_Bottle_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReader_Sl_Bottle_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReader_Sl_Bottle_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReader_Sl_Bottle_Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReader_Sl_Bottle_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReader_Sl_Bottle_Sg_ = { "TypedReaderBottle", &SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0, swig_delete_TypedReaderBottle, swig_yarp_os_TypedReader_Sl_Bottle_Sg__methods, swig_yarp_os_TypedReader_Sl_Bottle_Sg__attributes, { "TypedReaderBottle", swig_yarp_os_TypedReader_Sl_Bottle_Sg__cls_methods, swig_yarp_os_TypedReader_Sl_Bottle_Sg__cls_attributes, swig_yarp_os_TypedReader_Sl_Bottle_Sg__cls_constants }, swig_yarp_os_TypedReader_Sl_Bottle_Sg__bases, swig_yarp_os_TypedReader_Sl_Bottle_Sg__base_names };

static int _wrap_BottleCallback_onRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< Bottle >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< Bottle >::onRead",1,"yarp::os::TypedReaderCallback< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< Bottle >::onRead",2,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BottleCallback_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("BottleCallback_onRead",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BottleCallback_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< Bottle >::onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< Bottle >::onRead",1,"yarp::os::TypedReaderCallback< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< Bottle >::onRead",2,"yarp::os::Bottle &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::TypedReaderCallback< Bottle >::onRead",3,"yarp::os::TypedReader< yarp::os::Bottle > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BottleCallback_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("BottleCallback_onRead",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BottleCallback_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BottleCallback_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BottleCallback_onRead__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BottleCallback_onRead__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BottleCallback_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReaderCallback< Bottle >::onRead(yarp::os::Bottle &)\n"
    "    yarp::os::TypedReaderCallback< Bottle >::onRead(yarp::os::Bottle &,yarp::os::TypedReader< yarp::os::Bottle > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_BottleCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< Bottle > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< Bottle >::TypedReaderCallback",0,0)
  result = (yarp::os::TypedReaderCallback< Bottle > *)new yarp::os::TypedReaderCallback< Bottle >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BottleCallback(void *obj) {
yarp::os::TypedReaderCallback< Bottle > *arg1 = (yarp::os::TypedReaderCallback< Bottle > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__methods[] = {
    {"onRead", _wrap_BottleCallback_onRead}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReaderCallback_Sl_Bottle_Sg_ = { "BottleCallback", &SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t,_wrap_new_BottleCallback, swig_delete_BottleCallback, swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__methods, swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__attributes, { "BottleCallback", swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__cls_methods, swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__cls_attributes, swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__cls_constants }, swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__bases, swig_yarp_os_TypedReaderCallback_Sl_Bottle_Sg__base_names };

static int _wrap_BufferedPortBottle_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::os::Bottle &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::os::Bottle > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("BufferedPortBottle_onRead",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortBottle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::BufferedPort",0,0)
  result = (yarp::os::BufferedPort< Bottle > *)new yarp::os::BufferedPort< Bottle >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortBottle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< Bottle > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::BufferedPort",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::BufferedPort",1,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("new_BufferedPortBottle",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (yarp::os::BufferedPort< Bottle > *)new yarp::os::BufferedPort< Bottle >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortBottle(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BufferedPortBottle__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BufferedPortBottle__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BufferedPortBottle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Bottle >::BufferedPort()\n"
    "    yarp::os::BufferedPort< Bottle >::BufferedPort(yarp::os::Port &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortBottle_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::addOutput",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::addOutput",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::addOutput",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("BufferedPortBottle_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortBottle_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortBottle_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BufferedPortBottle_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortBottle_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Bottle >::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< Bottle >::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< Bottle >::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortBottle_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::close",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_close",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::interrupt",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_interrupt",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::resume",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_resume",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::getPendingReads",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_getPendingReads",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::where",1,"yarp::os::BufferedPort< Bottle > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_where",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = ((yarp::os::BufferedPort< Bottle > const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::getName",1,"yarp::os::BufferedPort< Bottle > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_getName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = ((yarp::os::BufferedPort< Bottle > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_prepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::prepare",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_prepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (yarp::os::Bottle *) &(arg1)->prepare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_unprepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::unprepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::unprepare",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_unprepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (bool)(arg1)->unprepare();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::write",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::write",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  (arg1)->write();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortBottle_write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortBottle_write__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortBottle_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Bottle >::write(bool)\n"
    "    yarp::os::BufferedPort< Bottle >::write()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortBottle_writeStrict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::writeStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::writeStrict",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_writeStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  (arg1)->writeStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::waitForWrite",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_waitForWrite",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setStrict",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setStrict",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortBottle_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortBottle_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortBottle_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Bottle >::setStrict(bool)\n"
    "    yarp::os::BufferedPort< Bottle >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortBottle_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::read",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Bottle *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::read",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (yarp::os::Bottle *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortBottle_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortBottle_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortBottle_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Bottle >::read(bool)\n"
    "    yarp::os::BufferedPort< Bottle >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortBottle_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::lastRead",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_lastRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (yarp::os::Bottle *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Bottle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::isClosed",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_isClosed",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setReplier",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setReplier",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortBottle_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setReader",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortBottle_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setAdminReader",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setAdminReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortBottle_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::onRead",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::onRead",2,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("BufferedPortBottle_onRead",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortBottle_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BufferedPortBottle_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortBottle_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::os::Bottle &,yarp::os::TypedReader< yarp::os::Bottle > const &)\n"
    "    yarp::os::BufferedPort< Bottle >::onRead(yarp::os::Bottle &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortBottle_useCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::os::Bottle > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::useCallback",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::os::Bottle > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_useCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::useCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::useCallback",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  (arg1)->useCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_useCallback(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortBottle_useCallback__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortBottle_useCallback__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortBottle_useCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< Bottle >::useCallback(yarp::os::TypedReaderCallback< yarp::os::Bottle > &)\n"
    "    yarp::os::BufferedPort< Bottle >::useCallback()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortBottle_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::disableCallback",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_disableCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setEnvelope",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("BufferedPortBottle_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::getEnvelope",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_getEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortBottle_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::getInputCount",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_getInputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::getOutputCount",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_getOutputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::isWriting",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_isWriting",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::getReport",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_getReport",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortBottle_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setReporter",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setReporter",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortBottle_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::acquire",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_acquire",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::release",1,"yarp::os::BufferedPort< Bottle > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_release",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BufferedPortBottle_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setTargetPeriod",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setTargetPeriod",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::getType",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_getType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::promiseType",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_promiseType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("BufferedPortBottle_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setInputMode",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setInputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setOutputMode",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setOutputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setRpcMode",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setRpcMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::acquireProperties",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_acquireProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::releaseProperties",1,"yarp::os::BufferedPort< Bottle > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_releaseProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortBottle_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::includeNodeInName",1,"yarp::os::BufferedPort< Bottle > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_includeNodeInName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_setCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setCallbackLock",1,"yarp::os::BufferedPort< Bottle > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_setCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("BufferedPortBottle_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::removeCallbackLock",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_removeCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::lockCallback",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_lockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::tryLockCallback",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_tryLockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortBottle_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< Bottle >::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< Bottle >::unlockCallback",1,"yarp::os::BufferedPort< Bottle > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("BufferedPortBottle_unlockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferedPortBottle(void *obj) {
yarp::os::BufferedPort< Bottle > *arg1 = (yarp::os::BufferedPort< Bottle > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_BufferedPort_Sl_Bottle_Sg__methods[] = {
    {"addOutput", _wrap_BufferedPortBottle_addOutput}, 
    {"close", _wrap_BufferedPortBottle_close}, 
    {"interrupt", _wrap_BufferedPortBottle_interrupt}, 
    {"resume", _wrap_BufferedPortBottle_resume}, 
    {"getPendingReads", _wrap_BufferedPortBottle_getPendingReads}, 
    {"where", _wrap_BufferedPortBottle_where}, 
    {"getName", _wrap_BufferedPortBottle_getName}, 
    {"prepare", _wrap_BufferedPortBottle_prepare}, 
    {"unprepare", _wrap_BufferedPortBottle_unprepare}, 
    {"write", _wrap_BufferedPortBottle_write}, 
    {"writeStrict", _wrap_BufferedPortBottle_writeStrict}, 
    {"waitForWrite", _wrap_BufferedPortBottle_waitForWrite}, 
    {"setStrict", _wrap_BufferedPortBottle_setStrict}, 
    {"read", _wrap_BufferedPortBottle_read}, 
    {"lastRead", _wrap_BufferedPortBottle_lastRead}, 
    {"isClosed", _wrap_BufferedPortBottle_isClosed}, 
    {"setReplier", _wrap_BufferedPortBottle_setReplier}, 
    {"setReader", _wrap_BufferedPortBottle_setReader}, 
    {"setAdminReader", _wrap_BufferedPortBottle_setAdminReader}, 
    {"onRead", _wrap_BufferedPortBottle_onRead}, 
    {"useCallback", _wrap_BufferedPortBottle_useCallback}, 
    {"disableCallback", _wrap_BufferedPortBottle_disableCallback}, 
    {"setEnvelope", _wrap_BufferedPortBottle_setEnvelope}, 
    {"getEnvelope", _wrap_BufferedPortBottle_getEnvelope}, 
    {"getInputCount", _wrap_BufferedPortBottle_getInputCount}, 
    {"getOutputCount", _wrap_BufferedPortBottle_getOutputCount}, 
    {"isWriting", _wrap_BufferedPortBottle_isWriting}, 
    {"getReport", _wrap_BufferedPortBottle_getReport}, 
    {"setReporter", _wrap_BufferedPortBottle_setReporter}, 
    {"acquire", _wrap_BufferedPortBottle_acquire}, 
    {"release", _wrap_BufferedPortBottle_release}, 
    {"setTargetPeriod", _wrap_BufferedPortBottle_setTargetPeriod}, 
    {"getType", _wrap_BufferedPortBottle_getType}, 
    {"promiseType", _wrap_BufferedPortBottle_promiseType}, 
    {"setInputMode", _wrap_BufferedPortBottle_setInputMode}, 
    {"setOutputMode", _wrap_BufferedPortBottle_setOutputMode}, 
    {"setRpcMode", _wrap_BufferedPortBottle_setRpcMode}, 
    {"acquireProperties", _wrap_BufferedPortBottle_acquireProperties}, 
    {"releaseProperties", _wrap_BufferedPortBottle_releaseProperties}, 
    {"includeNodeInName", _wrap_BufferedPortBottle_includeNodeInName}, 
    {"setCallbackLock", _wrap_BufferedPortBottle_setCallbackLock}, 
    {"removeCallbackLock", _wrap_BufferedPortBottle_removeCallbackLock}, 
    {"lockCallback", _wrap_BufferedPortBottle_lockCallback}, 
    {"tryLockCallback", _wrap_BufferedPortBottle_tryLockCallback}, 
    {"unlockCallback", _wrap_BufferedPortBottle_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_Bottle_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_Bottle_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_BufferedPort_Sl_Bottle_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_BufferedPort_Sl_Bottle_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_BufferedPort_Sl_Bottle_Sg__bases[] = {0,0,0,0};
static const char *swig_yarp_os_BufferedPort_Sl_Bottle_Sg__base_names[] = {"yarp::os::Contactable *","yarp::os::TypedReader< Bottle > *","yarp::os::TypedReaderCallback< Bottle > *",0};
static swig_lua_class _wrap_class_yarp_os_BufferedPort_Sl_Bottle_Sg_ = { "BufferedPortBottle", &SWIGTYPE_p_yarp__os__BufferedPortT_yarp__os__Bottle_t,_wrap_new_BufferedPortBottle, swig_delete_BufferedPortBottle, swig_yarp_os_BufferedPort_Sl_Bottle_Sg__methods, swig_yarp_os_BufferedPort_Sl_Bottle_Sg__attributes, { "BufferedPortBottle", swig_yarp_os_BufferedPort_Sl_Bottle_Sg__cls_methods, swig_yarp_os_BufferedPort_Sl_Bottle_Sg__cls_attributes, swig_yarp_os_BufferedPort_Sl_Bottle_Sg__cls_constants }, swig_yarp_os_BufferedPort_Sl_Bottle_Sg__bases, swig_yarp_os_BufferedPort_Sl_Bottle_Sg__base_names };

static int _wrap_PAD_BYTES(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::PAD_BYTES",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::PAD_BYTES",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PAD_BYTES",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)yarp::sig::PAD_BYTES(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Image__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Image::Image",0,0)
  result = (yarp::sig::Image *)new yarp::sig::Image();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Image,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Image__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = 0 ;
  yarp::sig::Image *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Image::Image",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::Image::Image",1,"yarp::sig::Image const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("new_Image",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (yarp::sig::Image *)new yarp::sig::Image((yarp::sig::Image const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Image,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Image(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Image__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Image__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Image'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Image::Image()\n"
    "    yarp::sig::Image::Image(yarp::sig::Image const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::sig::Image *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Image::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::copy",1,"yarp::sig::Image *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::Image::copy",2,"yarp::sig::Image const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_copy",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_copy",2,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (bool)(arg1)->copy((yarp::sig::Image const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::sig::Image *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Image::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::copy",1,"yarp::sig::Image *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::Image::copy",2,"yarp::sig::Image const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Image::copy",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::sig::Image::copy",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_copy",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_copy",2,SWIGTYPE_p_yarp__sig__Image);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)(arg1)->copy((yarp::sig::Image const &)*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_copy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Image, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Image_copy__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Image, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Image_copy__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Image_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Image::copy(yarp::sig::Image const &)\n"
    "    yarp::sig::Image::copy(yarp::sig::Image const &,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_width(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Image::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::width",1,"yarp::sig::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_width",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (int)((yarp::sig::Image const *)arg1)->width();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_height(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Image::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::height",1,"yarp::sig::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_height",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (int)((yarp::sig::Image const *)arg1)->height();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getPixelSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Image::getPixelSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getPixelSize",1,"yarp::sig::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getPixelSize",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (int)((yarp::sig::Image const *)arg1)->getPixelSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getPixelCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Image::getPixelCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getPixelCode",1,"yarp::sig::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getPixelCode",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (int)((yarp::sig::Image const *)arg1)->getPixelCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getRowSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Image::getRowSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getRowSize",1,"yarp::sig::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getRowSize",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (int)((yarp::sig::Image const *)arg1)->getRowSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getQuantum(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Image::getQuantum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getQuantum",1,"yarp::sig::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getQuantum",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (int)((yarp::sig::Image const *)arg1)->getQuantum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getPadding(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Image::getPadding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getPadding",1,"yarp::sig::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getPadding",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (int)((yarp::sig::Image const *)arg1)->getPadding();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getRow(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Image::getRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getRow",1,"yarp::sig::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Image::getRow",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getRow",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (unsigned char *)(arg1)->getRow(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getPixelAddress(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Image::getPixelAddress",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getPixelAddress",1,"yarp::sig::Image const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Image::getPixelAddress",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Image::getPixelAddress",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getPixelAddress",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (unsigned char *)((yarp::sig::Image const *)arg1)->getPixelAddress(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_isPixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Image::isPixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::isPixel",1,"yarp::sig::Image const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Image::isPixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Image::isPixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_isPixel",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)((yarp::sig::Image const *)arg1)->isPixel(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_zero(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  
  SWIG_check_num_args("yarp::sig::Image::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::zero",1,"yarp::sig::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_zero",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("yarp::sig::Image::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::resize",1,"yarp::sig::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Image::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Image::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_resize",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::sig::Image *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::sig::Image::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::resize",1,"yarp::sig::Image *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::Image::resize",2,"yarp::sig::Image const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_resize",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_resize",2,SWIGTYPE_p_yarp__sig__Image);
  }
  
  (arg1)->resize((yarp::sig::Image const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Image, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Image_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Image_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Image_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Image::resize(int,int)\n"
    "    yarp::sig::Image::resize(yarp::sig::Image const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_setExternal(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("yarp::sig::Image::setExternal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::setExternal",1,"yarp::sig::Image *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::sig::Image::setExternal",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Image::setExternal",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::sig::Image::setExternal",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_setExternal",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Image_setExternal");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setExternal(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getRawImage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Image::getRawImage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getRawImage",1,"yarp::sig::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getRawImage",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (unsigned char *)((yarp::sig::Image const *)arg1)->getRawImage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getRawImageSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Image::getRawImageSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getRawImageSize",1,"yarp::sig::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getRawImageSize",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (int)((yarp::sig::Image const *)arg1)->getRawImageSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getIplImage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Image::getIplImage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getIplImage",1,"yarp::sig::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getIplImage",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (void *)(arg1)->getIplImage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_wrapIplImage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::sig::Image::wrapIplImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::wrapIplImage",1,"yarp::sig::Image *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::sig::Image::wrapIplImage",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_wrapIplImage",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Image_wrapIplImage");
  (arg1)->wrapIplImage(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Image::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::read",1,"yarp::sig::Image *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::Image::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_read",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("Image_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Image::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::write",1,"yarp::sig::Image *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::Image::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_write",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("Image_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_setQuantum(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::sig::Image::setQuantum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::setQuantum",1,"yarp::sig::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Image::setQuantum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_setQuantum",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setQuantum(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_topIsLowIndex(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Image::topIsLowIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::topIsLowIndex",1,"yarp::sig::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_topIsLowIndex",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (bool)((yarp::sig::Image const *)arg1)->topIsLowIndex();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_setTopIsLowIndex(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::sig::Image::setTopIsLowIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::setTopIsLowIndex",1,"yarp::sig::Image *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::sig::Image::setTopIsLowIndex",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_setTopIsLowIndex",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setTopIsLowIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getRowArray(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = (yarp::sig::Image *) 0 ;
  char **result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Image::getRowArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Image::getRowArray",1,"yarp::sig::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("Image_getRowArray",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  result = (char **)(arg1)->getRowArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Image(void *obj) {
yarp::sig::Image *arg1 = (yarp::sig::Image *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_Image_methods[] = {
    {"copy", _wrap_Image_copy}, 
    {"width", _wrap_Image_width}, 
    {"height", _wrap_Image_height}, 
    {"getPixelSize", _wrap_Image_getPixelSize}, 
    {"getPixelCode", _wrap_Image_getPixelCode}, 
    {"getRowSize", _wrap_Image_getRowSize}, 
    {"getQuantum", _wrap_Image_getQuantum}, 
    {"getPadding", _wrap_Image_getPadding}, 
    {"getRow", _wrap_Image_getRow}, 
    {"getPixelAddress", _wrap_Image_getPixelAddress}, 
    {"isPixel", _wrap_Image_isPixel}, 
    {"zero", _wrap_Image_zero}, 
    {"resize", _wrap_Image_resize}, 
    {"setExternal", _wrap_Image_setExternal}, 
    {"getRawImage", _wrap_Image_getRawImage}, 
    {"getRawImageSize", _wrap_Image_getRawImageSize}, 
    {"getIplImage", _wrap_Image_getIplImage}, 
    {"wrapIplImage", _wrap_Image_wrapIplImage}, 
    {"read", _wrap_Image_read}, 
    {"write", _wrap_Image_write}, 
    {"setQuantum", _wrap_Image_setQuantum}, 
    {"topIsLowIndex", _wrap_Image_topIsLowIndex}, 
    {"setTopIsLowIndex", _wrap_Image_setTopIsLowIndex}, 
    {"getRowArray", _wrap_Image_getRowArray}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_Image_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_Image_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_Image_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_Image_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_Image_bases[] = {0,0};
static const char *swig_yarp_sig_Image_base_names[] = {"yarp::os::Portable *",0};
static swig_lua_class _wrap_class_yarp_sig_Image = { "Image", &SWIGTYPE_p_yarp__sig__Image,_wrap_new_Image, swig_delete_Image, swig_yarp_sig_Image_methods, swig_yarp_sig_Image_attributes, { "Image", swig_yarp_sig_Image_cls_methods, swig_yarp_sig_Image_cls_attributes, swig_yarp_sig_Image_cls_constants }, swig_yarp_sig_Image_bases, swig_yarp_sig_Image_base_names };

static int _wrap_FlexImage_setPixelCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::sig::FlexImage::setPixelCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::FlexImage::setPixelCode",1,"yarp::sig::FlexImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::FlexImage::setPixelCode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__FlexImage,0))){
    SWIG_fail_ptr("FlexImage_setPixelCode",1,SWIGTYPE_p_yarp__sig__FlexImage);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPixelCode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FlexImage_setPixelSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::sig::FlexImage::setPixelSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::FlexImage::setPixelSize",1,"yarp::sig::FlexImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::FlexImage::setPixelSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__FlexImage,0))){
    SWIG_fail_ptr("FlexImage_setPixelSize",1,SWIGTYPE_p_yarp__sig__FlexImage);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPixelSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FlexImage_setQuantum(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::sig::FlexImage::setQuantum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::FlexImage::setQuantum",1,"yarp::sig::FlexImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::FlexImage::setQuantum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__FlexImage,0))){
    SWIG_fail_ptr("FlexImage_setQuantum",1,SWIGTYPE_p_yarp__sig__FlexImage);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setQuantum(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FlexImage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::FlexImage *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::FlexImage::FlexImage",0,0)
  result = (yarp::sig::FlexImage *)new yarp::sig::FlexImage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__FlexImage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FlexImage(void *obj) {
yarp::sig::FlexImage *arg1 = (yarp::sig::FlexImage *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_FlexImage_methods[] = {
    {"setPixelCode", _wrap_FlexImage_setPixelCode}, 
    {"setPixelSize", _wrap_FlexImage_setPixelSize}, 
    {"setQuantum", _wrap_FlexImage_setQuantum}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_FlexImage_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_FlexImage_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_FlexImage_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_FlexImage_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_FlexImage_bases[] = {0,0};
static const char *swig_yarp_sig_FlexImage_base_names[] = {"yarp::sig::Image *",0};
static swig_lua_class _wrap_class_yarp_sig_FlexImage = { "FlexImage", &SWIGTYPE_p_yarp__sig__FlexImage,_wrap_new_FlexImage, swig_delete_FlexImage, swig_yarp_sig_FlexImage_methods, swig_yarp_sig_FlexImage_attributes, { "FlexImage", swig_yarp_sig_FlexImage_cls_methods, swig_yarp_sig_FlexImage_cls_attributes, swig_yarp_sig_FlexImage_cls_constants }, swig_yarp_sig_FlexImage_bases, swig_yarp_sig_FlexImage_base_names };

static int _wrap_PixelRgb_r_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgb::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgb::r",1,"yarp::sig::PixelRgb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgb::r",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgb,0))){
    SWIG_fail_ptr("PixelRgb_r_set",1,SWIGTYPE_p_yarp__sig__PixelRgb);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgb_r_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelRgb::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgb::r",1,"yarp::sig::PixelRgb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgb,0))){
    SWIG_fail_ptr("PixelRgb_r_get",1,SWIGTYPE_p_yarp__sig__PixelRgb);
  }
  
  result = (unsigned char) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgb_g_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgb::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgb::g",1,"yarp::sig::PixelRgb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgb::g",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgb,0))){
    SWIG_fail_ptr("PixelRgb_g_set",1,SWIGTYPE_p_yarp__sig__PixelRgb);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgb_g_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelRgb::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgb::g",1,"yarp::sig::PixelRgb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgb,0))){
    SWIG_fail_ptr("PixelRgb_g_get",1,SWIGTYPE_p_yarp__sig__PixelRgb);
  }
  
  result = (unsigned char) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgb_b_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgb::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgb::b",1,"yarp::sig::PixelRgb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgb::b",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgb,0))){
    SWIG_fail_ptr("PixelRgb_b_set",1,SWIGTYPE_p_yarp__sig__PixelRgb);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgb_b_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelRgb::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgb::b",1,"yarp::sig::PixelRgb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgb,0))){
    SWIG_fail_ptr("PixelRgb_b_get",1,SWIGTYPE_p_yarp__sig__PixelRgb);
  }
  
  result = (unsigned char) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgb__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgb *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgb::PixelRgb",0,0)
  result = (yarp::sig::PixelRgb *)new yarp::sig::PixelRgb();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgb,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgb__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgb::PixelRgb",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::PixelRgb::PixelRgb",1,"unsigned char");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgb::PixelRgb",2,"unsigned char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::PixelRgb::PixelRgb",3,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgb *)new yarp::sig::PixelRgb(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgb,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgb(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PixelRgb__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_PixelRgb__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PixelRgb'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::PixelRgb::PixelRgb()\n"
    "    yarp::sig::PixelRgb::PixelRgb(unsigned char,unsigned char,unsigned char)\n");
  lua_error(L);return 0;
}


static void swig_delete_PixelRgb(void *obj) {
yarp::sig::PixelRgb *arg1 = (yarp::sig::PixelRgb *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_PixelRgb_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelRgb_attributes[] = {
    { "r", _wrap_PixelRgb_r_get, _wrap_PixelRgb_r_set},
    { "g", _wrap_PixelRgb_g_get, _wrap_PixelRgb_g_set},
    { "b", _wrap_PixelRgb_b_get, _wrap_PixelRgb_b_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelRgb_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_PixelRgb_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_PixelRgb_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_PixelRgb_bases[] = {0};
static const char *swig_yarp_sig_PixelRgb_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_sig_PixelRgb = { "PixelRgb", &SWIGTYPE_p_yarp__sig__PixelRgb,_wrap_new_PixelRgb, swig_delete_PixelRgb, swig_yarp_sig_PixelRgb_methods, swig_yarp_sig_PixelRgb_attributes, { "PixelRgb", swig_yarp_sig_PixelRgb_cls_methods, swig_yarp_sig_PixelRgb_cls_attributes, swig_yarp_sig_PixelRgb_cls_constants }, swig_yarp_sig_PixelRgb_bases, swig_yarp_sig_PixelRgb_base_names };

static int _wrap_PixelRgba_r_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgba::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgba::r",1,"yarp::sig::PixelRgba *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgba::r",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgba,0))){
    SWIG_fail_ptr("PixelRgba_r_set",1,SWIGTYPE_p_yarp__sig__PixelRgba);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgba_r_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelRgba::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgba::r",1,"yarp::sig::PixelRgba *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgba,0))){
    SWIG_fail_ptr("PixelRgba_r_get",1,SWIGTYPE_p_yarp__sig__PixelRgba);
  }
  
  result = (unsigned char) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgba_g_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgba::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgba::g",1,"yarp::sig::PixelRgba *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgba::g",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgba,0))){
    SWIG_fail_ptr("PixelRgba_g_set",1,SWIGTYPE_p_yarp__sig__PixelRgba);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgba_g_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelRgba::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgba::g",1,"yarp::sig::PixelRgba *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgba,0))){
    SWIG_fail_ptr("PixelRgba_g_get",1,SWIGTYPE_p_yarp__sig__PixelRgba);
  }
  
  result = (unsigned char) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgba_b_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgba::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgba::b",1,"yarp::sig::PixelRgba *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgba::b",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgba,0))){
    SWIG_fail_ptr("PixelRgba_b_set",1,SWIGTYPE_p_yarp__sig__PixelRgba);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgba_b_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelRgba::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgba::b",1,"yarp::sig::PixelRgba *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgba,0))){
    SWIG_fail_ptr("PixelRgba_b_get",1,SWIGTYPE_p_yarp__sig__PixelRgba);
  }
  
  result = (unsigned char) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgba_a_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgba::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgba::a",1,"yarp::sig::PixelRgba *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgba::a",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgba,0))){
    SWIG_fail_ptr("PixelRgba_a_set",1,SWIGTYPE_p_yarp__sig__PixelRgba);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgba_a_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelRgba::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgba::a",1,"yarp::sig::PixelRgba *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgba,0))){
    SWIG_fail_ptr("PixelRgba_a_get",1,SWIGTYPE_p_yarp__sig__PixelRgba);
  }
  
  result = (unsigned char) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgba__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgba *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgba::PixelRgba",0,0)
  result = (yarp::sig::PixelRgba *)new yarp::sig::PixelRgba();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgba,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgba__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgba::PixelRgba",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::PixelRgba::PixelRgba",1,"unsigned char");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgba::PixelRgba",2,"unsigned char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::PixelRgba::PixelRgba",3,"unsigned char");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::sig::PixelRgba::PixelRgba",4,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned char)lua_tonumber(L, 4);
  result = (yarp::sig::PixelRgba *)new yarp::sig::PixelRgba(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgba,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgba(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PixelRgba__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_PixelRgba__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PixelRgba'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::PixelRgba::PixelRgba()\n"
    "    yarp::sig::PixelRgba::PixelRgba(unsigned char,unsigned char,unsigned char,unsigned char)\n");
  lua_error(L);return 0;
}


static void swig_delete_PixelRgba(void *obj) {
yarp::sig::PixelRgba *arg1 = (yarp::sig::PixelRgba *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_PixelRgba_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelRgba_attributes[] = {
    { "r", _wrap_PixelRgba_r_get, _wrap_PixelRgba_r_set},
    { "g", _wrap_PixelRgba_g_get, _wrap_PixelRgba_g_set},
    { "b", _wrap_PixelRgba_b_get, _wrap_PixelRgba_b_set},
    { "a", _wrap_PixelRgba_a_get, _wrap_PixelRgba_a_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelRgba_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_PixelRgba_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_PixelRgba_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_PixelRgba_bases[] = {0};
static const char *swig_yarp_sig_PixelRgba_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_sig_PixelRgba = { "PixelRgba", &SWIGTYPE_p_yarp__sig__PixelRgba,_wrap_new_PixelRgba, swig_delete_PixelRgba, swig_yarp_sig_PixelRgba_methods, swig_yarp_sig_PixelRgba_attributes, { "PixelRgba", swig_yarp_sig_PixelRgba_cls_methods, swig_yarp_sig_PixelRgba_cls_attributes, swig_yarp_sig_PixelRgba_cls_constants }, swig_yarp_sig_PixelRgba_bases, swig_yarp_sig_PixelRgba_base_names };

static int _wrap_PixelBgra_b_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgra::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgra::b",1,"yarp::sig::PixelBgra *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelBgra::b",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgra,0))){
    SWIG_fail_ptr("PixelBgra_b_set",1,SWIGTYPE_p_yarp__sig__PixelBgra);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgra_b_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelBgra::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgra::b",1,"yarp::sig::PixelBgra *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgra,0))){
    SWIG_fail_ptr("PixelBgra_b_get",1,SWIGTYPE_p_yarp__sig__PixelBgra);
  }
  
  result = (unsigned char) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgra_g_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgra::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgra::g",1,"yarp::sig::PixelBgra *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelBgra::g",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgra,0))){
    SWIG_fail_ptr("PixelBgra_g_set",1,SWIGTYPE_p_yarp__sig__PixelBgra);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgra_g_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelBgra::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgra::g",1,"yarp::sig::PixelBgra *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgra,0))){
    SWIG_fail_ptr("PixelBgra_g_get",1,SWIGTYPE_p_yarp__sig__PixelBgra);
  }
  
  result = (unsigned char) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgra_r_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgra::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgra::r",1,"yarp::sig::PixelBgra *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelBgra::r",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgra,0))){
    SWIG_fail_ptr("PixelBgra_r_set",1,SWIGTYPE_p_yarp__sig__PixelBgra);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgra_r_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelBgra::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgra::r",1,"yarp::sig::PixelBgra *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgra,0))){
    SWIG_fail_ptr("PixelBgra_r_get",1,SWIGTYPE_p_yarp__sig__PixelBgra);
  }
  
  result = (unsigned char) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgra_a_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgra::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgra::a",1,"yarp::sig::PixelBgra *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelBgra::a",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgra,0))){
    SWIG_fail_ptr("PixelBgra_a_set",1,SWIGTYPE_p_yarp__sig__PixelBgra);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgra_a_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelBgra::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgra::a",1,"yarp::sig::PixelBgra *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgra,0))){
    SWIG_fail_ptr("PixelBgra_a_get",1,SWIGTYPE_p_yarp__sig__PixelBgra);
  }
  
  result = (unsigned char) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelBgra__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgra *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgra::PixelBgra",0,0)
  result = (yarp::sig::PixelBgra *)new yarp::sig::PixelBgra();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelBgra,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelBgra__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  yarp::sig::PixelBgra *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgra::PixelBgra",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::PixelBgra::PixelBgra",1,"unsigned char");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelBgra::PixelBgra",2,"unsigned char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::PixelBgra::PixelBgra",3,"unsigned char");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::sig::PixelBgra::PixelBgra",4,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned char)lua_tonumber(L, 4);
  result = (yarp::sig::PixelBgra *)new yarp::sig::PixelBgra(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelBgra,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelBgra(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PixelBgra__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_PixelBgra__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PixelBgra'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::PixelBgra::PixelBgra()\n"
    "    yarp::sig::PixelBgra::PixelBgra(unsigned char,unsigned char,unsigned char,unsigned char)\n");
  lua_error(L);return 0;
}


static void swig_delete_PixelBgra(void *obj) {
yarp::sig::PixelBgra *arg1 = (yarp::sig::PixelBgra *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_PixelBgra_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelBgra_attributes[] = {
    { "b", _wrap_PixelBgra_b_get, _wrap_PixelBgra_b_set},
    { "g", _wrap_PixelBgra_g_get, _wrap_PixelBgra_g_set},
    { "r", _wrap_PixelBgra_r_get, _wrap_PixelBgra_r_set},
    { "a", _wrap_PixelBgra_a_get, _wrap_PixelBgra_a_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelBgra_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_PixelBgra_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_PixelBgra_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_PixelBgra_bases[] = {0};
static const char *swig_yarp_sig_PixelBgra_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_sig_PixelBgra = { "PixelBgra", &SWIGTYPE_p_yarp__sig__PixelBgra,_wrap_new_PixelBgra, swig_delete_PixelBgra, swig_yarp_sig_PixelBgra_methods, swig_yarp_sig_PixelBgra_attributes, { "PixelBgra", swig_yarp_sig_PixelBgra_cls_methods, swig_yarp_sig_PixelBgra_cls_attributes, swig_yarp_sig_PixelBgra_cls_constants }, swig_yarp_sig_PixelBgra_bases, swig_yarp_sig_PixelBgra_base_names };

static int _wrap_PixelBgr_b_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgr::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgr::b",1,"yarp::sig::PixelBgr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelBgr::b",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgr,0))){
    SWIG_fail_ptr("PixelBgr_b_set",1,SWIGTYPE_p_yarp__sig__PixelBgr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgr_b_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelBgr::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgr::b",1,"yarp::sig::PixelBgr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgr,0))){
    SWIG_fail_ptr("PixelBgr_b_get",1,SWIGTYPE_p_yarp__sig__PixelBgr);
  }
  
  result = (unsigned char) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgr_g_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgr::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgr::g",1,"yarp::sig::PixelBgr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelBgr::g",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgr,0))){
    SWIG_fail_ptr("PixelBgr_g_set",1,SWIGTYPE_p_yarp__sig__PixelBgr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgr_g_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelBgr::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgr::g",1,"yarp::sig::PixelBgr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgr,0))){
    SWIG_fail_ptr("PixelBgr_g_get",1,SWIGTYPE_p_yarp__sig__PixelBgr);
  }
  
  result = (unsigned char) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgr_r_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgr::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgr::r",1,"yarp::sig::PixelBgr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelBgr::r",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgr,0))){
    SWIG_fail_ptr("PixelBgr_r_set",1,SWIGTYPE_p_yarp__sig__PixelBgr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelBgr_r_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelBgr::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelBgr::r",1,"yarp::sig::PixelBgr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelBgr,0))){
    SWIG_fail_ptr("PixelBgr_r_get",1,SWIGTYPE_p_yarp__sig__PixelBgr);
  }
  
  result = (unsigned char) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelBgr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelBgr *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgr::PixelBgr",0,0)
  result = (yarp::sig::PixelBgr *)new yarp::sig::PixelBgr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelBgr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelBgr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  yarp::sig::PixelBgr *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelBgr::PixelBgr",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::PixelBgr::PixelBgr",1,"unsigned char");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelBgr::PixelBgr",2,"unsigned char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::PixelBgr::PixelBgr",3,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  result = (yarp::sig::PixelBgr *)new yarp::sig::PixelBgr(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelBgr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelBgr(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PixelBgr__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_PixelBgr__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PixelBgr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::PixelBgr::PixelBgr()\n"
    "    yarp::sig::PixelBgr::PixelBgr(unsigned char,unsigned char,unsigned char)\n");
  lua_error(L);return 0;
}


static void swig_delete_PixelBgr(void *obj) {
yarp::sig::PixelBgr *arg1 = (yarp::sig::PixelBgr *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_PixelBgr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelBgr_attributes[] = {
    { "b", _wrap_PixelBgr_b_get, _wrap_PixelBgr_b_set},
    { "g", _wrap_PixelBgr_g_get, _wrap_PixelBgr_g_set},
    { "r", _wrap_PixelBgr_r_get, _wrap_PixelBgr_r_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelBgr_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_PixelBgr_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_PixelBgr_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_PixelBgr_bases[] = {0};
static const char *swig_yarp_sig_PixelBgr_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_sig_PixelBgr = { "PixelBgr", &SWIGTYPE_p_yarp__sig__PixelBgr,_wrap_new_PixelBgr, swig_delete_PixelBgr, swig_yarp_sig_PixelBgr_methods, swig_yarp_sig_PixelBgr_attributes, { "PixelBgr", swig_yarp_sig_PixelBgr_cls_methods, swig_yarp_sig_PixelBgr_cls_attributes, swig_yarp_sig_PixelBgr_cls_constants }, swig_yarp_sig_PixelBgr_bases, swig_yarp_sig_PixelBgr_base_names };

static int _wrap_PixelHsv_h_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelHsv::h",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsv::h",1,"yarp::sig::PixelHsv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelHsv::h",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsv,0))){
    SWIG_fail_ptr("PixelHsv_h_set",1,SWIGTYPE_p_yarp__sig__PixelHsv);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->h = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelHsv_h_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelHsv::h",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsv::h",1,"yarp::sig::PixelHsv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsv,0))){
    SWIG_fail_ptr("PixelHsv_h_get",1,SWIGTYPE_p_yarp__sig__PixelHsv);
  }
  
  result = (unsigned char) ((arg1)->h);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelHsv_s_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelHsv::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsv::s",1,"yarp::sig::PixelHsv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelHsv::s",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsv,0))){
    SWIG_fail_ptr("PixelHsv_s_set",1,SWIGTYPE_p_yarp__sig__PixelHsv);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelHsv_s_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelHsv::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsv::s",1,"yarp::sig::PixelHsv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsv,0))){
    SWIG_fail_ptr("PixelHsv_s_get",1,SWIGTYPE_p_yarp__sig__PixelHsv);
  }
  
  result = (unsigned char) ((arg1)->s);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelHsv_v_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelHsv::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsv::v",1,"yarp::sig::PixelHsv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelHsv::v",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsv,0))){
    SWIG_fail_ptr("PixelHsv_v_set",1,SWIGTYPE_p_yarp__sig__PixelHsv);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->v = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelHsv_v_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("yarp::sig::PixelHsv::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsv::v",1,"yarp::sig::PixelHsv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsv,0))){
    SWIG_fail_ptr("PixelHsv_v_get",1,SWIGTYPE_p_yarp__sig__PixelHsv);
  }
  
  result = (unsigned char) ((arg1)->v);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelHsv(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsv *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelHsv::PixelHsv",0,0)
  result = (yarp::sig::PixelHsv *)new yarp::sig::PixelHsv();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelHsv,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PixelHsv(void *obj) {
yarp::sig::PixelHsv *arg1 = (yarp::sig::PixelHsv *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_PixelHsv_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelHsv_attributes[] = {
    { "h", _wrap_PixelHsv_h_get, _wrap_PixelHsv_h_set},
    { "s", _wrap_PixelHsv_s_get, _wrap_PixelHsv_s_set},
    { "v", _wrap_PixelHsv_v_get, _wrap_PixelHsv_v_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelHsv_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_PixelHsv_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_PixelHsv_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_PixelHsv_bases[] = {0};
static const char *swig_yarp_sig_PixelHsv_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_sig_PixelHsv = { "PixelHsv", &SWIGTYPE_p_yarp__sig__PixelHsv,_wrap_new_PixelHsv, swig_delete_PixelHsv, swig_yarp_sig_PixelHsv_methods, swig_yarp_sig_PixelHsv_attributes, { "PixelHsv", swig_yarp_sig_PixelHsv_cls_methods, swig_yarp_sig_PixelHsv_cls_attributes, swig_yarp_sig_PixelHsv_cls_constants }, swig_yarp_sig_PixelHsv_bases, swig_yarp_sig_PixelHsv_base_names };

static int _wrap_PixelRgbSigned_r_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbSigned::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbSigned::r",1,"yarp::sig::PixelRgbSigned *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbSigned::r",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbSigned,0))){
    SWIG_fail_ptr("PixelRgbSigned_r_set",1,SWIGTYPE_p_yarp__sig__PixelRgbSigned);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbSigned_r_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char result;
  
  SWIG_check_num_args("yarp::sig::PixelRgbSigned::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbSigned::r",1,"yarp::sig::PixelRgbSigned *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbSigned,0))){
    SWIG_fail_ptr("PixelRgbSigned_r_get",1,SWIGTYPE_p_yarp__sig__PixelRgbSigned);
  }
  
  result = (char) ((arg1)->r);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbSigned_g_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbSigned::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbSigned::g",1,"yarp::sig::PixelRgbSigned *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbSigned::g",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbSigned,0))){
    SWIG_fail_ptr("PixelRgbSigned_g_set",1,SWIGTYPE_p_yarp__sig__PixelRgbSigned);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbSigned_g_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char result;
  
  SWIG_check_num_args("yarp::sig::PixelRgbSigned::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbSigned::g",1,"yarp::sig::PixelRgbSigned *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbSigned,0))){
    SWIG_fail_ptr("PixelRgbSigned_g_get",1,SWIGTYPE_p_yarp__sig__PixelRgbSigned);
  }
  
  result = (char) ((arg1)->g);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbSigned_b_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbSigned::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbSigned::b",1,"yarp::sig::PixelRgbSigned *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbSigned::b",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbSigned,0))){
    SWIG_fail_ptr("PixelRgbSigned_b_set",1,SWIGTYPE_p_yarp__sig__PixelRgbSigned);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbSigned_b_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) 0 ;
  char result;
  
  SWIG_check_num_args("yarp::sig::PixelRgbSigned::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbSigned::b",1,"yarp::sig::PixelRgbSigned *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbSigned,0))){
    SWIG_fail_ptr("PixelRgbSigned_b_get",1,SWIGTYPE_p_yarp__sig__PixelRgbSigned);
  }
  
  result = (char) ((arg1)->b);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgbSigned(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbSigned *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbSigned::PixelRgbSigned",0,0)
  result = (yarp::sig::PixelRgbSigned *)new yarp::sig::PixelRgbSigned();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgbSigned,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PixelRgbSigned(void *obj) {
yarp::sig::PixelRgbSigned *arg1 = (yarp::sig::PixelRgbSigned *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_PixelRgbSigned_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelRgbSigned_attributes[] = {
    { "r", _wrap_PixelRgbSigned_r_get, _wrap_PixelRgbSigned_r_set},
    { "g", _wrap_PixelRgbSigned_g_get, _wrap_PixelRgbSigned_g_set},
    { "b", _wrap_PixelRgbSigned_b_get, _wrap_PixelRgbSigned_b_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelRgbSigned_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_PixelRgbSigned_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_PixelRgbSigned_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_PixelRgbSigned_bases[] = {0};
static const char *swig_yarp_sig_PixelRgbSigned_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_sig_PixelRgbSigned = { "PixelRgbSigned", &SWIGTYPE_p_yarp__sig__PixelRgbSigned,_wrap_new_PixelRgbSigned, swig_delete_PixelRgbSigned, swig_yarp_sig_PixelRgbSigned_methods, swig_yarp_sig_PixelRgbSigned_attributes, { "PixelRgbSigned", swig_yarp_sig_PixelRgbSigned_cls_methods, swig_yarp_sig_PixelRgbSigned_cls_attributes, swig_yarp_sig_PixelRgbSigned_cls_constants }, swig_yarp_sig_PixelRgbSigned_bases, swig_yarp_sig_PixelRgbSigned_base_names };

static int _wrap_PixelRgbFloat_r_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbFloat::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::r",1,"yarp::sig::PixelRgbFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbFloat,0))){
    SWIG_fail_ptr("PixelRgbFloat_r_set",1,SWIGTYPE_p_yarp__sig__PixelRgbFloat);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbFloat_r_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float result;
  
  SWIG_check_num_args("yarp::sig::PixelRgbFloat::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::r",1,"yarp::sig::PixelRgbFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbFloat,0))){
    SWIG_fail_ptr("PixelRgbFloat_r_get",1,SWIGTYPE_p_yarp__sig__PixelRgbFloat);
  }
  
  result = (float) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbFloat_g_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbFloat::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::g",1,"yarp::sig::PixelRgbFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::g",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbFloat,0))){
    SWIG_fail_ptr("PixelRgbFloat_g_set",1,SWIGTYPE_p_yarp__sig__PixelRgbFloat);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbFloat_g_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float result;
  
  SWIG_check_num_args("yarp::sig::PixelRgbFloat::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::g",1,"yarp::sig::PixelRgbFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbFloat,0))){
    SWIG_fail_ptr("PixelRgbFloat_g_get",1,SWIGTYPE_p_yarp__sig__PixelRgbFloat);
  }
  
  result = (float) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbFloat_b_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbFloat::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::b",1,"yarp::sig::PixelRgbFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbFloat,0))){
    SWIG_fail_ptr("PixelRgbFloat_b_set",1,SWIGTYPE_p_yarp__sig__PixelRgbFloat);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbFloat_b_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) 0 ;
  float result;
  
  SWIG_check_num_args("yarp::sig::PixelRgbFloat::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::b",1,"yarp::sig::PixelRgbFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbFloat,0))){
    SWIG_fail_ptr("PixelRgbFloat_b_get",1,SWIGTYPE_p_yarp__sig__PixelRgbFloat);
  }
  
  result = (float) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgbFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbFloat::PixelRgbFloat",0,0)
  result = (yarp::sig::PixelRgbFloat *)new yarp::sig::PixelRgbFloat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgbFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgbFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbFloat::PixelRgbFloat",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::PixelRgbFloat",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::PixelRgbFloat",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::PixelRgbFloat::PixelRgbFloat",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgbFloat *)new yarp::sig::PixelRgbFloat(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgbFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgbFloat(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PixelRgbFloat__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_PixelRgbFloat__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PixelRgbFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::PixelRgbFloat::PixelRgbFloat()\n"
    "    yarp::sig::PixelRgbFloat::PixelRgbFloat(float,float,float)\n");
  lua_error(L);return 0;
}


static void swig_delete_PixelRgbFloat(void *obj) {
yarp::sig::PixelRgbFloat *arg1 = (yarp::sig::PixelRgbFloat *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_PixelRgbFloat_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelRgbFloat_attributes[] = {
    { "r", _wrap_PixelRgbFloat_r_get, _wrap_PixelRgbFloat_r_set},
    { "g", _wrap_PixelRgbFloat_g_get, _wrap_PixelRgbFloat_g_set},
    { "b", _wrap_PixelRgbFloat_b_get, _wrap_PixelRgbFloat_b_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelRgbFloat_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_PixelRgbFloat_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_PixelRgbFloat_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_PixelRgbFloat_bases[] = {0};
static const char *swig_yarp_sig_PixelRgbFloat_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_sig_PixelRgbFloat = { "PixelRgbFloat", &SWIGTYPE_p_yarp__sig__PixelRgbFloat,_wrap_new_PixelRgbFloat, swig_delete_PixelRgbFloat, swig_yarp_sig_PixelRgbFloat_methods, swig_yarp_sig_PixelRgbFloat_attributes, { "PixelRgbFloat", swig_yarp_sig_PixelRgbFloat_cls_methods, swig_yarp_sig_PixelRgbFloat_cls_attributes, swig_yarp_sig_PixelRgbFloat_cls_constants }, swig_yarp_sig_PixelRgbFloat_bases, swig_yarp_sig_PixelRgbFloat_base_names };

static int _wrap_PixelRgbInt_r_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbInt::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbInt::r",1,"yarp::sig::PixelRgbInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbInt::r",2,"yarp::os::NetInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbInt,0))){
    SWIG_fail_ptr("PixelRgbInt_r_set",1,SWIGTYPE_p_yarp__sig__PixelRgbInt);
  }
  
  arg2 = (yarp::os::NetInt32)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbInt_r_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 result;
  
  SWIG_check_num_args("yarp::sig::PixelRgbInt::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbInt::r",1,"yarp::sig::PixelRgbInt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbInt,0))){
    SWIG_fail_ptr("PixelRgbInt_r_get",1,SWIGTYPE_p_yarp__sig__PixelRgbInt);
  }
  
  result = (yarp::os::NetInt32) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbInt_g_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbInt::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbInt::g",1,"yarp::sig::PixelRgbInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbInt::g",2,"yarp::os::NetInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbInt,0))){
    SWIG_fail_ptr("PixelRgbInt_g_set",1,SWIGTYPE_p_yarp__sig__PixelRgbInt);
  }
  
  arg2 = (yarp::os::NetInt32)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbInt_g_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 result;
  
  SWIG_check_num_args("yarp::sig::PixelRgbInt::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbInt::g",1,"yarp::sig::PixelRgbInt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbInt,0))){
    SWIG_fail_ptr("PixelRgbInt_g_get",1,SWIGTYPE_p_yarp__sig__PixelRgbInt);
  }
  
  result = (yarp::os::NetInt32) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbInt_b_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbInt::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbInt::b",1,"yarp::sig::PixelRgbInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbInt::b",2,"yarp::os::NetInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbInt,0))){
    SWIG_fail_ptr("PixelRgbInt_b_set",1,SWIGTYPE_p_yarp__sig__PixelRgbInt);
  }
  
  arg2 = (yarp::os::NetInt32)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelRgbInt_b_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) 0 ;
  yarp::os::NetInt32 result;
  
  SWIG_check_num_args("yarp::sig::PixelRgbInt::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbInt::b",1,"yarp::sig::PixelRgbInt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelRgbInt,0))){
    SWIG_fail_ptr("PixelRgbInt_b_get",1,SWIGTYPE_p_yarp__sig__PixelRgbInt);
  }
  
  result = (yarp::os::NetInt32) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgbInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelRgbInt *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbInt::PixelRgbInt",0,0)
  result = (yarp::sig::PixelRgbInt *)new yarp::sig::PixelRgbInt();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgbInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgbInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbInt *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelRgbInt::PixelRgbInt",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::PixelRgbInt::PixelRgbInt",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelRgbInt::PixelRgbInt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::PixelRgbInt::PixelRgbInt",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgbInt *)new yarp::sig::PixelRgbInt(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgbInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelRgbInt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PixelRgbInt__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_PixelRgbInt__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PixelRgbInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::PixelRgbInt::PixelRgbInt()\n"
    "    yarp::sig::PixelRgbInt::PixelRgbInt(int,int,int)\n");
  lua_error(L);return 0;
}


static void swig_delete_PixelRgbInt(void *obj) {
yarp::sig::PixelRgbInt *arg1 = (yarp::sig::PixelRgbInt *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_PixelRgbInt_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelRgbInt_attributes[] = {
    { "r", _wrap_PixelRgbInt_r_get, _wrap_PixelRgbInt_r_set},
    { "g", _wrap_PixelRgbInt_g_get, _wrap_PixelRgbInt_g_set},
    { "b", _wrap_PixelRgbInt_b_get, _wrap_PixelRgbInt_b_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelRgbInt_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_PixelRgbInt_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_PixelRgbInt_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_PixelRgbInt_bases[] = {0};
static const char *swig_yarp_sig_PixelRgbInt_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_sig_PixelRgbInt = { "PixelRgbInt", &SWIGTYPE_p_yarp__sig__PixelRgbInt,_wrap_new_PixelRgbInt, swig_delete_PixelRgbInt, swig_yarp_sig_PixelRgbInt_methods, swig_yarp_sig_PixelRgbInt_attributes, { "PixelRgbInt", swig_yarp_sig_PixelRgbInt_cls_methods, swig_yarp_sig_PixelRgbInt_cls_attributes, swig_yarp_sig_PixelRgbInt_cls_constants }, swig_yarp_sig_PixelRgbInt_bases, swig_yarp_sig_PixelRgbInt_base_names };

static int _wrap_PixelHsvFloat_h_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelHsvFloat::h",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsvFloat::h",1,"yarp::sig::PixelHsvFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelHsvFloat::h",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsvFloat,0))){
    SWIG_fail_ptr("PixelHsvFloat_h_set",1,SWIGTYPE_p_yarp__sig__PixelHsvFloat);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->h = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelHsvFloat_h_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float result;
  
  SWIG_check_num_args("yarp::sig::PixelHsvFloat::h",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsvFloat::h",1,"yarp::sig::PixelHsvFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsvFloat,0))){
    SWIG_fail_ptr("PixelHsvFloat_h_get",1,SWIGTYPE_p_yarp__sig__PixelHsvFloat);
  }
  
  result = (float) ((arg1)->h);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelHsvFloat_s_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelHsvFloat::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsvFloat::s",1,"yarp::sig::PixelHsvFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelHsvFloat::s",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsvFloat,0))){
    SWIG_fail_ptr("PixelHsvFloat_s_set",1,SWIGTYPE_p_yarp__sig__PixelHsvFloat);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelHsvFloat_s_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float result;
  
  SWIG_check_num_args("yarp::sig::PixelHsvFloat::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsvFloat::s",1,"yarp::sig::PixelHsvFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsvFloat,0))){
    SWIG_fail_ptr("PixelHsvFloat_s_get",1,SWIGTYPE_p_yarp__sig__PixelHsvFloat);
  }
  
  result = (float) ((arg1)->s);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelHsvFloat_v_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("yarp::sig::PixelHsvFloat::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsvFloat::v",1,"yarp::sig::PixelHsvFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::PixelHsvFloat::v",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsvFloat,0))){
    SWIG_fail_ptr("PixelHsvFloat_v_set",1,SWIGTYPE_p_yarp__sig__PixelHsvFloat);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->v = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PixelHsvFloat_v_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) 0 ;
  float result;
  
  SWIG_check_num_args("yarp::sig::PixelHsvFloat::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::PixelHsvFloat::v",1,"yarp::sig::PixelHsvFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__PixelHsvFloat,0))){
    SWIG_fail_ptr("PixelHsvFloat_v_get",1,SWIGTYPE_p_yarp__sig__PixelHsvFloat);
  }
  
  result = (float) ((arg1)->v);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PixelHsvFloat(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::PixelHsvFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::PixelHsvFloat::PixelHsvFloat",0,0)
  result = (yarp::sig::PixelHsvFloat *)new yarp::sig::PixelHsvFloat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelHsvFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PixelHsvFloat(void *obj) {
yarp::sig::PixelHsvFloat *arg1 = (yarp::sig::PixelHsvFloat *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_PixelHsvFloat_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelHsvFloat_attributes[] = {
    { "h", _wrap_PixelHsvFloat_h_get, _wrap_PixelHsvFloat_h_set},
    { "s", _wrap_PixelHsvFloat_s_get, _wrap_PixelHsvFloat_s_set},
    { "v", _wrap_PixelHsvFloat_v_get, _wrap_PixelHsvFloat_v_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_PixelHsvFloat_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_PixelHsvFloat_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_PixelHsvFloat_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_PixelHsvFloat_bases[] = {0};
static const char *swig_yarp_sig_PixelHsvFloat_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_sig_PixelHsvFloat = { "PixelHsvFloat", &SWIGTYPE_p_yarp__sig__PixelHsvFloat,_wrap_new_PixelHsvFloat, swig_delete_PixelHsvFloat, swig_yarp_sig_PixelHsvFloat_methods, swig_yarp_sig_PixelHsvFloat_attributes, { "PixelHsvFloat", swig_yarp_sig_PixelHsvFloat_cls_methods, swig_yarp_sig_PixelHsvFloat_cls_attributes, swig_yarp_sig_PixelHsvFloat_cls_constants }, swig_yarp_sig_PixelHsvFloat_bases, swig_yarp_sig_PixelHsvFloat_base_names };

static int _wrap_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::read",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::read",1,"yarp::sig::ImageOf< yarp::sig::PixelRgb > &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::read",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("read",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelBgr > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::read",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::read",1,"yarp::sig::ImageOf< yarp::sig::PixelBgr > &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::read",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t,0))){
    SWIG_fail_ptr("read",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::read",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::read",1,"yarp::sig::ImageOf< yarp::sig::PixelRgba > &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::read",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("read",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_read__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::read",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::read",1,"yarp::sig::ImageOf< yarp::sig::PixelMono > &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::read",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("read",1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_read__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::read",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::read",1,"yarp::sig::ImageOf< yarp::sig::PixelFloat > &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::read",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("read",1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::read(*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_read__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_read__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_read__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_read__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_read__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::file::read(yarp::sig::ImageOf< yarp::sig::PixelRgb > &,yarp::os::ConstString const &)\n"
    "    yarp::sig::file::read(yarp::sig::ImageOf< yarp::sig::PixelBgr > &,yarp::os::ConstString const &)\n"
    "    yarp::sig::file::read(yarp::sig::ImageOf< yarp::sig::PixelRgba > &,yarp::os::ConstString const &)\n"
    "    yarp::sig::file::read(yarp::sig::ImageOf< yarp::sig::PixelMono > &,yarp::os::ConstString const &)\n"
    "    yarp::sig::file::read(yarp::sig::ImageOf< yarp::sig::PixelFloat > &,yarp::os::ConstString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::write",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::write",1,"yarp::sig::ImageOf< yarp::sig::PixelRgb > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::write",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("write",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< yarp::sig::PixelRgb > const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelBgr > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::write",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::write",1,"yarp::sig::ImageOf< yarp::sig::PixelBgr > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::write",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t,0))){
    SWIG_fail_ptr("write",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< yarp::sig::PixelBgr > const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::write",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::write",1,"yarp::sig::ImageOf< yarp::sig::PixelRgba > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::write",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("write",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< yarp::sig::PixelRgba > const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::write",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::write",1,"yarp::sig::ImageOf< yarp::sig::PixelMono > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::write",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("write",1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< unsigned char > const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::write",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::write",1,"yarp::sig::ImageOf< yarp::sig::PixelFloat > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::write",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("write",1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::write((yarp::sig::ImageOf< float > const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_write__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Image *arg1 = 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::file::write",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::file::write",1,"yarp::sig::Image const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::sig::file::write",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Image,0))){
    SWIG_fail_ptr("write",1,SWIGTYPE_p_yarp__sig__Image);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)yarp::sig::file::write((yarp::sig::Image const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_write__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_write__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_write__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_write__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_write__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::file::write(yarp::sig::ImageOf< yarp::sig::PixelRgb > const &,yarp::os::ConstString const &)\n"
    "    yarp::sig::file::write(yarp::sig::ImageOf< yarp::sig::PixelBgr > const &,yarp::os::ConstString const &)\n"
    "    yarp::sig::file::write(yarp::sig::ImageOf< yarp::sig::PixelRgba > const &,yarp::os::ConstString const &)\n"
    "    yarp::sig::file::write(yarp::sig::ImageOf< yarp::sig::PixelMono > const &,yarp::os::ConstString const &)\n"
    "    yarp::sig::file::write(yarp::sig::ImageOf< yarp::sig::PixelFloat > const &,yarp::os::ConstString const &)\n"
    "    yarp::sig::file::write(yarp::sig::Image const &,yarp::os::ConstString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Sound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  yarp::sig::Sound *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Sound::Sound",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::Sound::Sound",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (yarp::sig::Sound *)new yarp::sig::Sound(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Sound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Sound::Sound",0,0)
  result = (yarp::sig::Sound *)new yarp::sig::Sound();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Sound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sound__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = 0 ;
  yarp::sig::Sound *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Sound::Sound",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::Sound::Sound",1,"yarp::sig::Sound const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("new_Sound",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  result = (yarp::sig::Sound *)new yarp::sig::Sound((yarp::sig::Sound const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Sound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sound(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Sound__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Sound__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Sound__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Sound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Sound::Sound(int)\n"
    "    yarp::sig::Sound::Sound()\n"
    "    yarp::sig::Sound::Sound(yarp::sig::Sound const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_subSound(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::Sound result;
  
  SWIG_check_num_args("yarp::sig::Sound::subSound",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::subSound",1,"yarp::sig::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::subSound",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Sound::subSound",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_subSound",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->subSound(arg2,arg3);
  {
    yarp::sig::Sound * resultptr = new yarp::sig::Sound((const yarp::sig::Sound &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__sig__Sound,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("yarp::sig::Sound::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::resize",1,"yarp::sig::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Sound::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_resize",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::sig::Sound::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::resize",1,"yarp::sig::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::resize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_resize",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Sound_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Sound_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sound_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Sound::resize(int,int)\n"
    "    yarp::sig::Sound::resize(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Sound::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::get",1,"yarp::sig::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Sound::get",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_get",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)((yarp::sig::Sound const *)arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Sound::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::get",1,"yarp::sig::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_get",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)((yarp::sig::Sound const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_get(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Sound_get__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Sound_get__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sound_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Sound::get(int,int) const\n"
    "    yarp::sig::Sound::get(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("yarp::sig::Sound::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::set",1,"yarp::sig::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Sound::set",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::sig::Sound::set",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_set",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("yarp::sig::Sound::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::set",1,"yarp::sig::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Sound::set",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_set",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_set(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Sound_set__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Sound_set__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sound_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Sound::set(int,int,int)\n"
    "    yarp::sig::Sound::set(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_getSafe__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Sound::getSafe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::getSafe",1,"yarp::sig::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::getSafe",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Sound::getSafe",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_getSafe",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->getSafe(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getSafe__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Sound::getSafe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::getSafe",1,"yarp::sig::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::getSafe",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_getSafe",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getSafe(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getSafe(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Sound_getSafe__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Sound_getSafe__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sound_getSafe'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Sound::getSafe(int,int)\n"
    "    yarp::sig::Sound::getSafe(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_setSafe__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("yarp::sig::Sound::setSafe",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::setSafe",1,"yarp::sig::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::setSafe",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Sound::setSafe",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::sig::Sound::setSafe",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_setSafe",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setSafe(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setSafe__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("yarp::sig::Sound::setSafe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::setSafe",1,"yarp::sig::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::setSafe",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Sound::setSafe",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_setSafe",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSafe(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setSafe(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Sound_setSafe__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Sound_setSafe__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sound_setSafe'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Sound::setSafe(int,int,int)\n"
    "    yarp::sig::Sound::setSafe(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_isSample__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Sound::isSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::isSample",1,"yarp::sig::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::isSample",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Sound::isSample",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_isSample",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)((yarp::sig::Sound const *)arg1)->isSample(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_isSample__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Sound::isSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::isSample",1,"yarp::sig::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::isSample",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_isSample",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)((yarp::sig::Sound const *)arg1)->isSample(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_isSample(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Sound_isSample__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Sound_isSample__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sound_isSample'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Sound::isSample(int,int) const\n"
    "    yarp::sig::Sound::isSample(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_Sound_clear(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  
  SWIG_check_num_args("yarp::sig::Sound::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::clear",1,"yarp::sig::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_clear",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getFrequency(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Sound::getFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::getFrequency",1,"yarp::sig::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_getFrequency",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  result = (int)((yarp::sig::Sound const *)arg1)->getFrequency();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("yarp::sig::Sound::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::setFrequency",1,"yarp::sig::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Sound::setFrequency",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_setFrequency",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getBytesPerSample(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Sound::getBytesPerSample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::getBytesPerSample",1,"yarp::sig::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_getBytesPerSample",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  result = (int)((yarp::sig::Sound const *)arg1)->getBytesPerSample();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getSamples(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Sound::getSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::getSamples",1,"yarp::sig::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_getSamples",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  result = (int)((yarp::sig::Sound const *)arg1)->getSamples();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getChannels(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Sound::getChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::getChannels",1,"yarp::sig::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_getChannels",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  result = (int)((yarp::sig::Sound const *)arg1)->getChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Sound::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::read",1,"yarp::sig::Sound *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::Sound::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_read",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("Sound_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Sound::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::write",1,"yarp::sig::Sound *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::Sound::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_write",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("Sound_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getRawData(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Sound::getRawData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::getRawData",1,"yarp::sig::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_getRawData",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  result = (unsigned char *)((yarp::sig::Sound const *)arg1)->getRawData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getRawDataSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Sound *arg1 = (yarp::sig::Sound *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::Sound::getRawDataSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Sound::getRawDataSize",1,"yarp::sig::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("Sound_getRawDataSize",1,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  result = (int)((yarp::sig::Sound const *)arg1)->getRawDataSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sound(void *obj) {
yarp::sig::Sound *arg1 = (yarp::sig::Sound *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_Sound_methods[] = {
    {"subSound", _wrap_Sound_subSound}, 
    {"resize", _wrap_Sound_resize}, 
    {"get", _wrap_Sound_get}, 
    {"set", _wrap_Sound_set}, 
    {"getSafe", _wrap_Sound_getSafe}, 
    {"setSafe", _wrap_Sound_setSafe}, 
    {"isSample", _wrap_Sound_isSample}, 
    {"clear", _wrap_Sound_clear}, 
    {"getFrequency", _wrap_Sound_getFrequency}, 
    {"setFrequency", _wrap_Sound_setFrequency}, 
    {"getBytesPerSample", _wrap_Sound_getBytesPerSample}, 
    {"getSamples", _wrap_Sound_getSamples}, 
    {"getChannels", _wrap_Sound_getChannels}, 
    {"read", _wrap_Sound_read}, 
    {"write", _wrap_Sound_write}, 
    {"getRawData", _wrap_Sound_getRawData}, 
    {"getRawDataSize", _wrap_Sound_getRawDataSize}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_Sound_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_Sound_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_Sound_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_Sound_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_Sound_bases[] = {0,0};
static const char *swig_yarp_sig_Sound_base_names[] = {"yarp::os::Portable *",0};
static swig_lua_class _wrap_class_yarp_sig_Sound = { "Sound", &SWIGTYPE_p_yarp__sig__Sound,_wrap_new_Sound, swig_delete_Sound, swig_yarp_sig_Sound_methods, swig_yarp_sig_Sound_attributes, { "Sound", swig_yarp_sig_Sound_cls_methods, swig_yarp_sig_Sound_cls_attributes, swig_yarp_sig_Sound_cls_constants }, swig_yarp_sig_Sound_bases, swig_yarp_sig_Sound_base_names };

static int _wrap_VectorBase_getElementSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::VectorBase::getElementSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::VectorBase::getElementSize",1,"yarp::sig::VectorBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__VectorBase,0))){
    SWIG_fail_ptr("VectorBase_getElementSize",1,SWIGTYPE_p_yarp__sig__VectorBase);
  }
  
  result = (int)((yarp::sig::VectorBase const *)arg1)->getElementSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorBase_getBottleTag(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::VectorBase::getBottleTag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::VectorBase::getBottleTag",1,"yarp::sig::VectorBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__VectorBase,0))){
    SWIG_fail_ptr("VectorBase_getBottleTag",1,SWIGTYPE_p_yarp__sig__VectorBase);
  }
  
  result = (int)((yarp::sig::VectorBase const *)arg1)->getBottleTag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorBase_getListSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  size_t result;
  
  SWIG_check_num_args("yarp::sig::VectorBase::getListSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::VectorBase::getListSize",1,"yarp::sig::VectorBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__VectorBase,0))){
    SWIG_fail_ptr("VectorBase_getListSize",1,SWIGTYPE_p_yarp__sig__VectorBase);
  }
  
  result = ((yarp::sig::VectorBase const *)arg1)->getListSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorBase_getMemoryBlock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::VectorBase::getMemoryBlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::VectorBase::getMemoryBlock",1,"yarp::sig::VectorBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__VectorBase,0))){
    SWIG_fail_ptr("VectorBase_getMemoryBlock",1,SWIGTYPE_p_yarp__sig__VectorBase);
  }
  
  result = (char *)((yarp::sig::VectorBase const *)arg1)->getMemoryBlock();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorBase_resize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("yarp::sig::VectorBase::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::VectorBase::resize",1,"yarp::sig::VectorBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::VectorBase::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__VectorBase,0))){
    SWIG_fail_ptr("VectorBase_resize",1,SWIGTYPE_p_yarp__sig__VectorBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorBase_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::VectorBase::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::VectorBase::read",1,"yarp::sig::VectorBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::VectorBase::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__VectorBase,0))){
    SWIG_fail_ptr("VectorBase_read",1,SWIGTYPE_p_yarp__sig__VectorBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("VectorBase_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorBase_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::VectorBase::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::VectorBase::write",1,"yarp::sig::VectorBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::VectorBase::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__VectorBase,0))){
    SWIG_fail_ptr("VectorBase_write",1,SWIGTYPE_p_yarp__sig__VectorBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("VectorBase_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VectorBase(void *obj) {
yarp::sig::VectorBase *arg1 = (yarp::sig::VectorBase *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_VectorBase_methods[] = {
    {"getElementSize", _wrap_VectorBase_getElementSize}, 
    {"getBottleTag", _wrap_VectorBase_getBottleTag}, 
    {"getListSize", _wrap_VectorBase_getListSize}, 
    {"getMemoryBlock", _wrap_VectorBase_getMemoryBlock}, 
    {"resize", _wrap_VectorBase_resize}, 
    {"read", _wrap_VectorBase_read}, 
    {"write", _wrap_VectorBase_write}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_VectorBase_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_VectorBase_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_VectorBase_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_VectorBase_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_VectorBase_bases[] = {0,0};
static const char *swig_yarp_sig_VectorBase_base_names[] = {"yarp::os::Portable *",0};
static swig_lua_class _wrap_class_yarp_sig_VectorBase = { "VectorBase", &SWIGTYPE_p_yarp__sig__VectorBase,0, swig_delete_VectorBase, swig_yarp_sig_VectorBase_methods, swig_yarp_sig_VectorBase_attributes, { "VectorBase", swig_yarp_sig_VectorBase_cls_methods, swig_yarp_sig_VectorBase_cls_attributes, swig_yarp_sig_VectorBase_cls_constants }, swig_yarp_sig_VectorBase_bases, swig_yarp_sig_VectorBase_base_names };

static int _wrap_new_Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::Vector",0,0)
  result = (yarp::sig::Vector *)new yarp::sig::Vector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Vector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  yarp::sig::Vector *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::Vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::Vector::Vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (yarp::sig::Vector *)new yarp::sig::Vector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Vector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  yarp::sig::Vector *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::Vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::Vector::Vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::Vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (yarp::sig::Vector *)new yarp::sig::Vector(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Vector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  yarp::sig::Vector *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::Vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::sig::Vector::Vector",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::sig::Vector::Vector",2,"double const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("new_Vector",2,SWIGTYPE_p_double);
  }
  
  result = (yarp::sig::Vector *)new yarp::sig::Vector(arg1,(double const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Vector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = 0 ;
  yarp::sig::Vector *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::Vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::sig::Vector::Vector",1,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("new_Vector",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (yarp::sig::Vector *)new yarp::sig::Vector((yarp::sig::Vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Vector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Vector__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Vector::Vector()\n"
    "    yarp::sig::Vector::Vector(size_t)\n"
    "    yarp::sig::Vector::Vector(size_t,double const &)\n"
    "    yarp::sig::Vector::Vector(size_t,double const *)\n"
    "    yarp::sig::Vector::Vector(yarp::sig::Vector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_size__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("yarp::sig::Vector::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::size",1,"yarp::sig::Vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_size",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->size(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("yarp::sig::Vector::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::resize",1,"yarp::sig::Vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_resize",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("yarp::sig::Vector::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::resize",1,"yarp::sig::Vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Vector::resize",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_resize",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->resize(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector_resize__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Vector_resize__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Vector::resize(size_t)\n"
    "    yarp::sig::Vector::resize(size_t,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t result;
  
  SWIG_check_num_args("yarp::sig::Vector::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::size",1,"yarp::sig::Vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_size",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = ((yarp::sig::Vector const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_size(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector_size__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector_size__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Vector::size(size_t)\n"
    "    yarp::sig::Vector::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_length(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t result;
  
  SWIG_check_num_args("yarp::sig::Vector::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::length",1,"yarp::sig::Vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_length",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = ((yarp::sig::Vector const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_zero(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::zero",1,"yarp::sig::Vector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_zero",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_toString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::sig::Vector::toString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::toString",1,"yarp::sig::Vector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::toString",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Vector::toString",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_toString",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((yarp::sig::Vector const *)arg1)->toString(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_toString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::sig::Vector::toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::toString",1,"yarp::sig::Vector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::toString",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_toString",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((yarp::sig::Vector const *)arg1)->toString(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_toString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector_toString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Vector_toString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector_toString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Vector::toString(int,int) const\n"
    "    yarp::sig::Vector::toString(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_toString_c(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::sig::Vector::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::toString",1,"yarp::sig::Vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_toString_c",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = ((yarp::sig::Vector const *)arg1)->toString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_subVector(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  yarp::sig::Vector result;
  
  SWIG_check_num_args("yarp::sig::Vector::subVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::subVector",1,"yarp::sig::Vector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::subVector",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Vector::subVector",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_subVector",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = ((yarp::sig::Vector const *)arg1)->subVector(arg2,arg3);
  {
    yarp::sig::Vector * resultptr = new yarp::sig::Vector((const yarp::sig::Vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__sig__Vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_setSubvector(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Vector::setSubvector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::setSubvector",1,"yarp::sig::Vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::setSubvector",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::sig::Vector::setSubvector",3,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_setSubvector",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_setSubvector",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->setSubvector(arg2,(yarp::sig::Vector const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_data__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::data",1,"yarp::sig::Vector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_data",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_data__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::data",1,"yarp::sig::Vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_data",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (double *)((yarp::sig::Vector const *)arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_data(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector_data__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector_data__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector_data'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Vector::data()\n"
    "    yarp::sig::Vector::data() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_isEqual(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Vector::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::operator ==",1,"yarp::sig::Vector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::Vector::operator ==",2,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_isEqual",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_isEqual",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)((yarp::sig::Vector const *)arg1)->operator ==((yarp::sig::Vector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("yarp::sig::Vector::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::push_back",1,"yarp::sig::Vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_push_back",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::pop_back",1,"yarp::sig::Vector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_pop_back",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_getGslVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::getGslVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::getGslVector",1,"yarp::sig::Vector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_getGslVector",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (void *)(arg1)->getGslVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_getGslVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::getGslVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::getGslVector",1,"yarp::sig::Vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_getGslVector",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (void *)((yarp::sig::Vector const *)arg1)->getGslVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_getGslVector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector_getGslVector__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector_getGslVector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector_getGslVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Vector::getGslVector()\n"
    "    yarp::sig::Vector::getGslVector() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_access__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::operator ()",1,"yarp::sig::Vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_access",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_access__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::operator ()",1,"yarp::sig::Vector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_access",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &((yarp::sig::Vector const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_access(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector_access__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector_access__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector_access'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::Vector::operator ()(size_t)\n"
    "    yarp::sig::Vector::operator ()(size_t) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  
  SWIG_check_num_args("yarp::sig::Vector::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::clear",1,"yarp::sig::Vector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_clear",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Vector::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::read",1,"yarp::sig::Vector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::Vector::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_read",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("Vector_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_write(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  yarp::os::ConnectionWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::sig::Vector::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::write",1,"yarp::sig::Vector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::sig::Vector::write",2,"yarp::os::ConnectionWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_write",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionWriter,0))){
    SWIG_fail_ptr("Vector_write",2,SWIGTYPE_p_yarp__os__ConnectionWriter);
  }
  
  result = (bool)(arg1)->write(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("yarp::sig::Vector::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::get",1,"yarp::sig::Vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_get",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)yarp_sig_Vector_get(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::Vector *arg1 = (yarp::sig::Vector *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("yarp::sig::Vector::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::Vector::set",1,"yarp::sig::Vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::Vector::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::Vector::set",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("Vector_set",1,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  yarp_sig_Vector_set(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector(void *obj) {
yarp::sig::Vector *arg1 = (yarp::sig::Vector *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_Vector_methods[] = {
    {"resize", _wrap_Vector_resize}, 
    {"size", _wrap_Vector_size}, 
    {"length", _wrap_Vector_length}, 
    {"zero", _wrap_Vector_zero}, 
    {"toString", _wrap_Vector_toString}, 
    {"toString_c", _wrap_Vector_toString_c}, 
    {"subVector", _wrap_Vector_subVector}, 
    {"setSubvector", _wrap_Vector_setSubvector}, 
    {"data", _wrap_Vector_data}, 
    {"isEqual", _wrap_Vector_isEqual}, 
    {"push_back", _wrap_Vector_push_back}, 
    {"pop_back", _wrap_Vector_pop_back}, 
    {"getGslVector", _wrap_Vector_getGslVector}, 
    {"access", _wrap_Vector_access}, 
    {"clear", _wrap_Vector_clear}, 
    {"read", _wrap_Vector_read}, 
    {"write", _wrap_Vector_write}, 
    {"get", _wrap_Vector_get}, 
    {"set", _wrap_Vector_set}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_Vector_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_Vector_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_Vector_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_Vector_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_Vector_bases[] = {0,0};
static const char *swig_yarp_sig_Vector_base_names[] = {"yarp::os::Portable *",0};
static swig_lua_class _wrap_class_yarp_sig_Vector = { "Vector", &SWIGTYPE_p_yarp__sig__Vector,_wrap_new_Vector, swig_delete_Vector, swig_yarp_sig_Vector_methods, swig_yarp_sig_Vector_attributes, { "Vector", swig_yarp_sig_Vector_cls_methods, swig_yarp_sig_Vector_cls_attributes, swig_yarp_sig_Vector_cls_constants }, swig_yarp_sig_Vector_bases, swig_yarp_sig_Vector_base_names };

static int _wrap_IConfig_open(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::IConfig::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::IConfig::open",1,"yarp::os::IConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::IConfig::open",2,"yarp::os::Searchable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__IConfig,0))){
    SWIG_fail_ptr("IConfig_open",1,SWIGTYPE_p_yarp__os__IConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("IConfig_open",2,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = (bool)(arg1)->open(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IConfig_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::IConfig::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::IConfig::close",1,"yarp::os::IConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__IConfig,0))){
    SWIG_fail_ptr("IConfig_close",1,SWIGTYPE_p_yarp__os__IConfig);
  }
  
  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IConfig_configure(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::IConfig *arg1 = (yarp::os::IConfig *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::IConfig::configure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::IConfig::configure",1,"yarp::os::IConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::IConfig::configure",2,"yarp::os::Searchable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__IConfig,0))){
    SWIG_fail_ptr("IConfig_configure",1,SWIGTYPE_p_yarp__os__IConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("IConfig_configure",2,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = (bool)(arg1)->configure(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IConfig(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::IConfig *result = 0 ;
  
  SWIG_check_num_args("yarp::os::IConfig::IConfig",0,0)
  result = (yarp::os::IConfig *)new yarp::os::IConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__IConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IConfig(void *obj) {
yarp::os::IConfig *arg1 = (yarp::os::IConfig *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_IConfig_methods[] = {
    {"open", _wrap_IConfig_open}, 
    {"close", _wrap_IConfig_close}, 
    {"configure", _wrap_IConfig_configure}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_IConfig_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_IConfig_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_IConfig_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_IConfig_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_IConfig_bases[] = {0};
static const char *swig_yarp_os_IConfig_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_IConfig = { "IConfig", &SWIGTYPE_p_yarp__os__IConfig,_wrap_new_IConfig, swig_delete_IConfig, swig_yarp_os_IConfig_methods, swig_yarp_os_IConfig_attributes, { "IConfig", swig_yarp_os_IConfig_cls_methods, swig_yarp_os_IConfig_cls_attributes, swig_yarp_os_IConfig_cls_constants }, swig_yarp_os_IConfig_bases, swig_yarp_os_IConfig_base_names };

static int _wrap_DeviceDriver_open(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::DeviceDriver::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceDriver::open",1,"yarp::dev::DeviceDriver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::DeviceDriver::open",2,"yarp::os::Searchable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceDriver,0))){
    SWIG_fail_ptr("DeviceDriver_open",1,SWIGTYPE_p_yarp__dev__DeviceDriver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("DeviceDriver_open",2,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = (bool)(arg1)->open(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceDriver_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::DeviceDriver::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceDriver::close",1,"yarp::dev::DeviceDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceDriver,0))){
    SWIG_fail_ptr("DeviceDriver_close",1,SWIGTYPE_p_yarp__dev__DeviceDriver);
  }
  
  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceDriver_getImplementation(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::DeviceDriver::getImplementation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceDriver::getImplementation",1,"yarp::dev::DeviceDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceDriver,0))){
    SWIG_fail_ptr("DeviceDriver_getImplementation",1,SWIGTYPE_p_yarp__dev__DeviceDriver);
  }
  
  result = (yarp::dev::DeviceDriver *)(arg1)->getImplementation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__DeviceDriver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DeviceDriver(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::DeviceDriver::DeviceDriver",0,0)
  result = (yarp::dev::DeviceDriver *)new yarp::dev::DeviceDriver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__DeviceDriver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceDriver(void *obj) {
yarp::dev::DeviceDriver *arg1 = (yarp::dev::DeviceDriver *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_DeviceDriver_methods[] = {
    {"open", _wrap_DeviceDriver_open}, 
    {"close", _wrap_DeviceDriver_close}, 
    {"getImplementation", _wrap_DeviceDriver_getImplementation}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_DeviceDriver_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_DeviceDriver_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_DeviceDriver_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_DeviceDriver_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_DeviceDriver_bases[] = {0,0};
static const char *swig_yarp_dev_DeviceDriver_base_names[] = {"yarp::os::IConfig *",0};
static swig_lua_class _wrap_class_yarp_dev_DeviceDriver = { "DeviceDriver", &SWIGTYPE_p_yarp__dev__DeviceDriver,_wrap_new_DeviceDriver, swig_delete_DeviceDriver, swig_yarp_dev_DeviceDriver_methods, swig_yarp_dev_DeviceDriver_attributes, { "DeviceDriver", swig_yarp_dev_DeviceDriver_cls_methods, swig_yarp_dev_DeviceDriver_cls_attributes, swig_yarp_dev_DeviceDriver_cls_constants }, swig_yarp_dev_DeviceDriver_bases, swig_yarp_dev_DeviceDriver_base_names };

static int _wrap_new_DeviceResponder(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::DeviceResponder::DeviceResponder",0,0)
  result = (yarp::dev::DeviceResponder *)new yarp::dev::DeviceResponder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__DeviceResponder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceResponder_addUsage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::dev::DeviceResponder::addUsage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceResponder::addUsage",1,"yarp::dev::DeviceResponder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::dev::DeviceResponder::addUsage",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("yarp::dev::DeviceResponder::addUsage",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceResponder,0))){
    SWIG_fail_ptr("DeviceResponder_addUsage",1,SWIGTYPE_p_yarp__dev__DeviceResponder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->addUsage((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceResponder_addUsage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::dev::DeviceResponder::addUsage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceResponder::addUsage",1,"yarp::dev::DeviceResponder *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::dev::DeviceResponder::addUsage",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceResponder,0))){
    SWIG_fail_ptr("DeviceResponder_addUsage",1,SWIGTYPE_p_yarp__dev__DeviceResponder);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addUsage((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceResponder_addUsage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("yarp::dev::DeviceResponder::addUsage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceResponder::addUsage",1,"yarp::dev::DeviceResponder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::DeviceResponder::addUsage",2,"yarp::os::Bottle const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("yarp::dev::DeviceResponder::addUsage",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceResponder,0))){
    SWIG_fail_ptr("DeviceResponder_addUsage",1,SWIGTYPE_p_yarp__dev__DeviceResponder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("DeviceResponder_addUsage",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->addUsage((yarp::os::Bottle const &)*arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceResponder_addUsage__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::dev::DeviceResponder::addUsage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceResponder::addUsage",1,"yarp::dev::DeviceResponder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::DeviceResponder::addUsage",2,"yarp::os::Bottle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceResponder,0))){
    SWIG_fail_ptr("DeviceResponder_addUsage",1,SWIGTYPE_p_yarp__dev__DeviceResponder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("DeviceResponder_addUsage",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  (arg1)->addUsage((yarp::os::Bottle const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceResponder_addUsage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__DeviceResponder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DeviceResponder_addUsage__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__DeviceResponder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_DeviceResponder_addUsage__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__DeviceResponder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_DeviceResponder_addUsage__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__DeviceResponder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_DeviceResponder_addUsage__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DeviceResponder_addUsage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::DeviceResponder::addUsage(char const *,char const *)\n"
    "    yarp::dev::DeviceResponder::addUsage(char const *)\n"
    "    yarp::dev::DeviceResponder::addUsage(yarp::os::Bottle const &,char const *)\n"
    "    yarp::dev::DeviceResponder::addUsage(yarp::os::Bottle const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DeviceResponder_respond(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::Bottle *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::DeviceResponder::respond",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceResponder::respond",1,"yarp::dev::DeviceResponder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::DeviceResponder::respond",2,"yarp::os::Bottle const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::DeviceResponder::respond",3,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceResponder,0))){
    SWIG_fail_ptr("DeviceResponder_respond",1,SWIGTYPE_p_yarp__dev__DeviceResponder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("DeviceResponder_respond",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("DeviceResponder_respond",3,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->respond((yarp::os::Bottle const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceResponder_read(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::ConnectionReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::DeviceResponder::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceResponder::read",1,"yarp::dev::DeviceResponder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::DeviceResponder::read",2,"yarp::os::ConnectionReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceResponder,0))){
    SWIG_fail_ptr("DeviceResponder_read",1,SWIGTYPE_p_yarp__dev__DeviceResponder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__ConnectionReader,0))){
    SWIG_fail_ptr("DeviceResponder_read",2,SWIGTYPE_p_yarp__os__ConnectionReader);
  }
  
  result = (bool)(arg1)->read(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceResponder_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::dev::DeviceResponder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::os::Bottle &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::os::Bottle > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceResponder,0))){
    SWIG_fail_ptr("DeviceResponder_onRead",1,SWIGTYPE_p_yarp__dev__DeviceResponder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("DeviceResponder_onRead",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("DeviceResponder_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::os::Bottle > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceResponder_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::dev::DeviceResponder::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceResponder::onRead",1,"yarp::dev::DeviceResponder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::DeviceResponder::onRead",2,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceResponder,0))){
    SWIG_fail_ptr("DeviceResponder_onRead",1,SWIGTYPE_p_yarp__dev__DeviceResponder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("DeviceResponder_onRead",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceResponder_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__DeviceResponder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DeviceResponder_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__DeviceResponder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Bottle, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DeviceResponder_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DeviceResponder_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::os::Bottle &,yarp::os::TypedReader< yarp::os::Bottle > const &)\n"
    "    yarp::dev::DeviceResponder::onRead(yarp::os::Bottle &)\n");
  lua_error(L);return 0;
}


static int _wrap_DeviceResponder_makeUsage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  
  SWIG_check_num_args("yarp::dev::DeviceResponder::makeUsage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceResponder::makeUsage",1,"yarp::dev::DeviceResponder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceResponder,0))){
    SWIG_fail_ptr("DeviceResponder_makeUsage",1,SWIGTYPE_p_yarp__dev__DeviceResponder);
  }
  
  (arg1)->makeUsage();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceResponder_attach(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) 0 ;
  yarp::os::TypedReader< yarp::os::Bottle > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::dev::DeviceResponder::attach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DeviceResponder::attach",1,"yarp::dev::DeviceResponder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::DeviceResponder::attach",2,"yarp::os::TypedReader< yarp::os::Bottle > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DeviceResponder,0))){
    SWIG_fail_ptr("DeviceResponder_attach",1,SWIGTYPE_p_yarp__dev__DeviceResponder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t,0))){
    SWIG_fail_ptr("DeviceResponder_attach",2,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__os__Bottle_t);
  }
  
  (arg1)->attach(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceResponder(void *obj) {
yarp::dev::DeviceResponder *arg1 = (yarp::dev::DeviceResponder *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_DeviceResponder_methods[] = {
    {"addUsage", _wrap_DeviceResponder_addUsage}, 
    {"respond", _wrap_DeviceResponder_respond}, 
    {"read", _wrap_DeviceResponder_read}, 
    {"onRead", _wrap_DeviceResponder_onRead}, 
    {"makeUsage", _wrap_DeviceResponder_makeUsage}, 
    {"attach", _wrap_DeviceResponder_attach}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_DeviceResponder_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_DeviceResponder_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_DeviceResponder_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_DeviceResponder_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_DeviceResponder_bases[] = {0,0,0};
static const char *swig_yarp_dev_DeviceResponder_base_names[] = {"yarp::os::PortReader *","yarp::os::TypedReaderCallback< Bottle > *",0};
static swig_lua_class _wrap_class_yarp_dev_DeviceResponder = { "DeviceResponder", &SWIGTYPE_p_yarp__dev__DeviceResponder,_wrap_new_DeviceResponder, swig_delete_DeviceResponder, swig_yarp_dev_DeviceResponder_methods, swig_yarp_dev_DeviceResponder_attributes, { "DeviceResponder", swig_yarp_dev_DeviceResponder_cls_methods, swig_yarp_dev_DeviceResponder_cls_attributes, swig_yarp_dev_DeviceResponder_cls_constants }, swig_yarp_dev_DeviceResponder_bases, swig_yarp_dev_DeviceResponder_base_names };

static int _wrap_new_PolyDriver__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::PolyDriver",0,0)
  result = (yarp::dev::PolyDriver *)new yarp::dev::PolyDriver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__PolyDriver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PolyDriver__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::ConstString *arg1 = 0 ;
  yarp::os::ConstString temp1 ;
  yarp::dev::PolyDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::PolyDriver",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::PolyDriver",1,"yarp::os::ConstString const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (yarp::dev::PolyDriver *)new yarp::dev::PolyDriver((yarp::os::ConstString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__PolyDriver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PolyDriver__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Searchable *arg1 = 0 ;
  yarp::dev::PolyDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::PolyDriver",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::PolyDriver",1,"yarp::os::Searchable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("new_PolyDriver",1,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = (yarp::dev::PolyDriver *)new yarp::dev::PolyDriver(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__PolyDriver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PolyDriver(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PolyDriver__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PolyDriver__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PolyDriver__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PolyDriver'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::PolyDriver::PolyDriver()\n"
    "    yarp::dev::PolyDriver::PolyDriver(yarp::os::ConstString const &)\n"
    "    yarp::dev::PolyDriver::PolyDriver(yarp::os::Searchable &)\n");
  lua_error(L);return 0;
}


static int _wrap_PolyDriver_open_str(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::open",1,"yarp::dev::PolyDriver *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::dev::PolyDriver::open",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_open_str",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->open((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_open(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::open",1,"yarp::dev::PolyDriver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::PolyDriver::open",2,"yarp::os::Searchable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_open",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("PolyDriver_open",2,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = (bool)(arg1)->open(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_link(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::PolyDriver *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::link",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::link",1,"yarp::dev::PolyDriver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::PolyDriver::link",2,"yarp::dev::PolyDriver &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_link",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_link",2,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (bool)(arg1)->link(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_take(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::take",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::take",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_take",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::DeviceDriver *)(arg1)->take();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__DeviceDriver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_give(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::give",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::give",1,"yarp::dev::PolyDriver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::PolyDriver::give",2,"yarp::dev::DeviceDriver *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::dev::PolyDriver::give",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_give",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__DeviceDriver,0))){
    SWIG_fail_ptr("PolyDriver_give",2,SWIGTYPE_p_yarp__dev__DeviceDriver);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->give(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::close",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_close",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_isValid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::isValid",1,"yarp::dev::PolyDriver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_isValid",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (bool)((yarp::dev::PolyDriver const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_getOptions(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::os::Bottle result;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::getOptions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::getOptions",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_getOptions",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (arg1)->getOptions();
  {
    yarp::os::Bottle * resultptr = new yarp::os::Bottle((const yarp::os::Bottle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Bottle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_getComment(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::getComment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::getComment",1,"yarp::dev::PolyDriver *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::dev::PolyDriver::getComment",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_getComment",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->getComment((char const *)arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_getDefaultValue(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::getDefaultValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::getDefaultValue",1,"yarp::dev::PolyDriver *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::dev::PolyDriver::getDefaultValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_getDefaultValue",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->getDefaultValue((char const *)arg2);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_getValue(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::os::Value result;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::getValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::getValue",1,"yarp::dev::PolyDriver *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::dev::PolyDriver::getValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_getValue",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->getValue((char const *)arg2);
  {
    yarp::os::Value * resultptr = new yarp::os::Value((const yarp::os::Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_getImplementation(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::getImplementation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::getImplementation",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_getImplementation",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::DeviceDriver *)(arg1)->getImplementation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__DeviceDriver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewFrameGrabberImage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IFrameGrabberImage *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewFrameGrabberImage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewFrameGrabberImage",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewFrameGrabberImage",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IFrameGrabberImage *)yarp_dev_PolyDriver_viewFrameGrabberImage(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IFrameGrabberImage,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewIPositionControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IPositionControl *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewIPositionControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewIPositionControl",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewIPositionControl",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IPositionControl *)yarp_dev_PolyDriver_viewIPositionControl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IPositionControl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewIVelocityControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IVelocityControl *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewIVelocityControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewIVelocityControl",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewIVelocityControl",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IVelocityControl *)yarp_dev_PolyDriver_viewIVelocityControl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IVelocityControl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewIEncoders(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IEncoders *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewIEncoders",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewIEncoders",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewIEncoders",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IEncoders *)yarp_dev_PolyDriver_viewIEncoders(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IEncoders,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewIPidControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IPidControl *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewIPidControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewIPidControl",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewIPidControl",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IPidControl *)yarp_dev_PolyDriver_viewIPidControl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IPidControl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewIAmplifierControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IAmplifierControl *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewIAmplifierControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewIAmplifierControl",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewIAmplifierControl",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IAmplifierControl *)yarp_dev_PolyDriver_viewIAmplifierControl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IAmplifierControl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewIControlLimits(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IControlLimits *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewIControlLimits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewIControlLimits",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewIControlLimits",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IControlLimits *)yarp_dev_PolyDriver_viewIControlLimits(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IControlLimits,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewICartesianControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::ICartesianControl *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewICartesianControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewICartesianControl",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewICartesianControl",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::ICartesianControl *)yarp_dev_PolyDriver_viewICartesianControl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__ICartesianControl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewIGazeControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IGazeControl *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewIGazeControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewIGazeControl",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewIGazeControl",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IGazeControl *)yarp_dev_PolyDriver_viewIGazeControl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IGazeControl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewIImpedanceControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IImpedanceControl *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewIImpedanceControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewIImpedanceControl",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewIImpedanceControl",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IImpedanceControl *)yarp_dev_PolyDriver_viewIImpedanceControl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IImpedanceControl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewITorqueControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::ITorqueControl *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewITorqueControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewITorqueControl",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewITorqueControl",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::ITorqueControl *)yarp_dev_PolyDriver_viewITorqueControl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__ITorqueControl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewIControlMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IControlMode *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewIControlMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewIControlMode",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewIControlMode",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IControlMode *)yarp_dev_PolyDriver_viewIControlMode(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IControlMode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyDriver_viewIOpenLoopControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) 0 ;
  yarp::dev::IOpenLoopControl *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::PolyDriver::viewIOpenLoopControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::PolyDriver::viewIOpenLoopControl",1,"yarp::dev::PolyDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__PolyDriver,0))){
    SWIG_fail_ptr("PolyDriver_viewIOpenLoopControl",1,SWIGTYPE_p_yarp__dev__PolyDriver);
  }
  
  result = (yarp::dev::IOpenLoopControl *)yarp_dev_PolyDriver_viewIOpenLoopControl(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IOpenLoopControl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PolyDriver(void *obj) {
yarp::dev::PolyDriver *arg1 = (yarp::dev::PolyDriver *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_PolyDriver_methods[] = {
    {"open_str", _wrap_PolyDriver_open_str}, 
    {"open", _wrap_PolyDriver_open}, 
    {"link", _wrap_PolyDriver_link}, 
    {"take", _wrap_PolyDriver_take}, 
    {"give", _wrap_PolyDriver_give}, 
    {"close", _wrap_PolyDriver_close}, 
    {"isValid", _wrap_PolyDriver_isValid}, 
    {"getOptions", _wrap_PolyDriver_getOptions}, 
    {"getComment", _wrap_PolyDriver_getComment}, 
    {"getDefaultValue", _wrap_PolyDriver_getDefaultValue}, 
    {"getValue", _wrap_PolyDriver_getValue}, 
    {"getImplementation", _wrap_PolyDriver_getImplementation}, 
    {"viewFrameGrabberImage", _wrap_PolyDriver_viewFrameGrabberImage}, 
    {"viewIPositionControl", _wrap_PolyDriver_viewIPositionControl}, 
    {"viewIVelocityControl", _wrap_PolyDriver_viewIVelocityControl}, 
    {"viewIEncoders", _wrap_PolyDriver_viewIEncoders}, 
    {"viewIPidControl", _wrap_PolyDriver_viewIPidControl}, 
    {"viewIAmplifierControl", _wrap_PolyDriver_viewIAmplifierControl}, 
    {"viewIControlLimits", _wrap_PolyDriver_viewIControlLimits}, 
    {"viewICartesianControl", _wrap_PolyDriver_viewICartesianControl}, 
    {"viewIGazeControl", _wrap_PolyDriver_viewIGazeControl}, 
    {"viewIImpedanceControl", _wrap_PolyDriver_viewIImpedanceControl}, 
    {"viewITorqueControl", _wrap_PolyDriver_viewITorqueControl}, 
    {"viewIControlMode", _wrap_PolyDriver_viewIControlMode}, 
    {"viewIOpenLoopControl", _wrap_PolyDriver_viewIOpenLoopControl}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_PolyDriver_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_PolyDriver_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_PolyDriver_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_PolyDriver_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_PolyDriver_bases[] = {0,0};
static const char *swig_yarp_dev_PolyDriver_base_names[] = {"yarp::dev::DeviceDriver *",0};
static swig_lua_class _wrap_class_yarp_dev_PolyDriver = { "PolyDriver", &SWIGTYPE_p_yarp__dev__PolyDriver,_wrap_new_PolyDriver, swig_delete_PolyDriver, swig_yarp_dev_PolyDriver_methods, swig_yarp_dev_PolyDriver_attributes, { "PolyDriver", swig_yarp_dev_PolyDriver_cls_methods, swig_yarp_dev_PolyDriver_cls_attributes, swig_yarp_dev_PolyDriver_cls_constants }, swig_yarp_dev_PolyDriver_bases, swig_yarp_dev_PolyDriver_base_names };

static int _wrap_DriverCreator_toString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::dev::DriverCreator::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DriverCreator::toString",1,"yarp::dev::DriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DriverCreator,0))){
    SWIG_fail_ptr("DriverCreator_toString",1,SWIGTYPE_p_yarp__dev__DriverCreator);
  }
  
  result = (arg1)->toString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverCreator_create(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::DriverCreator::create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DriverCreator::create",1,"yarp::dev::DriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DriverCreator,0))){
    SWIG_fail_ptr("DriverCreator_create",1,SWIGTYPE_p_yarp__dev__DriverCreator);
  }
  
  result = (yarp::dev::DeviceDriver *)(arg1)->create();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__DeviceDriver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverCreator_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::dev::DriverCreator::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DriverCreator::getName",1,"yarp::dev::DriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DriverCreator,0))){
    SWIG_fail_ptr("DriverCreator_getName",1,SWIGTYPE_p_yarp__dev__DriverCreator);
  }
  
  result = (arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverCreator_getWrapper(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::dev::DriverCreator::getWrapper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DriverCreator::getWrapper",1,"yarp::dev::DriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DriverCreator,0))){
    SWIG_fail_ptr("DriverCreator_getWrapper",1,SWIGTYPE_p_yarp__dev__DriverCreator);
  }
  
  result = (arg1)->getWrapper();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverCreator_getCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::dev::DriverCreator::getCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DriverCreator::getCode",1,"yarp::dev::DriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DriverCreator,0))){
    SWIG_fail_ptr("DriverCreator_getCode",1,SWIGTYPE_p_yarp__dev__DriverCreator);
  }
  
  result = (arg1)->getCode();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverCreator_owner(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) 0 ;
  yarp::dev::PolyDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::DriverCreator::owner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::DriverCreator::owner",1,"yarp::dev::DriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__DriverCreator,0))){
    SWIG_fail_ptr("DriverCreator_owner",1,SWIGTYPE_p_yarp__dev__DriverCreator);
  }
  
  result = (yarp::dev::PolyDriver *)(arg1)->owner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__PolyDriver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DriverCreator(void *obj) {
yarp::dev::DriverCreator *arg1 = (yarp::dev::DriverCreator *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_DriverCreator_methods[] = {
    {"toString", _wrap_DriverCreator_toString}, 
    {"create", _wrap_DriverCreator_create}, 
    {"getName", _wrap_DriverCreator_getName}, 
    {"getWrapper", _wrap_DriverCreator_getWrapper}, 
    {"getCode", _wrap_DriverCreator_getCode}, 
    {"owner", _wrap_DriverCreator_owner}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_DriverCreator_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_DriverCreator_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_DriverCreator_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_DriverCreator_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_DriverCreator_bases[] = {0};
static const char *swig_yarp_dev_DriverCreator_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_DriverCreator = { "DriverCreator", &SWIGTYPE_p_yarp__dev__DriverCreator,0, swig_delete_DriverCreator, swig_yarp_dev_DriverCreator_methods, swig_yarp_dev_DriverCreator_attributes, { "DriverCreator", swig_yarp_dev_DriverCreator_cls_methods, swig_yarp_dev_DriverCreator_cls_attributes, swig_yarp_dev_DriverCreator_cls_constants }, swig_yarp_dev_DriverCreator_bases, swig_yarp_dev_DriverCreator_base_names };

static int _wrap_new_StubDriverCreator(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  yarp::dev::StubDriverCreator *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::StubDriverCreator::StubDriverCreator",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("yarp::dev::StubDriverCreator::StubDriverCreator",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::dev::StubDriverCreator::StubDriverCreator",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("yarp::dev::StubDriverCreator::StubDriverCreator",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("yarp::dev::StubDriverCreator::StubDriverCreator",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("yarp::dev::StubDriverCreator::StubDriverCreator",5,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (yarp::dev::StubDriverCreator *)new yarp::dev::StubDriverCreator((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__StubDriverCreator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StubDriverCreator_toString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::dev::StubDriverCreator::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::StubDriverCreator::toString",1,"yarp::dev::StubDriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__StubDriverCreator,0))){
    SWIG_fail_ptr("StubDriverCreator_toString",1,SWIGTYPE_p_yarp__dev__StubDriverCreator);
  }
  
  result = (arg1)->toString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StubDriverCreator_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::dev::StubDriverCreator::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::StubDriverCreator::getName",1,"yarp::dev::StubDriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__StubDriverCreator,0))){
    SWIG_fail_ptr("StubDriverCreator_getName",1,SWIGTYPE_p_yarp__dev__StubDriverCreator);
  }
  
  result = (arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StubDriverCreator_getWrapper(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::dev::StubDriverCreator::getWrapper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::StubDriverCreator::getWrapper",1,"yarp::dev::StubDriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__StubDriverCreator,0))){
    SWIG_fail_ptr("StubDriverCreator_getWrapper",1,SWIGTYPE_p_yarp__dev__StubDriverCreator);
  }
  
  result = (arg1)->getWrapper();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StubDriverCreator_getCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::dev::StubDriverCreator::getCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::StubDriverCreator::getCode",1,"yarp::dev::StubDriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__StubDriverCreator,0))){
    SWIG_fail_ptr("StubDriverCreator_getCode",1,SWIGTYPE_p_yarp__dev__StubDriverCreator);
  }
  
  result = (arg1)->getCode();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StubDriverCreator_create(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::StubDriverCreator::create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::StubDriverCreator::create",1,"yarp::dev::StubDriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__StubDriverCreator,0))){
    SWIG_fail_ptr("StubDriverCreator_create",1,SWIGTYPE_p_yarp__dev__StubDriverCreator);
  }
  
  result = (yarp::dev::DeviceDriver *)(arg1)->create();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__DeviceDriver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StubDriverCreator(void *obj) {
yarp::dev::StubDriverCreator *arg1 = (yarp::dev::StubDriverCreator *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_StubDriverCreator_methods[] = {
    {"toString", _wrap_StubDriverCreator_toString}, 
    {"getName", _wrap_StubDriverCreator_getName}, 
    {"getWrapper", _wrap_StubDriverCreator_getWrapper}, 
    {"getCode", _wrap_StubDriverCreator_getCode}, 
    {"create", _wrap_StubDriverCreator_create}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_StubDriverCreator_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_StubDriverCreator_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_StubDriverCreator_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_StubDriverCreator_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_StubDriverCreator_bases[] = {0,0};
static const char *swig_yarp_dev_StubDriverCreator_base_names[] = {"yarp::dev::DriverCreator *",0};
static swig_lua_class _wrap_class_yarp_dev_StubDriverCreator = { "StubDriverCreator", &SWIGTYPE_p_yarp__dev__StubDriverCreator,_wrap_new_StubDriverCreator, swig_delete_StubDriverCreator, swig_yarp_dev_StubDriverCreator_methods, swig_yarp_dev_StubDriverCreator_attributes, { "StubDriverCreator", swig_yarp_dev_StubDriverCreator_cls_methods, swig_yarp_dev_StubDriverCreator_cls_attributes, swig_yarp_dev_StubDriverCreator_cls_constants }, swig_yarp_dev_StubDriverCreator_bases, swig_yarp_dev_StubDriverCreator_base_names };

static int _wrap_Drivers_factory(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Drivers *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::Drivers::factory",0,0)
  result = (yarp::dev::Drivers *) &yarp::dev::Drivers::factory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__Drivers,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drivers_open__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::Drivers::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Drivers::open",1,"yarp::dev::Drivers *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::dev::Drivers::open",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Drivers,0))){
    SWIG_fail_ptr("Drivers_open",1,SWIGTYPE_p_yarp__dev__Drivers);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (yarp::dev::DeviceDriver *)(arg1)->open((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__DeviceDriver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drivers_open__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  yarp::os::Searchable *arg2 = 0 ;
  yarp::dev::DeviceDriver *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::Drivers::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Drivers::open",1,"yarp::dev::Drivers *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::Drivers::open",2,"yarp::os::Searchable &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Drivers,0))){
    SWIG_fail_ptr("Drivers_open",1,SWIGTYPE_p_yarp__dev__Drivers);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Searchable,0))){
    SWIG_fail_ptr("Drivers_open",2,SWIGTYPE_p_yarp__os__Searchable);
  }
  
  result = (yarp::dev::DeviceDriver *)(arg1)->open(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__DeviceDriver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drivers_open(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__Drivers, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Searchable, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Drivers_open__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__Drivers, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Drivers_open__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Drivers_open'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::Drivers::open(char const *)\n"
    "    yarp::dev::Drivers::open(yarp::os::Searchable &)\n");
  lua_error(L);return 0;
}


static int _wrap_Drivers_toString(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::dev::Drivers::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Drivers::toString",1,"yarp::dev::Drivers *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Drivers,0))){
    SWIG_fail_ptr("Drivers_toString",1,SWIGTYPE_p_yarp__dev__Drivers);
  }
  
  result = (arg1)->toString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drivers_add(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  yarp::dev::DriverCreator *arg2 = (yarp::dev::DriverCreator *) 0 ;
  
  SWIG_check_num_args("yarp::dev::Drivers::add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Drivers::add",1,"yarp::dev::Drivers *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::Drivers::add",2,"yarp::dev::DriverCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Drivers,0))){
    SWIG_fail_ptr("Drivers_add",1,SWIGTYPE_p_yarp__dev__Drivers);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__DriverCreator,0))){
    SWIG_fail_ptr("Drivers_add",2,SWIGTYPE_p_yarp__dev__DriverCreator);
  }
  
  (arg1)->add(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drivers_find(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  char *arg2 = (char *) 0 ;
  yarp::dev::DriverCreator *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::Drivers::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Drivers::find",1,"yarp::dev::Drivers *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::dev::Drivers::find",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Drivers,0))){
    SWIG_fail_ptr("Drivers_find",1,SWIGTYPE_p_yarp__dev__Drivers);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (yarp::dev::DriverCreator *)(arg1)->find((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__DriverCreator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drivers_remove(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::Drivers::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Drivers::remove",1,"yarp::dev::Drivers *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("yarp::dev::Drivers::remove",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Drivers,0))){
    SWIG_fail_ptr("Drivers_remove",1,SWIGTYPE_p_yarp__dev__Drivers);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->remove((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drivers_yarpdev(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char **arg2 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::Drivers::yarpdev",1,1)
  {
    if (lua_istable(L,1)) {
      int i, size = SWIG_argv_size(L,1);
      arg1 = (int) size;
      arg2 = (char **) malloc((size+1)*sizeof(char *));
      for (i = 0; i < size; i++) {
        lua_rawgeti(L,1,i);
        if (lua_isnil(L,-1))
        break;
        arg2[i] = (char *)lua_tostring(L, -1);
        lua_pop(L,1);
      }
      arg2[i]=NULL;
    } else {
      arg1 = 0; arg2 = 0;
      lua_pushstring(L,"Expecting argv array");
      lua_error(L);
    }
  }
  result = (int)yarp::dev::Drivers::yarpdev(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  {
    free((char *) arg2);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    free((char *) arg2);
  }
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Drivers(void *obj) {
yarp::dev::Drivers *arg1 = (yarp::dev::Drivers *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_Drivers_methods[] = {
    {"open", _wrap_Drivers_open}, 
    {"toString", _wrap_Drivers_toString}, 
    {"add", _wrap_Drivers_add}, 
    {"find", _wrap_Drivers_find}, 
    {"remove", _wrap_Drivers_remove}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_Drivers_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_Drivers_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_Drivers_cls_methods[] = {
    {"factory", _wrap_Drivers_factory}, 
    {"yarpdev", _wrap_Drivers_yarpdev}, 
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_Drivers_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_Drivers_bases[] = {0};
static const char *swig_yarp_dev_Drivers_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_Drivers = { "Drivers", &SWIGTYPE_p_yarp__dev__Drivers,0, swig_delete_Drivers, swig_yarp_dev_Drivers_methods, swig_yarp_dev_Drivers_attributes, { "Drivers", swig_yarp_dev_Drivers_cls_methods, swig_yarp_dev_Drivers_cls_attributes, swig_yarp_dev_Drivers_cls_constants }, swig_yarp_dev_Drivers_bases, swig_yarp_dev_Drivers_base_names };

static int _wrap_IFrameGrabber_getRawBuffer(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabber::getRawBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabber::getRawBuffer",1,"yarp::dev::IFrameGrabber *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabber::getRawBuffer",2,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabber,0))){
    SWIG_fail_ptr("IFrameGrabber_getRawBuffer",1,SWIGTYPE_p_yarp__dev__IFrameGrabber);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("IFrameGrabber_getRawBuffer",2,SWIGTYPE_p_unsigned_char);
  }
  
  result = (bool)(arg1)->getRawBuffer(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabber_getRawBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabber::getRawBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabber::getRawBufferSize",1,"yarp::dev::IFrameGrabber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabber,0))){
    SWIG_fail_ptr("IFrameGrabber_getRawBufferSize",1,SWIGTYPE_p_yarp__dev__IFrameGrabber);
  }
  
  result = (int)(arg1)->getRawBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabber_height(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabber::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabber::height",1,"yarp::dev::IFrameGrabber const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabber,0))){
    SWIG_fail_ptr("IFrameGrabber_height",1,SWIGTYPE_p_yarp__dev__IFrameGrabber);
  }
  
  result = (int)((yarp::dev::IFrameGrabber const *)arg1)->height();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabber_width(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabber::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabber::width",1,"yarp::dev::IFrameGrabber const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabber,0))){
    SWIG_fail_ptr("IFrameGrabber_width",1,SWIGTYPE_p_yarp__dev__IFrameGrabber);
  }
  
  result = (int)((yarp::dev::IFrameGrabber const *)arg1)->width();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IFrameGrabber(void *obj) {
yarp::dev::IFrameGrabber *arg1 = (yarp::dev::IFrameGrabber *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IFrameGrabber_methods[] = {
    {"getRawBuffer", _wrap_IFrameGrabber_getRawBuffer}, 
    {"getRawBufferSize", _wrap_IFrameGrabber_getRawBufferSize}, 
    {"height", _wrap_IFrameGrabber_height}, 
    {"width", _wrap_IFrameGrabber_width}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabber_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabber_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IFrameGrabber_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IFrameGrabber_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IFrameGrabber_bases[] = {0};
static const char *swig_yarp_dev_IFrameGrabber_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IFrameGrabber = { "IFrameGrabber", &SWIGTYPE_p_yarp__dev__IFrameGrabber,0, swig_delete_IFrameGrabber, swig_yarp_dev_IFrameGrabber_methods, swig_yarp_dev_IFrameGrabber_attributes, { "IFrameGrabber", swig_yarp_dev_IFrameGrabber_cls_methods, swig_yarp_dev_IFrameGrabber_cls_attributes, swig_yarp_dev_IFrameGrabber_cls_constants }, swig_yarp_dev_IFrameGrabber_bases, swig_yarp_dev_IFrameGrabber_base_names };

static int _wrap_IFrameGrabberRgb_getRgbBuffer(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberRgb::getRgbBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberRgb::getRgbBuffer",1,"yarp::dev::IFrameGrabberRgb *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberRgb::getRgbBuffer",2,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberRgb,0))){
    SWIG_fail_ptr("IFrameGrabberRgb_getRgbBuffer",1,SWIGTYPE_p_yarp__dev__IFrameGrabberRgb);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("IFrameGrabberRgb_getRgbBuffer",2,SWIGTYPE_p_unsigned_char);
  }
  
  result = (bool)(arg1)->getRgbBuffer(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberRgb_height(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberRgb::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberRgb::height",1,"yarp::dev::IFrameGrabberRgb const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberRgb,0))){
    SWIG_fail_ptr("IFrameGrabberRgb_height",1,SWIGTYPE_p_yarp__dev__IFrameGrabberRgb);
  }
  
  result = (int)((yarp::dev::IFrameGrabberRgb const *)arg1)->height();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberRgb_width(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberRgb::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberRgb::width",1,"yarp::dev::IFrameGrabberRgb const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberRgb,0))){
    SWIG_fail_ptr("IFrameGrabberRgb_width",1,SWIGTYPE_p_yarp__dev__IFrameGrabberRgb);
  }
  
  result = (int)((yarp::dev::IFrameGrabberRgb const *)arg1)->width();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IFrameGrabberRgb(void *obj) {
yarp::dev::IFrameGrabberRgb *arg1 = (yarp::dev::IFrameGrabberRgb *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IFrameGrabberRgb_methods[] = {
    {"getRgbBuffer", _wrap_IFrameGrabberRgb_getRgbBuffer}, 
    {"height", _wrap_IFrameGrabberRgb_height}, 
    {"width", _wrap_IFrameGrabberRgb_width}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabberRgb_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabberRgb_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IFrameGrabberRgb_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IFrameGrabberRgb_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IFrameGrabberRgb_bases[] = {0};
static const char *swig_yarp_dev_IFrameGrabberRgb_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IFrameGrabberRgb = { "IFrameGrabberRgb", &SWIGTYPE_p_yarp__dev__IFrameGrabberRgb,0, swig_delete_IFrameGrabberRgb, swig_yarp_dev_IFrameGrabberRgb_methods, swig_yarp_dev_IFrameGrabberRgb_attributes, { "IFrameGrabberRgb", swig_yarp_dev_IFrameGrabberRgb_cls_methods, swig_yarp_dev_IFrameGrabberRgb_cls_attributes, swig_yarp_dev_IFrameGrabberRgb_cls_constants }, swig_yarp_dev_IFrameGrabberRgb_bases, swig_yarp_dev_IFrameGrabberRgb_base_names };

static int _wrap_IFrameGrabberImage_getImage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberImage::getImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberImage::getImage",1,"yarp::dev::IFrameGrabberImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberImage::getImage",2,"yarp::sig::ImageOf< yarp::sig::PixelRgb > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberImage,0))){
    SWIG_fail_ptr("IFrameGrabberImage_getImage",1,SWIGTYPE_p_yarp__dev__IFrameGrabberImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("IFrameGrabberImage_getImage",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  result = (bool)(arg1)->getImage(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberImage_height(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberImage::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberImage::height",1,"yarp::dev::IFrameGrabberImage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberImage,0))){
    SWIG_fail_ptr("IFrameGrabberImage_height",1,SWIGTYPE_p_yarp__dev__IFrameGrabberImage);
  }
  
  result = (int)((yarp::dev::IFrameGrabberImage const *)arg1)->height();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberImage_width(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberImage::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberImage::width",1,"yarp::dev::IFrameGrabberImage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberImage,0))){
    SWIG_fail_ptr("IFrameGrabberImage_width",1,SWIGTYPE_p_yarp__dev__IFrameGrabberImage);
  }
  
  result = (int)((yarp::dev::IFrameGrabberImage const *)arg1)->width();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IFrameGrabberImage(void *obj) {
yarp::dev::IFrameGrabberImage *arg1 = (yarp::dev::IFrameGrabberImage *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IFrameGrabberImage_methods[] = {
    {"getImage", _wrap_IFrameGrabberImage_getImage}, 
    {"height", _wrap_IFrameGrabberImage_height}, 
    {"width", _wrap_IFrameGrabberImage_width}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabberImage_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabberImage_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IFrameGrabberImage_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IFrameGrabberImage_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IFrameGrabberImage_bases[] = {0};
static const char *swig_yarp_dev_IFrameGrabberImage_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IFrameGrabberImage = { "IFrameGrabberImage", &SWIGTYPE_p_yarp__dev__IFrameGrabberImage,0, swig_delete_IFrameGrabberImage, swig_yarp_dev_IFrameGrabberImage_methods, swig_yarp_dev_IFrameGrabberImage_attributes, { "IFrameGrabberImage", swig_yarp_dev_IFrameGrabberImage_cls_methods, swig_yarp_dev_IFrameGrabberImage_cls_attributes, swig_yarp_dev_IFrameGrabberImage_cls_constants }, swig_yarp_dev_IFrameGrabberImage_bases, swig_yarp_dev_IFrameGrabberImage_base_names };

static int _wrap_IFrameGrabberImageRaw_getImage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberImageRaw::getImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberImageRaw::getImage",1,"yarp::dev::IFrameGrabberImageRaw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberImageRaw::getImage",2,"yarp::sig::ImageOf< yarp::sig::PixelMono > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberImageRaw,0))){
    SWIG_fail_ptr("IFrameGrabberImageRaw_getImage",1,SWIGTYPE_p_yarp__dev__IFrameGrabberImageRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("IFrameGrabberImageRaw_getImage",2,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  result = (bool)(arg1)->getImage(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberImageRaw_height(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberImageRaw::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberImageRaw::height",1,"yarp::dev::IFrameGrabberImageRaw const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberImageRaw,0))){
    SWIG_fail_ptr("IFrameGrabberImageRaw_height",1,SWIGTYPE_p_yarp__dev__IFrameGrabberImageRaw);
  }
  
  result = (int)((yarp::dev::IFrameGrabberImageRaw const *)arg1)->height();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberImageRaw_width(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberImageRaw::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberImageRaw::width",1,"yarp::dev::IFrameGrabberImageRaw const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberImageRaw,0))){
    SWIG_fail_ptr("IFrameGrabberImageRaw_width",1,SWIGTYPE_p_yarp__dev__IFrameGrabberImageRaw);
  }
  
  result = (int)((yarp::dev::IFrameGrabberImageRaw const *)arg1)->width();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IFrameGrabberImageRaw(void *obj) {
yarp::dev::IFrameGrabberImageRaw *arg1 = (yarp::dev::IFrameGrabberImageRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IFrameGrabberImageRaw_methods[] = {
    {"getImage", _wrap_IFrameGrabberImageRaw_getImage}, 
    {"height", _wrap_IFrameGrabberImageRaw_height}, 
    {"width", _wrap_IFrameGrabberImageRaw_width}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabberImageRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabberImageRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IFrameGrabberImageRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IFrameGrabberImageRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IFrameGrabberImageRaw_bases[] = {0};
static const char *swig_yarp_dev_IFrameGrabberImageRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IFrameGrabberImageRaw = { "IFrameGrabberImageRaw", &SWIGTYPE_p_yarp__dev__IFrameGrabberImageRaw,0, swig_delete_IFrameGrabberImageRaw, swig_yarp_dev_IFrameGrabberImageRaw_methods, swig_yarp_dev_IFrameGrabberImageRaw_attributes, { "IFrameGrabberImageRaw", swig_yarp_dev_IFrameGrabberImageRaw_cls_methods, swig_yarp_dev_IFrameGrabberImageRaw_cls_attributes, swig_yarp_dev_IFrameGrabberImageRaw_cls_constants }, swig_yarp_dev_IFrameGrabberImageRaw_bases, swig_yarp_dev_IFrameGrabberImageRaw_base_names };

static int _wrap_IFrameWriterImage_putImage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameWriterImage *arg1 = (yarp::dev::IFrameWriterImage *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameWriterImage::putImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameWriterImage::putImage",1,"yarp::dev::IFrameWriterImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IFrameWriterImage::putImage",2,"yarp::sig::ImageOf< yarp::sig::PixelRgb > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameWriterImage,0))){
    SWIG_fail_ptr("IFrameWriterImage_putImage",1,SWIGTYPE_p_yarp__dev__IFrameWriterImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("IFrameWriterImage_putImage",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  result = (bool)(arg1)->putImage(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IFrameWriterImage(void *obj) {
yarp::dev::IFrameWriterImage *arg1 = (yarp::dev::IFrameWriterImage *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IFrameWriterImage_methods[] = {
    {"putImage", _wrap_IFrameWriterImage_putImage}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameWriterImage_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameWriterImage_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IFrameWriterImage_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IFrameWriterImage_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IFrameWriterImage_bases[] = {0};
static const char *swig_yarp_dev_IFrameWriterImage_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IFrameWriterImage = { "IFrameWriterImage", &SWIGTYPE_p_yarp__dev__IFrameWriterImage,0, swig_delete_IFrameWriterImage, swig_yarp_dev_IFrameWriterImage_methods, swig_yarp_dev_IFrameWriterImage_attributes, { "IFrameWriterImage", swig_yarp_dev_IFrameWriterImage_cls_methods, swig_yarp_dev_IFrameWriterImage_cls_attributes, swig_yarp_dev_IFrameWriterImage_cls_constants }, swig_yarp_dev_IFrameWriterImage_bases, swig_yarp_dev_IFrameWriterImage_base_names };

static int _wrap_IFrameGrabberControls_setBrightness(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::setBrightness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setBrightness",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setBrightness",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_setBrightness",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->setBrightness(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_setExposure(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::setExposure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setExposure",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setExposure",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_setExposure",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->setExposure(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_setSharpness(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::setSharpness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setSharpness",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setSharpness",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_setSharpness",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->setSharpness(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_setWhiteBalance(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::setWhiteBalance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setWhiteBalance",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setWhiteBalance",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setWhiteBalance",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_setWhiteBalance",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setWhiteBalance(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_setHue(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::setHue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setHue",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setHue",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_setHue",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->setHue(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_setSaturation(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::setSaturation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setSaturation",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setSaturation",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_setSaturation",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->setSaturation(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_setGamma(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::setGamma",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setGamma",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setGamma",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_setGamma",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->setGamma(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_setShutter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::setShutter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setShutter",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setShutter",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_setShutter",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->setShutter(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_setGain(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setGain",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setGain",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_setGain",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->setGain(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_setIris(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::setIris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setIris",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::setIris",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_setIris",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->setIris(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_getBrightness(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::getBrightness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getBrightness",1,"yarp::dev::IFrameGrabberControls *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getBrightness",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  result = (double)(arg1)->getBrightness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_getExposure(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::getExposure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getExposure",1,"yarp::dev::IFrameGrabberControls *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getExposure",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  result = (double)(arg1)->getExposure();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_getSharpness(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::getSharpness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getSharpness",1,"yarp::dev::IFrameGrabberControls *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getSharpness",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  result = (double)(arg1)->getSharpness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_getWhiteBalance(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::getWhiteBalance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getWhiteBalance",1,"yarp::dev::IFrameGrabberControls *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getWhiteBalance",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getWhiteBalance",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getWhiteBalance",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getWhiteBalance",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getWhiteBalance",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getWhiteBalance(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_getHue(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::getHue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getHue",1,"yarp::dev::IFrameGrabberControls *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getHue",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  result = (double)(arg1)->getHue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_getSaturation(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::getSaturation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getSaturation",1,"yarp::dev::IFrameGrabberControls *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getSaturation",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  result = (double)(arg1)->getSaturation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_getGamma(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::getGamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getGamma",1,"yarp::dev::IFrameGrabberControls *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getGamma",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  result = (double)(arg1)->getGamma();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_getShutter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::getShutter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getShutter",1,"yarp::dev::IFrameGrabberControls *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getShutter",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  result = (double)(arg1)->getShutter();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_getGain(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::getGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getGain",1,"yarp::dev::IFrameGrabberControls *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getGain",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  result = (double)(arg1)->getGain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControls_getIris(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControls::getIris",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControls::getIris",1,"yarp::dev::IFrameGrabberControls *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0))){
    SWIG_fail_ptr("IFrameGrabberControls_getIris",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControls);
  }
  
  result = (double)(arg1)->getIris();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IFrameGrabberControls(void *obj) {
yarp::dev::IFrameGrabberControls *arg1 = (yarp::dev::IFrameGrabberControls *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IFrameGrabberControls_methods[] = {
    {"setBrightness", _wrap_IFrameGrabberControls_setBrightness}, 
    {"setExposure", _wrap_IFrameGrabberControls_setExposure}, 
    {"setSharpness", _wrap_IFrameGrabberControls_setSharpness}, 
    {"setWhiteBalance", _wrap_IFrameGrabberControls_setWhiteBalance}, 
    {"setHue", _wrap_IFrameGrabberControls_setHue}, 
    {"setSaturation", _wrap_IFrameGrabberControls_setSaturation}, 
    {"setGamma", _wrap_IFrameGrabberControls_setGamma}, 
    {"setShutter", _wrap_IFrameGrabberControls_setShutter}, 
    {"setGain", _wrap_IFrameGrabberControls_setGain}, 
    {"setIris", _wrap_IFrameGrabberControls_setIris}, 
    {"getBrightness", _wrap_IFrameGrabberControls_getBrightness}, 
    {"getExposure", _wrap_IFrameGrabberControls_getExposure}, 
    {"getSharpness", _wrap_IFrameGrabberControls_getSharpness}, 
    {"getWhiteBalance", _wrap_IFrameGrabberControls_getWhiteBalance}, 
    {"getHue", _wrap_IFrameGrabberControls_getHue}, 
    {"getSaturation", _wrap_IFrameGrabberControls_getSaturation}, 
    {"getGamma", _wrap_IFrameGrabberControls_getGamma}, 
    {"getShutter", _wrap_IFrameGrabberControls_getShutter}, 
    {"getGain", _wrap_IFrameGrabberControls_getGain}, 
    {"getIris", _wrap_IFrameGrabberControls_getIris}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabberControls_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabberControls_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IFrameGrabberControls_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IFrameGrabberControls_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IFrameGrabberControls_bases[] = {0};
static const char *swig_yarp_dev_IFrameGrabberControls_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IFrameGrabberControls = { "IFrameGrabberControls", &SWIGTYPE_p_yarp__dev__IFrameGrabberControls,0, swig_delete_IFrameGrabberControls, swig_yarp_dev_IFrameGrabberControls_methods, swig_yarp_dev_IFrameGrabberControls_attributes, { "IFrameGrabberControls", swig_yarp_dev_IFrameGrabberControls_cls_methods, swig_yarp_dev_IFrameGrabberControls_cls_attributes, swig_yarp_dev_IFrameGrabberControls_cls_constants }, swig_yarp_dev_IFrameGrabberControls_bases, swig_yarp_dev_IFrameGrabberControls_base_names };

static int _wrap_IFrameGrabberControlsDC1394_hasFeatureDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::hasFeatureDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::hasFeatureDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::hasFeatureDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_hasFeatureDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->hasFeatureDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setFeatureDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setFeatureDC1394",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setFeatureDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setFeatureDC1394",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setFeatureDC1394",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setFeatureDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setFeatureDC1394(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getFeatureDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getFeatureDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFeatureDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFeatureDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFeatureDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)(arg1)->getFeatureDC1394(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_hasOnOffDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::hasOnOffDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::hasOnOffDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::hasOnOffDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_hasOnOffDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->hasOnOffDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setActiveDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setActiveDC1394",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setActiveDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setActiveDC1394",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setActiveDC1394",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setActiveDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->setActiveDC1394(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getActiveDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getActiveDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getActiveDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getActiveDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getActiveDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->getActiveDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_hasAutoDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::hasAutoDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::hasAutoDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::hasAutoDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_hasAutoDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->hasAutoDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_hasManualDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::hasManualDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::hasManualDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::hasManualDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_hasManualDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->hasManualDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_hasOnePushDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::hasOnePushDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::hasOnePushDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::hasOnePushDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_hasOnePushDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->hasOnePushDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setModeDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setModeDC1394",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setModeDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setModeDC1394",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setModeDC1394",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setModeDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->setModeDC1394(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getModeDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getModeDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getModeDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getModeDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getModeDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->getModeDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setOnePushDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setOnePushDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setOnePushDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setOnePushDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setOnePushDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setOnePushDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getVideoModeMaskDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getVideoModeMaskDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getVideoModeMaskDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getVideoModeMaskDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (unsigned int)(arg1)->getVideoModeMaskDC1394();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getVideoModeDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getVideoModeDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getVideoModeDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getVideoModeDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (unsigned int)(arg1)->getVideoModeDC1394();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setVideoModeDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setVideoModeDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setVideoModeDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setVideoModeDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setVideoModeDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setVideoModeDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getFPSMaskDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getFPSMaskDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFPSMaskDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFPSMaskDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (unsigned int)(arg1)->getFPSMaskDC1394();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getFPSDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getFPSDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFPSDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFPSDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (unsigned int)(arg1)->getFPSDC1394();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setFPSDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setFPSDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setFPSDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setFPSDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setFPSDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setFPSDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getISOSpeedDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getISOSpeedDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getISOSpeedDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getISOSpeedDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (unsigned int)(arg1)->getISOSpeedDC1394();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setISOSpeedDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setISOSpeedDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setISOSpeedDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setISOSpeedDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setISOSpeedDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setISOSpeedDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getColorCodingMaskDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getColorCodingMaskDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getColorCodingMaskDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getColorCodingMaskDC1394",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getColorCodingMaskDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->getColorCodingMaskDC1394(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getColorCodingDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getColorCodingDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getColorCodingDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getColorCodingDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (unsigned int)(arg1)->getColorCodingDC1394();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setColorCodingDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setColorCodingDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setColorCodingDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setColorCodingDC1394",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setColorCodingDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setColorCodingDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setWhiteBalanceDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setWhiteBalanceDC1394",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setWhiteBalanceDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setWhiteBalanceDC1394",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setWhiteBalanceDC1394",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setWhiteBalanceDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setWhiteBalanceDC1394(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getWhiteBalanceDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getWhiteBalanceDC1394",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getWhiteBalanceDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getWhiteBalanceDC1394",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getWhiteBalanceDC1394",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getWhiteBalanceDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getWhiteBalanceDC1394",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getWhiteBalanceDC1394",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getWhiteBalanceDC1394(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getFormat7MaxWindowDC1394",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7MaxWindowDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7MaxWindowDC1394",2,"unsigned int &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7MaxWindowDC1394",3,"unsigned int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7MaxWindowDC1394",4,"unsigned int &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7MaxWindowDC1394",5,"unsigned int &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7MaxWindowDC1394",6,"unsigned int &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7MaxWindowDC1394",7,"unsigned int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394",3,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394",4,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394",5,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394",6,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394",7,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->getFormat7MaxWindowDC1394(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getFormat7WindowDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getFormat7WindowDC1394",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7WindowDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7WindowDC1394",2,"unsigned int &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7WindowDC1394",3,"unsigned int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7WindowDC1394",4,"int &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getFormat7WindowDC1394",5,"int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7WindowDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7WindowDC1394",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7WindowDC1394",3,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7WindowDC1394",4,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getFormat7WindowDC1394",5,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getFormat7WindowDC1394(*arg2,*arg3,*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setFormat7WindowDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setFormat7WindowDC1394",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setFormat7WindowDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setFormat7WindowDC1394",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setFormat7WindowDC1394",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setFormat7WindowDC1394",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setFormat7WindowDC1394",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setFormat7WindowDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)(arg1)->setFormat7WindowDC1394(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setOperationModeDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setOperationModeDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setOperationModeDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setOperationModeDC1394",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setOperationModeDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setOperationModeDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getOperationModeDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getOperationModeDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getOperationModeDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getOperationModeDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (bool)(arg1)->getOperationModeDC1394();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setTransmissionDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setTransmissionDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setTransmissionDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setTransmissionDC1394",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setTransmissionDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setTransmissionDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getTransmissionDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getTransmissionDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getTransmissionDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getTransmissionDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (bool)(arg1)->getTransmissionDC1394();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setBroadcastDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setBroadcastDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setBroadcastDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setBroadcastDC1394",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setBroadcastDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setBroadcastDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setDefaultsDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setDefaultsDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setDefaultsDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setDefaultsDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (bool)(arg1)->setDefaultsDC1394();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setResetDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setResetDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setResetDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setResetDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (bool)(arg1)->setResetDC1394();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setPowerDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setPowerDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setPowerDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setPowerDC1394",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setPowerDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setPowerDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setCaptureDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setCaptureDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setCaptureDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setCaptureDC1394",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setCaptureDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setCaptureDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_getBytesPerPacketDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::getBytesPerPacketDC1394",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::getBytesPerPacketDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_getBytesPerPacketDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  result = (unsigned int)(arg1)->getBytesPerPacketDC1394();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameGrabberControlsDC1394_setBytesPerPacketDC1394(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameGrabberControlsDC1394::setBytesPerPacketDC1394",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setBytesPerPacketDC1394",1,"yarp::dev::IFrameGrabberControlsDC1394 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IFrameGrabberControlsDC1394::setBytesPerPacketDC1394",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0))){
    SWIG_fail_ptr("IFrameGrabberControlsDC1394_setBytesPerPacketDC1394",1,SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setBytesPerPacketDC1394(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IFrameGrabberControlsDC1394(void *obj) {
yarp::dev::IFrameGrabberControlsDC1394 *arg1 = (yarp::dev::IFrameGrabberControlsDC1394 *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IFrameGrabberControlsDC1394_methods[] = {
    {"hasFeatureDC1394", _wrap_IFrameGrabberControlsDC1394_hasFeatureDC1394}, 
    {"setFeatureDC1394", _wrap_IFrameGrabberControlsDC1394_setFeatureDC1394}, 
    {"getFeatureDC1394", _wrap_IFrameGrabberControlsDC1394_getFeatureDC1394}, 
    {"hasOnOffDC1394", _wrap_IFrameGrabberControlsDC1394_hasOnOffDC1394}, 
    {"setActiveDC1394", _wrap_IFrameGrabberControlsDC1394_setActiveDC1394}, 
    {"getActiveDC1394", _wrap_IFrameGrabberControlsDC1394_getActiveDC1394}, 
    {"hasAutoDC1394", _wrap_IFrameGrabberControlsDC1394_hasAutoDC1394}, 
    {"hasManualDC1394", _wrap_IFrameGrabberControlsDC1394_hasManualDC1394}, 
    {"hasOnePushDC1394", _wrap_IFrameGrabberControlsDC1394_hasOnePushDC1394}, 
    {"setModeDC1394", _wrap_IFrameGrabberControlsDC1394_setModeDC1394}, 
    {"getModeDC1394", _wrap_IFrameGrabberControlsDC1394_getModeDC1394}, 
    {"setOnePushDC1394", _wrap_IFrameGrabberControlsDC1394_setOnePushDC1394}, 
    {"getVideoModeMaskDC1394", _wrap_IFrameGrabberControlsDC1394_getVideoModeMaskDC1394}, 
    {"getVideoModeDC1394", _wrap_IFrameGrabberControlsDC1394_getVideoModeDC1394}, 
    {"setVideoModeDC1394", _wrap_IFrameGrabberControlsDC1394_setVideoModeDC1394}, 
    {"getFPSMaskDC1394", _wrap_IFrameGrabberControlsDC1394_getFPSMaskDC1394}, 
    {"getFPSDC1394", _wrap_IFrameGrabberControlsDC1394_getFPSDC1394}, 
    {"setFPSDC1394", _wrap_IFrameGrabberControlsDC1394_setFPSDC1394}, 
    {"getISOSpeedDC1394", _wrap_IFrameGrabberControlsDC1394_getISOSpeedDC1394}, 
    {"setISOSpeedDC1394", _wrap_IFrameGrabberControlsDC1394_setISOSpeedDC1394}, 
    {"getColorCodingMaskDC1394", _wrap_IFrameGrabberControlsDC1394_getColorCodingMaskDC1394}, 
    {"getColorCodingDC1394", _wrap_IFrameGrabberControlsDC1394_getColorCodingDC1394}, 
    {"setColorCodingDC1394", _wrap_IFrameGrabberControlsDC1394_setColorCodingDC1394}, 
    {"setWhiteBalanceDC1394", _wrap_IFrameGrabberControlsDC1394_setWhiteBalanceDC1394}, 
    {"getWhiteBalanceDC1394", _wrap_IFrameGrabberControlsDC1394_getWhiteBalanceDC1394}, 
    {"getFormat7MaxWindowDC1394", _wrap_IFrameGrabberControlsDC1394_getFormat7MaxWindowDC1394}, 
    {"getFormat7WindowDC1394", _wrap_IFrameGrabberControlsDC1394_getFormat7WindowDC1394}, 
    {"setFormat7WindowDC1394", _wrap_IFrameGrabberControlsDC1394_setFormat7WindowDC1394}, 
    {"setOperationModeDC1394", _wrap_IFrameGrabberControlsDC1394_setOperationModeDC1394}, 
    {"getOperationModeDC1394", _wrap_IFrameGrabberControlsDC1394_getOperationModeDC1394}, 
    {"setTransmissionDC1394", _wrap_IFrameGrabberControlsDC1394_setTransmissionDC1394}, 
    {"getTransmissionDC1394", _wrap_IFrameGrabberControlsDC1394_getTransmissionDC1394}, 
    {"setBroadcastDC1394", _wrap_IFrameGrabberControlsDC1394_setBroadcastDC1394}, 
    {"setDefaultsDC1394", _wrap_IFrameGrabberControlsDC1394_setDefaultsDC1394}, 
    {"setResetDC1394", _wrap_IFrameGrabberControlsDC1394_setResetDC1394}, 
    {"setPowerDC1394", _wrap_IFrameGrabberControlsDC1394_setPowerDC1394}, 
    {"setCaptureDC1394", _wrap_IFrameGrabberControlsDC1394_setCaptureDC1394}, 
    {"getBytesPerPacketDC1394", _wrap_IFrameGrabberControlsDC1394_getBytesPerPacketDC1394}, 
    {"setBytesPerPacketDC1394", _wrap_IFrameGrabberControlsDC1394_setBytesPerPacketDC1394}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabberControlsDC1394_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameGrabberControlsDC1394_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IFrameGrabberControlsDC1394_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IFrameGrabberControlsDC1394_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IFrameGrabberControlsDC1394_bases[] = {0,0};
static const char *swig_yarp_dev_IFrameGrabberControlsDC1394_base_names[] = {"yarp::dev::IFrameGrabberControls *",0};
static swig_lua_class _wrap_class_yarp_dev_IFrameGrabberControlsDC1394 = { "IFrameGrabberControlsDC1394", &SWIGTYPE_p_yarp__dev__IFrameGrabberControlsDC1394,0, swig_delete_IFrameGrabberControlsDC1394, swig_yarp_dev_IFrameGrabberControlsDC1394_methods, swig_yarp_dev_IFrameGrabberControlsDC1394_attributes, { "IFrameGrabberControlsDC1394", swig_yarp_dev_IFrameGrabberControlsDC1394_cls_methods, swig_yarp_dev_IFrameGrabberControlsDC1394_cls_attributes, swig_yarp_dev_IFrameGrabberControlsDC1394_cls_constants }, swig_yarp_dev_IFrameGrabberControlsDC1394_bases, swig_yarp_dev_IFrameGrabberControlsDC1394_base_names };

static int _wrap_IAudioVisualGrabber_getAudioVisual(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAudioVisualGrabber *arg1 = (yarp::dev::IAudioVisualGrabber *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::sig::Sound *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAudioVisualGrabber::getAudioVisual",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAudioVisualGrabber::getAudioVisual",1,"yarp::dev::IAudioVisualGrabber *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IAudioVisualGrabber::getAudioVisual",2,"yarp::sig::ImageOf< yarp::sig::PixelRgb > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IAudioVisualGrabber::getAudioVisual",3,"yarp::sig::Sound &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAudioVisualGrabber,0))){
    SWIG_fail_ptr("IAudioVisualGrabber_getAudioVisual",1,SWIGTYPE_p_yarp__dev__IAudioVisualGrabber);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("IAudioVisualGrabber_getAudioVisual",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("IAudioVisualGrabber_getAudioVisual",3,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  result = (bool)(arg1)->getAudioVisual(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IAudioVisualGrabber(void *obj) {
yarp::dev::IAudioVisualGrabber *arg1 = (yarp::dev::IAudioVisualGrabber *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IAudioVisualGrabber_methods[] = {
    {"getAudioVisual", _wrap_IAudioVisualGrabber_getAudioVisual}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IAudioVisualGrabber_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IAudioVisualGrabber_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IAudioVisualGrabber_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IAudioVisualGrabber_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IAudioVisualGrabber_bases[] = {0};
static const char *swig_yarp_dev_IAudioVisualGrabber_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IAudioVisualGrabber = { "IAudioVisualGrabber", &SWIGTYPE_p_yarp__dev__IAudioVisualGrabber,0, swig_delete_IAudioVisualGrabber, swig_yarp_dev_IAudioVisualGrabber_methods, swig_yarp_dev_IAudioVisualGrabber_attributes, { "IAudioVisualGrabber", swig_yarp_dev_IAudioVisualGrabber_cls_methods, swig_yarp_dev_IAudioVisualGrabber_cls_attributes, swig_yarp_dev_IAudioVisualGrabber_cls_constants }, swig_yarp_dev_IAudioVisualGrabber_bases, swig_yarp_dev_IAudioVisualGrabber_base_names };

static int _wrap_IFrameWriterAudioVisual_putAudioVisual(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IFrameWriterAudioVisual *arg1 = (yarp::dev::IFrameWriterAudioVisual *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::sig::Sound *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IFrameWriterAudioVisual::putAudioVisual",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IFrameWriterAudioVisual::putAudioVisual",1,"yarp::dev::IFrameWriterAudioVisual *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IFrameWriterAudioVisual::putAudioVisual",2,"yarp::sig::ImageOf< yarp::sig::PixelRgb > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IFrameWriterAudioVisual::putAudioVisual",3,"yarp::sig::Sound &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IFrameWriterAudioVisual,0))){
    SWIG_fail_ptr("IFrameWriterAudioVisual_putAudioVisual",1,SWIGTYPE_p_yarp__dev__IFrameWriterAudioVisual);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("IFrameWriterAudioVisual_putAudioVisual",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("IFrameWriterAudioVisual_putAudioVisual",3,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  result = (bool)(arg1)->putAudioVisual(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IFrameWriterAudioVisual(void *obj) {
yarp::dev::IFrameWriterAudioVisual *arg1 = (yarp::dev::IFrameWriterAudioVisual *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IFrameWriterAudioVisual_methods[] = {
    {"putAudioVisual", _wrap_IFrameWriterAudioVisual_putAudioVisual}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameWriterAudioVisual_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IFrameWriterAudioVisual_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IFrameWriterAudioVisual_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IFrameWriterAudioVisual_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IFrameWriterAudioVisual_bases[] = {0};
static const char *swig_yarp_dev_IFrameWriterAudioVisual_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IFrameWriterAudioVisual = { "IFrameWriterAudioVisual", &SWIGTYPE_p_yarp__dev__IFrameWriterAudioVisual,0, swig_delete_IFrameWriterAudioVisual, swig_yarp_dev_IFrameWriterAudioVisual_methods, swig_yarp_dev_IFrameWriterAudioVisual_attributes, { "IFrameWriterAudioVisual", swig_yarp_dev_IFrameWriterAudioVisual_cls_methods, swig_yarp_dev_IFrameWriterAudioVisual_cls_attributes, swig_yarp_dev_IFrameWriterAudioVisual_cls_constants }, swig_yarp_dev_IFrameWriterAudioVisual_bases, swig_yarp_dev_IFrameWriterAudioVisual_base_names };

static int _wrap_IAudioVisualStream_hasAudio(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAudioVisualStream::hasAudio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAudioVisualStream::hasAudio",1,"yarp::dev::IAudioVisualStream *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAudioVisualStream,0))){
    SWIG_fail_ptr("IAudioVisualStream_hasAudio",1,SWIGTYPE_p_yarp__dev__IAudioVisualStream);
  }
  
  result = (bool)(arg1)->hasAudio();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAudioVisualStream_hasVideo(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAudioVisualStream::hasVideo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAudioVisualStream::hasVideo",1,"yarp::dev::IAudioVisualStream *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAudioVisualStream,0))){
    SWIG_fail_ptr("IAudioVisualStream_hasVideo",1,SWIGTYPE_p_yarp__dev__IAudioVisualStream);
  }
  
  result = (bool)(arg1)->hasVideo();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAudioVisualStream_hasRawVideo(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAudioVisualStream::hasRawVideo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAudioVisualStream::hasRawVideo",1,"yarp::dev::IAudioVisualStream *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAudioVisualStream,0))){
    SWIG_fail_ptr("IAudioVisualStream_hasRawVideo",1,SWIGTYPE_p_yarp__dev__IAudioVisualStream);
  }
  
  result = (bool)(arg1)->hasRawVideo();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IAudioVisualStream(void *obj) {
yarp::dev::IAudioVisualStream *arg1 = (yarp::dev::IAudioVisualStream *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IAudioVisualStream_methods[] = {
    {"hasAudio", _wrap_IAudioVisualStream_hasAudio}, 
    {"hasVideo", _wrap_IAudioVisualStream_hasVideo}, 
    {"hasRawVideo", _wrap_IAudioVisualStream_hasRawVideo}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IAudioVisualStream_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IAudioVisualStream_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IAudioVisualStream_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IAudioVisualStream_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IAudioVisualStream_bases[] = {0};
static const char *swig_yarp_dev_IAudioVisualStream_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IAudioVisualStream = { "IAudioVisualStream", &SWIGTYPE_p_yarp__dev__IAudioVisualStream,0, swig_delete_IAudioVisualStream, swig_yarp_dev_IAudioVisualStream_methods, swig_yarp_dev_IAudioVisualStream_attributes, { "IAudioVisualStream", swig_yarp_dev_IAudioVisualStream_cls_methods, swig_yarp_dev_IAudioVisualStream_cls_attributes, swig_yarp_dev_IAudioVisualStream_cls_constants }, swig_yarp_dev_IAudioVisualStream_bases, swig_yarp_dev_IAudioVisualStream_base_names };

static int _wrap_CalibrationParameters_type_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::type",1,"yarp::dev::CalibrationParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::CalibrationParameters::type",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_type_set",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_type_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::type",1,"yarp::dev::CalibrationParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_type_get",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  result = (unsigned int) ((arg1)->type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_param1_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::param1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param1",1,"yarp::dev::CalibrationParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param1",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_param1_set",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->param1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_param1_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::param1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param1",1,"yarp::dev::CalibrationParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_param1_get",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  result = (double) ((arg1)->param1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_param2_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::param2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param2",1,"yarp::dev::CalibrationParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_param2_set",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->param2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_param2_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::param2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param2",1,"yarp::dev::CalibrationParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_param2_get",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  result = (double) ((arg1)->param2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_param3_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::param3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param3",1,"yarp::dev::CalibrationParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param3",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_param3_set",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->param3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_param3_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::param3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param3",1,"yarp::dev::CalibrationParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_param3_get",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  result = (double) ((arg1)->param3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_param4_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::param4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param4",1,"yarp::dev::CalibrationParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param4",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_param4_set",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->param4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_param4_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::param4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param4",1,"yarp::dev::CalibrationParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_param4_get",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  result = (double) ((arg1)->param4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_param5_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::param5",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param5",1,"yarp::dev::CalibrationParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param5",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_param5_set",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->param5 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_param5_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::param5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::param5",1,"yarp::dev::CalibrationParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_param5_get",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  result = (double) ((arg1)->param5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_paramZero_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::paramZero",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::paramZero",1,"yarp::dev::CalibrationParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::CalibrationParameters::paramZero",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_paramZero_set",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->paramZero = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CalibrationParameters_paramZero_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::paramZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CalibrationParameters::paramZero",1,"yarp::dev::CalibrationParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("CalibrationParameters_paramZero_get",1,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  result = (double) ((arg1)->paramZero);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CalibrationParameters(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CalibrationParameters *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::CalibrationParameters::CalibrationParameters",0,0)
  result = (yarp::dev::CalibrationParameters *)new yarp::dev::CalibrationParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__CalibrationParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CalibrationParameters(void *obj) {
yarp::dev::CalibrationParameters *arg1 = (yarp::dev::CalibrationParameters *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_CalibrationParameters_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_CalibrationParameters_attributes[] = {
    { "type", _wrap_CalibrationParameters_type_get, _wrap_CalibrationParameters_type_set},
    { "param1", _wrap_CalibrationParameters_param1_get, _wrap_CalibrationParameters_param1_set},
    { "param2", _wrap_CalibrationParameters_param2_get, _wrap_CalibrationParameters_param2_set},
    { "param3", _wrap_CalibrationParameters_param3_get, _wrap_CalibrationParameters_param3_set},
    { "param4", _wrap_CalibrationParameters_param4_get, _wrap_CalibrationParameters_param4_set},
    { "param5", _wrap_CalibrationParameters_param5_get, _wrap_CalibrationParameters_param5_set},
    { "paramZero", _wrap_CalibrationParameters_paramZero_get, _wrap_CalibrationParameters_paramZero_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_CalibrationParameters_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_CalibrationParameters_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_CalibrationParameters_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_CalibrationParameters_bases[] = {0};
static const char *swig_yarp_dev_CalibrationParameters_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_CalibrationParameters = { "CalibrationParameters", &SWIGTYPE_p_yarp__dev__CalibrationParameters,_wrap_new_CalibrationParameters, swig_delete_CalibrationParameters, swig_yarp_dev_CalibrationParameters_methods, swig_yarp_dev_CalibrationParameters_attributes, { "CalibrationParameters", swig_yarp_dev_CalibrationParameters_cls_methods, swig_yarp_dev_CalibrationParameters_cls_attributes, swig_yarp_dev_CalibrationParameters_cls_constants }, swig_yarp_dev_CalibrationParameters_bases, swig_yarp_dev_CalibrationParameters_base_names };

static int _wrap_IPidControlRaw_setPidRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  Pid *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::setPidRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setPidRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setPidRaw",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setPidRaw",3,"Pid const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_setPidRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Pid,0))){
    SWIG_fail_ptr("IPidControlRaw_setPidRaw",3,SWIGTYPE_p_Pid);
  }
  
  result = (bool)(arg1)->setPidRaw(arg2,(Pid const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_setPidsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::setPidsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setPidsRaw",1,"yarp::dev::IPidControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setPidsRaw",2,"Pid const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_setPidsRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pid,0))){
    SWIG_fail_ptr("IPidControlRaw_setPidsRaw",2,SWIGTYPE_p_Pid);
  }
  
  result = (bool)(arg1)->setPidsRaw((Pid const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_setReferenceRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::setReferenceRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setReferenceRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setReferenceRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setReferenceRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_setReferenceRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setReferenceRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_setReferencesRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::setReferencesRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setReferencesRaw",1,"yarp::dev::IPidControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setReferencesRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_setReferencesRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControlRaw_setReferencesRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setReferencesRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_setErrorLimitRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::setErrorLimitRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setErrorLimitRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setErrorLimitRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setErrorLimitRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_setErrorLimitRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setErrorLimitRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_setErrorLimitsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::setErrorLimitsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setErrorLimitsRaw",1,"yarp::dev::IPidControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setErrorLimitsRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_setErrorLimitsRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControlRaw_setErrorLimitsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setErrorLimitsRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_getErrorRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::getErrorRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getErrorRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getErrorRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getErrorRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_getErrorRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControlRaw_getErrorRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getErrorRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_getErrorsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::getErrorsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getErrorsRaw",1,"yarp::dev::IPidControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getErrorsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_getErrorsRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControlRaw_getErrorsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getErrorsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_getOutputRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::getOutputRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getOutputRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getOutputRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getOutputRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_getOutputRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControlRaw_getOutputRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getOutputRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_getOutputsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::getOutputsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getOutputsRaw",1,"yarp::dev::IPidControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getOutputsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_getOutputsRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControlRaw_getOutputsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getOutputsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_getPidRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  Pid *arg3 = (Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::getPidRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getPidRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getPidRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getPidRaw",3,"Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_getPidRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Pid,0))){
    SWIG_fail_ptr("IPidControlRaw_getPidRaw",3,SWIGTYPE_p_Pid);
  }
  
  result = (bool)(arg1)->getPidRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_getPidsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::getPidsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getPidsRaw",1,"yarp::dev::IPidControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getPidsRaw",2,"Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_getPidsRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pid,0))){
    SWIG_fail_ptr("IPidControlRaw_getPidsRaw",2,SWIGTYPE_p_Pid);
  }
  
  result = (bool)(arg1)->getPidsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_getReferenceRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::getReferenceRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getReferenceRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getReferenceRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getReferenceRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_getReferenceRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControlRaw_getReferenceRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getReferenceRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_getReferencesRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::getReferencesRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getReferencesRaw",1,"yarp::dev::IPidControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getReferencesRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_getReferencesRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControlRaw_getReferencesRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getReferencesRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_getErrorLimitRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::getErrorLimitRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getErrorLimitRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getErrorLimitRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getErrorLimitRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_getErrorLimitRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControlRaw_getErrorLimitRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getErrorLimitRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_getErrorLimitsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::getErrorLimitsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getErrorLimitsRaw",1,"yarp::dev::IPidControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::getErrorLimitsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_getErrorLimitsRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControlRaw_getErrorLimitsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getErrorLimitsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_resetPidRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::resetPidRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::resetPidRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::resetPidRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_resetPidRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->resetPidRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_disablePidRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::disablePidRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::disablePidRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::disablePidRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_disablePidRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->disablePidRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_enablePidRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::enablePidRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::enablePidRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::enablePidRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_enablePidRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->enablePidRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControlRaw_setOffsetRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControlRaw::setOffsetRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setOffsetRaw",1,"yarp::dev::IPidControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setOffsetRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPidControlRaw::setOffsetRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControlRaw,0))){
    SWIG_fail_ptr("IPidControlRaw_setOffsetRaw",1,SWIGTYPE_p_yarp__dev__IPidControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setOffsetRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IPidControlRaw(void *obj) {
yarp::dev::IPidControlRaw *arg1 = (yarp::dev::IPidControlRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IPidControlRaw_methods[] = {
    {"setPidRaw", _wrap_IPidControlRaw_setPidRaw}, 
    {"setPidsRaw", _wrap_IPidControlRaw_setPidsRaw}, 
    {"setReferenceRaw", _wrap_IPidControlRaw_setReferenceRaw}, 
    {"setReferencesRaw", _wrap_IPidControlRaw_setReferencesRaw}, 
    {"setErrorLimitRaw", _wrap_IPidControlRaw_setErrorLimitRaw}, 
    {"setErrorLimitsRaw", _wrap_IPidControlRaw_setErrorLimitsRaw}, 
    {"getErrorRaw", _wrap_IPidControlRaw_getErrorRaw}, 
    {"getErrorsRaw", _wrap_IPidControlRaw_getErrorsRaw}, 
    {"getOutputRaw", _wrap_IPidControlRaw_getOutputRaw}, 
    {"getOutputsRaw", _wrap_IPidControlRaw_getOutputsRaw}, 
    {"getPidRaw", _wrap_IPidControlRaw_getPidRaw}, 
    {"getPidsRaw", _wrap_IPidControlRaw_getPidsRaw}, 
    {"getReferenceRaw", _wrap_IPidControlRaw_getReferenceRaw}, 
    {"getReferencesRaw", _wrap_IPidControlRaw_getReferencesRaw}, 
    {"getErrorLimitRaw", _wrap_IPidControlRaw_getErrorLimitRaw}, 
    {"getErrorLimitsRaw", _wrap_IPidControlRaw_getErrorLimitsRaw}, 
    {"resetPidRaw", _wrap_IPidControlRaw_resetPidRaw}, 
    {"disablePidRaw", _wrap_IPidControlRaw_disablePidRaw}, 
    {"enablePidRaw", _wrap_IPidControlRaw_enablePidRaw}, 
    {"setOffsetRaw", _wrap_IPidControlRaw_setOffsetRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IPidControlRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IPidControlRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IPidControlRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IPidControlRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IPidControlRaw_bases[] = {0};
static const char *swig_yarp_dev_IPidControlRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IPidControlRaw = { "IPidControlRaw", &SWIGTYPE_p_yarp__dev__IPidControlRaw,0, swig_delete_IPidControlRaw, swig_yarp_dev_IPidControlRaw_methods, swig_yarp_dev_IPidControlRaw_attributes, { "IPidControlRaw", swig_yarp_dev_IPidControlRaw_cls_methods, swig_yarp_dev_IPidControlRaw_cls_attributes, swig_yarp_dev_IPidControlRaw_cls_constants }, swig_yarp_dev_IPidControlRaw_bases, swig_yarp_dev_IPidControlRaw_base_names };

static int _wrap_IPidControl_setPids__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::setPids",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::setPids",1,"yarp::dev::IPidControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::setPids",2,"Pid const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_setPids",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pid,0))){
    SWIG_fail_ptr("IPidControl_setPids",2,SWIGTYPE_p_Pid);
  }
  
  result = (bool)(arg1)->setPids((Pid const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_setReference(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::setReference",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::setReference",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::setReference",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::setReference",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_setReference",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setReference(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_setReferences__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::setReferences",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::setReferences",1,"yarp::dev::IPidControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::setReferences",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_setReferences",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControl_setReferences",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setReferences((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_setErrorLimit(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::setErrorLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::setErrorLimit",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::setErrorLimit",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::setErrorLimit",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_setErrorLimit",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setErrorLimit(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_setErrorLimits__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::setErrorLimits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::setErrorLimits",1,"yarp::dev::IPidControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::setErrorLimits",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_setErrorLimits",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControl_setErrorLimits",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setErrorLimits((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getError",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getError",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getError",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::getError",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getError",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControl_getError",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getError(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getErrors__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getErrors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getErrors",1,"yarp::dev::IPidControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getErrors",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getErrors",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControl_getErrors",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getErrors(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getOutput",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getOutput",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::getOutput",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getOutput",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControl_getOutput",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getOutput(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getOutputs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getOutputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getOutputs",1,"yarp::dev::IPidControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getOutputs",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getOutputs",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControl_getOutputs",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getOutputs(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getPids__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  Pid *arg2 = (Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getPids",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getPids",1,"yarp::dev::IPidControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getPids",2,"Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getPids",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pid,0))){
    SWIG_fail_ptr("IPidControl_getPids",2,SWIGTYPE_p_Pid);
  }
  
  result = (bool)(arg1)->getPids(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getReference__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getReference",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getReference",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getReference",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::getReference",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getReference",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControl_getReference",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getReference(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getReferences__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getReferences",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getReferences",1,"yarp::dev::IPidControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getReferences",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getReferences",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControl_getReferences",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getReferences(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getErrorLimit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getErrorLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getErrorLimit",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getErrorLimit",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::getErrorLimit",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getErrorLimit",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControl_getErrorLimit",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getErrorLimit(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getErrorLimits__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getErrorLimits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getErrorLimits",1,"yarp::dev::IPidControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getErrorLimits",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getErrorLimits",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPidControl_getErrorLimits",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getErrorLimits(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_resetPid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::resetPid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::resetPid",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::resetPid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_resetPid",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->resetPid(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_disablePid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::disablePid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::disablePid",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::disablePid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_disablePid",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->disablePid(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_enablePid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::enablePid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::enablePid",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::enablePid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_enablePid",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->enablePid(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_setOffset(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::setOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::setOffset",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::setOffset",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::setOffset",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_setOffset",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setOffset(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_setReferences__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::setReferences",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::setReferences",1,"yarp::dev::IPidControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::setReferences",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_setReferences",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPidControl_setReferences",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPidControl_setReferences__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_setReferences(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_setReferences__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_setReferences__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_setReferences'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::setReferences(double const *)\n"
    "    yarp::dev::IPidControl::setReferences(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_getReference__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getReference",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getReference",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getReference",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::getReference",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getReference",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPidControl_getReference",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPidControl_getReference__SWIG_1(arg1,arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getReference(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPidControl_getReference__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPidControl_getReference__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_getReference'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::getReference(int,double *)\n"
    "    yarp::dev::IPidControl::getReference(int,std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_getReferences__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getReferences",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getReferences",1,"yarp::dev::IPidControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getReferences",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getReferences",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPidControl_getReferences",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPidControl_getReferences__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getReferences(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_getReferences__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_getReferences__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_getReferences'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::getReferences(double *)\n"
    "    yarp::dev::IPidControl::getReferences(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_setErrorLimits__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::setErrorLimits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::setErrorLimits",1,"yarp::dev::IPidControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::setErrorLimits",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_setErrorLimits",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPidControl_setErrorLimits",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPidControl_setErrorLimits__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_setErrorLimits(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_setErrorLimits__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_setErrorLimits__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_setErrorLimits'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::setErrorLimits(double const *)\n"
    "    yarp::dev::IPidControl::setErrorLimits(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_getErrorLimit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getErrorLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getErrorLimit",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getErrorLimit",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::getErrorLimit",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getErrorLimit",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPidControl_getErrorLimit",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPidControl_getErrorLimit__SWIG_1(arg1,arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getErrorLimit(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPidControl_getErrorLimit__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPidControl_getErrorLimit__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_getErrorLimit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::getErrorLimit(int,double *)\n"
    "    yarp::dev::IPidControl::getErrorLimit(int,std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_getErrorLimits__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getErrorLimits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getErrorLimits",1,"yarp::dev::IPidControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getErrorLimits",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getErrorLimits",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPidControl_getErrorLimits",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPidControl_getErrorLimits__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getErrorLimits(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_getErrorLimits__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_getErrorLimits__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_getErrorLimits'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::getErrorLimits(double *)\n"
    "    yarp::dev::IPidControl::getErrorLimits(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_getError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getError",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getError",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getError",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::getError",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getError",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPidControl_getError",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPidControl_getError__SWIG_1(arg1,arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getError(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPidControl_getError__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPidControl_getError__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_getError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::getError(int,double *)\n"
    "    yarp::dev::IPidControl::getError(int,std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_getErrors__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getErrors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getErrors",1,"yarp::dev::IPidControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getErrors",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getErrors",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPidControl_getErrors",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPidControl_getErrors__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getErrors(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_getErrors__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_getErrors__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_getErrors'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::getErrors(double *)\n"
    "    yarp::dev::IPidControl::getErrors(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_getOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getOutput",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getOutput",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::getOutput",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getOutput",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPidControl_getOutput",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPidControl_getOutput__SWIG_1(arg1,arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPidControl_getOutput__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPidControl_getOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_getOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::getOutput(int,double *)\n"
    "    yarp::dev::IPidControl::getOutput(int,std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_getOutputs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getOutputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getOutputs",1,"yarp::dev::IPidControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getOutputs",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getOutputs",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPidControl_getOutputs",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPidControl_getOutputs__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getOutputs(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_getOutputs__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_getOutputs__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_getOutputs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::getOutputs(double *)\n"
    "    yarp::dev::IPidControl::getOutputs(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_setPid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  yarp::dev::Pid arg3 ;
  yarp::dev::Pid *argp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::setPid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::setPid",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::setPid",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::setPid",3,"yarp::dev::Pid");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_setPid",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("IPidControl_setPid",3,SWIGTYPE_p_yarp__dev__Pid);
  }
  arg3 = *argp3;
  
  result = (bool)yarp_dev_IPidControl_setPid(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_setPids__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< yarp::dev::Pid > arg2 ;
  std::vector< yarp::dev::Pid > *argp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::setPids",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::setPids",1,"yarp::dev::IPidControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::setPids",2,"std::vector< yarp::dev::Pid >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_setPids",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("IPidControl_setPids",2,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  arg2 = *argp2;
  
  result = (bool)yarp_dev_IPidControl_setPids__SWIG_1(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_setPids(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Pid, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_setPids__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_setPids__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_setPids'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::setPids(Pid const *)\n"
    "    yarp::dev::IPidControl::setPids(std::vector< yarp::dev::Pid >)\n");
  lua_error(L);return 0;
}


static int _wrap_IPidControl_getPid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  int arg2 ;
  std::vector< yarp::dev::Pid > arg3 ;
  std::vector< yarp::dev::Pid > *argp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getPid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getPid",1,"yarp::dev::IPidControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getPid",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IPidControl::getPid",3,"std::vector< yarp::dev::Pid >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getPid",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("IPidControl_getPid",3,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  arg3 = *argp3;
  
  result = (bool)yarp_dev_IPidControl_getPid(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getPids__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) 0 ;
  std::vector< yarp::dev::Pid > arg2 ;
  std::vector< yarp::dev::Pid > *argp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPidControl::getPids",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPidControl::getPids",1,"yarp::dev::IPidControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPidControl::getPids",2,"std::vector< yarp::dev::Pid >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPidControl,0))){
    SWIG_fail_ptr("IPidControl_getPids",1,SWIGTYPE_p_yarp__dev__IPidControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("IPidControl_getPids",2,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  arg2 = *argp2;
  
  result = (bool)yarp_dev_IPidControl_getPids__SWIG_1(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPidControl_getPids(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Pid, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_getPids__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPidControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPidControl_getPids__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPidControl_getPids'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPidControl::getPids(Pid *)\n"
    "    yarp::dev::IPidControl::getPids(std::vector< yarp::dev::Pid >)\n");
  lua_error(L);return 0;
}


static void swig_delete_IPidControl(void *obj) {
yarp::dev::IPidControl *arg1 = (yarp::dev::IPidControl *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IPidControl_methods[] = {
    {"setReference", _wrap_IPidControl_setReference}, 
    {"setErrorLimit", _wrap_IPidControl_setErrorLimit}, 
    {"resetPid", _wrap_IPidControl_resetPid}, 
    {"disablePid", _wrap_IPidControl_disablePid}, 
    {"enablePid", _wrap_IPidControl_enablePid}, 
    {"setOffset", _wrap_IPidControl_setOffset}, 
    {"setReferences", _wrap_IPidControl_setReferences}, 
    {"getReference", _wrap_IPidControl_getReference}, 
    {"getReferences", _wrap_IPidControl_getReferences}, 
    {"setErrorLimits", _wrap_IPidControl_setErrorLimits}, 
    {"getErrorLimit", _wrap_IPidControl_getErrorLimit}, 
    {"getErrorLimits", _wrap_IPidControl_getErrorLimits}, 
    {"getError", _wrap_IPidControl_getError}, 
    {"getErrors", _wrap_IPidControl_getErrors}, 
    {"getOutput", _wrap_IPidControl_getOutput}, 
    {"getOutputs", _wrap_IPidControl_getOutputs}, 
    {"setPid", _wrap_IPidControl_setPid}, 
    {"setPids", _wrap_IPidControl_setPids}, 
    {"getPid", _wrap_IPidControl_getPid}, 
    {"getPids", _wrap_IPidControl_getPids}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IPidControl_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IPidControl_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IPidControl_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IPidControl_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IPidControl_bases[] = {0};
static const char *swig_yarp_dev_IPidControl_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IPidControl = { "IPidControl", &SWIGTYPE_p_yarp__dev__IPidControl,0, swig_delete_IPidControl, swig_yarp_dev_IPidControl_methods, swig_yarp_dev_IPidControl_attributes, { "IPidControl", swig_yarp_dev_IPidControl_cls_methods, swig_yarp_dev_IPidControl_cls_attributes, swig_yarp_dev_IPidControl_cls_constants }, swig_yarp_dev_IPidControl_bases, swig_yarp_dev_IPidControl_base_names };

static int _wrap_IAmplifierControl_enableAmp(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::enableAmp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::enableAmp",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::enableAmp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_enableAmp",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->enableAmp(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_disableAmp(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::disableAmp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::disableAmp",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::disableAmp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_disableAmp",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->disableAmp(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getAmpStatus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getAmpStatus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getAmpStatus",1,"yarp::dev::IAmplifierControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getAmpStatus",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getAmpStatus",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IAmplifierControl_getAmpStatus",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAmpStatus(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getAmpStatus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getAmpStatus",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getAmpStatus",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getAmpStatus",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getAmpStatus",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getAmpStatus",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IAmplifierControl_getAmpStatus",3,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAmpStatus(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getAmpStatus(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IAmplifierControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IAmplifierControl_getAmpStatus__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IAmplifierControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IAmplifierControl_getAmpStatus__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IAmplifierControl_getAmpStatus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IAmplifierControl::getAmpStatus(int *)\n"
    "    yarp::dev::IAmplifierControl::getAmpStatus(int,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_IAmplifierControl_getCurrents__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getCurrents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getCurrents",1,"yarp::dev::IAmplifierControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getCurrents",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getCurrents",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControl_getCurrents",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getCurrents(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getCurrent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getCurrent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getCurrent",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getCurrent",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getCurrent",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getCurrent",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControl_getCurrent",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getCurrent(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getMaxCurrent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getMaxCurrent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getMaxCurrent",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getMaxCurrent",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getMaxCurrent",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getMaxCurrent",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControl_getMaxCurrent",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getMaxCurrent(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_setMaxCurrent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::setMaxCurrent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::setMaxCurrent",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::setMaxCurrent",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::setMaxCurrent",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_setMaxCurrent",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setMaxCurrent(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getNominalCurrent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getNominalCurrent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getNominalCurrent",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getNominalCurrent",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getNominalCurrent",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getNominalCurrent",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControl_getNominalCurrent",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getNominalCurrent(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getPeakCurrent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getPeakCurrent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPeakCurrent",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPeakCurrent",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPeakCurrent",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getPeakCurrent",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControl_getPeakCurrent",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getPeakCurrent(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_setPeakCurrent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::setPeakCurrent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::setPeakCurrent",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::setPeakCurrent",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::setPeakCurrent",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_setPeakCurrent",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->setPeakCurrent(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getPWM(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getPWM",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPWM",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPWM",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPWM",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getPWM",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControl_getPWM",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getPWM(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getPWMLimit(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getPWMLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPWMLimit",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPWMLimit",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPWMLimit",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getPWMLimit",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControl_getPWMLimit",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getPWMLimit(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_setPWMLimit(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::setPWMLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::setPWMLimit",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::setPWMLimit",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::setPWMLimit",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_setPWMLimit",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->setPWMLimit(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getPowerSupplyVoltage(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getPowerSupplyVoltage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPowerSupplyVoltage",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPowerSupplyVoltage",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getPowerSupplyVoltage",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getPowerSupplyVoltage",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControl_getPowerSupplyVoltage",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getPowerSupplyVoltage(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getCurrents__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getCurrents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getCurrents",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getCurrents",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getCurrents",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IAmplifierControl_getCurrents",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IAmplifierControl_getCurrents__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getCurrents(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IAmplifierControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IAmplifierControl_getCurrents__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IAmplifierControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IAmplifierControl_getCurrents__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IAmplifierControl_getCurrents'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IAmplifierControl::getCurrents(double *)\n"
    "    yarp::dev::IAmplifierControl::getCurrents(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IAmplifierControl_getCurrent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControl::getCurrent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getCurrent",1,"yarp::dev::IAmplifierControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getCurrent",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControl::getCurrent",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControl,0))){
    SWIG_fail_ptr("IAmplifierControl_getCurrent",1,SWIGTYPE_p_yarp__dev__IAmplifierControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IAmplifierControl_getCurrent",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IAmplifierControl_getCurrent__SWIG_1(arg1,arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControl_getCurrent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IAmplifierControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IAmplifierControl_getCurrent__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IAmplifierControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IAmplifierControl_getCurrent__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IAmplifierControl_getCurrent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IAmplifierControl::getCurrent(int,double *)\n"
    "    yarp::dev::IAmplifierControl::getCurrent(int,std::vector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_IAmplifierControl(void *obj) {
yarp::dev::IAmplifierControl *arg1 = (yarp::dev::IAmplifierControl *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IAmplifierControl_methods[] = {
    {"enableAmp", _wrap_IAmplifierControl_enableAmp}, 
    {"disableAmp", _wrap_IAmplifierControl_disableAmp}, 
    {"getAmpStatus", _wrap_IAmplifierControl_getAmpStatus}, 
    {"getMaxCurrent", _wrap_IAmplifierControl_getMaxCurrent}, 
    {"setMaxCurrent", _wrap_IAmplifierControl_setMaxCurrent}, 
    {"getNominalCurrent", _wrap_IAmplifierControl_getNominalCurrent}, 
    {"getPeakCurrent", _wrap_IAmplifierControl_getPeakCurrent}, 
    {"setPeakCurrent", _wrap_IAmplifierControl_setPeakCurrent}, 
    {"getPWM", _wrap_IAmplifierControl_getPWM}, 
    {"getPWMLimit", _wrap_IAmplifierControl_getPWMLimit}, 
    {"setPWMLimit", _wrap_IAmplifierControl_setPWMLimit}, 
    {"getPowerSupplyVoltage", _wrap_IAmplifierControl_getPowerSupplyVoltage}, 
    {"getCurrents", _wrap_IAmplifierControl_getCurrents}, 
    {"getCurrent", _wrap_IAmplifierControl_getCurrent}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IAmplifierControl_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IAmplifierControl_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IAmplifierControl_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IAmplifierControl_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IAmplifierControl_bases[] = {0};
static const char *swig_yarp_dev_IAmplifierControl_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IAmplifierControl = { "IAmplifierControl", &SWIGTYPE_p_yarp__dev__IAmplifierControl,0, swig_delete_IAmplifierControl, swig_yarp_dev_IAmplifierControl_methods, swig_yarp_dev_IAmplifierControl_attributes, { "IAmplifierControl", swig_yarp_dev_IAmplifierControl_cls_methods, swig_yarp_dev_IAmplifierControl_cls_attributes, swig_yarp_dev_IAmplifierControl_cls_constants }, swig_yarp_dev_IAmplifierControl_bases, swig_yarp_dev_IAmplifierControl_base_names };

static int _wrap_IAmplifierControlRaw_enableAmpRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::enableAmpRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::enableAmpRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::enableAmpRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_enableAmpRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->enableAmpRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_disableAmpRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::disableAmpRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::disableAmpRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::disableAmpRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_disableAmpRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->disableAmpRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_getAmpStatusRaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::getAmpStatusRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getAmpStatusRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getAmpStatusRaw",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getAmpStatusRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getAmpStatusRaw",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAmpStatusRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_getAmpStatusRaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::getAmpStatusRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getAmpStatusRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getAmpStatusRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getAmpStatusRaw",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getAmpStatusRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getAmpStatusRaw",3,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAmpStatusRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_getAmpStatusRaw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IAmplifierControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IAmplifierControlRaw_getAmpStatusRaw__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IAmplifierControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IAmplifierControlRaw_getAmpStatusRaw__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IAmplifierControlRaw_getAmpStatusRaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IAmplifierControlRaw::getAmpStatusRaw(int *)\n"
    "    yarp::dev::IAmplifierControlRaw::getAmpStatusRaw(int,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_IAmplifierControlRaw_getCurrentsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::getCurrentsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getCurrentsRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getCurrentsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getCurrentsRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getCurrentsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getCurrentsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_getCurrentRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::getCurrentRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getCurrentRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getCurrentRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getCurrentRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getCurrentRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getCurrentRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getCurrentRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_setMaxCurrentRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::setMaxCurrentRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::setMaxCurrentRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::setMaxCurrentRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::setMaxCurrentRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_setMaxCurrentRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setMaxCurrentRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_getMaxCurrentRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::getMaxCurrentRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getMaxCurrentRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getMaxCurrentRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getMaxCurrentRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getMaxCurrentRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getMaxCurrentRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getMaxCurrentRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_getNominalCurrentRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::getNominalCurrentRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getNominalCurrentRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getNominalCurrentRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getNominalCurrentRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getNominalCurrentRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getNominalCurrentRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getNominalCurrentRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_getPeakCurrentRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::getPeakCurrentRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPeakCurrentRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPeakCurrentRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPeakCurrentRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getPeakCurrentRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getPeakCurrentRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getPeakCurrentRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_setPeakCurrentRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::setPeakCurrentRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::setPeakCurrentRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::setPeakCurrentRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::setPeakCurrentRaw",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_setPeakCurrentRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->setPeakCurrentRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_getPWMRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::getPWMRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPWMRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPWMRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPWMRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getPWMRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getPWMRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getPWMRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_getPWMLimitRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::getPWMLimitRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPWMLimitRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPWMLimitRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPWMLimitRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getPWMLimitRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getPWMLimitRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getPWMLimitRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_setPWMLimitRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::setPWMLimitRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::setPWMLimitRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::setPWMLimitRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::setPWMLimitRaw",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_setPWMLimitRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->setPWMLimitRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAmplifierControlRaw_getPowerSupplyVoltageRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAmplifierControlRaw::getPowerSupplyVoltageRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPowerSupplyVoltageRaw",1,"yarp::dev::IAmplifierControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPowerSupplyVoltageRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IAmplifierControlRaw::getPowerSupplyVoltageRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getPowerSupplyVoltageRaw",1,SWIGTYPE_p_yarp__dev__IAmplifierControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IAmplifierControlRaw_getPowerSupplyVoltageRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getPowerSupplyVoltageRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IAmplifierControlRaw(void *obj) {
yarp::dev::IAmplifierControlRaw *arg1 = (yarp::dev::IAmplifierControlRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IAmplifierControlRaw_methods[] = {
    {"enableAmpRaw", _wrap_IAmplifierControlRaw_enableAmpRaw}, 
    {"disableAmpRaw", _wrap_IAmplifierControlRaw_disableAmpRaw}, 
    {"getAmpStatusRaw", _wrap_IAmplifierControlRaw_getAmpStatusRaw}, 
    {"getCurrentsRaw", _wrap_IAmplifierControlRaw_getCurrentsRaw}, 
    {"getCurrentRaw", _wrap_IAmplifierControlRaw_getCurrentRaw}, 
    {"setMaxCurrentRaw", _wrap_IAmplifierControlRaw_setMaxCurrentRaw}, 
    {"getMaxCurrentRaw", _wrap_IAmplifierControlRaw_getMaxCurrentRaw}, 
    {"getNominalCurrentRaw", _wrap_IAmplifierControlRaw_getNominalCurrentRaw}, 
    {"getPeakCurrentRaw", _wrap_IAmplifierControlRaw_getPeakCurrentRaw}, 
    {"setPeakCurrentRaw", _wrap_IAmplifierControlRaw_setPeakCurrentRaw}, 
    {"getPWMRaw", _wrap_IAmplifierControlRaw_getPWMRaw}, 
    {"getPWMLimitRaw", _wrap_IAmplifierControlRaw_getPWMLimitRaw}, 
    {"setPWMLimitRaw", _wrap_IAmplifierControlRaw_setPWMLimitRaw}, 
    {"getPowerSupplyVoltageRaw", _wrap_IAmplifierControlRaw_getPowerSupplyVoltageRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IAmplifierControlRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IAmplifierControlRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IAmplifierControlRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IAmplifierControlRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IAmplifierControlRaw_bases[] = {0};
static const char *swig_yarp_dev_IAmplifierControlRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IAmplifierControlRaw = { "IAmplifierControlRaw", &SWIGTYPE_p_yarp__dev__IAmplifierControlRaw,0, swig_delete_IAmplifierControlRaw, swig_yarp_dev_IAmplifierControlRaw_methods, swig_yarp_dev_IAmplifierControlRaw_attributes, { "IAmplifierControlRaw", swig_yarp_dev_IAmplifierControlRaw_cls_methods, swig_yarp_dev_IAmplifierControlRaw_cls_attributes, swig_yarp_dev_IAmplifierControlRaw_cls_constants }, swig_yarp_dev_IAmplifierControlRaw_bases, swig_yarp_dev_IAmplifierControlRaw_base_names };

static int _wrap_IControlCalibrationRaw_calibrateRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibrationRaw *arg1 = (yarp::dev::IControlCalibrationRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibrationRaw::calibrateRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibrationRaw::calibrateRaw",1,"yarp::dev::IControlCalibrationRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibrationRaw::calibrateRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IControlCalibrationRaw::calibrateRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibrationRaw,0))){
    SWIG_fail_ptr("IControlCalibrationRaw_calibrateRaw",1,SWIGTYPE_p_yarp__dev__IControlCalibrationRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->calibrateRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibrationRaw_doneRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibrationRaw *arg1 = (yarp::dev::IControlCalibrationRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibrationRaw::doneRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibrationRaw::doneRaw",1,"yarp::dev::IControlCalibrationRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibrationRaw::doneRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibrationRaw,0))){
    SWIG_fail_ptr("IControlCalibrationRaw_doneRaw",1,SWIGTYPE_p_yarp__dev__IControlCalibrationRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->doneRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IControlCalibrationRaw(void *obj) {
yarp::dev::IControlCalibrationRaw *arg1 = (yarp::dev::IControlCalibrationRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IControlCalibrationRaw_methods[] = {
    {"calibrateRaw", _wrap_IControlCalibrationRaw_calibrateRaw}, 
    {"doneRaw", _wrap_IControlCalibrationRaw_doneRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlCalibrationRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlCalibrationRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IControlCalibrationRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IControlCalibrationRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IControlCalibrationRaw_bases[] = {0};
static const char *swig_yarp_dev_IControlCalibrationRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IControlCalibrationRaw = { "IControlCalibrationRaw", &SWIGTYPE_p_yarp__dev__IControlCalibrationRaw,0, swig_delete_IControlCalibrationRaw, swig_yarp_dev_IControlCalibrationRaw_methods, swig_yarp_dev_IControlCalibrationRaw_attributes, { "IControlCalibrationRaw", swig_yarp_dev_IControlCalibrationRaw_cls_methods, swig_yarp_dev_IControlCalibrationRaw_cls_attributes, swig_yarp_dev_IControlCalibrationRaw_cls_constants }, swig_yarp_dev_IControlCalibrationRaw_bases, swig_yarp_dev_IControlCalibrationRaw_base_names };

static int _wrap_IControlCalibration2Raw_calibrate2Raw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2Raw::calibrate2Raw",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::calibrate2Raw",1,"yarp::dev::IControlCalibration2Raw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::calibrate2Raw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::calibrate2Raw",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::calibrate2Raw",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::calibrate2Raw",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::calibrate2Raw",6,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2Raw,0))){
    SWIG_fail_ptr("IControlCalibration2Raw_calibrate2Raw",1,SWIGTYPE_p_yarp__dev__IControlCalibration2Raw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6);
  result = (bool)(arg1)->calibrate2Raw(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration2Raw_setCalibrationParametersRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  int arg2 ;
  yarp::dev::CalibrationParameters *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2Raw::setCalibrationParametersRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::setCalibrationParametersRaw",1,"yarp::dev::IControlCalibration2Raw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::setCalibrationParametersRaw",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::setCalibrationParametersRaw",3,"yarp::dev::CalibrationParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2Raw,0))){
    SWIG_fail_ptr("IControlCalibration2Raw_setCalibrationParametersRaw",1,SWIGTYPE_p_yarp__dev__IControlCalibration2Raw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("IControlCalibration2Raw_setCalibrationParametersRaw",3,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  result = (bool)(arg1)->setCalibrationParametersRaw(arg2,(yarp::dev::CalibrationParameters const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration2Raw_doneRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2Raw::doneRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::doneRaw",1,"yarp::dev::IControlCalibration2Raw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration2Raw::doneRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2Raw,0))){
    SWIG_fail_ptr("IControlCalibration2Raw_doneRaw",1,SWIGTYPE_p_yarp__dev__IControlCalibration2Raw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->doneRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IControlCalibration2Raw(void *obj) {
yarp::dev::IControlCalibration2Raw *arg1 = (yarp::dev::IControlCalibration2Raw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IControlCalibration2Raw_methods[] = {
    {"calibrate2Raw", _wrap_IControlCalibration2Raw_calibrate2Raw}, 
    {"setCalibrationParametersRaw", _wrap_IControlCalibration2Raw_setCalibrationParametersRaw}, 
    {"doneRaw", _wrap_IControlCalibration2Raw_doneRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlCalibration2Raw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlCalibration2Raw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IControlCalibration2Raw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IControlCalibration2Raw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IControlCalibration2Raw_bases[] = {0};
static const char *swig_yarp_dev_IControlCalibration2Raw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IControlCalibration2Raw = { "IControlCalibration2Raw", &SWIGTYPE_p_yarp__dev__IControlCalibration2Raw,0, swig_delete_IControlCalibration2Raw, swig_yarp_dev_IControlCalibration2Raw_methods, swig_yarp_dev_IControlCalibration2Raw_attributes, { "IControlCalibration2Raw", swig_yarp_dev_IControlCalibration2Raw_cls_methods, swig_yarp_dev_IControlCalibration2Raw_cls_attributes, swig_yarp_dev_IControlCalibration2Raw_cls_constants }, swig_yarp_dev_IControlCalibration2Raw_bases, swig_yarp_dev_IControlCalibration2Raw_base_names };

static int _wrap_IControlCalibration_calibrate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration::calibrate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration::calibrate",1,"yarp::dev::IControlCalibration *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration::calibrate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IControlCalibration::calibrate",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration,0))){
    SWIG_fail_ptr("IControlCalibration_calibrate",1,SWIGTYPE_p_yarp__dev__IControlCalibration);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->calibrate(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration_done(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration::done",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration::done",1,"yarp::dev::IControlCalibration *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration::done",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration,0))){
    SWIG_fail_ptr("IControlCalibration_done",1,SWIGTYPE_p_yarp__dev__IControlCalibration);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->done(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration_setCalibrator(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  ICalibrator *arg2 = (ICalibrator *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration::setCalibrator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration::setCalibrator",1,"yarp::dev::IControlCalibration *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration::setCalibrator",2,"ICalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration,0))){
    SWIG_fail_ptr("IControlCalibration_setCalibrator",1,SWIGTYPE_p_yarp__dev__IControlCalibration);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ICalibrator,0))){
    SWIG_fail_ptr("IControlCalibration_setCalibrator",2,SWIGTYPE_p_ICalibrator);
  }
  
  result = (bool)(arg1)->setCalibrator(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration_calibrate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration::calibrate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration::calibrate",1,"yarp::dev::IControlCalibration *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration,0))){
    SWIG_fail_ptr("IControlCalibration_calibrate",1,SWIGTYPE_p_yarp__dev__IControlCalibration);
  }
  
  result = (bool)(arg1)->calibrate();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration_calibrate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlCalibration, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IControlCalibration_calibrate__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlCalibration, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IControlCalibration_calibrate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IControlCalibration_calibrate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IControlCalibration::calibrate(int,double)\n"
    "    yarp::dev::IControlCalibration::calibrate()\n");
  lua_error(L);return 0;
}


static int _wrap_IControlCalibration_park__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration::park",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration::park",1,"yarp::dev::IControlCalibration *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration::park",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration,0))){
    SWIG_fail_ptr("IControlCalibration_park",1,SWIGTYPE_p_yarp__dev__IControlCalibration);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->park(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration_park__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration::park",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration::park",1,"yarp::dev::IControlCalibration *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration,0))){
    SWIG_fail_ptr("IControlCalibration_park",1,SWIGTYPE_p_yarp__dev__IControlCalibration);
  }
  
  result = (bool)(arg1)->park();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration_park(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlCalibration, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IControlCalibration_park__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlCalibration, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_IControlCalibration_park__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IControlCalibration_park'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IControlCalibration::park(bool)\n"
    "    yarp::dev::IControlCalibration::park()\n");
  lua_error(L);return 0;
}


static void swig_delete_IControlCalibration(void *obj) {
yarp::dev::IControlCalibration *arg1 = (yarp::dev::IControlCalibration *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IControlCalibration_methods[] = {
    {"done", _wrap_IControlCalibration_done}, 
    {"setCalibrator", _wrap_IControlCalibration_setCalibrator}, 
    {"calibrate", _wrap_IControlCalibration_calibrate}, 
    {"park", _wrap_IControlCalibration_park}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlCalibration_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlCalibration_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IControlCalibration_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IControlCalibration_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IControlCalibration_bases[] = {0};
static const char *swig_yarp_dev_IControlCalibration_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IControlCalibration = { "IControlCalibration", &SWIGTYPE_p_yarp__dev__IControlCalibration,0, swig_delete_IControlCalibration, swig_yarp_dev_IControlCalibration_methods, swig_yarp_dev_IControlCalibration_attributes, { "IControlCalibration", swig_yarp_dev_IControlCalibration_cls_methods, swig_yarp_dev_IControlCalibration_cls_attributes, swig_yarp_dev_IControlCalibration_cls_constants }, swig_yarp_dev_IControlCalibration_bases, swig_yarp_dev_IControlCalibration_base_names };

static int _wrap_IControlCalibration2_calibrate2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2::calibrate2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2::calibrate2",1,"yarp::dev::IControlCalibration2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration2::calibrate2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IControlCalibration2::calibrate2",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::IControlCalibration2::calibrate2",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("yarp::dev::IControlCalibration2::calibrate2",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("yarp::dev::IControlCalibration2::calibrate2",6,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2,0))){
    SWIG_fail_ptr("IControlCalibration2_calibrate2",1,SWIGTYPE_p_yarp__dev__IControlCalibration2);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6);
  result = (bool)(arg1)->calibrate2(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration2_setCalibrationParameters(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  int arg2 ;
  yarp::dev::CalibrationParameters *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2::setCalibrationParameters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2::setCalibrationParameters",1,"yarp::dev::IControlCalibration2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration2::setCalibrationParameters",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IControlCalibration2::setCalibrationParameters",3,"yarp::dev::CalibrationParameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2,0))){
    SWIG_fail_ptr("IControlCalibration2_setCalibrationParameters",1,SWIGTYPE_p_yarp__dev__IControlCalibration2);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__dev__CalibrationParameters,0))){
    SWIG_fail_ptr("IControlCalibration2_setCalibrationParameters",3,SWIGTYPE_p_yarp__dev__CalibrationParameters);
  }
  
  result = (bool)(arg1)->setCalibrationParameters(arg2,(yarp::dev::CalibrationParameters const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration2_done(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2::done",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2::done",1,"yarp::dev::IControlCalibration2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration2::done",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2,0))){
    SWIG_fail_ptr("IControlCalibration2_done",1,SWIGTYPE_p_yarp__dev__IControlCalibration2);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->done(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration2_setCalibrator(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  ICalibrator *arg2 = (ICalibrator *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2::setCalibrator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2::setCalibrator",1,"yarp::dev::IControlCalibration2 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration2::setCalibrator",2,"ICalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2,0))){
    SWIG_fail_ptr("IControlCalibration2_setCalibrator",1,SWIGTYPE_p_yarp__dev__IControlCalibration2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ICalibrator,0))){
    SWIG_fail_ptr("IControlCalibration2_setCalibrator",2,SWIGTYPE_p_ICalibrator);
  }
  
  result = (bool)(arg1)->setCalibrator(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration2_calibrate(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2::calibrate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2::calibrate",1,"yarp::dev::IControlCalibration2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2,0))){
    SWIG_fail_ptr("IControlCalibration2_calibrate",1,SWIGTYPE_p_yarp__dev__IControlCalibration2);
  }
  
  result = (bool)(arg1)->calibrate();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration2_park__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2::park",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2::park",1,"yarp::dev::IControlCalibration2 *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::IControlCalibration2::park",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2,0))){
    SWIG_fail_ptr("IControlCalibration2_park",1,SWIGTYPE_p_yarp__dev__IControlCalibration2);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->park(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration2_park__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2::park",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2::park",1,"yarp::dev::IControlCalibration2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2,0))){
    SWIG_fail_ptr("IControlCalibration2_park",1,SWIGTYPE_p_yarp__dev__IControlCalibration2);
  }
  
  result = (bool)(arg1)->park();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration2_park(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlCalibration2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IControlCalibration2_park__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlCalibration2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_IControlCalibration2_park__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IControlCalibration2_park'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IControlCalibration2::park(bool)\n"
    "    yarp::dev::IControlCalibration2::park()\n");
  lua_error(L);return 0;
}


static int _wrap_IControlCalibration2_abortCalibration(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2::abortCalibration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2::abortCalibration",1,"yarp::dev::IControlCalibration2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2,0))){
    SWIG_fail_ptr("IControlCalibration2_abortCalibration",1,SWIGTYPE_p_yarp__dev__IControlCalibration2);
  }
  
  result = (bool)(arg1)->abortCalibration();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlCalibration2_abortPark(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlCalibration2::abortPark",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlCalibration2::abortPark",1,"yarp::dev::IControlCalibration2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlCalibration2,0))){
    SWIG_fail_ptr("IControlCalibration2_abortPark",1,SWIGTYPE_p_yarp__dev__IControlCalibration2);
  }
  
  result = (bool)(arg1)->abortPark();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IControlCalibration2(void *obj) {
yarp::dev::IControlCalibration2 *arg1 = (yarp::dev::IControlCalibration2 *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IControlCalibration2_methods[] = {
    {"calibrate2", _wrap_IControlCalibration2_calibrate2}, 
    {"setCalibrationParameters", _wrap_IControlCalibration2_setCalibrationParameters}, 
    {"done", _wrap_IControlCalibration2_done}, 
    {"setCalibrator", _wrap_IControlCalibration2_setCalibrator}, 
    {"calibrate", _wrap_IControlCalibration2_calibrate}, 
    {"park", _wrap_IControlCalibration2_park}, 
    {"abortCalibration", _wrap_IControlCalibration2_abortCalibration}, 
    {"abortPark", _wrap_IControlCalibration2_abortPark}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlCalibration2_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlCalibration2_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IControlCalibration2_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IControlCalibration2_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IControlCalibration2_bases[] = {0};
static const char *swig_yarp_dev_IControlCalibration2_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IControlCalibration2 = { "IControlCalibration2", &SWIGTYPE_p_yarp__dev__IControlCalibration2,0, swig_delete_IControlCalibration2, swig_yarp_dev_IControlCalibration2_methods, swig_yarp_dev_IControlCalibration2_attributes, { "IControlCalibration2", swig_yarp_dev_IControlCalibration2_cls_methods, swig_yarp_dev_IControlCalibration2_cls_attributes, swig_yarp_dev_IControlCalibration2_cls_constants }, swig_yarp_dev_IControlCalibration2_bases, swig_yarp_dev_IControlCalibration2_base_names };

static int _wrap_IControlDebug_setPrintFunction(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  int (*arg2)(char const *,...) = (int (*)(char const *,...)) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlDebug::setPrintFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlDebug::setPrintFunction",1,"yarp::dev::IControlDebug *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IControlDebug::setPrintFunction",2,"int (*)(char const *,...)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlDebug,0))){
    SWIG_fail_ptr("IControlDebug_setPrintFunction",1,SWIGTYPE_p_yarp__dev__IControlDebug);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_q_const__char_v_______int,0))){
    SWIG_fail_ptr("IControlDebug_setPrintFunction",2,SWIGTYPE_p_f_p_q_const__char_v_______int);
  }
  
  result = (bool)(arg1)->setPrintFunction(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlDebug_loadBootMemory(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlDebug::loadBootMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlDebug::loadBootMemory",1,"yarp::dev::IControlDebug *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlDebug,0))){
    SWIG_fail_ptr("IControlDebug_loadBootMemory",1,SWIGTYPE_p_yarp__dev__IControlDebug);
  }
  
  result = (bool)(arg1)->loadBootMemory();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlDebug_saveBootMemory(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlDebug::saveBootMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlDebug::saveBootMemory",1,"yarp::dev::IControlDebug *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlDebug,0))){
    SWIG_fail_ptr("IControlDebug_saveBootMemory",1,SWIGTYPE_p_yarp__dev__IControlDebug);
  }
  
  result = (bool)(arg1)->saveBootMemory();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IControlDebug(void *obj) {
yarp::dev::IControlDebug *arg1 = (yarp::dev::IControlDebug *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IControlDebug_methods[] = {
    {"setPrintFunction", _wrap_IControlDebug_setPrintFunction}, 
    {"loadBootMemory", _wrap_IControlDebug_loadBootMemory}, 
    {"saveBootMemory", _wrap_IControlDebug_saveBootMemory}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlDebug_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlDebug_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IControlDebug_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IControlDebug_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IControlDebug_bases[] = {0};
static const char *swig_yarp_dev_IControlDebug_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IControlDebug = { "IControlDebug", &SWIGTYPE_p_yarp__dev__IControlDebug,0, swig_delete_IControlDebug, swig_yarp_dev_IControlDebug_methods, swig_yarp_dev_IControlDebug_attributes, { "IControlDebug", swig_yarp_dev_IControlDebug_cls_methods, swig_yarp_dev_IControlDebug_cls_attributes, swig_yarp_dev_IControlDebug_cls_constants }, swig_yarp_dev_IControlDebug_bases, swig_yarp_dev_IControlDebug_base_names };

static int _wrap_IControlLimits_setLimits(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlLimits::setLimits",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlLimits::setLimits",1,"yarp::dev::IControlLimits *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlLimits::setLimits",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IControlLimits::setLimits",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::IControlLimits::setLimits",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlLimits,0))){
    SWIG_fail_ptr("IControlLimits_setLimits",1,SWIGTYPE_p_yarp__dev__IControlLimits);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (bool)(arg1)->setLimits(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlLimits_getLimits__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlLimits::getLimits",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlLimits::getLimits",1,"yarp::dev::IControlLimits *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlLimits::getLimits",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IControlLimits::getLimits",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::IControlLimits::getLimits",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlLimits,0))){
    SWIG_fail_ptr("IControlLimits_getLimits",1,SWIGTYPE_p_yarp__dev__IControlLimits);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IControlLimits_getLimits",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IControlLimits_getLimits",4,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getLimits(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlLimits_getLimits__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlLimits::getLimits",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlLimits::getLimits",1,"yarp::dev::IControlLimits *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlLimits::getLimits",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IControlLimits::getLimits",3,"std::vector< double > &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::IControlLimits::getLimits",4,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlLimits,0))){
    SWIG_fail_ptr("IControlLimits_getLimits",1,SWIGTYPE_p_yarp__dev__IControlLimits);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IControlLimits_getLimits",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IControlLimits_getLimits",4,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IControlLimits_getLimits__SWIG_1(arg1,arg2,*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlLimits_getLimits(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlLimits, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_IControlLimits_getLimits__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlLimits, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_IControlLimits_getLimits__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IControlLimits_getLimits'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IControlLimits::getLimits(int,double *,double *)\n"
    "    yarp::dev::IControlLimits::getLimits(int,std::vector< double > &,std::vector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_IControlLimits(void *obj) {
yarp::dev::IControlLimits *arg1 = (yarp::dev::IControlLimits *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IControlLimits_methods[] = {
    {"setLimits", _wrap_IControlLimits_setLimits}, 
    {"getLimits", _wrap_IControlLimits_getLimits}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlLimits_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlLimits_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IControlLimits_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IControlLimits_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IControlLimits_bases[] = {0};
static const char *swig_yarp_dev_IControlLimits_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IControlLimits = { "IControlLimits", &SWIGTYPE_p_yarp__dev__IControlLimits,0, swig_delete_IControlLimits, swig_yarp_dev_IControlLimits_methods, swig_yarp_dev_IControlLimits_attributes, { "IControlLimits", swig_yarp_dev_IControlLimits_cls_methods, swig_yarp_dev_IControlLimits_cls_attributes, swig_yarp_dev_IControlLimits_cls_constants }, swig_yarp_dev_IControlLimits_bases, swig_yarp_dev_IControlLimits_base_names };

static int _wrap_IControlLimitsRaw_setLimitsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlLimitsRaw *arg1 = (yarp::dev::IControlLimitsRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlLimitsRaw::setLimitsRaw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlLimitsRaw::setLimitsRaw",1,"yarp::dev::IControlLimitsRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlLimitsRaw::setLimitsRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IControlLimitsRaw::setLimitsRaw",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::IControlLimitsRaw::setLimitsRaw",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlLimitsRaw,0))){
    SWIG_fail_ptr("IControlLimitsRaw_setLimitsRaw",1,SWIGTYPE_p_yarp__dev__IControlLimitsRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (bool)(arg1)->setLimitsRaw(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlLimitsRaw_getLimitsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlLimitsRaw *arg1 = (yarp::dev::IControlLimitsRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlLimitsRaw::getLimitsRaw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlLimitsRaw::getLimitsRaw",1,"yarp::dev::IControlLimitsRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlLimitsRaw::getLimitsRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IControlLimitsRaw::getLimitsRaw",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::IControlLimitsRaw::getLimitsRaw",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlLimitsRaw,0))){
    SWIG_fail_ptr("IControlLimitsRaw_getLimitsRaw",1,SWIGTYPE_p_yarp__dev__IControlLimitsRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IControlLimitsRaw_getLimitsRaw",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IControlLimitsRaw_getLimitsRaw",4,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getLimitsRaw(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IControlLimitsRaw(void *obj) {
yarp::dev::IControlLimitsRaw *arg1 = (yarp::dev::IControlLimitsRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IControlLimitsRaw_methods[] = {
    {"setLimitsRaw", _wrap_IControlLimitsRaw_setLimitsRaw}, 
    {"getLimitsRaw", _wrap_IControlLimitsRaw_getLimitsRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlLimitsRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlLimitsRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IControlLimitsRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IControlLimitsRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IControlLimitsRaw_bases[] = {0};
static const char *swig_yarp_dev_IControlLimitsRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IControlLimitsRaw = { "IControlLimitsRaw", &SWIGTYPE_p_yarp__dev__IControlLimitsRaw,0, swig_delete_IControlLimitsRaw, swig_yarp_dev_IControlLimitsRaw_methods, swig_yarp_dev_IControlLimitsRaw_attributes, { "IControlLimitsRaw", swig_yarp_dev_IControlLimitsRaw_cls_methods, swig_yarp_dev_IControlLimitsRaw_cls_attributes, swig_yarp_dev_IControlLimitsRaw_cls_constants }, swig_yarp_dev_IControlLimitsRaw_bases, swig_yarp_dev_IControlLimitsRaw_base_names };

static int _wrap_IAxisInfo_getAxisName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAxisInfo *arg1 = (yarp::dev::IAxisInfo *) 0 ;
  int arg2 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAxisInfo::getAxisName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAxisInfo::getAxisName",1,"yarp::dev::IAxisInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAxisInfo::getAxisName",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IAxisInfo::getAxisName",3,"yarp::os::ConstString &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAxisInfo,0))){
    SWIG_fail_ptr("IAxisInfo_getAxisName",1,SWIGTYPE_p_yarp__dev__IAxisInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("IAxisInfo_getAxisName",3,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->getAxisName(arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAxisInfo_getJointType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAxisInfo *arg1 = (yarp::dev::IAxisInfo *) 0 ;
  int arg2 ;
  yarp::dev::JointTypeEnum *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAxisInfo::getJointType",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAxisInfo::getJointType",1,"yarp::dev::IAxisInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAxisInfo::getJointType",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IAxisInfo::getJointType",3,"yarp::dev::JointTypeEnum &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAxisInfo,0))){
    SWIG_fail_ptr("IAxisInfo_getJointType",1,SWIGTYPE_p_yarp__dev__IAxisInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__dev__JointTypeEnum,0))){
    SWIG_fail_ptr("IAxisInfo_getJointType",3,SWIGTYPE_p_yarp__dev__JointTypeEnum);
  }
  
  result = (bool)(arg1)->getJointType(arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IAxisInfo(void *obj) {
yarp::dev::IAxisInfo *arg1 = (yarp::dev::IAxisInfo *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IAxisInfo_methods[] = {
    {"getAxisName", _wrap_IAxisInfo_getAxisName}, 
    {"getJointType", _wrap_IAxisInfo_getJointType}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IAxisInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IAxisInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IAxisInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IAxisInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IAxisInfo_bases[] = {0};
static const char *swig_yarp_dev_IAxisInfo_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IAxisInfo = { "IAxisInfo", &SWIGTYPE_p_yarp__dev__IAxisInfo,0, swig_delete_IAxisInfo, swig_yarp_dev_IAxisInfo_methods, swig_yarp_dev_IAxisInfo_attributes, { "IAxisInfo", swig_yarp_dev_IAxisInfo_cls_methods, swig_yarp_dev_IAxisInfo_cls_attributes, swig_yarp_dev_IAxisInfo_cls_constants }, swig_yarp_dev_IAxisInfo_bases, swig_yarp_dev_IAxisInfo_base_names };

static int _wrap_IAxisInfoRaw_getAxisNameRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAxisInfoRaw *arg1 = (yarp::dev::IAxisInfoRaw *) 0 ;
  int arg2 ;
  yarp::os::ConstString *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAxisInfoRaw::getAxisNameRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAxisInfoRaw::getAxisNameRaw",1,"yarp::dev::IAxisInfoRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAxisInfoRaw::getAxisNameRaw",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IAxisInfoRaw::getAxisNameRaw",3,"yarp::os::ConstString &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAxisInfoRaw,0))){
    SWIG_fail_ptr("IAxisInfoRaw_getAxisNameRaw",1,SWIGTYPE_p_yarp__dev__IAxisInfoRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("IAxisInfoRaw_getAxisNameRaw",3,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->getAxisNameRaw(arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IAxisInfoRaw_getJointTypeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IAxisInfoRaw *arg1 = (yarp::dev::IAxisInfoRaw *) 0 ;
  int arg2 ;
  yarp::dev::JointTypeEnum *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IAxisInfoRaw::getJointTypeRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IAxisInfoRaw::getJointTypeRaw",1,"yarp::dev::IAxisInfoRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IAxisInfoRaw::getJointTypeRaw",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IAxisInfoRaw::getJointTypeRaw",3,"yarp::dev::JointTypeEnum &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IAxisInfoRaw,0))){
    SWIG_fail_ptr("IAxisInfoRaw_getJointTypeRaw",1,SWIGTYPE_p_yarp__dev__IAxisInfoRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__dev__JointTypeEnum,0))){
    SWIG_fail_ptr("IAxisInfoRaw_getJointTypeRaw",3,SWIGTYPE_p_yarp__dev__JointTypeEnum);
  }
  
  result = (bool)(arg1)->getJointTypeRaw(arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IAxisInfoRaw(void *obj) {
yarp::dev::IAxisInfoRaw *arg1 = (yarp::dev::IAxisInfoRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IAxisInfoRaw_methods[] = {
    {"getAxisNameRaw", _wrap_IAxisInfoRaw_getAxisNameRaw}, 
    {"getJointTypeRaw", _wrap_IAxisInfoRaw_getJointTypeRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IAxisInfoRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IAxisInfoRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IAxisInfoRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IAxisInfoRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IAxisInfoRaw_bases[] = {0};
static const char *swig_yarp_dev_IAxisInfoRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IAxisInfoRaw = { "IAxisInfoRaw", &SWIGTYPE_p_yarp__dev__IAxisInfoRaw,0, swig_delete_IAxisInfoRaw, swig_yarp_dev_IAxisInfoRaw_methods, swig_yarp_dev_IAxisInfoRaw_attributes, { "IAxisInfoRaw", swig_yarp_dev_IAxisInfoRaw_cls_methods, swig_yarp_dev_IAxisInfoRaw_cls_attributes, swig_yarp_dev_IAxisInfoRaw_cls_constants }, swig_yarp_dev_IAxisInfoRaw_bases, swig_yarp_dev_IAxisInfoRaw_base_names };

static int _wrap_Pid_kp_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::kp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::kp",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::kp",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_kp_set",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->kp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_kp_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::Pid::kp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::kp",1,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_kp_get",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (double) ((arg1)->kp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_kd_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::kd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::kd",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::kd",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_kd_set",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->kd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_kd_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::Pid::kd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::kd",1,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_kd_get",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (double) ((arg1)->kd);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_ki_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::ki",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::ki",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::ki",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_ki_set",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->ki = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_ki_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::Pid::ki",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::ki",1,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_ki_get",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (double) ((arg1)->ki);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_max_int_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::max_int",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::max_int",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::max_int",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_max_int_set",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->max_int = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_max_int_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::Pid::max_int",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::max_int",1,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_max_int_get",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (double) ((arg1)->max_int);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_scale_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::scale",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::scale",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_scale_set",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->scale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_scale_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::Pid::scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::scale",1,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_scale_get",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (double) ((arg1)->scale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_max_output_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::max_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::max_output",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::max_output",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_max_output_set",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->max_output = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_max_output_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::Pid::max_output",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::max_output",1,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_max_output_get",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (double) ((arg1)->max_output);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::offset",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::offset",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_offset_set",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::Pid::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::offset",1,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_offset_get",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (double) ((arg1)->offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_stiction_up_val_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::stiction_up_val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::stiction_up_val",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::stiction_up_val",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_stiction_up_val_set",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->stiction_up_val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_stiction_up_val_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::Pid::stiction_up_val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::stiction_up_val",1,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_stiction_up_val_get",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (double) ((arg1)->stiction_up_val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_stiction_down_val_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::stiction_down_val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::stiction_down_val",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::stiction_down_val",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_stiction_down_val_set",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->stiction_down_val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_stiction_down_val_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::Pid::stiction_down_val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::stiction_down_val",1,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_stiction_down_val_get",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (double) ((arg1)->stiction_down_val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_kff_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::kff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::kff",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::kff",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_kff_set",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->kff = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_kff_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::Pid::kff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::kff",1,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_kff_get",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (double) ((arg1)->kff);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::Pid::Pid",0,0)
  result = (yarp::dev::Pid *)new yarp::dev::Pid();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__Pid,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  yarp::dev::Pid *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::Pid::Pid",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::dev::Pid::Pid",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::Pid",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::Pid::Pid",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::Pid::Pid",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("yarp::dev::Pid::Pid",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("yarp::dev::Pid::Pid",6,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6);
  result = (yarp::dev::Pid *)new yarp::dev::Pid(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__Pid,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pid__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  yarp::dev::Pid *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::Pid::Pid",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("yarp::dev::Pid::Pid",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::Pid",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::Pid::Pid",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::Pid::Pid",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("yarp::dev::Pid::Pid",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("yarp::dev::Pid::Pid",6,"double");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("yarp::dev::Pid::Pid",7,"double");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("yarp::dev::Pid::Pid",8,"double");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("yarp::dev::Pid::Pid",9,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6);
  arg7 = (double)lua_tonumber(L, 7);
  arg8 = (double)lua_tonumber(L, 8);
  arg9 = (double)lua_tonumber(L, 9);
  result = (yarp::dev::Pid *)new yarp::dev::Pid(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__Pid,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pid(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Pid__SWIG_0(L);
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_Pid__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_new_Pid__SWIG_2(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Pid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::Pid::Pid()\n"
    "    yarp::dev::Pid::Pid(double,double,double,double,double,double)\n"
    "    yarp::dev::Pid::Pid(double,double,double,double,double,double,double,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Pid_setMaxInt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::setMaxInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::setMaxInt",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::setMaxInt",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_setMaxInt",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setMaxInt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_setMaxOut(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::Pid::setMaxOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::setMaxOut",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::setMaxOut",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_setMaxOut",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setMaxOut(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pid_setStictionValues(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::Pid *arg1 = (yarp::dev::Pid *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("yarp::dev::Pid::setStictionValues",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::Pid::setStictionValues",1,"yarp::dev::Pid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::Pid::setStictionValues",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::Pid::setStictionValues",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("Pid_setStictionValues",1,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setStictionValues(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pid(void *obj) {
yarp::dev::Pid *arg1 = (yarp::dev::Pid *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_Pid_methods[] = {
    {"setMaxInt", _wrap_Pid_setMaxInt}, 
    {"setMaxOut", _wrap_Pid_setMaxOut}, 
    {"setStictionValues", _wrap_Pid_setStictionValues}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_Pid_attributes[] = {
    { "kp", _wrap_Pid_kp_get, _wrap_Pid_kp_set},
    { "kd", _wrap_Pid_kd_get, _wrap_Pid_kd_set},
    { "ki", _wrap_Pid_ki_get, _wrap_Pid_ki_set},
    { "max_int", _wrap_Pid_max_int_get, _wrap_Pid_max_int_set},
    { "scale", _wrap_Pid_scale_get, _wrap_Pid_scale_set},
    { "max_output", _wrap_Pid_max_output_get, _wrap_Pid_max_output_set},
    { "offset", _wrap_Pid_offset_get, _wrap_Pid_offset_set},
    { "stiction_up_val", _wrap_Pid_stiction_up_val_get, _wrap_Pid_stiction_up_val_set},
    { "stiction_down_val", _wrap_Pid_stiction_down_val_get, _wrap_Pid_stiction_down_val_set},
    { "kff", _wrap_Pid_kff_get, _wrap_Pid_kff_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_Pid_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_Pid_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_Pid_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_Pid_bases[] = {0};
static const char *swig_yarp_dev_Pid_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_Pid = { "Pid", &SWIGTYPE_p_yarp__dev__Pid,_wrap_new_Pid, swig_delete_Pid, swig_yarp_dev_Pid_methods, swig_yarp_dev_Pid_attributes, { "Pid", swig_yarp_dev_Pid_cls_methods, swig_yarp_dev_Pid_cls_attributes, swig_yarp_dev_Pid_cls_constants }, swig_yarp_dev_Pid_bases, swig_yarp_dev_Pid_base_names };

static int _wrap_CartesianEventParameters_type_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEventParameters::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEventParameters::type",1,"yarp::dev::CartesianEventParameters *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::dev::CartesianEventParameters::type",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEventParameters,0))){
    SWIG_fail_ptr("CartesianEventParameters_type_set",1,SWIGTYPE_p_yarp__dev__CartesianEventParameters);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->type = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEventParameters_type_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEventParameters::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEventParameters::type",1,"yarp::dev::CartesianEventParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEventParameters,0))){
    SWIG_fail_ptr("CartesianEventParameters_type_get",1,SWIGTYPE_p_yarp__dev__CartesianEventParameters);
  }
  
  result = (yarp::os::ConstString *) & ((arg1)->type);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEventParameters_motionOngoingCheckPoint_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEventParameters::motionOngoingCheckPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEventParameters::motionOngoingCheckPoint",1,"yarp::dev::CartesianEventParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::CartesianEventParameters::motionOngoingCheckPoint",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEventParameters,0))){
    SWIG_fail_ptr("CartesianEventParameters_motionOngoingCheckPoint_set",1,SWIGTYPE_p_yarp__dev__CartesianEventParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEventParameters_motionOngoingCheckPoint_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::CartesianEventParameters::motionOngoingCheckPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEventParameters::motionOngoingCheckPoint",1,"yarp::dev::CartesianEventParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEventParameters,0))){
    SWIG_fail_ptr("CartesianEventParameters_motionOngoingCheckPoint_get",1,SWIGTYPE_p_yarp__dev__CartesianEventParameters);
  }
  
  result = (double) ((arg1)->motionOngoingCheckPoint);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CartesianEventParameters(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventParameters *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEventParameters::CartesianEventParameters",0,0)
  result = (yarp::dev::CartesianEventParameters *)new yarp::dev::CartesianEventParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__CartesianEventParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CartesianEventParameters(void *obj) {
yarp::dev::CartesianEventParameters *arg1 = (yarp::dev::CartesianEventParameters *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_CartesianEventParameters_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_CartesianEventParameters_attributes[] = {
    { "type", _wrap_CartesianEventParameters_type_get, _wrap_CartesianEventParameters_type_set},
    { "motionOngoingCheckPoint", _wrap_CartesianEventParameters_motionOngoingCheckPoint_get, _wrap_CartesianEventParameters_motionOngoingCheckPoint_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_CartesianEventParameters_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_CartesianEventParameters_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_CartesianEventParameters_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_CartesianEventParameters_bases[] = {0};
static const char *swig_yarp_dev_CartesianEventParameters_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_CartesianEventParameters = { "CartesianEventParameters", &SWIGTYPE_p_yarp__dev__CartesianEventParameters,_wrap_new_CartesianEventParameters, swig_delete_CartesianEventParameters, swig_yarp_dev_CartesianEventParameters_methods, swig_yarp_dev_CartesianEventParameters_attributes, { "CartesianEventParameters", swig_yarp_dev_CartesianEventParameters_cls_methods, swig_yarp_dev_CartesianEventParameters_cls_attributes, swig_yarp_dev_CartesianEventParameters_cls_constants }, swig_yarp_dev_CartesianEventParameters_bases, swig_yarp_dev_CartesianEventParameters_base_names };

static int _wrap_CartesianEventVariables_type_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEventVariables::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEventVariables::type",1,"yarp::dev::CartesianEventVariables *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::dev::CartesianEventVariables::type",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEventVariables,0))){
    SWIG_fail_ptr("CartesianEventVariables_type_set",1,SWIGTYPE_p_yarp__dev__CartesianEventVariables);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->type = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEventVariables_type_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEventVariables::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEventVariables::type",1,"yarp::dev::CartesianEventVariables *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEventVariables,0))){
    SWIG_fail_ptr("CartesianEventVariables_type_get",1,SWIGTYPE_p_yarp__dev__CartesianEventVariables);
  }
  
  result = (yarp::os::ConstString *) & ((arg1)->type);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEventVariables_time_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEventVariables::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEventVariables::time",1,"yarp::dev::CartesianEventVariables *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::CartesianEventVariables::time",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEventVariables,0))){
    SWIG_fail_ptr("CartesianEventVariables_time_set",1,SWIGTYPE_p_yarp__dev__CartesianEventVariables);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEventVariables_time_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::CartesianEventVariables::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEventVariables::time",1,"yarp::dev::CartesianEventVariables *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEventVariables,0))){
    SWIG_fail_ptr("CartesianEventVariables_time_get",1,SWIGTYPE_p_yarp__dev__CartesianEventVariables);
  }
  
  result = (double) ((arg1)->time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEventVariables_motionOngoingCheckPoint_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEventVariables::motionOngoingCheckPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEventVariables::motionOngoingCheckPoint",1,"yarp::dev::CartesianEventVariables *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::CartesianEventVariables::motionOngoingCheckPoint",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEventVariables,0))){
    SWIG_fail_ptr("CartesianEventVariables_motionOngoingCheckPoint_set",1,SWIGTYPE_p_yarp__dev__CartesianEventVariables);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEventVariables_motionOngoingCheckPoint_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::CartesianEventVariables::motionOngoingCheckPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEventVariables::motionOngoingCheckPoint",1,"yarp::dev::CartesianEventVariables *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEventVariables,0))){
    SWIG_fail_ptr("CartesianEventVariables_motionOngoingCheckPoint_get",1,SWIGTYPE_p_yarp__dev__CartesianEventVariables);
  }
  
  result = (double) ((arg1)->motionOngoingCheckPoint);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CartesianEventVariables(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEventVariables *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEventVariables::CartesianEventVariables",0,0)
  result = (yarp::dev::CartesianEventVariables *)new yarp::dev::CartesianEventVariables();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__CartesianEventVariables,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CartesianEventVariables(void *obj) {
yarp::dev::CartesianEventVariables *arg1 = (yarp::dev::CartesianEventVariables *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_CartesianEventVariables_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_CartesianEventVariables_attributes[] = {
    { "type", _wrap_CartesianEventVariables_type_get, _wrap_CartesianEventVariables_type_set},
    { "time", _wrap_CartesianEventVariables_time_get, _wrap_CartesianEventVariables_time_set},
    { "motionOngoingCheckPoint", _wrap_CartesianEventVariables_motionOngoingCheckPoint_get, _wrap_CartesianEventVariables_motionOngoingCheckPoint_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_CartesianEventVariables_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_CartesianEventVariables_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_CartesianEventVariables_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_CartesianEventVariables_bases[] = {0};
static const char *swig_yarp_dev_CartesianEventVariables_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_CartesianEventVariables = { "CartesianEventVariables", &SWIGTYPE_p_yarp__dev__CartesianEventVariables,_wrap_new_CartesianEventVariables, swig_delete_CartesianEventVariables, swig_yarp_dev_CartesianEventVariables_methods, swig_yarp_dev_CartesianEventVariables_attributes, { "CartesianEventVariables", swig_yarp_dev_CartesianEventVariables_cls_methods, swig_yarp_dev_CartesianEventVariables_cls_attributes, swig_yarp_dev_CartesianEventVariables_cls_constants }, swig_yarp_dev_CartesianEventVariables_bases, swig_yarp_dev_CartesianEventVariables_base_names };

static int _wrap_CartesianEvent_cartesianEventParameters_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventParameters *arg2 = (yarp::dev::CartesianEventParameters *) 0 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEvent::cartesianEventParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEvent::cartesianEventParameters",1,"yarp::dev::CartesianEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::CartesianEvent::cartesianEventParameters",2,"yarp::dev::CartesianEventParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEvent,0))){
    SWIG_fail_ptr("CartesianEvent_cartesianEventParameters_set",1,SWIGTYPE_p_yarp__dev__CartesianEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__CartesianEventParameters,0))){
    SWIG_fail_ptr("CartesianEvent_cartesianEventParameters_set",2,SWIGTYPE_p_yarp__dev__CartesianEventParameters);
  }
  
  if (arg1) (arg1)->cartesianEventParameters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEvent_cartesianEventParameters_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventParameters *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEvent::cartesianEventParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEvent::cartesianEventParameters",1,"yarp::dev::CartesianEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEvent,0))){
    SWIG_fail_ptr("CartesianEvent_cartesianEventParameters_get",1,SWIGTYPE_p_yarp__dev__CartesianEvent);
  }
  
  result = (yarp::dev::CartesianEventParameters *)& ((arg1)->cartesianEventParameters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__CartesianEventParameters,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEvent_cartesianEventVariables_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventVariables *arg2 = (yarp::dev::CartesianEventVariables *) 0 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEvent::cartesianEventVariables",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEvent::cartesianEventVariables",1,"yarp::dev::CartesianEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::CartesianEvent::cartesianEventVariables",2,"yarp::dev::CartesianEventVariables *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEvent,0))){
    SWIG_fail_ptr("CartesianEvent_cartesianEventVariables_set",1,SWIGTYPE_p_yarp__dev__CartesianEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__CartesianEventVariables,0))){
    SWIG_fail_ptr("CartesianEvent_cartesianEventVariables_set",2,SWIGTYPE_p_yarp__dev__CartesianEventVariables);
  }
  
  if (arg1) (arg1)->cartesianEventVariables = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEvent_cartesianEventVariables_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  yarp::dev::CartesianEventVariables *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEvent::cartesianEventVariables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEvent::cartesianEventVariables",1,"yarp::dev::CartesianEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEvent,0))){
    SWIG_fail_ptr("CartesianEvent_cartesianEventVariables_get",1,SWIGTYPE_p_yarp__dev__CartesianEvent);
  }
  
  result = (yarp::dev::CartesianEventVariables *)& ((arg1)->cartesianEventVariables);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__CartesianEventVariables,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CartesianEvent_cartesianEventCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) 0 ;
  
  SWIG_check_num_args("yarp::dev::CartesianEvent::cartesianEventCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::CartesianEvent::cartesianEventCallback",1,"yarp::dev::CartesianEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__CartesianEvent,0))){
    SWIG_fail_ptr("CartesianEvent_cartesianEventCallback",1,SWIGTYPE_p_yarp__dev__CartesianEvent);
  }
  
  (arg1)->cartesianEventCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CartesianEvent(void *obj) {
yarp::dev::CartesianEvent *arg1 = (yarp::dev::CartesianEvent *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_CartesianEvent_methods[] = {
    {"cartesianEventCallback", _wrap_CartesianEvent_cartesianEventCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_CartesianEvent_attributes[] = {
    { "cartesianEventParameters", _wrap_CartesianEvent_cartesianEventParameters_get, _wrap_CartesianEvent_cartesianEventParameters_set},
    { "cartesianEventVariables", _wrap_CartesianEvent_cartesianEventVariables_get, _wrap_CartesianEvent_cartesianEventVariables_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_CartesianEvent_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_CartesianEvent_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_CartesianEvent_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_CartesianEvent_bases[] = {0};
static const char *swig_yarp_dev_CartesianEvent_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_CartesianEvent = { "CartesianEvent", &SWIGTYPE_p_yarp__dev__CartesianEvent,0, swig_delete_CartesianEvent, swig_yarp_dev_CartesianEvent_methods, swig_yarp_dev_CartesianEvent_attributes, { "CartesianEvent", swig_yarp_dev_CartesianEvent_cls_methods, swig_yarp_dev_CartesianEvent_cls_attributes, swig_yarp_dev_CartesianEvent_cls_constants }, swig_yarp_dev_CartesianEvent_bases, swig_yarp_dev_CartesianEvent_base_names };

static int _wrap_ICartesianControl_setTrackingMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::setTrackingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::setTrackingMode",1,"yarp::dev::ICartesianControl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::setTrackingMode",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_setTrackingMode",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setTrackingMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getTrackingMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getTrackingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getTrackingMode",1,"yarp::dev::ICartesianControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getTrackingMode",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getTrackingMode",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ICartesianControl_getTrackingMode",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->getTrackingMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_setReferenceMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::setReferenceMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::setReferenceMode",1,"yarp::dev::ICartesianControl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::setReferenceMode",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_setReferenceMode",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setReferenceMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getReferenceMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getReferenceMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getReferenceMode",1,"yarp::dev::ICartesianControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getReferenceMode",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getReferenceMode",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ICartesianControl_getReferenceMode",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->getReferenceMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_setPosePriority(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::setPosePriority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::setPosePriority",1,"yarp::dev::ICartesianControl *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::setPosePriority",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_setPosePriority",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->setPosePriority((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getPosePriority(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getPosePriority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPosePriority",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPosePriority",2,"yarp::os::ConstString &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getPosePriority",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ICartesianControl_getPosePriority",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->getPosePriority(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getPose__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getPose",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",3,"yarp::sig::Vector &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",4,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",4,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (bool)(arg1)->getPose(*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getPose__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getPose",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",3,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getPose(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getPose__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::os::Stamp *arg5 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getPose",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",1,"yarp::dev::ICartesianControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",2,"int const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",3,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",4,"yarp::sig::Vector &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",5,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",5,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (bool)(arg1)->getPose(arg2,*arg3,*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getPose__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getPose",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",1,"yarp::dev::ICartesianControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",2,"int const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",3,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::getPose",4,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getPose",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getPose(arg2,*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getPose(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ICartesianControl_getPose__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__Stamp, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ICartesianControl_getPose__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ICartesianControl_getPose__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_yarp__os__Stamp, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ICartesianControl_getPose__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ICartesianControl_getPose'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ICartesianControl::getPose(yarp::sig::Vector &,yarp::sig::Vector &,yarp::os::Stamp *)\n"
    "    yarp::dev::ICartesianControl::getPose(yarp::sig::Vector &,yarp::sig::Vector &)\n"
    "    yarp::dev::ICartesianControl::getPose(int const,yarp::sig::Vector &,yarp::sig::Vector &,yarp::os::Stamp *)\n"
    "    yarp::dev::ICartesianControl::getPose(int const,yarp::sig::Vector &,yarp::sig::Vector &)\n");
  lua_error(L);return 0;
}


static int _wrap_ICartesianControl_goToPose__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::goToPose",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPose",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPose",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPose",3,"yarp::sig::Vector const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPose",4,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_goToPose",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg4 = (double const)lua_tonumber(L, 4);
  result = (bool)(arg1)->goToPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_goToPose__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::goToPose",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPose",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPose",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPose",3,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_goToPose",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->goToPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_goToPose(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ICartesianControl_goToPose__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ICartesianControl_goToPose__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ICartesianControl_goToPose'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ICartesianControl::goToPose(yarp::sig::Vector const &,yarp::sig::Vector const &,double const)\n"
    "    yarp::dev::ICartesianControl::goToPose(yarp::sig::Vector const &,yarp::sig::Vector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ICartesianControl_goToPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::goToPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPosition",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPosition",2,"yarp::sig::Vector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPosition",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_goToPosition",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPosition",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->goToPosition((yarp::sig::Vector const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_goToPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::goToPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPosition",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPosition",2,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_goToPosition",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPosition",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->goToPosition((yarp::sig::Vector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_goToPosition(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ICartesianControl_goToPosition__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ICartesianControl_goToPosition__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ICartesianControl_goToPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ICartesianControl::goToPosition(yarp::sig::Vector const &,double const)\n"
    "    yarp::dev::ICartesianControl::goToPosition(yarp::sig::Vector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ICartesianControl_goToPoseSync__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::goToPoseSync",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPoseSync",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPoseSync",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPoseSync",3,"yarp::sig::Vector const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPoseSync",4,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_goToPoseSync",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPoseSync",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPoseSync",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg4 = (double const)lua_tonumber(L, 4);
  result = (bool)(arg1)->goToPoseSync((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_goToPoseSync__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::goToPoseSync",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPoseSync",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPoseSync",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPoseSync",3,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_goToPoseSync",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPoseSync",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPoseSync",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->goToPoseSync((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_goToPoseSync(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ICartesianControl_goToPoseSync__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ICartesianControl_goToPoseSync__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ICartesianControl_goToPoseSync'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ICartesianControl::goToPoseSync(yarp::sig::Vector const &,yarp::sig::Vector const &,double const)\n"
    "    yarp::dev::ICartesianControl::goToPoseSync(yarp::sig::Vector const &,yarp::sig::Vector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ICartesianControl_goToPositionSync__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::goToPositionSync",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPositionSync",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPositionSync",2,"yarp::sig::Vector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPositionSync",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_goToPositionSync",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPositionSync",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->goToPositionSync((yarp::sig::Vector const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_goToPositionSync__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::goToPositionSync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPositionSync",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::goToPositionSync",2,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_goToPositionSync",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_goToPositionSync",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->goToPositionSync((yarp::sig::Vector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_goToPositionSync(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ICartesianControl_goToPositionSync__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ICartesianControl_goToPositionSync__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ICartesianControl_goToPositionSync'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ICartesianControl::goToPositionSync(yarp::sig::Vector const &,double const)\n"
    "    yarp::dev::ICartesianControl::goToPositionSync(yarp::sig::Vector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ICartesianControl_getDesired(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getDesired",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getDesired",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getDesired",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::getDesired",3,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::getDesired",4,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getDesired",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getDesired",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getDesired",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getDesired",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getDesired(*arg2,*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_askForPose__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  yarp::sig::Vector *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::askForPose",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",3,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",4,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",5,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",6,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",5,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",6,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->askForPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,*arg4,*arg5,*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_askForPose__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  yarp::sig::Vector *arg6 = 0 ;
  yarp::sig::Vector *arg7 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::askForPose",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",3,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",4,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",5,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",6,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPose",7,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",5,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",6,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPose",7,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->askForPose((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,(yarp::sig::Vector const &)*arg4,*arg5,*arg6,*arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_askForPose(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ICartesianControl_askForPose__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_ICartesianControl_askForPose__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ICartesianControl_askForPose'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ICartesianControl::askForPose(yarp::sig::Vector const &,yarp::sig::Vector const &,yarp::sig::Vector &,yarp::sig::Vector &,yarp::sig::Vector &)\n"
    "    yarp::dev::ICartesianControl::askForPose(yarp::sig::Vector const &,yarp::sig::Vector const &,yarp::sig::Vector const &,yarp::sig::Vector &,yarp::sig::Vector &,yarp::sig::Vector &)\n");
  lua_error(L);return 0;
}


static int _wrap_ICartesianControl_askForPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::askForPosition",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",3,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",4,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",5,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",5,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->askForPosition((yarp::sig::Vector const &)*arg2,*arg3,*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_askForPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  yarp::sig::Vector *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::askForPosition",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",3,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",4,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",5,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("yarp::dev::ICartesianControl::askForPosition",6,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",5,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_askForPosition",6,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->askForPosition((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,*arg4,*arg5,*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_askForPosition(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ICartesianControl_askForPosition__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ICartesianControl_askForPosition__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ICartesianControl_askForPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ICartesianControl::askForPosition(yarp::sig::Vector const &,yarp::sig::Vector &,yarp::sig::Vector &,yarp::sig::Vector &)\n"
    "    yarp::dev::ICartesianControl::askForPosition(yarp::sig::Vector const &,yarp::sig::Vector const &,yarp::sig::Vector &,yarp::sig::Vector &,yarp::sig::Vector &)\n");
  lua_error(L);return 0;
}


static int _wrap_ICartesianControl_getDOF(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getDOF",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getDOF",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getDOF",2,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getDOF",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getDOF",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getDOF(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_setDOF(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::setDOF",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::setDOF",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::setDOF",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::setDOF",3,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_setDOF",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_setDOF",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_setDOF",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->setDOF((yarp::sig::Vector const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getRestPos(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getRestPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getRestPos",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getRestPos",2,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getRestPos",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getRestPos",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getRestPos(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_setRestPos(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::setRestPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::setRestPos",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::setRestPos",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::setRestPos",3,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_setRestPos",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_setRestPos",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_setRestPos",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->setRestPos((yarp::sig::Vector const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getRestWeights(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getRestWeights",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getRestWeights",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getRestWeights",2,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getRestWeights",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getRestWeights",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getRestWeights(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_setRestWeights(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::setRestWeights",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::setRestWeights",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::setRestWeights",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::setRestWeights",3,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_setRestWeights",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_setRestWeights",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_setRestWeights",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->setRestWeights((yarp::sig::Vector const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getLimits(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getLimits",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getLimits",1,"yarp::dev::ICartesianControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getLimits",2,"int const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::getLimits",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::getLimits",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getLimits",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ICartesianControl_getLimits",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ICartesianControl_getLimits",4,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getLimits(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_setLimits(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::setLimits",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::setLimits",1,"yarp::dev::ICartesianControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::setLimits",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::setLimits",3,"double const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::ICartesianControl::setLimits",4,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_setLimits",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  arg4 = (double const)lua_tonumber(L, 4);
  result = (bool)(arg1)->setLimits(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getTrajTime(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getTrajTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getTrajTime",1,"yarp::dev::ICartesianControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getTrajTime",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getTrajTime",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ICartesianControl_getTrajTime",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTrajTime(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_setTrajTime(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::setTrajTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::setTrajTime",1,"yarp::dev::ICartesianControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::setTrajTime",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_setTrajTime",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->setTrajTime(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getInTargetTol(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getInTargetTol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getInTargetTol",1,"yarp::dev::ICartesianControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getInTargetTol",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getInTargetTol",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ICartesianControl_getInTargetTol",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getInTargetTol(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_setInTargetTol(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::setInTargetTol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::setInTargetTol",1,"yarp::dev::ICartesianControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::setInTargetTol",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_setInTargetTol",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->setInTargetTol(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getJointsVelocities(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getJointsVelocities",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getJointsVelocities",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getJointsVelocities",2,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getJointsVelocities",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getJointsVelocities",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getJointsVelocities(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getTaskVelocities(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getTaskVelocities",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getTaskVelocities",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getTaskVelocities",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::getTaskVelocities",3,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getTaskVelocities",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getTaskVelocities",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getTaskVelocities",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getTaskVelocities(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_setTaskVelocities(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::setTaskVelocities",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::setTaskVelocities",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::setTaskVelocities",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::setTaskVelocities",3,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_setTaskVelocities",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_setTaskVelocities",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_setTaskVelocities",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->setTaskVelocities((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_attachTipFrame(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::attachTipFrame",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::attachTipFrame",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::attachTipFrame",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::attachTipFrame",3,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_attachTipFrame",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_attachTipFrame",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_attachTipFrame",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->attachTipFrame((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getTipFrame(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getTipFrame",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getTipFrame",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getTipFrame",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::getTipFrame",3,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getTipFrame",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getTipFrame",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("ICartesianControl_getTipFrame",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getTipFrame(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_removeTipFrame(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::removeTipFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::removeTipFrame",1,"yarp::dev::ICartesianControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_removeTipFrame",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  result = (bool)(arg1)->removeTipFrame();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_checkMotionDone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::checkMotionDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::checkMotionDone",1,"yarp::dev::ICartesianControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::checkMotionDone",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_checkMotionDone",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ICartesianControl_checkMotionDone",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->checkMotionDone(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_waitMotionDone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::waitMotionDone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::waitMotionDone",1,"yarp::dev::ICartesianControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::waitMotionDone",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ICartesianControl::waitMotionDone",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_waitMotionDone",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->waitMotionDone(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_waitMotionDone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::waitMotionDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::waitMotionDone",1,"yarp::dev::ICartesianControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::waitMotionDone",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_waitMotionDone",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->waitMotionDone(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_waitMotionDone__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::waitMotionDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::waitMotionDone",1,"yarp::dev::ICartesianControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_waitMotionDone",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  result = (bool)(arg1)->waitMotionDone();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_waitMotionDone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ICartesianControl_waitMotionDone__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ICartesianControl_waitMotionDone__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ICartesianControl_waitMotionDone__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ICartesianControl_waitMotionDone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ICartesianControl::waitMotionDone(double const,double const)\n"
    "    yarp::dev::ICartesianControl::waitMotionDone(double const)\n"
    "    yarp::dev::ICartesianControl::waitMotionDone()\n");
  lua_error(L);return 0;
}


static int _wrap_ICartesianControl_stopControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::stopControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::stopControl",1,"yarp::dev::ICartesianControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_stopControl",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  result = (bool)(arg1)->stopControl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_storeContext(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::storeContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::storeContext",1,"yarp::dev::ICartesianControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::storeContext",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_storeContext",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ICartesianControl_storeContext",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->storeContext(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_restoreContext(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::restoreContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::restoreContext",1,"yarp::dev::ICartesianControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::restoreContext",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_restoreContext",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = (bool)(arg1)->restoreContext(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_deleteContext(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::deleteContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::deleteContext",1,"yarp::dev::ICartesianControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::deleteContext",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_deleteContext",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = (bool)(arg1)->deleteContext(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_getInfo(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::getInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::getInfo",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::getInfo",2,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_getInfo",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("ICartesianControl_getInfo",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->getInfo(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_registerEvent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::dev::CartesianEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::registerEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::registerEvent",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::registerEvent",2,"yarp::dev::CartesianEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_registerEvent",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__CartesianEvent,0))){
    SWIG_fail_ptr("ICartesianControl_registerEvent",2,SWIGTYPE_p_yarp__dev__CartesianEvent);
  }
  
  result = (bool)(arg1)->registerEvent(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_unregisterEvent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::dev::CartesianEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::unregisterEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::unregisterEvent",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::unregisterEvent",2,"yarp::dev::CartesianEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_unregisterEvent",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__CartesianEvent,0))){
    SWIG_fail_ptr("ICartesianControl_unregisterEvent",2,SWIGTYPE_p_yarp__dev__CartesianEvent);
  }
  
  result = (bool)(arg1)->unregisterEvent(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_tweakSet(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::tweakSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::tweakSet",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::tweakSet",2,"yarp::os::Bottle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_tweakSet",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("ICartesianControl_tweakSet",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->tweakSet((yarp::os::Bottle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_tweakGet(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::tweakGet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::tweakGet",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::tweakGet",2,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_tweakGet",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("ICartesianControl_tweakGet",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->tweakGet(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_checkMotionDone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::checkMotionDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::checkMotionDone",1,"yarp::dev::ICartesianControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::ICartesianControl::checkMotionDone",2,"std::vector< bool > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_checkMotionDone",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("ICartesianControl_checkMotionDone",2,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  result = (bool)yarp_dev_ICartesianControl_checkMotionDone__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_checkMotionDone__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::checkMotionDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::checkMotionDone",1,"yarp::dev::ICartesianControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_checkMotionDone",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  result = (bool)yarp_dev_ICartesianControl_checkMotionDone__SWIG_2(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICartesianControl_checkMotionDone(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ICartesianControl_checkMotionDone__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_bool_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ICartesianControl_checkMotionDone__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICartesianControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ICartesianControl_checkMotionDone__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ICartesianControl_checkMotionDone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ICartesianControl::checkMotionDone(bool *)\n"
    "    yarp::dev::ICartesianControl::checkMotionDone(std::vector< bool > &)\n"
    "    yarp::dev::ICartesianControl::checkMotionDone()\n");
  lua_error(L);return 0;
}


static int _wrap_ICartesianControl_isMotionDone(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICartesianControl::isMotionDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICartesianControl::isMotionDone",1,"yarp::dev::ICartesianControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICartesianControl,0))){
    SWIG_fail_ptr("ICartesianControl_isMotionDone",1,SWIGTYPE_p_yarp__dev__ICartesianControl);
  }
  
  result = (bool)yarp_dev_ICartesianControl_isMotionDone(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ICartesianControl(void *obj) {
yarp::dev::ICartesianControl *arg1 = (yarp::dev::ICartesianControl *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_ICartesianControl_methods[] = {
    {"setTrackingMode", _wrap_ICartesianControl_setTrackingMode}, 
    {"getTrackingMode", _wrap_ICartesianControl_getTrackingMode}, 
    {"setReferenceMode", _wrap_ICartesianControl_setReferenceMode}, 
    {"getReferenceMode", _wrap_ICartesianControl_getReferenceMode}, 
    {"setPosePriority", _wrap_ICartesianControl_setPosePriority}, 
    {"getPosePriority", _wrap_ICartesianControl_getPosePriority}, 
    {"getPose", _wrap_ICartesianControl_getPose}, 
    {"goToPose", _wrap_ICartesianControl_goToPose}, 
    {"goToPosition", _wrap_ICartesianControl_goToPosition}, 
    {"goToPoseSync", _wrap_ICartesianControl_goToPoseSync}, 
    {"goToPositionSync", _wrap_ICartesianControl_goToPositionSync}, 
    {"getDesired", _wrap_ICartesianControl_getDesired}, 
    {"askForPose", _wrap_ICartesianControl_askForPose}, 
    {"askForPosition", _wrap_ICartesianControl_askForPosition}, 
    {"getDOF", _wrap_ICartesianControl_getDOF}, 
    {"setDOF", _wrap_ICartesianControl_setDOF}, 
    {"getRestPos", _wrap_ICartesianControl_getRestPos}, 
    {"setRestPos", _wrap_ICartesianControl_setRestPos}, 
    {"getRestWeights", _wrap_ICartesianControl_getRestWeights}, 
    {"setRestWeights", _wrap_ICartesianControl_setRestWeights}, 
    {"getLimits", _wrap_ICartesianControl_getLimits}, 
    {"setLimits", _wrap_ICartesianControl_setLimits}, 
    {"getTrajTime", _wrap_ICartesianControl_getTrajTime}, 
    {"setTrajTime", _wrap_ICartesianControl_setTrajTime}, 
    {"getInTargetTol", _wrap_ICartesianControl_getInTargetTol}, 
    {"setInTargetTol", _wrap_ICartesianControl_setInTargetTol}, 
    {"getJointsVelocities", _wrap_ICartesianControl_getJointsVelocities}, 
    {"getTaskVelocities", _wrap_ICartesianControl_getTaskVelocities}, 
    {"setTaskVelocities", _wrap_ICartesianControl_setTaskVelocities}, 
    {"attachTipFrame", _wrap_ICartesianControl_attachTipFrame}, 
    {"getTipFrame", _wrap_ICartesianControl_getTipFrame}, 
    {"removeTipFrame", _wrap_ICartesianControl_removeTipFrame}, 
    {"waitMotionDone", _wrap_ICartesianControl_waitMotionDone}, 
    {"stopControl", _wrap_ICartesianControl_stopControl}, 
    {"storeContext", _wrap_ICartesianControl_storeContext}, 
    {"restoreContext", _wrap_ICartesianControl_restoreContext}, 
    {"deleteContext", _wrap_ICartesianControl_deleteContext}, 
    {"getInfo", _wrap_ICartesianControl_getInfo}, 
    {"registerEvent", _wrap_ICartesianControl_registerEvent}, 
    {"unregisterEvent", _wrap_ICartesianControl_unregisterEvent}, 
    {"tweakSet", _wrap_ICartesianControl_tweakSet}, 
    {"tweakGet", _wrap_ICartesianControl_tweakGet}, 
    {"checkMotionDone", _wrap_ICartesianControl_checkMotionDone}, 
    {"isMotionDone", _wrap_ICartesianControl_isMotionDone}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_ICartesianControl_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_ICartesianControl_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_ICartesianControl_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_ICartesianControl_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_ICartesianControl_bases[] = {0};
static const char *swig_yarp_dev_ICartesianControl_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_ICartesianControl = { "ICartesianControl", &SWIGTYPE_p_yarp__dev__ICartesianControl,0, swig_delete_ICartesianControl, swig_yarp_dev_ICartesianControl_methods, swig_yarp_dev_ICartesianControl_attributes, { "ICartesianControl", swig_yarp_dev_ICartesianControl_cls_methods, swig_yarp_dev_ICartesianControl_cls_attributes, swig_yarp_dev_ICartesianControl_cls_constants }, swig_yarp_dev_ICartesianControl_bases, swig_yarp_dev_ICartesianControl_base_names };

static int _wrap_GazeEventParameters_type_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::dev::GazeEventParameters::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEventParameters::type",1,"yarp::dev::GazeEventParameters *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::dev::GazeEventParameters::type",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEventParameters,0))){
    SWIG_fail_ptr("GazeEventParameters_type_set",1,SWIGTYPE_p_yarp__dev__GazeEventParameters);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->type = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEventParameters_type_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::GazeEventParameters::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEventParameters::type",1,"yarp::dev::GazeEventParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEventParameters,0))){
    SWIG_fail_ptr("GazeEventParameters_type_get",1,SWIGTYPE_p_yarp__dev__GazeEventParameters);
  }
  
  result = (yarp::os::ConstString *) & ((arg1)->type);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEventParameters_motionOngoingCheckPoint_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::GazeEventParameters::motionOngoingCheckPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEventParameters::motionOngoingCheckPoint",1,"yarp::dev::GazeEventParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::GazeEventParameters::motionOngoingCheckPoint",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEventParameters,0))){
    SWIG_fail_ptr("GazeEventParameters_motionOngoingCheckPoint_set",1,SWIGTYPE_p_yarp__dev__GazeEventParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEventParameters_motionOngoingCheckPoint_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::GazeEventParameters::motionOngoingCheckPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEventParameters::motionOngoingCheckPoint",1,"yarp::dev::GazeEventParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEventParameters,0))){
    SWIG_fail_ptr("GazeEventParameters_motionOngoingCheckPoint_get",1,SWIGTYPE_p_yarp__dev__GazeEventParameters);
  }
  
  result = (double) ((arg1)->motionOngoingCheckPoint);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GazeEventParameters(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventParameters *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::GazeEventParameters::GazeEventParameters",0,0)
  result = (yarp::dev::GazeEventParameters *)new yarp::dev::GazeEventParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__GazeEventParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GazeEventParameters(void *obj) {
yarp::dev::GazeEventParameters *arg1 = (yarp::dev::GazeEventParameters *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_GazeEventParameters_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_GazeEventParameters_attributes[] = {
    { "type", _wrap_GazeEventParameters_type_get, _wrap_GazeEventParameters_type_set},
    { "motionOngoingCheckPoint", _wrap_GazeEventParameters_motionOngoingCheckPoint_get, _wrap_GazeEventParameters_motionOngoingCheckPoint_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_GazeEventParameters_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_GazeEventParameters_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_GazeEventParameters_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_GazeEventParameters_bases[] = {0};
static const char *swig_yarp_dev_GazeEventParameters_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_GazeEventParameters = { "GazeEventParameters", &SWIGTYPE_p_yarp__dev__GazeEventParameters,_wrap_new_GazeEventParameters, swig_delete_GazeEventParameters, swig_yarp_dev_GazeEventParameters_methods, swig_yarp_dev_GazeEventParameters_attributes, { "GazeEventParameters", swig_yarp_dev_GazeEventParameters_cls_methods, swig_yarp_dev_GazeEventParameters_cls_attributes, swig_yarp_dev_GazeEventParameters_cls_constants }, swig_yarp_dev_GazeEventParameters_bases, swig_yarp_dev_GazeEventParameters_base_names };

static int _wrap_GazeEventVariables_type_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  
  SWIG_check_num_args("yarp::dev::GazeEventVariables::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEventVariables::type",1,"yarp::dev::GazeEventVariables *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::dev::GazeEventVariables::type",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEventVariables,0))){
    SWIG_fail_ptr("GazeEventVariables_type_set",1,SWIGTYPE_p_yarp__dev__GazeEventVariables);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->type = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEventVariables_type_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  yarp::os::ConstString *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::GazeEventVariables::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEventVariables::type",1,"yarp::dev::GazeEventVariables *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEventVariables,0))){
    SWIG_fail_ptr("GazeEventVariables_type_get",1,SWIGTYPE_p_yarp__dev__GazeEventVariables);
  }
  
  result = (yarp::os::ConstString *) & ((arg1)->type);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEventVariables_time_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::GazeEventVariables::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEventVariables::time",1,"yarp::dev::GazeEventVariables *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::GazeEventVariables::time",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEventVariables,0))){
    SWIG_fail_ptr("GazeEventVariables_time_set",1,SWIGTYPE_p_yarp__dev__GazeEventVariables);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEventVariables_time_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::GazeEventVariables::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEventVariables::time",1,"yarp::dev::GazeEventVariables *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEventVariables,0))){
    SWIG_fail_ptr("GazeEventVariables_time_get",1,SWIGTYPE_p_yarp__dev__GazeEventVariables);
  }
  
  result = (double) ((arg1)->time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEventVariables_motionOngoingCheckPoint_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::GazeEventVariables::motionOngoingCheckPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEventVariables::motionOngoingCheckPoint",1,"yarp::dev::GazeEventVariables *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::GazeEventVariables::motionOngoingCheckPoint",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEventVariables,0))){
    SWIG_fail_ptr("GazeEventVariables_motionOngoingCheckPoint_set",1,SWIGTYPE_p_yarp__dev__GazeEventVariables);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->motionOngoingCheckPoint = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEventVariables_motionOngoingCheckPoint_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::GazeEventVariables::motionOngoingCheckPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEventVariables::motionOngoingCheckPoint",1,"yarp::dev::GazeEventVariables *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEventVariables,0))){
    SWIG_fail_ptr("GazeEventVariables_motionOngoingCheckPoint_get",1,SWIGTYPE_p_yarp__dev__GazeEventVariables);
  }
  
  result = (double) ((arg1)->motionOngoingCheckPoint);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GazeEventVariables(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEventVariables *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::GazeEventVariables::GazeEventVariables",0,0)
  result = (yarp::dev::GazeEventVariables *)new yarp::dev::GazeEventVariables();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__GazeEventVariables,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GazeEventVariables(void *obj) {
yarp::dev::GazeEventVariables *arg1 = (yarp::dev::GazeEventVariables *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_GazeEventVariables_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_GazeEventVariables_attributes[] = {
    { "type", _wrap_GazeEventVariables_type_get, _wrap_GazeEventVariables_type_set},
    { "time", _wrap_GazeEventVariables_time_get, _wrap_GazeEventVariables_time_set},
    { "motionOngoingCheckPoint", _wrap_GazeEventVariables_motionOngoingCheckPoint_get, _wrap_GazeEventVariables_motionOngoingCheckPoint_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_GazeEventVariables_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_GazeEventVariables_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_GazeEventVariables_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_GazeEventVariables_bases[] = {0};
static const char *swig_yarp_dev_GazeEventVariables_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_GazeEventVariables = { "GazeEventVariables", &SWIGTYPE_p_yarp__dev__GazeEventVariables,_wrap_new_GazeEventVariables, swig_delete_GazeEventVariables, swig_yarp_dev_GazeEventVariables_methods, swig_yarp_dev_GazeEventVariables_attributes, { "GazeEventVariables", swig_yarp_dev_GazeEventVariables_cls_methods, swig_yarp_dev_GazeEventVariables_cls_attributes, swig_yarp_dev_GazeEventVariables_cls_constants }, swig_yarp_dev_GazeEventVariables_bases, swig_yarp_dev_GazeEventVariables_base_names };

static int _wrap_GazeEvent_gazeEventParameters_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventParameters *arg2 = (yarp::dev::GazeEventParameters *) 0 ;
  
  SWIG_check_num_args("yarp::dev::GazeEvent::gazeEventParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEvent::gazeEventParameters",1,"yarp::dev::GazeEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::GazeEvent::gazeEventParameters",2,"yarp::dev::GazeEventParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEvent,0))){
    SWIG_fail_ptr("GazeEvent_gazeEventParameters_set",1,SWIGTYPE_p_yarp__dev__GazeEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__GazeEventParameters,0))){
    SWIG_fail_ptr("GazeEvent_gazeEventParameters_set",2,SWIGTYPE_p_yarp__dev__GazeEventParameters);
  }
  
  if (arg1) (arg1)->gazeEventParameters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEvent_gazeEventParameters_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventParameters *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::GazeEvent::gazeEventParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEvent::gazeEventParameters",1,"yarp::dev::GazeEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEvent,0))){
    SWIG_fail_ptr("GazeEvent_gazeEventParameters_get",1,SWIGTYPE_p_yarp__dev__GazeEvent);
  }
  
  result = (yarp::dev::GazeEventParameters *)& ((arg1)->gazeEventParameters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__GazeEventParameters,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEvent_gazeEventVariables_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventVariables *arg2 = (yarp::dev::GazeEventVariables *) 0 ;
  
  SWIG_check_num_args("yarp::dev::GazeEvent::gazeEventVariables",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEvent::gazeEventVariables",1,"yarp::dev::GazeEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::GazeEvent::gazeEventVariables",2,"yarp::dev::GazeEventVariables *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEvent,0))){
    SWIG_fail_ptr("GazeEvent_gazeEventVariables_set",1,SWIGTYPE_p_yarp__dev__GazeEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__GazeEventVariables,0))){
    SWIG_fail_ptr("GazeEvent_gazeEventVariables_set",2,SWIGTYPE_p_yarp__dev__GazeEventVariables);
  }
  
  if (arg1) (arg1)->gazeEventVariables = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEvent_gazeEventVariables_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  yarp::dev::GazeEventVariables *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::GazeEvent::gazeEventVariables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEvent::gazeEventVariables",1,"yarp::dev::GazeEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEvent,0))){
    SWIG_fail_ptr("GazeEvent_gazeEventVariables_get",1,SWIGTYPE_p_yarp__dev__GazeEvent);
  }
  
  result = (yarp::dev::GazeEventVariables *)& ((arg1)->gazeEventVariables);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__GazeEventVariables,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GazeEvent_gazeEventCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) 0 ;
  
  SWIG_check_num_args("yarp::dev::GazeEvent::gazeEventCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::GazeEvent::gazeEventCallback",1,"yarp::dev::GazeEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__GazeEvent,0))){
    SWIG_fail_ptr("GazeEvent_gazeEventCallback",1,SWIGTYPE_p_yarp__dev__GazeEvent);
  }
  
  (arg1)->gazeEventCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GazeEvent(void *obj) {
yarp::dev::GazeEvent *arg1 = (yarp::dev::GazeEvent *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_GazeEvent_methods[] = {
    {"gazeEventCallback", _wrap_GazeEvent_gazeEventCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_GazeEvent_attributes[] = {
    { "gazeEventParameters", _wrap_GazeEvent_gazeEventParameters_get, _wrap_GazeEvent_gazeEventParameters_set},
    { "gazeEventVariables", _wrap_GazeEvent_gazeEventVariables_get, _wrap_GazeEvent_gazeEventVariables_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_GazeEvent_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_GazeEvent_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_GazeEvent_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_GazeEvent_bases[] = {0};
static const char *swig_yarp_dev_GazeEvent_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_GazeEvent = { "GazeEvent", &SWIGTYPE_p_yarp__dev__GazeEvent,0, swig_delete_GazeEvent, swig_yarp_dev_GazeEvent_methods, swig_yarp_dev_GazeEvent_attributes, { "GazeEvent", swig_yarp_dev_GazeEvent_cls_methods, swig_yarp_dev_GazeEvent_cls_attributes, swig_yarp_dev_GazeEvent_cls_constants }, swig_yarp_dev_GazeEvent_bases, swig_yarp_dev_GazeEvent_base_names };

static int _wrap_IGazeControl_setTrackingMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setTrackingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setTrackingMode",1,"yarp::dev::IGazeControl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setTrackingMode",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setTrackingMode",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setTrackingMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getTrackingMode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getTrackingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getTrackingMode",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getTrackingMode",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getTrackingMode",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("IGazeControl_getTrackingMode",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->getTrackingMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_setStabilizationMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setStabilizationMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setStabilizationMode",1,"yarp::dev::IGazeControl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setStabilizationMode",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setStabilizationMode",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setStabilizationMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getStabilizationMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getStabilizationMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getStabilizationMode",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getStabilizationMode",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getStabilizationMode",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("IGazeControl_getStabilizationMode",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->getStabilizationMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getFixationPoint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::os::Stamp *arg3 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getFixationPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getFixationPoint",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getFixationPoint",2,"yarp::sig::Vector &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getFixationPoint",3,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getFixationPoint",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getFixationPoint",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("IGazeControl_getFixationPoint",3,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (bool)(arg1)->getFixationPoint(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getFixationPoint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getFixationPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getFixationPoint",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getFixationPoint",2,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getFixationPoint",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getFixationPoint",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getFixationPoint(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getFixationPoint(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IGazeControl_getFixationPoint__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Stamp, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IGazeControl_getFixationPoint__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_getFixationPoint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::getFixationPoint(yarp::sig::Vector &,yarp::os::Stamp *)\n"
    "    yarp::dev::IGazeControl::getFixationPoint(yarp::sig::Vector &)\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_getAngles__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::os::Stamp *arg3 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getAngles",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getAngles",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getAngles",2,"yarp::sig::Vector &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getAngles",3,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getAngles",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getAngles",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("IGazeControl_getAngles",3,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (bool)(arg1)->getAngles(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getAngles__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getAngles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getAngles",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getAngles",2,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getAngles",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getAngles",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getAngles(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getAngles(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IGazeControl_getAngles__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__Stamp, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IGazeControl_getAngles__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_getAngles'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::getAngles(yarp::sig::Vector &,yarp::os::Stamp *)\n"
    "    yarp::dev::IGazeControl::getAngles(yarp::sig::Vector &)\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_lookAtFixationPoint(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::lookAtFixationPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtFixationPoint",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtFixationPoint",2,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_lookAtFixationPoint",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_lookAtFixationPoint",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->lookAtFixationPoint((yarp::sig::Vector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_lookAtAbsAngles(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::lookAtAbsAngles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtAbsAngles",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtAbsAngles",2,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_lookAtAbsAngles",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_lookAtAbsAngles",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->lookAtAbsAngles((yarp::sig::Vector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_lookAtRelAngles(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::lookAtRelAngles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtRelAngles",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtRelAngles",2,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_lookAtRelAngles",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_lookAtRelAngles",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->lookAtRelAngles((yarp::sig::Vector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_lookAtMonoPixel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::lookAtMonoPixel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixel",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixel",2,"int const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixel",3,"yarp::sig::Vector const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixel",4,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_lookAtMonoPixel",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_lookAtMonoPixel",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg4 = (double const)lua_tonumber(L, 4);
  result = (bool)(arg1)->lookAtMonoPixel(arg2,(yarp::sig::Vector const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_lookAtMonoPixel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::lookAtMonoPixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixel",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixel",2,"int const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixel",3,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_lookAtMonoPixel",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_lookAtMonoPixel",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->lookAtMonoPixel(arg2,(yarp::sig::Vector const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_lookAtMonoPixel(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IGazeControl_lookAtMonoPixel__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IGazeControl_lookAtMonoPixel__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_lookAtMonoPixel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::lookAtMonoPixel(int const,yarp::sig::Vector const &,double const)\n"
    "    yarp::dev::IGazeControl::lookAtMonoPixel(int const,yarp::sig::Vector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_lookAtMonoPixelWithVergence(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::lookAtMonoPixelWithVergence",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixelWithVergence",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixelWithVergence",2,"int const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixelWithVergence",3,"yarp::sig::Vector const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtMonoPixelWithVergence",4,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_lookAtMonoPixelWithVergence",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_lookAtMonoPixelWithVergence",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg4 = (double const)lua_tonumber(L, 4);
  result = (bool)(arg1)->lookAtMonoPixelWithVergence(arg2,(yarp::sig::Vector const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_lookAtStereoPixels(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::lookAtStereoPixels",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtStereoPixels",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtStereoPixels",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::lookAtStereoPixels",3,"yarp::sig::Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_lookAtStereoPixels",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_lookAtStereoPixels",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_lookAtStereoPixels",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->lookAtStereoPixels((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getNeckTrajTime__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getNeckTrajTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckTrajTime",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckTrajTime",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getNeckTrajTime",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getNeckTrajTime",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getNeckTrajTime(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getEyesTrajTime__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getEyesTrajTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getEyesTrajTime",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getEyesTrajTime",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getEyesTrajTime",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getEyesTrajTime",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEyesTrajTime(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getVORGain(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getVORGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getVORGain",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getVORGain",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getVORGain",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getVORGain",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getVORGain(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getOCRGain(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getOCRGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getOCRGain",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getOCRGain",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getOCRGain",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getOCRGain",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getOCRGain(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getSaccadesMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getSaccadesMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getSaccadesMode",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getSaccadesMode",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getSaccadesMode",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("IGazeControl_getSaccadesMode",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->getSaccadesMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getSaccadesInhibitionPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getSaccadesInhibitionPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getSaccadesInhibitionPeriod",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getSaccadesInhibitionPeriod",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getSaccadesInhibitionPeriod",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getSaccadesInhibitionPeriod",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getSaccadesInhibitionPeriod(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getSaccadesActivationAngle(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getSaccadesActivationAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getSaccadesActivationAngle",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getSaccadesActivationAngle",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getSaccadesActivationAngle",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getSaccadesActivationAngle",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getSaccadesActivationAngle(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getLeftEyePose__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getLeftEyePose",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getLeftEyePose",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getLeftEyePose",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getLeftEyePose",3,"yarp::sig::Vector &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::IGazeControl::getLeftEyePose",4,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getLeftEyePose",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getLeftEyePose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getLeftEyePose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("IGazeControl_getLeftEyePose",4,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (bool)(arg1)->getLeftEyePose(*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getLeftEyePose__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getLeftEyePose",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getLeftEyePose",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getLeftEyePose",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getLeftEyePose",3,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getLeftEyePose",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getLeftEyePose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getLeftEyePose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getLeftEyePose(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getLeftEyePose(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IGazeControl_getLeftEyePose__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__Stamp, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_IGazeControl_getLeftEyePose__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_getLeftEyePose'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::getLeftEyePose(yarp::sig::Vector &,yarp::sig::Vector &,yarp::os::Stamp *)\n"
    "    yarp::dev::IGazeControl::getLeftEyePose(yarp::sig::Vector &,yarp::sig::Vector &)\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_getRightEyePose__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getRightEyePose",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getRightEyePose",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getRightEyePose",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getRightEyePose",3,"yarp::sig::Vector &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::IGazeControl::getRightEyePose",4,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getRightEyePose",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getRightEyePose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getRightEyePose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("IGazeControl_getRightEyePose",4,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (bool)(arg1)->getRightEyePose(*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getRightEyePose__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getRightEyePose",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getRightEyePose",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getRightEyePose",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getRightEyePose",3,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getRightEyePose",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getRightEyePose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getRightEyePose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getRightEyePose(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getRightEyePose(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IGazeControl_getRightEyePose__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__Stamp, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_IGazeControl_getRightEyePose__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_getRightEyePose'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::getRightEyePose(yarp::sig::Vector &,yarp::sig::Vector &,yarp::os::Stamp *)\n"
    "    yarp::dev::IGazeControl::getRightEyePose(yarp::sig::Vector &,yarp::sig::Vector &)\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_getHeadPose__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::os::Stamp *arg4 = (yarp::os::Stamp *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getHeadPose",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getHeadPose",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getHeadPose",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getHeadPose",3,"yarp::sig::Vector &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::IGazeControl::getHeadPose",4,"yarp::os::Stamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getHeadPose",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getHeadPose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getHeadPose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__os__Stamp,0))){
    SWIG_fail_ptr("IGazeControl_getHeadPose",4,SWIGTYPE_p_yarp__os__Stamp);
  }
  
  result = (bool)(arg1)->getHeadPose(*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getHeadPose__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getHeadPose",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getHeadPose",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getHeadPose",2,"yarp::sig::Vector &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getHeadPose",3,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getHeadPose",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getHeadPose",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getHeadPose",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getHeadPose(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getHeadPose(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IGazeControl_getHeadPose__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__sig__Vector, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_yarp__os__Stamp, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_IGazeControl_getHeadPose__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_getHeadPose'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::getHeadPose(yarp::sig::Vector &,yarp::sig::Vector &,yarp::os::Stamp *)\n"
    "    yarp::dev::IGazeControl::getHeadPose(yarp::sig::Vector &,yarp::sig::Vector &)\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_get2DPixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::get2DPixel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::get2DPixel",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::get2DPixel",2,"int const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::get2DPixel",3,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::IGazeControl::get2DPixel",4,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_get2DPixel",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_get2DPixel",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_get2DPixel",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->get2DPixel(arg2,(yarp::sig::Vector const &)*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_get3DPoint(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  double arg4 ;
  yarp::sig::Vector *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::get3DPoint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPoint",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPoint",2,"int const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPoint",3,"yarp::sig::Vector const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPoint",4,"double const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPoint",5,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_get3DPoint",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_get3DPoint",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  arg4 = (double const)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_get3DPoint",5,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->get3DPoint(arg2,(yarp::sig::Vector const &)*arg3,arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_get3DPointOnPlane(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  yarp::sig::Vector *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::get3DPointOnPlane",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPointOnPlane",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPointOnPlane",2,"int const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPointOnPlane",3,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPointOnPlane",4,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPointOnPlane",5,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_get3DPointOnPlane",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_get3DPointOnPlane",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_get3DPointOnPlane",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_get3DPointOnPlane",5,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->get3DPointOnPlane(arg2,(yarp::sig::Vector const &)*arg3,(yarp::sig::Vector const &)*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_get3DPointFromAngles(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::get3DPointFromAngles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPointFromAngles",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPointFromAngles",2,"int const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPointFromAngles",3,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::IGazeControl::get3DPointFromAngles",4,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_get3DPointFromAngles",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_get3DPointFromAngles",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_get3DPointFromAngles",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->get3DPointFromAngles(arg2,(yarp::sig::Vector const &)*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getAnglesFrom3DPoint(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getAnglesFrom3DPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getAnglesFrom3DPoint",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getAnglesFrom3DPoint",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getAnglesFrom3DPoint",3,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getAnglesFrom3DPoint",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getAnglesFrom3DPoint",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getAnglesFrom3DPoint",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getAnglesFrom3DPoint((yarp::sig::Vector const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_triangulate3DPoint(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  yarp::sig::Vector *arg3 = 0 ;
  yarp::sig::Vector *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::triangulate3DPoint",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::triangulate3DPoint",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::triangulate3DPoint",2,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::triangulate3DPoint",3,"yarp::sig::Vector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("yarp::dev::IGazeControl::triangulate3DPoint",4,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_triangulate3DPoint",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_triangulate3DPoint",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_triangulate3DPoint",3,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_triangulate3DPoint",4,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->triangulate3DPoint((yarp::sig::Vector const &)*arg2,(yarp::sig::Vector const &)*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getJointsDesired(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getJointsDesired",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getJointsDesired",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getJointsDesired",2,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getJointsDesired",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getJointsDesired",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getJointsDesired(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getJointsVelocities(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::sig::Vector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getJointsVelocities",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getJointsVelocities",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getJointsVelocities",2,"yarp::sig::Vector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getJointsVelocities",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Vector,0))){
    SWIG_fail_ptr("IGazeControl_getJointsVelocities",2,SWIGTYPE_p_yarp__sig__Vector);
  }
  
  result = (bool)(arg1)->getJointsVelocities(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getStereoOptions(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getStereoOptions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getStereoOptions",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getStereoOptions",2,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getStereoOptions",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("IGazeControl_getStereoOptions",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->getStereoOptions(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_setNeckTrajTime(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setNeckTrajTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setNeckTrajTime",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setNeckTrajTime",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setNeckTrajTime",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->setNeckTrajTime(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_setEyesTrajTime(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setEyesTrajTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setEyesTrajTime",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setEyesTrajTime",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setEyesTrajTime",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->setEyesTrajTime(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_setVORGain(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setVORGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setVORGain",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setVORGain",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setVORGain",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->setVORGain(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_setOCRGain(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setOCRGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setOCRGain",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setOCRGain",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setOCRGain",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->setOCRGain(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_setSaccadesMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setSaccadesMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setSaccadesMode",1,"yarp::dev::IGazeControl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setSaccadesMode",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setSaccadesMode",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->setSaccadesMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_setSaccadesInhibitionPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setSaccadesInhibitionPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setSaccadesInhibitionPeriod",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setSaccadesInhibitionPeriod",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setSaccadesInhibitionPeriod",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->setSaccadesInhibitionPeriod(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_setSaccadesActivationAngle(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setSaccadesActivationAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setSaccadesActivationAngle",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setSaccadesActivationAngle",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setSaccadesActivationAngle",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->setSaccadesActivationAngle(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_setStereoOptions(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setStereoOptions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setStereoOptions",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setStereoOptions",2,"yarp::os::Bottle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setStereoOptions",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("IGazeControl_setStereoOptions",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->setStereoOptions((yarp::os::Bottle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_bindNeckPitch(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::bindNeckPitch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::bindNeckPitch",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::bindNeckPitch",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::bindNeckPitch",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_bindNeckPitch",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->bindNeckPitch(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockNeckPitch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::blockNeckPitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::blockNeckPitch",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::blockNeckPitch",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_blockNeckPitch",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->blockNeckPitch(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockNeckPitch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::blockNeckPitch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::blockNeckPitch",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_blockNeckPitch",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->blockNeckPitch();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockNeckPitch(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IGazeControl_blockNeckPitch__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IGazeControl_blockNeckPitch__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_blockNeckPitch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::blockNeckPitch(double const)\n"
    "    yarp::dev::IGazeControl::blockNeckPitch()\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_bindNeckRoll(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::bindNeckRoll",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::bindNeckRoll",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::bindNeckRoll",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::bindNeckRoll",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_bindNeckRoll",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->bindNeckRoll(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockNeckRoll__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::blockNeckRoll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::blockNeckRoll",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::blockNeckRoll",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_blockNeckRoll",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->blockNeckRoll(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockNeckRoll__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::blockNeckRoll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::blockNeckRoll",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_blockNeckRoll",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->blockNeckRoll();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockNeckRoll(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IGazeControl_blockNeckRoll__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IGazeControl_blockNeckRoll__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_blockNeckRoll'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::blockNeckRoll(double const)\n"
    "    yarp::dev::IGazeControl::blockNeckRoll()\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_bindNeckYaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::bindNeckYaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::bindNeckYaw",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::bindNeckYaw",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::bindNeckYaw",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_bindNeckYaw",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->bindNeckYaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockNeckYaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::blockNeckYaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::blockNeckYaw",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::blockNeckYaw",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_blockNeckYaw",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->blockNeckYaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockNeckYaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::blockNeckYaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::blockNeckYaw",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_blockNeckYaw",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->blockNeckYaw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockNeckYaw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IGazeControl_blockNeckYaw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IGazeControl_blockNeckYaw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_blockNeckYaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::blockNeckYaw(double const)\n"
    "    yarp::dev::IGazeControl::blockNeckYaw()\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_blockEyes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::blockEyes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::blockEyes",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::blockEyes",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_blockEyes",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->blockEyes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockEyes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::blockEyes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::blockEyes",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_blockEyes",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->blockEyes();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_blockEyes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IGazeControl_blockEyes__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IGazeControl_blockEyes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_blockEyes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::blockEyes(double const)\n"
    "    yarp::dev::IGazeControl::blockEyes()\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_getNeckPitchRange(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getNeckPitchRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckPitchRange",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckPitchRange",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckPitchRange",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getNeckPitchRange",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getNeckPitchRange",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getNeckPitchRange",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getNeckPitchRange(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getNeckRollRange(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getNeckRollRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckRollRange",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckRollRange",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckRollRange",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getNeckRollRange",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getNeckRollRange",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getNeckRollRange",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getNeckRollRange(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getNeckYawRange(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getNeckYawRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckYawRange",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckYawRange",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckYawRange",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getNeckYawRange",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getNeckYawRange",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getNeckYawRange",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getNeckYawRange(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getBlockedVergence(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getBlockedVergence",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getBlockedVergence",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getBlockedVergence",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getBlockedVergence",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getBlockedVergence",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getBlockedVergence(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_clearNeckPitch(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::clearNeckPitch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::clearNeckPitch",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_clearNeckPitch",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->clearNeckPitch();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_clearNeckRoll(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::clearNeckRoll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::clearNeckRoll",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_clearNeckRoll",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->clearNeckRoll();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_clearNeckYaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::clearNeckYaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::clearNeckYaw",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_clearNeckYaw",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->clearNeckYaw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_clearEyes(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::clearEyes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::clearEyes",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_clearEyes",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->clearEyes();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getNeckAngleUserTolerance(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getNeckAngleUserTolerance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckAngleUserTolerance",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckAngleUserTolerance",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getNeckAngleUserTolerance",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IGazeControl_getNeckAngleUserTolerance",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getNeckAngleUserTolerance(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_setNeckAngleUserTolerance(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::setNeckAngleUserTolerance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::setNeckAngleUserTolerance",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::setNeckAngleUserTolerance",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_setNeckAngleUserTolerance",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->setNeckAngleUserTolerance(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_checkMotionDone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::checkMotionDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::checkMotionDone",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::checkMotionDone",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_checkMotionDone",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("IGazeControl_checkMotionDone",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->checkMotionDone(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_waitMotionDone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::waitMotionDone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::waitMotionDone",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::waitMotionDone",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::waitMotionDone",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_waitMotionDone",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->waitMotionDone(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_waitMotionDone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::waitMotionDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::waitMotionDone",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::waitMotionDone",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_waitMotionDone",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->waitMotionDone(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_waitMotionDone__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::waitMotionDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::waitMotionDone",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_waitMotionDone",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->waitMotionDone();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_waitMotionDone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IGazeControl_waitMotionDone__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IGazeControl_waitMotionDone__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IGazeControl_waitMotionDone__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_waitMotionDone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::waitMotionDone(double const,double const)\n"
    "    yarp::dev::IGazeControl::waitMotionDone(double const)\n"
    "    yarp::dev::IGazeControl::waitMotionDone()\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_checkSaccadeDone(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::checkSaccadeDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::checkSaccadeDone",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::checkSaccadeDone",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_checkSaccadeDone",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("IGazeControl_checkSaccadeDone",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->checkSaccadeDone(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_waitSaccadeDone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::waitSaccadeDone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::waitSaccadeDone",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::waitSaccadeDone",2,"double const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IGazeControl::waitSaccadeDone",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_waitSaccadeDone",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  result = (bool)(arg1)->waitSaccadeDone(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_waitSaccadeDone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::waitSaccadeDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::waitSaccadeDone",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::waitSaccadeDone",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_waitSaccadeDone",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (bool)(arg1)->waitSaccadeDone(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_waitSaccadeDone__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::waitSaccadeDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::waitSaccadeDone",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_waitSaccadeDone",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->waitSaccadeDone();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_waitSaccadeDone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IGazeControl_waitSaccadeDone__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IGazeControl_waitSaccadeDone__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IGazeControl_waitSaccadeDone__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_waitSaccadeDone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::waitSaccadeDone(double const,double const)\n"
    "    yarp::dev::IGazeControl::waitSaccadeDone(double const)\n"
    "    yarp::dev::IGazeControl::waitSaccadeDone()\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_stopControl(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::stopControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::stopControl",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_stopControl",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)(arg1)->stopControl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_storeContext(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::storeContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::storeContext",1,"yarp::dev::IGazeControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::storeContext",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_storeContext",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IGazeControl_storeContext",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->storeContext(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_restoreContext(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::restoreContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::restoreContext",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::restoreContext",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_restoreContext",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = (bool)(arg1)->restoreContext(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_deleteContext(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::deleteContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::deleteContext",1,"yarp::dev::IGazeControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::deleteContext",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_deleteContext",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = (bool)(arg1)->deleteContext(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getInfo(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getInfo",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::getInfo",2,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getInfo",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("IGazeControl_getInfo",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->getInfo(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_registerEvent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::dev::GazeEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::registerEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::registerEvent",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::registerEvent",2,"yarp::dev::GazeEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_registerEvent",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__GazeEvent,0))){
    SWIG_fail_ptr("IGazeControl_registerEvent",2,SWIGTYPE_p_yarp__dev__GazeEvent);
  }
  
  result = (bool)(arg1)->registerEvent(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_unregisterEvent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::dev::GazeEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::unregisterEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::unregisterEvent",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::unregisterEvent",2,"yarp::dev::GazeEvent &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_unregisterEvent",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__GazeEvent,0))){
    SWIG_fail_ptr("IGazeControl_unregisterEvent",2,SWIGTYPE_p_yarp__dev__GazeEvent);
  }
  
  result = (bool)(arg1)->unregisterEvent(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_tweakSet(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::tweakSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::tweakSet",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::tweakSet",2,"yarp::os::Bottle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_tweakSet",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("IGazeControl_tweakSet",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->tweakSet((yarp::os::Bottle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_tweakGet(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  yarp::os::Bottle *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::tweakGet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::tweakGet",1,"yarp::dev::IGazeControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IGazeControl::tweakGet",2,"yarp::os::Bottle &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_tweakGet",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Bottle,0))){
    SWIG_fail_ptr("IGazeControl_tweakGet",2,SWIGTYPE_p_yarp__os__Bottle);
  }
  
  result = (bool)(arg1)->tweakGet(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getTrackingMode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getTrackingMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getTrackingMode",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getTrackingMode",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)yarp_dev_IGazeControl_getTrackingMode__SWIG_1(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getTrackingMode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IGazeControl_getTrackingMode__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IGazeControl_getTrackingMode__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_getTrackingMode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::getTrackingMode(bool *)\n"
    "    yarp::dev::IGazeControl::getTrackingMode()\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_getNeckTrajTime__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getNeckTrajTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getNeckTrajTime",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getNeckTrajTime",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (double)yarp_dev_IGazeControl_getNeckTrajTime__SWIG_1(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getNeckTrajTime(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IGazeControl_getNeckTrajTime__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IGazeControl_getNeckTrajTime__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_getNeckTrajTime'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::getNeckTrajTime(double *)\n"
    "    yarp::dev::IGazeControl::getNeckTrajTime()\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_getEyesTrajTime__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::getEyesTrajTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::getEyesTrajTime",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_getEyesTrajTime",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (double)yarp_dev_IGazeControl_getEyesTrajTime__SWIG_1(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_getEyesTrajTime(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IGazeControl_getEyesTrajTime__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IGazeControl_getEyesTrajTime__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_getEyesTrajTime'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::getEyesTrajTime(double *)\n"
    "    yarp::dev::IGazeControl::getEyesTrajTime()\n");
  lua_error(L);return 0;
}


static int _wrap_IGazeControl_checkMotionDone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IGazeControl::checkMotionDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IGazeControl::checkMotionDone",1,"yarp::dev::IGazeControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IGazeControl,0))){
    SWIG_fail_ptr("IGazeControl_checkMotionDone",1,SWIGTYPE_p_yarp__dev__IGazeControl);
  }
  
  result = (bool)yarp_dev_IGazeControl_checkMotionDone__SWIG_1(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGazeControl_checkMotionDone(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IGazeControl_checkMotionDone__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IGazeControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IGazeControl_checkMotionDone__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IGazeControl_checkMotionDone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IGazeControl::checkMotionDone(bool *)\n"
    "    yarp::dev::IGazeControl::checkMotionDone()\n");
  lua_error(L);return 0;
}


static void swig_delete_IGazeControl(void *obj) {
yarp::dev::IGazeControl *arg1 = (yarp::dev::IGazeControl *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IGazeControl_methods[] = {
    {"setTrackingMode", _wrap_IGazeControl_setTrackingMode}, 
    {"setStabilizationMode", _wrap_IGazeControl_setStabilizationMode}, 
    {"getStabilizationMode", _wrap_IGazeControl_getStabilizationMode}, 
    {"getFixationPoint", _wrap_IGazeControl_getFixationPoint}, 
    {"getAngles", _wrap_IGazeControl_getAngles}, 
    {"lookAtFixationPoint", _wrap_IGazeControl_lookAtFixationPoint}, 
    {"lookAtAbsAngles", _wrap_IGazeControl_lookAtAbsAngles}, 
    {"lookAtRelAngles", _wrap_IGazeControl_lookAtRelAngles}, 
    {"lookAtMonoPixel", _wrap_IGazeControl_lookAtMonoPixel}, 
    {"lookAtMonoPixelWithVergence", _wrap_IGazeControl_lookAtMonoPixelWithVergence}, 
    {"lookAtStereoPixels", _wrap_IGazeControl_lookAtStereoPixels}, 
    {"getVORGain", _wrap_IGazeControl_getVORGain}, 
    {"getOCRGain", _wrap_IGazeControl_getOCRGain}, 
    {"getSaccadesMode", _wrap_IGazeControl_getSaccadesMode}, 
    {"getSaccadesInhibitionPeriod", _wrap_IGazeControl_getSaccadesInhibitionPeriod}, 
    {"getSaccadesActivationAngle", _wrap_IGazeControl_getSaccadesActivationAngle}, 
    {"getLeftEyePose", _wrap_IGazeControl_getLeftEyePose}, 
    {"getRightEyePose", _wrap_IGazeControl_getRightEyePose}, 
    {"getHeadPose", _wrap_IGazeControl_getHeadPose}, 
    {"get2DPixel", _wrap_IGazeControl_get2DPixel}, 
    {"get3DPoint", _wrap_IGazeControl_get3DPoint}, 
    {"get3DPointOnPlane", _wrap_IGazeControl_get3DPointOnPlane}, 
    {"get3DPointFromAngles", _wrap_IGazeControl_get3DPointFromAngles}, 
    {"getAnglesFrom3DPoint", _wrap_IGazeControl_getAnglesFrom3DPoint}, 
    {"triangulate3DPoint", _wrap_IGazeControl_triangulate3DPoint}, 
    {"getJointsDesired", _wrap_IGazeControl_getJointsDesired}, 
    {"getJointsVelocities", _wrap_IGazeControl_getJointsVelocities}, 
    {"getStereoOptions", _wrap_IGazeControl_getStereoOptions}, 
    {"setNeckTrajTime", _wrap_IGazeControl_setNeckTrajTime}, 
    {"setEyesTrajTime", _wrap_IGazeControl_setEyesTrajTime}, 
    {"setVORGain", _wrap_IGazeControl_setVORGain}, 
    {"setOCRGain", _wrap_IGazeControl_setOCRGain}, 
    {"setSaccadesMode", _wrap_IGazeControl_setSaccadesMode}, 
    {"setSaccadesInhibitionPeriod", _wrap_IGazeControl_setSaccadesInhibitionPeriod}, 
    {"setSaccadesActivationAngle", _wrap_IGazeControl_setSaccadesActivationAngle}, 
    {"setStereoOptions", _wrap_IGazeControl_setStereoOptions}, 
    {"bindNeckPitch", _wrap_IGazeControl_bindNeckPitch}, 
    {"blockNeckPitch", _wrap_IGazeControl_blockNeckPitch}, 
    {"bindNeckRoll", _wrap_IGazeControl_bindNeckRoll}, 
    {"blockNeckRoll", _wrap_IGazeControl_blockNeckRoll}, 
    {"bindNeckYaw", _wrap_IGazeControl_bindNeckYaw}, 
    {"blockNeckYaw", _wrap_IGazeControl_blockNeckYaw}, 
    {"blockEyes", _wrap_IGazeControl_blockEyes}, 
    {"getNeckPitchRange", _wrap_IGazeControl_getNeckPitchRange}, 
    {"getNeckRollRange", _wrap_IGazeControl_getNeckRollRange}, 
    {"getNeckYawRange", _wrap_IGazeControl_getNeckYawRange}, 
    {"getBlockedVergence", _wrap_IGazeControl_getBlockedVergence}, 
    {"clearNeckPitch", _wrap_IGazeControl_clearNeckPitch}, 
    {"clearNeckRoll", _wrap_IGazeControl_clearNeckRoll}, 
    {"clearNeckYaw", _wrap_IGazeControl_clearNeckYaw}, 
    {"clearEyes", _wrap_IGazeControl_clearEyes}, 
    {"getNeckAngleUserTolerance", _wrap_IGazeControl_getNeckAngleUserTolerance}, 
    {"setNeckAngleUserTolerance", _wrap_IGazeControl_setNeckAngleUserTolerance}, 
    {"waitMotionDone", _wrap_IGazeControl_waitMotionDone}, 
    {"checkSaccadeDone", _wrap_IGazeControl_checkSaccadeDone}, 
    {"waitSaccadeDone", _wrap_IGazeControl_waitSaccadeDone}, 
    {"stopControl", _wrap_IGazeControl_stopControl}, 
    {"storeContext", _wrap_IGazeControl_storeContext}, 
    {"restoreContext", _wrap_IGazeControl_restoreContext}, 
    {"deleteContext", _wrap_IGazeControl_deleteContext}, 
    {"getInfo", _wrap_IGazeControl_getInfo}, 
    {"registerEvent", _wrap_IGazeControl_registerEvent}, 
    {"unregisterEvent", _wrap_IGazeControl_unregisterEvent}, 
    {"tweakSet", _wrap_IGazeControl_tweakSet}, 
    {"tweakGet", _wrap_IGazeControl_tweakGet}, 
    {"getTrackingMode", _wrap_IGazeControl_getTrackingMode}, 
    {"getNeckTrajTime", _wrap_IGazeControl_getNeckTrajTime}, 
    {"getEyesTrajTime", _wrap_IGazeControl_getEyesTrajTime}, 
    {"checkMotionDone", _wrap_IGazeControl_checkMotionDone}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IGazeControl_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IGazeControl_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IGazeControl_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IGazeControl_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IGazeControl_bases[] = {0};
static const char *swig_yarp_dev_IGazeControl_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IGazeControl = { "IGazeControl", &SWIGTYPE_p_yarp__dev__IGazeControl,0, swig_delete_IGazeControl, swig_yarp_dev_IGazeControl_methods, swig_yarp_dev_IGazeControl_attributes, { "IGazeControl", swig_yarp_dev_IGazeControl_cls_methods, swig_yarp_dev_IGazeControl_cls_attributes, swig_yarp_dev_IGazeControl_cls_constants }, swig_yarp_dev_IGazeControl_bases, swig_yarp_dev_IGazeControl_base_names };

static int _wrap_IPositionControlRaw_getAxes(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::getAxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getAxes",1,"yarp::dev::IPositionControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getAxes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_getAxes",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IPositionControlRaw_getAxes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAxes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_setPositionModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::setPositionModeRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setPositionModeRaw",1,"yarp::dev::IPositionControlRaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_setPositionModeRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  result = (bool)(arg1)->setPositionModeRaw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_positionMoveRaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::positionMoveRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::positionMoveRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::positionMoveRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::positionMoveRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_positionMoveRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->positionMoveRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_positionMoveRaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::positionMoveRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::positionMoveRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::positionMoveRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_positionMoveRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControlRaw_positionMoveRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->positionMoveRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_positionMoveRaw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControlRaw_positionMoveRaw__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IPositionControlRaw_positionMoveRaw__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControlRaw_positionMoveRaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControlRaw::positionMoveRaw(int,double)\n"
    "    yarp::dev::IPositionControlRaw::positionMoveRaw(double const *)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControlRaw_relativeMoveRaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::relativeMoveRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::relativeMoveRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::relativeMoveRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::relativeMoveRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_relativeMoveRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->relativeMoveRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_relativeMoveRaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::relativeMoveRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::relativeMoveRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::relativeMoveRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_relativeMoveRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControlRaw_relativeMoveRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->relativeMoveRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_relativeMoveRaw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControlRaw_relativeMoveRaw__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IPositionControlRaw_relativeMoveRaw__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControlRaw_relativeMoveRaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControlRaw::relativeMoveRaw(int,double)\n"
    "    yarp::dev::IPositionControlRaw::relativeMoveRaw(double const *)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControlRaw_checkMotionDoneRaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::checkMotionDoneRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::checkMotionDoneRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::checkMotionDoneRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::checkMotionDoneRaw",3,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_checkMotionDoneRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("IPositionControlRaw_checkMotionDoneRaw",3,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->checkMotionDoneRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_checkMotionDoneRaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::checkMotionDoneRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::checkMotionDoneRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::checkMotionDoneRaw",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_checkMotionDoneRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("IPositionControlRaw_checkMotionDoneRaw",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->checkMotionDoneRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_checkMotionDoneRaw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControlRaw_checkMotionDoneRaw__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPositionControlRaw_checkMotionDoneRaw__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControlRaw_checkMotionDoneRaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControlRaw::checkMotionDoneRaw(int,bool *)\n"
    "    yarp::dev::IPositionControlRaw::checkMotionDoneRaw(bool *)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControlRaw_setRefSpeedRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::setRefSpeedRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setRefSpeedRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setRefSpeedRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setRefSpeedRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_setRefSpeedRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setRefSpeedRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_setRefSpeedsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::setRefSpeedsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setRefSpeedsRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setRefSpeedsRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_setRefSpeedsRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControlRaw_setRefSpeedsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefSpeedsRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_setRefAccelerationRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::setRefAccelerationRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setRefAccelerationRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setRefAccelerationRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setRefAccelerationRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_setRefAccelerationRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setRefAccelerationRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_setRefAccelerationsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::setRefAccelerationsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setRefAccelerationsRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::setRefAccelerationsRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_setRefAccelerationsRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControlRaw_setRefAccelerationsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefAccelerationsRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_getRefSpeedRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::getRefSpeedRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getRefSpeedRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getRefSpeedRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getRefSpeedRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_getRefSpeedRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControlRaw_getRefSpeedRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefSpeedRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_getRefSpeedsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::getRefSpeedsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getRefSpeedsRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getRefSpeedsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_getRefSpeedsRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControlRaw_getRefSpeedsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefSpeedsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_getRefAccelerationRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::getRefAccelerationRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getRefAccelerationRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getRefAccelerationRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getRefAccelerationRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_getRefAccelerationRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControlRaw_getRefAccelerationRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefAccelerationRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_getRefAccelerationsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::getRefAccelerationsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getRefAccelerationsRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::getRefAccelerationsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_getRefAccelerationsRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControlRaw_getRefAccelerationsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefAccelerationsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_stopRaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::stopRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::stopRaw",1,"yarp::dev::IPositionControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::stopRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_stopRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->stopRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_stopRaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControlRaw::stopRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControlRaw::stopRaw",1,"yarp::dev::IPositionControlRaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControlRaw,0))){
    SWIG_fail_ptr("IPositionControlRaw_stopRaw",1,SWIGTYPE_p_yarp__dev__IPositionControlRaw);
  }
  
  result = (bool)(arg1)->stopRaw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControlRaw_stopRaw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IPositionControlRaw_stopRaw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPositionControlRaw_stopRaw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControlRaw_stopRaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControlRaw::stopRaw(int)\n"
    "    yarp::dev::IPositionControlRaw::stopRaw()\n");
  lua_error(L);return 0;
}


static void swig_delete_IPositionControlRaw(void *obj) {
yarp::dev::IPositionControlRaw *arg1 = (yarp::dev::IPositionControlRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IPositionControlRaw_methods[] = {
    {"getAxes", _wrap_IPositionControlRaw_getAxes}, 
    {"setPositionModeRaw", _wrap_IPositionControlRaw_setPositionModeRaw}, 
    {"positionMoveRaw", _wrap_IPositionControlRaw_positionMoveRaw}, 
    {"relativeMoveRaw", _wrap_IPositionControlRaw_relativeMoveRaw}, 
    {"checkMotionDoneRaw", _wrap_IPositionControlRaw_checkMotionDoneRaw}, 
    {"setRefSpeedRaw", _wrap_IPositionControlRaw_setRefSpeedRaw}, 
    {"setRefSpeedsRaw", _wrap_IPositionControlRaw_setRefSpeedsRaw}, 
    {"setRefAccelerationRaw", _wrap_IPositionControlRaw_setRefAccelerationRaw}, 
    {"setRefAccelerationsRaw", _wrap_IPositionControlRaw_setRefAccelerationsRaw}, 
    {"getRefSpeedRaw", _wrap_IPositionControlRaw_getRefSpeedRaw}, 
    {"getRefSpeedsRaw", _wrap_IPositionControlRaw_getRefSpeedsRaw}, 
    {"getRefAccelerationRaw", _wrap_IPositionControlRaw_getRefAccelerationRaw}, 
    {"getRefAccelerationsRaw", _wrap_IPositionControlRaw_getRefAccelerationsRaw}, 
    {"stopRaw", _wrap_IPositionControlRaw_stopRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IPositionControlRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IPositionControlRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IPositionControlRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IPositionControlRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IPositionControlRaw_bases[] = {0};
static const char *swig_yarp_dev_IPositionControlRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IPositionControlRaw = { "IPositionControlRaw", &SWIGTYPE_p_yarp__dev__IPositionControlRaw,0, swig_delete_IPositionControlRaw, swig_yarp_dev_IPositionControlRaw_methods, swig_yarp_dev_IPositionControlRaw_attributes, { "IPositionControlRaw", swig_yarp_dev_IPositionControlRaw_cls_methods, swig_yarp_dev_IPositionControlRaw_cls_attributes, swig_yarp_dev_IPositionControlRaw_cls_constants }, swig_yarp_dev_IPositionControlRaw_bases, swig_yarp_dev_IPositionControlRaw_base_names };

static int _wrap_IPositionControl_getAxes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::getAxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::getAxes",1,"yarp::dev::IPositionControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::getAxes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_getAxes",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IPositionControl_getAxes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAxes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_setPositionMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::setPositionMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::setPositionMode",1,"yarp::dev::IPositionControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_setPositionMode",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  result = (bool)(arg1)->setPositionMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_positionMove__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::positionMove",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::positionMove",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::positionMove",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPositionControl::positionMove",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_positionMove",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->positionMove(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_positionMove__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::positionMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::positionMove",1,"yarp::dev::IPositionControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::positionMove",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_positionMove",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControl_positionMove",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->positionMove((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_relativeMove__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::relativeMove",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::relativeMove",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::relativeMove",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPositionControl::relativeMove",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_relativeMove",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->relativeMove(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_relativeMove__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::relativeMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::relativeMove",1,"yarp::dev::IPositionControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::relativeMove",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_relativeMove",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControl_relativeMove",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->relativeMove((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_checkMotionDone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::checkMotionDone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",3,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_checkMotionDone",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("IPositionControl_checkMotionDone",3,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->checkMotionDone(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_checkMotionDone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::checkMotionDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",1,"yarp::dev::IPositionControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_checkMotionDone",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("IPositionControl_checkMotionDone",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->checkMotionDone(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_setRefSpeed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::setRefSpeed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefSpeed",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefSpeed",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefSpeed",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_setRefSpeed",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setRefSpeed(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_setRefSpeeds__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::setRefSpeeds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefSpeeds",1,"yarp::dev::IPositionControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefSpeeds",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_setRefSpeeds",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControl_setRefSpeeds",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefSpeeds((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_setRefAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::setRefAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefAcceleration",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefAcceleration",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefAcceleration",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_setRefAcceleration",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setRefAcceleration(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_setRefAccelerations(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::setRefAccelerations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefAccelerations",1,"yarp::dev::IPositionControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefAccelerations",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_setRefAccelerations",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControl_setRefAccelerations",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefAccelerations((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_getRefSpeed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::getRefSpeed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefSpeed",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefSpeed",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefSpeed",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_getRefSpeed",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControl_getRefSpeed",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefSpeed(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_getRefSpeeds__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::getRefSpeeds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefSpeeds",1,"yarp::dev::IPositionControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefSpeeds",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_getRefSpeeds",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControl_getRefSpeeds",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefSpeeds(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_getRefAcceleration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::getRefAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefAcceleration",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefAcceleration",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefAcceleration",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_getRefAcceleration",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControl_getRefAcceleration",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefAcceleration(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_getRefAccelerations__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::getRefAccelerations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefAccelerations",1,"yarp::dev::IPositionControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefAccelerations",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_getRefAccelerations",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IPositionControl_getRefAccelerations",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefAccelerations(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_stop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::stop",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::stop",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_stop",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->stop(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_stop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::stop",1,"yarp::dev::IPositionControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_stop",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  result = (bool)(arg1)->stop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_stop(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IPositionControl_stop__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPositionControl_stop__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_stop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::stop(int)\n"
    "    yarp::dev::IPositionControl::stop()\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControl_getAxes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::getAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::getAxes",1,"yarp::dev::IPositionControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_getAxes",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  result = (int)yarp_dev_IPositionControl_getAxes__SWIG_1(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_getAxes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IPositionControl_getAxes__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_getAxes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_getAxes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::getAxes(int *)\n"
    "    yarp::dev::IPositionControl::getAxes()\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControl_positionMove__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::positionMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::positionMove",1,"yarp::dev::IPositionControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::positionMove",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_positionMove",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPositionControl_positionMove",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPositionControl_positionMove__SWIG_2(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_positionMove(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_positionMove__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_positionMove__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IPositionControl_positionMove__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_positionMove'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::positionMove(int,double)\n"
    "    yarp::dev::IPositionControl::positionMove(double const *)\n"
    "    yarp::dev::IPositionControl::positionMove(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControl_relativeMove__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::relativeMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::relativeMove",1,"yarp::dev::IPositionControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::relativeMove",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_relativeMove",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPositionControl_relativeMove",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPositionControl_relativeMove__SWIG_2(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_relativeMove(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_relativeMove__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_relativeMove__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IPositionControl_relativeMove__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_relativeMove'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::relativeMove(int,double)\n"
    "    yarp::dev::IPositionControl::relativeMove(double const *)\n"
    "    yarp::dev::IPositionControl::relativeMove(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControl_setRefSpeeds__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::setRefSpeeds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefSpeeds",1,"yarp::dev::IPositionControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::setRefSpeeds",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_setRefSpeeds",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPositionControl_setRefSpeeds",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPositionControl_setRefSpeeds__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_setRefSpeeds(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_setRefSpeeds__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_setRefSpeeds__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_setRefSpeeds'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::setRefSpeeds(double const *)\n"
    "    yarp::dev::IPositionControl::setRefSpeeds(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControl_getRefSpeed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::getRefSpeed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefSpeed",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefSpeed",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefSpeed",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_getRefSpeed",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPositionControl_getRefSpeed",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPositionControl_getRefSpeed__SWIG_1(arg1,arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_getRefSpeed(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPositionControl_getRefSpeed__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPositionControl_getRefSpeed__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_getRefSpeed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::getRefSpeed(int,double *)\n"
    "    yarp::dev::IPositionControl::getRefSpeed(int,std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControl_getRefSpeeds__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::getRefSpeeds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefSpeeds",1,"yarp::dev::IPositionControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefSpeeds",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_getRefSpeeds",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPositionControl_getRefSpeeds",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPositionControl_getRefSpeeds__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_getRefSpeeds(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_getRefSpeeds__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_getRefSpeeds__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_getRefSpeeds'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::getRefSpeeds(double *)\n"
    "    yarp::dev::IPositionControl::getRefSpeeds(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControl_getRefAcceleration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::getRefAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefAcceleration",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefAcceleration",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefAcceleration",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_getRefAcceleration",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPositionControl_getRefAcceleration",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPositionControl_getRefAcceleration__SWIG_1(arg1,arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_getRefAcceleration(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPositionControl_getRefAcceleration__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPositionControl_getRefAcceleration__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_getRefAcceleration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::getRefAcceleration(int,double *)\n"
    "    yarp::dev::IPositionControl::getRefAcceleration(int,std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControl_getRefAccelerations__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::getRefAccelerations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefAccelerations",1,"yarp::dev::IPositionControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::getRefAccelerations",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_getRefAccelerations",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IPositionControl_getRefAccelerations",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IPositionControl_getRefAccelerations__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_getRefAccelerations(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_getRefAccelerations__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_getRefAccelerations__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_getRefAccelerations'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::getRefAccelerations(double *)\n"
    "    yarp::dev::IPositionControl::getRefAccelerations(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControl_checkMotionDone__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::checkMotionDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",1,"yarp::dev::IPositionControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_checkMotionDone",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  result = (bool)yarp_dev_IPositionControl_checkMotionDone__SWIG_2(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_checkMotionDone__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::checkMotionDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",1,"yarp::dev::IPositionControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",2,"std::vector< bool > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_checkMotionDone",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("IPositionControl_checkMotionDone",2,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  result = (bool)yarp_dev_IPositionControl_checkMotionDone__SWIG_3(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_checkMotionDone__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::checkMotionDone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IPositionControl::checkMotionDone",3,"std::vector< bool > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_checkMotionDone",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("IPositionControl_checkMotionDone",3,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  result = (bool)yarp_dev_IPositionControl_checkMotionDone__SWIG_4(arg1,arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_checkMotionDone(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IPositionControl_checkMotionDone__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_checkMotionDone__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_bool_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IPositionControl_checkMotionDone__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPositionControl_checkMotionDone__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_bool_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IPositionControl_checkMotionDone__SWIG_4(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_checkMotionDone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::checkMotionDone(int,bool *)\n"
    "    yarp::dev::IPositionControl::checkMotionDone(bool *)\n"
    "    yarp::dev::IPositionControl::checkMotionDone()\n"
    "    yarp::dev::IPositionControl::checkMotionDone(std::vector< bool > &)\n"
    "    yarp::dev::IPositionControl::checkMotionDone(int,std::vector< bool > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IPositionControl_isMotionDone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::isMotionDone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::isMotionDone",1,"yarp::dev::IPositionControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IPositionControl::isMotionDone",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_isMotionDone",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)yarp_dev_IPositionControl_isMotionDone__SWIG_0(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_isMotionDone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IPositionControl::isMotionDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IPositionControl::isMotionDone",1,"yarp::dev::IPositionControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IPositionControl,0))){
    SWIG_fail_ptr("IPositionControl_isMotionDone",1,SWIGTYPE_p_yarp__dev__IPositionControl);
  }
  
  result = (bool)yarp_dev_IPositionControl_isMotionDone__SWIG_1(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IPositionControl_isMotionDone(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IPositionControl_isMotionDone__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IPositionControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IPositionControl_isMotionDone__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IPositionControl_isMotionDone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IPositionControl::isMotionDone(int)\n"
    "    yarp::dev::IPositionControl::isMotionDone()\n");
  lua_error(L);return 0;
}


static void swig_delete_IPositionControl(void *obj) {
yarp::dev::IPositionControl *arg1 = (yarp::dev::IPositionControl *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IPositionControl_methods[] = {
    {"setPositionMode", _wrap_IPositionControl_setPositionMode}, 
    {"setRefSpeed", _wrap_IPositionControl_setRefSpeed}, 
    {"setRefAcceleration", _wrap_IPositionControl_setRefAcceleration}, 
    {"setRefAccelerations", _wrap_IPositionControl_setRefAccelerations}, 
    {"stop", _wrap_IPositionControl_stop}, 
    {"getAxes", _wrap_IPositionControl_getAxes}, 
    {"positionMove", _wrap_IPositionControl_positionMove}, 
    {"relativeMove", _wrap_IPositionControl_relativeMove}, 
    {"setRefSpeeds", _wrap_IPositionControl_setRefSpeeds}, 
    {"getRefSpeed", _wrap_IPositionControl_getRefSpeed}, 
    {"getRefSpeeds", _wrap_IPositionControl_getRefSpeeds}, 
    {"getRefAcceleration", _wrap_IPositionControl_getRefAcceleration}, 
    {"getRefAccelerations", _wrap_IPositionControl_getRefAccelerations}, 
    {"checkMotionDone", _wrap_IPositionControl_checkMotionDone}, 
    {"isMotionDone", _wrap_IPositionControl_isMotionDone}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IPositionControl_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IPositionControl_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IPositionControl_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IPositionControl_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IPositionControl_bases[] = {0};
static const char *swig_yarp_dev_IPositionControl_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IPositionControl = { "IPositionControl", &SWIGTYPE_p_yarp__dev__IPositionControl,0, swig_delete_IPositionControl, swig_yarp_dev_IPositionControl_methods, swig_yarp_dev_IPositionControl_attributes, { "IPositionControl", swig_yarp_dev_IPositionControl_cls_methods, swig_yarp_dev_IPositionControl_cls_attributes, swig_yarp_dev_IPositionControl_cls_constants }, swig_yarp_dev_IPositionControl_bases, swig_yarp_dev_IPositionControl_base_names };

static int _wrap_IEncodersRaw_getAxes(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::getAxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getAxes",1,"yarp::dev::IEncodersRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getAxes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_getAxes",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IEncodersRaw_getAxes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAxes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncodersRaw_resetEncoderRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::resetEncoderRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::resetEncoderRaw",1,"yarp::dev::IEncodersRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncodersRaw::resetEncoderRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_resetEncoderRaw",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->resetEncoderRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncodersRaw_resetEncodersRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::resetEncodersRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::resetEncodersRaw",1,"yarp::dev::IEncodersRaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_resetEncodersRaw",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  result = (bool)(arg1)->resetEncodersRaw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncodersRaw_setEncoderRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::setEncoderRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::setEncoderRaw",1,"yarp::dev::IEncodersRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncodersRaw::setEncoderRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IEncodersRaw::setEncoderRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_setEncoderRaw",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setEncoderRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncodersRaw_setEncodersRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::setEncodersRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::setEncodersRaw",1,"yarp::dev::IEncodersRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IEncodersRaw::setEncodersRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_setEncodersRaw",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncodersRaw_setEncodersRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setEncodersRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncodersRaw_getEncoderRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::getEncoderRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderRaw",1,"yarp::dev::IEncodersRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncoderRaw",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncoderRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoderRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncodersRaw_getEncodersRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::getEncodersRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncodersRaw",1,"yarp::dev::IEncodersRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncodersRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncodersRaw",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncodersRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncodersRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncodersRaw_getEncoderSpeedRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::getEncoderSpeedRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderSpeedRaw",1,"yarp::dev::IEncodersRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderSpeedRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderSpeedRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncoderSpeedRaw",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncoderSpeedRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoderSpeedRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncodersRaw_getEncoderSpeedsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::getEncoderSpeedsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderSpeedsRaw",1,"yarp::dev::IEncodersRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderSpeedsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncoderSpeedsRaw",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncoderSpeedsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoderSpeedsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncodersRaw_getEncoderAccelerationRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::getEncoderAccelerationRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderAccelerationRaw",1,"yarp::dev::IEncodersRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderAccelerationRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderAccelerationRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncoderAccelerationRaw",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncoderAccelerationRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoderAccelerationRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncodersRaw_getEncoderAccelerationsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncodersRaw::getEncoderAccelerationsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderAccelerationsRaw",1,"yarp::dev::IEncodersRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IEncodersRaw::getEncoderAccelerationsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncodersRaw,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncoderAccelerationsRaw",1,SWIGTYPE_p_yarp__dev__IEncodersRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncodersRaw_getEncoderAccelerationsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoderAccelerationsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IEncodersRaw(void *obj) {
yarp::dev::IEncodersRaw *arg1 = (yarp::dev::IEncodersRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IEncodersRaw_methods[] = {
    {"getAxes", _wrap_IEncodersRaw_getAxes}, 
    {"resetEncoderRaw", _wrap_IEncodersRaw_resetEncoderRaw}, 
    {"resetEncodersRaw", _wrap_IEncodersRaw_resetEncodersRaw}, 
    {"setEncoderRaw", _wrap_IEncodersRaw_setEncoderRaw}, 
    {"setEncodersRaw", _wrap_IEncodersRaw_setEncodersRaw}, 
    {"getEncoderRaw", _wrap_IEncodersRaw_getEncoderRaw}, 
    {"getEncodersRaw", _wrap_IEncodersRaw_getEncodersRaw}, 
    {"getEncoderSpeedRaw", _wrap_IEncodersRaw_getEncoderSpeedRaw}, 
    {"getEncoderSpeedsRaw", _wrap_IEncodersRaw_getEncoderSpeedsRaw}, 
    {"getEncoderAccelerationRaw", _wrap_IEncodersRaw_getEncoderAccelerationRaw}, 
    {"getEncoderAccelerationsRaw", _wrap_IEncodersRaw_getEncoderAccelerationsRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IEncodersRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IEncodersRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IEncodersRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IEncodersRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IEncodersRaw_bases[] = {0};
static const char *swig_yarp_dev_IEncodersRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IEncodersRaw = { "IEncodersRaw", &SWIGTYPE_p_yarp__dev__IEncodersRaw,0, swig_delete_IEncodersRaw, swig_yarp_dev_IEncodersRaw_methods, swig_yarp_dev_IEncodersRaw_attributes, { "IEncodersRaw", swig_yarp_dev_IEncodersRaw_cls_methods, swig_yarp_dev_IEncodersRaw_cls_attributes, swig_yarp_dev_IEncodersRaw_cls_constants }, swig_yarp_dev_IEncodersRaw_bases, swig_yarp_dev_IEncodersRaw_base_names };

static int _wrap_IEncoders_getAxes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getAxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getAxes",1,"yarp::dev::IEncoders *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getAxes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getAxes",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IEncoders_getAxes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAxes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_resetEncoder(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::resetEncoder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::resetEncoder",1,"yarp::dev::IEncoders *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::resetEncoder",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_resetEncoder",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->resetEncoder(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_resetEncoders(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::resetEncoders",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::resetEncoders",1,"yarp::dev::IEncoders *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_resetEncoders",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  result = (bool)(arg1)->resetEncoders();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_setEncoder(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::setEncoder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::setEncoder",1,"yarp::dev::IEncoders *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::setEncoder",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IEncoders::setEncoder",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_setEncoder",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setEncoder(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_setEncoders__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::setEncoders",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::setEncoders",1,"yarp::dev::IEncoders *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::setEncoders",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_setEncoders",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncoders_setEncoders",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setEncoders((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoder",1,"yarp::dev::IEncoders *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoder",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoder",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoder",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncoders_getEncoder",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoder(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoders__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoders",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoders",1,"yarp::dev::IEncoders *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoders",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoders",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncoders_getEncoders",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoders(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoderSpeed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoderSpeed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderSpeed",1,"yarp::dev::IEncoders *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderSpeed",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderSpeed",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoderSpeed",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncoders_getEncoderSpeed",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoderSpeed(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoderSpeeds__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoderSpeeds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderSpeeds",1,"yarp::dev::IEncoders *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderSpeeds",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoderSpeeds",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncoders_getEncoderSpeeds",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoderSpeeds(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoderAcceleration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoderAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderAcceleration",1,"yarp::dev::IEncoders *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderAcceleration",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderAcceleration",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoderAcceleration",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncoders_getEncoderAcceleration",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoderAcceleration(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoderAccelerations__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoderAccelerations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderAccelerations",1,"yarp::dev::IEncoders *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderAccelerations",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoderAccelerations",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IEncoders_getEncoderAccelerations",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getEncoderAccelerations(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getAxes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getAxes",1,"yarp::dev::IEncoders *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getAxes",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  result = (int)yarp_dev_IEncoders_getAxes__SWIG_1(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getAxes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IEncoders_getAxes__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IEncoders_getAxes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IEncoders_getAxes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IEncoders::getAxes(int *)\n"
    "    yarp::dev::IEncoders::getAxes()\n");
  lua_error(L);return 0;
}


static int _wrap_IEncoders_setEncoders__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::setEncoders",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::setEncoders",1,"yarp::dev::IEncoders *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::setEncoders",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_setEncoders",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IEncoders_setEncoders",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IEncoders_setEncoders__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_setEncoders(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IEncoders_setEncoders__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IEncoders_setEncoders__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IEncoders_setEncoders'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IEncoders::setEncoders(double const *)\n"
    "    yarp::dev::IEncoders::setEncoders(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IEncoders_getEncoder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoder",1,"yarp::dev::IEncoders *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoder",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoder",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)yarp_dev_IEncoders_getEncoder__SWIG_1(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoder(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IEncoders_getEncoder__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IEncoders_getEncoder__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IEncoders_getEncoder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IEncoders::getEncoder(int,double *)\n"
    "    yarp::dev::IEncoders::getEncoder(int)\n");
  lua_error(L);return 0;
}


static int _wrap_IEncoders_getEncoders__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoders",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoders",1,"yarp::dev::IEncoders *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoders",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoders",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IEncoders_getEncoders",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IEncoders_getEncoders__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoders(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IEncoders_getEncoders__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IEncoders_getEncoders__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IEncoders_getEncoders'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IEncoders::getEncoders(double *)\n"
    "    yarp::dev::IEncoders::getEncoders(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IEncoders_getEncoderSpeed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoderSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderSpeed",1,"yarp::dev::IEncoders *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderSpeed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoderSpeed",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)yarp_dev_IEncoders_getEncoderSpeed__SWIG_1(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoderSpeed(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IEncoders_getEncoderSpeed__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IEncoders_getEncoderSpeed__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IEncoders_getEncoderSpeed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IEncoders::getEncoderSpeed(int,double *)\n"
    "    yarp::dev::IEncoders::getEncoderSpeed(int)\n");
  lua_error(L);return 0;
}


static int _wrap_IEncoders_getEncoderSpeeds__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoderSpeeds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderSpeeds",1,"yarp::dev::IEncoders *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderSpeeds",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoderSpeeds",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IEncoders_getEncoderSpeeds",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IEncoders_getEncoderSpeeds__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoderSpeeds(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IEncoders_getEncoderSpeeds__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IEncoders_getEncoderSpeeds__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IEncoders_getEncoderSpeeds'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IEncoders::getEncoderSpeeds(double *)\n"
    "    yarp::dev::IEncoders::getEncoderSpeeds(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IEncoders_getEncoderAcceleration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoderAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderAcceleration",1,"yarp::dev::IEncoders *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderAcceleration",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoderAcceleration",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)yarp_dev_IEncoders_getEncoderAcceleration__SWIG_1(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoderAcceleration(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IEncoders_getEncoderAcceleration__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IEncoders_getEncoderAcceleration__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IEncoders_getEncoderAcceleration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IEncoders::getEncoderAcceleration(int,double *)\n"
    "    yarp::dev::IEncoders::getEncoderAcceleration(int)\n");
  lua_error(L);return 0;
}


static int _wrap_IEncoders_getEncoderAccelerations__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IEncoders::getEncoderAccelerations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderAccelerations",1,"yarp::dev::IEncoders *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IEncoders::getEncoderAccelerations",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IEncoders,0))){
    SWIG_fail_ptr("IEncoders_getEncoderAccelerations",1,SWIGTYPE_p_yarp__dev__IEncoders);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IEncoders_getEncoderAccelerations",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IEncoders_getEncoderAccelerations__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEncoders_getEncoderAccelerations(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IEncoders_getEncoderAccelerations__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IEncoders, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IEncoders_getEncoderAccelerations__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IEncoders_getEncoderAccelerations'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IEncoders::getEncoderAccelerations(double *)\n"
    "    yarp::dev::IEncoders::getEncoderAccelerations(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_IEncoders(void *obj) {
yarp::dev::IEncoders *arg1 = (yarp::dev::IEncoders *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IEncoders_methods[] = {
    {"resetEncoder", _wrap_IEncoders_resetEncoder}, 
    {"resetEncoders", _wrap_IEncoders_resetEncoders}, 
    {"setEncoder", _wrap_IEncoders_setEncoder}, 
    {"getAxes", _wrap_IEncoders_getAxes}, 
    {"setEncoders", _wrap_IEncoders_setEncoders}, 
    {"getEncoder", _wrap_IEncoders_getEncoder}, 
    {"getEncoders", _wrap_IEncoders_getEncoders}, 
    {"getEncoderSpeed", _wrap_IEncoders_getEncoderSpeed}, 
    {"getEncoderSpeeds", _wrap_IEncoders_getEncoderSpeeds}, 
    {"getEncoderAcceleration", _wrap_IEncoders_getEncoderAcceleration}, 
    {"getEncoderAccelerations", _wrap_IEncoders_getEncoderAccelerations}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IEncoders_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IEncoders_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IEncoders_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IEncoders_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IEncoders_bases[] = {0};
static const char *swig_yarp_dev_IEncoders_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IEncoders = { "IEncoders", &SWIGTYPE_p_yarp__dev__IEncoders,0, swig_delete_IEncoders, swig_yarp_dev_IEncoders_methods, swig_yarp_dev_IEncoders_attributes, { "IEncoders", swig_yarp_dev_IEncoders_cls_methods, swig_yarp_dev_IEncoders_cls_attributes, swig_yarp_dev_IEncoders_cls_constants }, swig_yarp_dev_IEncoders_bases, swig_yarp_dev_IEncoders_base_names };

static int _wrap_ICalibrator_calibrate(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICalibrator::calibrate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICalibrator::calibrate",1,"yarp::dev::ICalibrator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ICalibrator::calibrate",2,"yarp::dev::DeviceDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICalibrator,0))){
    SWIG_fail_ptr("ICalibrator_calibrate",1,SWIGTYPE_p_yarp__dev__ICalibrator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__DeviceDriver,0))){
    SWIG_fail_ptr("ICalibrator_calibrate",2,SWIGTYPE_p_yarp__dev__DeviceDriver);
  }
  
  result = (bool)(arg1)->calibrate(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICalibrator_park__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICalibrator::park",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICalibrator::park",1,"yarp::dev::ICalibrator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ICalibrator::park",2,"yarp::dev::DeviceDriver *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::dev::ICalibrator::park",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICalibrator,0))){
    SWIG_fail_ptr("ICalibrator_park",1,SWIGTYPE_p_yarp__dev__ICalibrator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__DeviceDriver,0))){
    SWIG_fail_ptr("ICalibrator_park",2,SWIGTYPE_p_yarp__dev__DeviceDriver);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->park(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICalibrator_park__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  yarp::dev::DeviceDriver *arg2 = (yarp::dev::DeviceDriver *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICalibrator::park",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICalibrator::park",1,"yarp::dev::ICalibrator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ICalibrator::park",2,"yarp::dev::DeviceDriver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICalibrator,0))){
    SWIG_fail_ptr("ICalibrator_park",1,SWIGTYPE_p_yarp__dev__ICalibrator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__DeviceDriver,0))){
    SWIG_fail_ptr("ICalibrator_park",2,SWIGTYPE_p_yarp__dev__DeviceDriver);
  }
  
  result = (bool)(arg1)->park(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICalibrator_park(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICalibrator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__dev__DeviceDriver, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ICalibrator_park__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ICalibrator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__dev__DeviceDriver, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ICalibrator_park__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ICalibrator_park'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ICalibrator::park(yarp::dev::DeviceDriver *,bool)\n"
    "    yarp::dev::ICalibrator::park(yarp::dev::DeviceDriver *)\n");
  lua_error(L);return 0;
}


static int _wrap_ICalibrator_quitCalibrate(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICalibrator::quitCalibrate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICalibrator::quitCalibrate",1,"yarp::dev::ICalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICalibrator,0))){
    SWIG_fail_ptr("ICalibrator_quitCalibrate",1,SWIGTYPE_p_yarp__dev__ICalibrator);
  }
  
  result = (bool)(arg1)->quitCalibrate();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ICalibrator_quitPark(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ICalibrator::quitPark",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ICalibrator::quitPark",1,"yarp::dev::ICalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ICalibrator,0))){
    SWIG_fail_ptr("ICalibrator_quitPark",1,SWIGTYPE_p_yarp__dev__ICalibrator);
  }
  
  result = (bool)(arg1)->quitPark();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ICalibrator(void *obj) {
yarp::dev::ICalibrator *arg1 = (yarp::dev::ICalibrator *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_ICalibrator_methods[] = {
    {"calibrate", _wrap_ICalibrator_calibrate}, 
    {"park", _wrap_ICalibrator_park}, 
    {"quitCalibrate", _wrap_ICalibrator_quitCalibrate}, 
    {"quitPark", _wrap_ICalibrator_quitPark}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_ICalibrator_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_ICalibrator_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_ICalibrator_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_ICalibrator_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_ICalibrator_bases[] = {0};
static const char *swig_yarp_dev_ICalibrator_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_ICalibrator = { "ICalibrator", &SWIGTYPE_p_yarp__dev__ICalibrator,0, swig_delete_ICalibrator, swig_yarp_dev_ICalibrator_methods, swig_yarp_dev_ICalibrator_attributes, { "ICalibrator", swig_yarp_dev_ICalibrator_cls_methods, swig_yarp_dev_ICalibrator_cls_attributes, swig_yarp_dev_ICalibrator_cls_constants }, swig_yarp_dev_ICalibrator_bases, swig_yarp_dev_ICalibrator_base_names };

static int _wrap_IRemoteCalibrator_setCalibratorDevice(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  yarp::dev::IRemoteCalibrator *arg2 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::setCalibratorDevice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::setCalibratorDevice",1,"yarp::dev::IRemoteCalibrator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::setCalibratorDevice",2,"yarp::dev::IRemoteCalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_setCalibratorDevice",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_setCalibratorDevice",2,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  result = (bool)(arg1)->setCalibratorDevice(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_getCalibratorDevice(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  yarp::dev::IRemoteCalibrator *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::getCalibratorDevice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::getCalibratorDevice",1,"yarp::dev::IRemoteCalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_getCalibratorDevice",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  result = (yarp::dev::IRemoteCalibrator *)(arg1)->getCalibratorDevice();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_isCalibratorDevicePresent(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::isCalibratorDevicePresent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::isCalibratorDevicePresent",1,"yarp::dev::IRemoteCalibrator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::isCalibratorDevicePresent",2,"bool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_isCalibratorDevicePresent",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("IRemoteCalibrator_isCalibratorDevicePresent",2,SWIGTYPE_p_bool);
  }
  
  result = (bool)(arg1)->isCalibratorDevicePresent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_releaseCalibratorDevice(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::releaseCalibratorDevice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::releaseCalibratorDevice",1,"yarp::dev::IRemoteCalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_releaseCalibratorDevice",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  (arg1)->releaseCalibratorDevice();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_calibrateSingleJoint(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::calibrateSingleJoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::calibrateSingleJoint",1,"yarp::dev::IRemoteCalibrator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::calibrateSingleJoint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_calibrateSingleJoint",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->calibrateSingleJoint(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_calibrateWholePart(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::calibrateWholePart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::calibrateWholePart",1,"yarp::dev::IRemoteCalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_calibrateWholePart",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  result = (bool)(arg1)->calibrateWholePart();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_homingSingleJoint(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::homingSingleJoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::homingSingleJoint",1,"yarp::dev::IRemoteCalibrator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::homingSingleJoint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_homingSingleJoint",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->homingSingleJoint(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_homingWholePart(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::homingWholePart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::homingWholePart",1,"yarp::dev::IRemoteCalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_homingWholePart",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  result = (bool)(arg1)->homingWholePart();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_parkSingleJoint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::parkSingleJoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::parkSingleJoint",1,"yarp::dev::IRemoteCalibrator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::parkSingleJoint",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::parkSingleJoint",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_parkSingleJoint",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->parkSingleJoint(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_parkSingleJoint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::parkSingleJoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::parkSingleJoint",1,"yarp::dev::IRemoteCalibrator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::parkSingleJoint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_parkSingleJoint",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->parkSingleJoint(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_parkSingleJoint(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IRemoteCalibrator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IRemoteCalibrator_parkSingleJoint__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IRemoteCalibrator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_IRemoteCalibrator_parkSingleJoint__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IRemoteCalibrator_parkSingleJoint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IRemoteCalibrator::parkSingleJoint(int,bool)\n"
    "    yarp::dev::IRemoteCalibrator::parkSingleJoint(int)\n");
  lua_error(L);return 0;
}


static int _wrap_IRemoteCalibrator_parkWholePart(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::parkWholePart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::parkWholePart",1,"yarp::dev::IRemoteCalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_parkWholePart",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  result = (bool)(arg1)->parkWholePart();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_quitCalibrate(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::quitCalibrate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::quitCalibrate",1,"yarp::dev::IRemoteCalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_quitCalibrate",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  result = (bool)(arg1)->quitCalibrate();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRemoteCalibrator_quitPark(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IRemoteCalibrator::quitPark",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IRemoteCalibrator::quitPark",1,"yarp::dev::IRemoteCalibrator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0))){
    SWIG_fail_ptr("IRemoteCalibrator_quitPark",1,SWIGTYPE_p_yarp__dev__IRemoteCalibrator);
  }
  
  result = (bool)(arg1)->quitPark();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IRemoteCalibrator(void *obj) {
yarp::dev::IRemoteCalibrator *arg1 = (yarp::dev::IRemoteCalibrator *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IRemoteCalibrator_methods[] = {
    {"setCalibratorDevice", _wrap_IRemoteCalibrator_setCalibratorDevice}, 
    {"getCalibratorDevice", _wrap_IRemoteCalibrator_getCalibratorDevice}, 
    {"isCalibratorDevicePresent", _wrap_IRemoteCalibrator_isCalibratorDevicePresent}, 
    {"releaseCalibratorDevice", _wrap_IRemoteCalibrator_releaseCalibratorDevice}, 
    {"calibrateSingleJoint", _wrap_IRemoteCalibrator_calibrateSingleJoint}, 
    {"calibrateWholePart", _wrap_IRemoteCalibrator_calibrateWholePart}, 
    {"homingSingleJoint", _wrap_IRemoteCalibrator_homingSingleJoint}, 
    {"homingWholePart", _wrap_IRemoteCalibrator_homingWholePart}, 
    {"parkSingleJoint", _wrap_IRemoteCalibrator_parkSingleJoint}, 
    {"parkWholePart", _wrap_IRemoteCalibrator_parkWholePart}, 
    {"quitCalibrate", _wrap_IRemoteCalibrator_quitCalibrate}, 
    {"quitPark", _wrap_IRemoteCalibrator_quitPark}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IRemoteCalibrator_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IRemoteCalibrator_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IRemoteCalibrator_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IRemoteCalibrator_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IRemoteCalibrator_bases[] = {0};
static const char *swig_yarp_dev_IRemoteCalibrator_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IRemoteCalibrator = { "IRemoteCalibrator", &SWIGTYPE_p_yarp__dev__IRemoteCalibrator,0, swig_delete_IRemoteCalibrator, swig_yarp_dev_IRemoteCalibrator_methods, swig_yarp_dev_IRemoteCalibrator_attributes, { "IRemoteCalibrator", swig_yarp_dev_IRemoteCalibrator_cls_methods, swig_yarp_dev_IRemoteCalibrator_cls_attributes, swig_yarp_dev_IRemoteCalibrator_cls_constants }, swig_yarp_dev_IRemoteCalibrator_bases, swig_yarp_dev_IRemoteCalibrator_base_names };

static int _wrap_IControlMode_setPositionMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlMode::setPositionMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlMode::setPositionMode",1,"yarp::dev::IControlMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlMode::setPositionMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlMode,0))){
    SWIG_fail_ptr("IControlMode_setPositionMode",1,SWIGTYPE_p_yarp__dev__IControlMode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setPositionMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlMode_setVelocityMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlMode::setVelocityMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlMode::setVelocityMode",1,"yarp::dev::IControlMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlMode::setVelocityMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlMode,0))){
    SWIG_fail_ptr("IControlMode_setVelocityMode",1,SWIGTYPE_p_yarp__dev__IControlMode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setVelocityMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlMode_setTorqueMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlMode::setTorqueMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlMode::setTorqueMode",1,"yarp::dev::IControlMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlMode::setTorqueMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlMode,0))){
    SWIG_fail_ptr("IControlMode_setTorqueMode",1,SWIGTYPE_p_yarp__dev__IControlMode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setTorqueMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlMode_setImpedancePositionMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlMode::setImpedancePositionMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlMode::setImpedancePositionMode",1,"yarp::dev::IControlMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlMode::setImpedancePositionMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlMode,0))){
    SWIG_fail_ptr("IControlMode_setImpedancePositionMode",1,SWIGTYPE_p_yarp__dev__IControlMode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setImpedancePositionMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlMode_setImpedanceVelocityMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlMode::setImpedanceVelocityMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlMode::setImpedanceVelocityMode",1,"yarp::dev::IControlMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlMode::setImpedanceVelocityMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlMode,0))){
    SWIG_fail_ptr("IControlMode_setImpedanceVelocityMode",1,SWIGTYPE_p_yarp__dev__IControlMode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setImpedanceVelocityMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlMode_setOpenLoopMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlMode::setOpenLoopMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlMode::setOpenLoopMode",1,"yarp::dev::IControlMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlMode::setOpenLoopMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlMode,0))){
    SWIG_fail_ptr("IControlMode_setOpenLoopMode",1,SWIGTYPE_p_yarp__dev__IControlMode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setOpenLoopMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlMode_getControlMode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlMode::getControlMode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlMode::getControlMode",1,"yarp::dev::IControlMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlMode::getControlMode",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IControlMode::getControlMode",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlMode,0))){
    SWIG_fail_ptr("IControlMode_getControlMode",1,SWIGTYPE_p_yarp__dev__IControlMode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IControlMode_getControlMode",3,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getControlMode(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlMode_getControlModes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlMode::getControlModes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlMode::getControlModes",1,"yarp::dev::IControlMode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IControlMode::getControlModes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlMode,0))){
    SWIG_fail_ptr("IControlMode_getControlModes",1,SWIGTYPE_p_yarp__dev__IControlMode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IControlMode_getControlModes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getControlModes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlMode_getControlMode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IControlMode::getControlMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlMode::getControlMode",1,"yarp::dev::IControlMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlMode::getControlMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlMode,0))){
    SWIG_fail_ptr("IControlMode_getControlMode",1,SWIGTYPE_p_yarp__dev__IControlMode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)yarp_dev_IControlMode_getControlMode__SWIG_1(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlMode_getControlMode(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlMode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IControlMode_getControlMode__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlMode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IControlMode_getControlMode__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IControlMode_getControlMode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IControlMode::getControlMode(int,int *)\n"
    "    yarp::dev::IControlMode::getControlMode(int)\n");
  lua_error(L);return 0;
}


static int _wrap_IControlMode_getControlModes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) 0 ;
  std::vector< int > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlMode::getControlModes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlMode::getControlModes",1,"yarp::dev::IControlMode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IControlMode::getControlModes",2,"std::vector< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlMode,0))){
    SWIG_fail_ptr("IControlMode_getControlModes",1,SWIGTYPE_p_yarp__dev__IControlMode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IControlMode_getControlModes",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (bool)yarp_dev_IControlMode_getControlModes__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlMode_getControlModes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlMode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IControlMode_getControlModes__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IControlMode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IControlMode_getControlModes__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IControlMode_getControlModes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IControlMode::getControlModes(int *)\n"
    "    yarp::dev::IControlMode::getControlModes(std::vector< int > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_IControlMode(void *obj) {
yarp::dev::IControlMode *arg1 = (yarp::dev::IControlMode *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IControlMode_methods[] = {
    {"setPositionMode", _wrap_IControlMode_setPositionMode}, 
    {"setVelocityMode", _wrap_IControlMode_setVelocityMode}, 
    {"setTorqueMode", _wrap_IControlMode_setTorqueMode}, 
    {"setImpedancePositionMode", _wrap_IControlMode_setImpedancePositionMode}, 
    {"setImpedanceVelocityMode", _wrap_IControlMode_setImpedanceVelocityMode}, 
    {"setOpenLoopMode", _wrap_IControlMode_setOpenLoopMode}, 
    {"getControlMode", _wrap_IControlMode_getControlMode}, 
    {"getControlModes", _wrap_IControlMode_getControlModes}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlMode_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlMode_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IControlMode_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IControlMode_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IControlMode_bases[] = {0};
static const char *swig_yarp_dev_IControlMode_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IControlMode = { "IControlMode", &SWIGTYPE_p_yarp__dev__IControlMode,0, swig_delete_IControlMode, swig_yarp_dev_IControlMode_methods, swig_yarp_dev_IControlMode_attributes, { "IControlMode", swig_yarp_dev_IControlMode_cls_methods, swig_yarp_dev_IControlMode_cls_attributes, swig_yarp_dev_IControlMode_cls_constants }, swig_yarp_dev_IControlMode_bases, swig_yarp_dev_IControlMode_base_names };

static int _wrap_IControlModeRaw_setPositionModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlModeRaw::setPositionModeRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setPositionModeRaw",1,"yarp::dev::IControlModeRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setPositionModeRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlModeRaw,0))){
    SWIG_fail_ptr("IControlModeRaw_setPositionModeRaw",1,SWIGTYPE_p_yarp__dev__IControlModeRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setPositionModeRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlModeRaw_setVelocityModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlModeRaw::setVelocityModeRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setVelocityModeRaw",1,"yarp::dev::IControlModeRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setVelocityModeRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlModeRaw,0))){
    SWIG_fail_ptr("IControlModeRaw_setVelocityModeRaw",1,SWIGTYPE_p_yarp__dev__IControlModeRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setVelocityModeRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlModeRaw_setTorqueModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlModeRaw::setTorqueModeRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setTorqueModeRaw",1,"yarp::dev::IControlModeRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setTorqueModeRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlModeRaw,0))){
    SWIG_fail_ptr("IControlModeRaw_setTorqueModeRaw",1,SWIGTYPE_p_yarp__dev__IControlModeRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setTorqueModeRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlModeRaw_setImpedancePositionModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlModeRaw::setImpedancePositionModeRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setImpedancePositionModeRaw",1,"yarp::dev::IControlModeRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setImpedancePositionModeRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlModeRaw,0))){
    SWIG_fail_ptr("IControlModeRaw_setImpedancePositionModeRaw",1,SWIGTYPE_p_yarp__dev__IControlModeRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setImpedancePositionModeRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlModeRaw_setImpedanceVelocityModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlModeRaw::setImpedanceVelocityModeRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setImpedanceVelocityModeRaw",1,"yarp::dev::IControlModeRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setImpedanceVelocityModeRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlModeRaw,0))){
    SWIG_fail_ptr("IControlModeRaw_setImpedanceVelocityModeRaw",1,SWIGTYPE_p_yarp__dev__IControlModeRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setImpedanceVelocityModeRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlModeRaw_setOpenLoopModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlModeRaw::setOpenLoopModeRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setOpenLoopModeRaw",1,"yarp::dev::IControlModeRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlModeRaw::setOpenLoopModeRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlModeRaw,0))){
    SWIG_fail_ptr("IControlModeRaw_setOpenLoopModeRaw",1,SWIGTYPE_p_yarp__dev__IControlModeRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setOpenLoopModeRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlModeRaw_getControlModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlModeRaw::getControlModeRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlModeRaw::getControlModeRaw",1,"yarp::dev::IControlModeRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IControlModeRaw::getControlModeRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IControlModeRaw::getControlModeRaw",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlModeRaw,0))){
    SWIG_fail_ptr("IControlModeRaw_getControlModeRaw",1,SWIGTYPE_p_yarp__dev__IControlModeRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IControlModeRaw_getControlModeRaw",3,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getControlModeRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IControlModeRaw_getControlModesRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IControlModeRaw::getControlModesRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IControlModeRaw::getControlModesRaw",1,"yarp::dev::IControlModeRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IControlModeRaw::getControlModesRaw",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IControlModeRaw,0))){
    SWIG_fail_ptr("IControlModeRaw_getControlModesRaw",1,SWIGTYPE_p_yarp__dev__IControlModeRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IControlModeRaw_getControlModesRaw",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getControlModesRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IControlModeRaw(void *obj) {
yarp::dev::IControlModeRaw *arg1 = (yarp::dev::IControlModeRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IControlModeRaw_methods[] = {
    {"setPositionModeRaw", _wrap_IControlModeRaw_setPositionModeRaw}, 
    {"setVelocityModeRaw", _wrap_IControlModeRaw_setVelocityModeRaw}, 
    {"setTorqueModeRaw", _wrap_IControlModeRaw_setTorqueModeRaw}, 
    {"setImpedancePositionModeRaw", _wrap_IControlModeRaw_setImpedancePositionModeRaw}, 
    {"setImpedanceVelocityModeRaw", _wrap_IControlModeRaw_setImpedanceVelocityModeRaw}, 
    {"setOpenLoopModeRaw", _wrap_IControlModeRaw_setOpenLoopModeRaw}, 
    {"getControlModeRaw", _wrap_IControlModeRaw_getControlModeRaw}, 
    {"getControlModesRaw", _wrap_IControlModeRaw_getControlModesRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlModeRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IControlModeRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IControlModeRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IControlModeRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IControlModeRaw_bases[] = {0};
static const char *swig_yarp_dev_IControlModeRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IControlModeRaw = { "IControlModeRaw", &SWIGTYPE_p_yarp__dev__IControlModeRaw,0, swig_delete_IControlModeRaw, swig_yarp_dev_IControlModeRaw_methods, swig_yarp_dev_IControlModeRaw_attributes, { "IControlModeRaw", swig_yarp_dev_IControlModeRaw_cls_methods, swig_yarp_dev_IControlModeRaw_cls_attributes, swig_yarp_dev_IControlModeRaw_cls_constants }, swig_yarp_dev_IControlModeRaw_bases, swig_yarp_dev_IControlModeRaw_base_names };

static int _wrap_MotorTorqueParameters_bemf_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::MotorTorqueParameters::bemf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::bemf",1,"yarp::dev::MotorTorqueParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::bemf",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("MotorTorqueParameters_bemf_set",1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->bemf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorTorqueParameters_bemf_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::MotorTorqueParameters::bemf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::bemf",1,"yarp::dev::MotorTorqueParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("MotorTorqueParameters_bemf_get",1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  
  result = (double) ((arg1)->bemf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorTorqueParameters_bemf_scale_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::MotorTorqueParameters::bemf_scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::bemf_scale",1,"yarp::dev::MotorTorqueParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::bemf_scale",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("MotorTorqueParameters_bemf_scale_set",1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->bemf_scale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorTorqueParameters_bemf_scale_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::MotorTorqueParameters::bemf_scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::bemf_scale",1,"yarp::dev::MotorTorqueParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("MotorTorqueParameters_bemf_scale_get",1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  
  result = (double) ((arg1)->bemf_scale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorTorqueParameters_ktau_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::MotorTorqueParameters::ktau",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::ktau",1,"yarp::dev::MotorTorqueParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::ktau",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("MotorTorqueParameters_ktau_set",1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->ktau = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorTorqueParameters_ktau_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::MotorTorqueParameters::ktau",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::ktau",1,"yarp::dev::MotorTorqueParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("MotorTorqueParameters_ktau_get",1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  
  result = (double) ((arg1)->ktau);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorTorqueParameters_ktau_scale_set(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::dev::MotorTorqueParameters::ktau_scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::ktau_scale",1,"yarp::dev::MotorTorqueParameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::ktau_scale",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("MotorTorqueParameters_ktau_scale_set",1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->ktau_scale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorTorqueParameters_ktau_scale_get(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) 0 ;
  double result;
  
  SWIG_check_num_args("yarp::dev::MotorTorqueParameters::ktau_scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::MotorTorqueParameters::ktau_scale",1,"yarp::dev::MotorTorqueParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("MotorTorqueParameters_ktau_scale_get",1,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  
  result = (double) ((arg1)->ktau_scale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MotorTorqueParameters(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::MotorTorqueParameters *result = 0 ;
  
  SWIG_check_num_args("yarp::dev::MotorTorqueParameters::MotorTorqueParameters",0,0)
  result = (yarp::dev::MotorTorqueParameters *)new yarp::dev::MotorTorqueParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MotorTorqueParameters(void *obj) {
yarp::dev::MotorTorqueParameters *arg1 = (yarp::dev::MotorTorqueParameters *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_MotorTorqueParameters_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_MotorTorqueParameters_attributes[] = {
    { "bemf", _wrap_MotorTorqueParameters_bemf_get, _wrap_MotorTorqueParameters_bemf_set},
    { "bemf_scale", _wrap_MotorTorqueParameters_bemf_scale_get, _wrap_MotorTorqueParameters_bemf_scale_set},
    { "ktau", _wrap_MotorTorqueParameters_ktau_get, _wrap_MotorTorqueParameters_ktau_set},
    { "ktau_scale", _wrap_MotorTorqueParameters_ktau_scale_get, _wrap_MotorTorqueParameters_ktau_scale_set},
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_MotorTorqueParameters_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_MotorTorqueParameters_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_MotorTorqueParameters_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_MotorTorqueParameters_bases[] = {0};
static const char *swig_yarp_dev_MotorTorqueParameters_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_MotorTorqueParameters = { "MotorTorqueParameters", &SWIGTYPE_p_yarp__dev__MotorTorqueParameters,_wrap_new_MotorTorqueParameters, swig_delete_MotorTorqueParameters, swig_yarp_dev_MotorTorqueParameters_methods, swig_yarp_dev_MotorTorqueParameters_attributes, { "MotorTorqueParameters", swig_yarp_dev_MotorTorqueParameters_cls_methods, swig_yarp_dev_MotorTorqueParameters_cls_attributes, swig_yarp_dev_MotorTorqueParameters_cls_constants }, swig_yarp_dev_MotorTorqueParameters_bases, swig_yarp_dev_MotorTorqueParameters_base_names };

static int _wrap_ITorqueControl_getAxes(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getAxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getAxes",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getAxes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getAxes",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ITorqueControl_getAxes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAxes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setTorqueMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setTorqueMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorqueMode",1,"yarp::dev::ITorqueControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setTorqueMode",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  result = (bool)(arg1)->setTorqueMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getRefTorques(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getRefTorques",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getRefTorques",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getRefTorques",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getRefTorques",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getRefTorques",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefTorques(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getRefTorque(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getRefTorque",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getRefTorque",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getRefTorque",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::getRefTorque",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getRefTorque",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getRefTorque",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefTorque(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setRefTorques__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setRefTorques",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setRefTorques",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::setRefTorques",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setRefTorques",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_setRefTorques",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefTorques((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setRefTorque(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setRefTorque",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setRefTorque",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::setRefTorque",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::setRefTorque",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setRefTorque",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setRefTorque(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setRefTorques__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setRefTorques",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setRefTorques",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::setRefTorques",2,"int const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::setRefTorques",3,"int const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::ITorqueControl::setRefTorques",4,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setRefTorques",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ITorqueControl_setRefTorques",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_setRefTorques",4,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefTorques(arg2,(int const *)arg3,(double const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setRefTorques(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ITorqueControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ITorqueControl_setRefTorques__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ITorqueControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ITorqueControl_setRefTorques__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ITorqueControl_setRefTorques'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ITorqueControl::setRefTorques(double const *)\n"
    "    yarp::dev::ITorqueControl::setRefTorques(int const,int const *,double const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ITorqueControl_getBemfParam(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getBemfParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getBemfParam",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getBemfParam",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::getBemfParam",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getBemfParam",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getBemfParam",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getBemfParam(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setBemfParam(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setBemfParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setBemfParam",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::setBemfParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::setBemfParam",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setBemfParam",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setBemfParam(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getMotorTorqueParams(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters *arg3 = (yarp::dev::MotorTorqueParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getMotorTorqueParams",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getMotorTorqueParams",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getMotorTorqueParams",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::getMotorTorqueParams",3,"yarp::dev::MotorTorqueParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getMotorTorqueParams",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("ITorqueControl_getMotorTorqueParams",3,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  
  result = (bool)(arg1)->getMotorTorqueParams(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setMotorTorqueParams(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters arg3 ;
  yarp::dev::MotorTorqueParameters *argp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setMotorTorqueParams",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setMotorTorqueParams",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::setMotorTorqueParams",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::setMotorTorqueParams",3,"yarp::dev::MotorTorqueParameters const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setMotorTorqueParams",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("ITorqueControl_setMotorTorqueParams",3,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->setMotorTorqueParams(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setTorquePid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setTorquePid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorquePid",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorquePid",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorquePid",3,"yarp::dev::Pid const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setTorquePid",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("ITorqueControl_setTorquePid",3,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (bool)(arg1)->setTorquePid(arg2,(yarp::dev::Pid const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorque(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorque",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorque",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorque",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorque",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorque",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorque",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorque(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorques(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorques",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorques",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorques",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorques",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorques",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorques(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorqueRange(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorqueRange",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueRange",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueRange",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueRange",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueRange",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueRange",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueRange",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueRange",4,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueRange(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorqueRanges(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorqueRanges",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueRanges",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueRanges",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueRanges",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueRanges",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueRanges",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueRanges",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueRanges(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setTorquePids(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setTorquePids",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorquePids",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorquePids",2,"yarp::dev::Pid const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setTorquePids",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("ITorqueControl_setTorquePids",2,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (bool)(arg1)->setTorquePids((yarp::dev::Pid const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setTorqueErrorLimit(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setTorqueErrorLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorqueErrorLimit",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorqueErrorLimit",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorqueErrorLimit",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setTorqueErrorLimit",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setTorqueErrorLimit(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setTorqueErrorLimits(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setTorqueErrorLimits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorqueErrorLimits",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorqueErrorLimits",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setTorqueErrorLimits",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_setTorqueErrorLimits",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setTorqueErrorLimits((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorqueError(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorqueError",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueError",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueError",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueError",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueError",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueError",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueError(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorqueErrors(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorqueErrors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueErrors",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueErrors",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueErrors",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueErrors",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueErrors(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorquePidOutput(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorquePidOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorquePidOutput",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorquePidOutput",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorquePidOutput",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorquePidOutput",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorquePidOutput",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorquePidOutput(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorquePidOutputs(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorquePidOutputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorquePidOutputs",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorquePidOutputs",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorquePidOutputs",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorquePidOutputs",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorquePidOutputs(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorquePid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorquePid",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorquePid",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorquePid",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorquePid",3,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorquePid",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("ITorqueControl_getTorquePid",3,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (bool)(arg1)->getTorquePid(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorquePids(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorquePids",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorquePids",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorquePids",2,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorquePids",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("ITorqueControl_getTorquePids",2,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (bool)(arg1)->getTorquePids(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorqueErrorLimit(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorqueErrorLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueErrorLimit",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueErrorLimit",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueErrorLimit",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueErrorLimit",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueErrorLimit",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueErrorLimit(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_getTorqueErrorLimits(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::getTorqueErrorLimits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueErrorLimits",1,"yarp::dev::ITorqueControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::getTorqueErrorLimits",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueErrorLimits",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControl_getTorqueErrorLimits",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueErrorLimits(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_resetTorquePid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::resetTorquePid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::resetTorquePid",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::resetTorquePid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_resetTorquePid",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->resetTorquePid(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_disableTorquePid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::disableTorquePid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::disableTorquePid",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::disableTorquePid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_disableTorquePid",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->disableTorquePid(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_enableTorquePid(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::enableTorquePid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::enableTorquePid",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::enableTorquePid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_enableTorquePid",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->enableTorquePid(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControl_setTorqueOffset(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControl::setTorqueOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorqueOffset",1,"yarp::dev::ITorqueControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorqueOffset",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControl::setTorqueOffset",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControl,0))){
    SWIG_fail_ptr("ITorqueControl_setTorqueOffset",1,SWIGTYPE_p_yarp__dev__ITorqueControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setTorqueOffset(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ITorqueControl(void *obj) {
yarp::dev::ITorqueControl *arg1 = (yarp::dev::ITorqueControl *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_ITorqueControl_methods[] = {
    {"getAxes", _wrap_ITorqueControl_getAxes}, 
    {"setTorqueMode", _wrap_ITorqueControl_setTorqueMode}, 
    {"getRefTorques", _wrap_ITorqueControl_getRefTorques}, 
    {"getRefTorque", _wrap_ITorqueControl_getRefTorque}, 
    {"setRefTorque", _wrap_ITorqueControl_setRefTorque}, 
    {"setRefTorques", _wrap_ITorqueControl_setRefTorques}, 
    {"getBemfParam", _wrap_ITorqueControl_getBemfParam}, 
    {"setBemfParam", _wrap_ITorqueControl_setBemfParam}, 
    {"getMotorTorqueParams", _wrap_ITorqueControl_getMotorTorqueParams}, 
    {"setMotorTorqueParams", _wrap_ITorqueControl_setMotorTorqueParams}, 
    {"setTorquePid", _wrap_ITorqueControl_setTorquePid}, 
    {"getTorque", _wrap_ITorqueControl_getTorque}, 
    {"getTorques", _wrap_ITorqueControl_getTorques}, 
    {"getTorqueRange", _wrap_ITorqueControl_getTorqueRange}, 
    {"getTorqueRanges", _wrap_ITorqueControl_getTorqueRanges}, 
    {"setTorquePids", _wrap_ITorqueControl_setTorquePids}, 
    {"setTorqueErrorLimit", _wrap_ITorqueControl_setTorqueErrorLimit}, 
    {"setTorqueErrorLimits", _wrap_ITorqueControl_setTorqueErrorLimits}, 
    {"getTorqueError", _wrap_ITorqueControl_getTorqueError}, 
    {"getTorqueErrors", _wrap_ITorqueControl_getTorqueErrors}, 
    {"getTorquePidOutput", _wrap_ITorqueControl_getTorquePidOutput}, 
    {"getTorquePidOutputs", _wrap_ITorqueControl_getTorquePidOutputs}, 
    {"getTorquePid", _wrap_ITorqueControl_getTorquePid}, 
    {"getTorquePids", _wrap_ITorqueControl_getTorquePids}, 
    {"getTorqueErrorLimit", _wrap_ITorqueControl_getTorqueErrorLimit}, 
    {"getTorqueErrorLimits", _wrap_ITorqueControl_getTorqueErrorLimits}, 
    {"resetTorquePid", _wrap_ITorqueControl_resetTorquePid}, 
    {"disableTorquePid", _wrap_ITorqueControl_disableTorquePid}, 
    {"enableTorquePid", _wrap_ITorqueControl_enableTorquePid}, 
    {"setTorqueOffset", _wrap_ITorqueControl_setTorqueOffset}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_ITorqueControl_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_ITorqueControl_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_ITorqueControl_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_ITorqueControl_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_ITorqueControl_bases[] = {0};
static const char *swig_yarp_dev_ITorqueControl_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_ITorqueControl = { "ITorqueControl", &SWIGTYPE_p_yarp__dev__ITorqueControl,0, swig_delete_ITorqueControl, swig_yarp_dev_ITorqueControl_methods, swig_yarp_dev_ITorqueControl_attributes, { "ITorqueControl", swig_yarp_dev_ITorqueControl_cls_methods, swig_yarp_dev_ITorqueControl_cls_attributes, swig_yarp_dev_ITorqueControl_cls_constants }, swig_yarp_dev_ITorqueControl_bases, swig_yarp_dev_ITorqueControl_base_names };

static int _wrap_ITorqueControlRaw_getAxes(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getAxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getAxes",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getAxes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getAxes",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getAxes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAxes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setTorqueModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setTorqueModeRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorqueModeRaw",1,"yarp::dev::ITorqueControlRaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setTorqueModeRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  result = (bool)(arg1)->setTorqueModeRaw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorqueRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorqueRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorquesRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorquesRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquesRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquesRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorquesRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorquesRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorquesRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorqueRangeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorqueRangeRaw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueRangeRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueRangeRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueRangeRaw",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueRangeRaw",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueRangeRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueRangeRaw",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueRangeRaw",4,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueRangeRaw(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorqueRangesRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorqueRangesRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueRangesRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueRangesRaw",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueRangesRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueRangesRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueRangesRaw",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueRangesRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueRangesRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setRefTorquesRaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setRefTorquesRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setRefTorquesRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setRefTorquesRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setRefTorquesRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setRefTorquesRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefTorquesRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setRefTorqueRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setRefTorqueRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setRefTorqueRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setRefTorqueRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setRefTorqueRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setRefTorqueRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setRefTorqueRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setRefTorquesRaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setRefTorquesRaw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setRefTorquesRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setRefTorquesRaw",2,"int const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setRefTorquesRaw",3,"int const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setRefTorquesRaw",4,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setRefTorquesRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setRefTorquesRaw",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setRefTorquesRaw",4,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefTorquesRaw(arg2,(int const *)arg3,(double const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setRefTorquesRaw(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ITorqueControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ITorqueControlRaw_setRefTorquesRaw__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__ITorqueControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ITorqueControlRaw_setRefTorquesRaw__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ITorqueControlRaw_setRefTorquesRaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::ITorqueControlRaw::setRefTorquesRaw(double const *)\n"
    "    yarp::dev::ITorqueControlRaw::setRefTorquesRaw(int const,int const *,double const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ITorqueControlRaw_getRefTorquesRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getRefTorquesRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getRefTorquesRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getRefTorquesRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getRefTorquesRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getRefTorquesRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefTorquesRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getRefTorqueRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getRefTorqueRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getRefTorqueRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getRefTorqueRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getRefTorqueRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getRefTorqueRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getRefTorqueRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefTorqueRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getBemfParamRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getBemfParamRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getBemfParamRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getBemfParamRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getBemfParamRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getBemfParamRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getBemfParamRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getBemfParamRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setBemfParamRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setBemfParamRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setBemfParamRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setBemfParamRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setBemfParamRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setBemfParamRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setBemfParamRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getMotorTorqueParamsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters *arg3 = (yarp::dev::MotorTorqueParameters *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getMotorTorqueParamsRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getMotorTorqueParamsRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getMotorTorqueParamsRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getMotorTorqueParamsRaw",3,"yarp::dev::MotorTorqueParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getMotorTorqueParamsRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getMotorTorqueParamsRaw",3,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  
  result = (bool)(arg1)->getMotorTorqueParamsRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setMotorTorqueParamsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::MotorTorqueParameters arg3 ;
  yarp::dev::MotorTorqueParameters *argp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setMotorTorqueParamsRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setMotorTorqueParamsRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setMotorTorqueParamsRaw",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setMotorTorqueParamsRaw",3,"yarp::dev::MotorTorqueParameters const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setMotorTorqueParamsRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_yarp__dev__MotorTorqueParameters,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setMotorTorqueParamsRaw",3,SWIGTYPE_p_yarp__dev__MotorTorqueParameters);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->setMotorTorqueParamsRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setTorquePidRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setTorquePidRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorquePidRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorquePidRaw",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorquePidRaw",3,"yarp::dev::Pid const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setTorquePidRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setTorquePidRaw",3,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (bool)(arg1)->setTorquePidRaw(arg2,(yarp::dev::Pid const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setTorquePidsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setTorquePidsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorquePidsRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorquePidsRaw",2,"yarp::dev::Pid const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setTorquePidsRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setTorquePidsRaw",2,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (bool)(arg1)->setTorquePidsRaw((yarp::dev::Pid const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setTorqueErrorLimitRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setTorqueErrorLimitRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorqueErrorLimitRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorqueErrorLimitRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorqueErrorLimitRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setTorqueErrorLimitRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setTorqueErrorLimitRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setTorqueErrorLimitsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setTorqueErrorLimitsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorqueErrorLimitsRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorqueErrorLimitsRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setTorqueErrorLimitsRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setTorqueErrorLimitsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setTorqueErrorLimitsRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorqueErrorRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorqueErrorRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueErrorRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueErrorRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueErrorRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueErrorRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueErrorRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueErrorRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorqueErrorsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorqueErrorsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueErrorsRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueErrorsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueErrorsRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueErrorsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueErrorsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorquePidOutputRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorquePidOutputRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquePidOutputRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquePidOutputRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquePidOutputRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorquePidOutputRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorquePidOutputRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorquePidOutputRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorquePidOutputsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorquePidOutputsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquePidOutputsRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquePidOutputsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorquePidOutputsRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorquePidOutputsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorquePidOutputsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorquePidRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  yarp::dev::Pid *arg3 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorquePidRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquePidRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquePidRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquePidRaw",3,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorquePidRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorquePidRaw",3,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (bool)(arg1)->getTorquePidRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorquePidsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  yarp::dev::Pid *arg2 = (yarp::dev::Pid *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorquePidsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquePidsRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorquePidsRaw",2,"yarp::dev::Pid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorquePidsRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorquePidsRaw",2,SWIGTYPE_p_yarp__dev__Pid);
  }
  
  result = (bool)(arg1)->getTorquePidsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorqueErrorLimitRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorqueErrorLimitRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueErrorLimitRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueErrorLimitRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueErrorLimitRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueErrorLimitRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueErrorLimitRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueErrorLimitRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_getTorqueErrorLimitsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::getTorqueErrorLimitsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueErrorLimitsRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::getTorqueErrorLimitsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueErrorLimitsRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ITorqueControlRaw_getTorqueErrorLimitsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getTorqueErrorLimitsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_resetTorquePidRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::resetTorquePidRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::resetTorquePidRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::resetTorquePidRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_resetTorquePidRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->resetTorquePidRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_disableTorquePidRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::disableTorquePidRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::disableTorquePidRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::disableTorquePidRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_disableTorquePidRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->disableTorquePidRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_enableTorquePidRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::enableTorquePidRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::enableTorquePidRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::enableTorquePidRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_enableTorquePidRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->enableTorquePidRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITorqueControlRaw_setTorqueOffsetRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::ITorqueControlRaw::setTorqueOffsetRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorqueOffsetRaw",1,"yarp::dev::ITorqueControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorqueOffsetRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::ITorqueControlRaw::setTorqueOffsetRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0))){
    SWIG_fail_ptr("ITorqueControlRaw_setTorqueOffsetRaw",1,SWIGTYPE_p_yarp__dev__ITorqueControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setTorqueOffsetRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ITorqueControlRaw(void *obj) {
yarp::dev::ITorqueControlRaw *arg1 = (yarp::dev::ITorqueControlRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_ITorqueControlRaw_methods[] = {
    {"getAxes", _wrap_ITorqueControlRaw_getAxes}, 
    {"setTorqueModeRaw", _wrap_ITorqueControlRaw_setTorqueModeRaw}, 
    {"getTorqueRaw", _wrap_ITorqueControlRaw_getTorqueRaw}, 
    {"getTorquesRaw", _wrap_ITorqueControlRaw_getTorquesRaw}, 
    {"getTorqueRangeRaw", _wrap_ITorqueControlRaw_getTorqueRangeRaw}, 
    {"getTorqueRangesRaw", _wrap_ITorqueControlRaw_getTorqueRangesRaw}, 
    {"setRefTorqueRaw", _wrap_ITorqueControlRaw_setRefTorqueRaw}, 
    {"setRefTorquesRaw", _wrap_ITorqueControlRaw_setRefTorquesRaw}, 
    {"getRefTorquesRaw", _wrap_ITorqueControlRaw_getRefTorquesRaw}, 
    {"getRefTorqueRaw", _wrap_ITorqueControlRaw_getRefTorqueRaw}, 
    {"getBemfParamRaw", _wrap_ITorqueControlRaw_getBemfParamRaw}, 
    {"setBemfParamRaw", _wrap_ITorqueControlRaw_setBemfParamRaw}, 
    {"getMotorTorqueParamsRaw", _wrap_ITorqueControlRaw_getMotorTorqueParamsRaw}, 
    {"setMotorTorqueParamsRaw", _wrap_ITorqueControlRaw_setMotorTorqueParamsRaw}, 
    {"setTorquePidRaw", _wrap_ITorqueControlRaw_setTorquePidRaw}, 
    {"setTorquePidsRaw", _wrap_ITorqueControlRaw_setTorquePidsRaw}, 
    {"setTorqueErrorLimitRaw", _wrap_ITorqueControlRaw_setTorqueErrorLimitRaw}, 
    {"setTorqueErrorLimitsRaw", _wrap_ITorqueControlRaw_setTorqueErrorLimitsRaw}, 
    {"getTorqueErrorRaw", _wrap_ITorqueControlRaw_getTorqueErrorRaw}, 
    {"getTorqueErrorsRaw", _wrap_ITorqueControlRaw_getTorqueErrorsRaw}, 
    {"getTorquePidOutputRaw", _wrap_ITorqueControlRaw_getTorquePidOutputRaw}, 
    {"getTorquePidOutputsRaw", _wrap_ITorqueControlRaw_getTorquePidOutputsRaw}, 
    {"getTorquePidRaw", _wrap_ITorqueControlRaw_getTorquePidRaw}, 
    {"getTorquePidsRaw", _wrap_ITorqueControlRaw_getTorquePidsRaw}, 
    {"getTorqueErrorLimitRaw", _wrap_ITorqueControlRaw_getTorqueErrorLimitRaw}, 
    {"getTorqueErrorLimitsRaw", _wrap_ITorqueControlRaw_getTorqueErrorLimitsRaw}, 
    {"resetTorquePidRaw", _wrap_ITorqueControlRaw_resetTorquePidRaw}, 
    {"disableTorquePidRaw", _wrap_ITorqueControlRaw_disableTorquePidRaw}, 
    {"enableTorquePidRaw", _wrap_ITorqueControlRaw_enableTorquePidRaw}, 
    {"setTorqueOffsetRaw", _wrap_ITorqueControlRaw_setTorqueOffsetRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_ITorqueControlRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_ITorqueControlRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_ITorqueControlRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_ITorqueControlRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_ITorqueControlRaw_bases[] = {0};
static const char *swig_yarp_dev_ITorqueControlRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_ITorqueControlRaw = { "ITorqueControlRaw", &SWIGTYPE_p_yarp__dev__ITorqueControlRaw,0, swig_delete_ITorqueControlRaw, swig_yarp_dev_ITorqueControlRaw_methods, swig_yarp_dev_ITorqueControlRaw_attributes, { "ITorqueControlRaw", swig_yarp_dev_ITorqueControlRaw_cls_methods, swig_yarp_dev_ITorqueControlRaw_cls_attributes, swig_yarp_dev_ITorqueControlRaw_cls_constants }, swig_yarp_dev_ITorqueControlRaw_bases, swig_yarp_dev_ITorqueControlRaw_base_names };

static int _wrap_IImpedanceControlRaw_getAxes(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControlRaw::getAxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getAxes",1,"yarp::dev::IImpedanceControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getAxes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getAxes",1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getAxes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAxes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IImpedanceControlRaw_getImpedanceRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControlRaw::getImpedanceRaw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getImpedanceRaw",1,"yarp::dev::IImpedanceControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getImpedanceRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getImpedanceRaw",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getImpedanceRaw",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getImpedanceRaw",1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getImpedanceRaw",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getImpedanceRaw",4,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getImpedanceRaw(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IImpedanceControlRaw_setImpedanceRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControlRaw::setImpedanceRaw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::setImpedanceRaw",1,"yarp::dev::IImpedanceControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::setImpedanceRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::setImpedanceRaw",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::setImpedanceRaw",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_setImpedanceRaw",1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (bool)(arg1)->setImpedanceRaw(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IImpedanceControlRaw_setImpedanceOffsetRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControlRaw::setImpedanceOffsetRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::setImpedanceOffsetRaw",1,"yarp::dev::IImpedanceControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::setImpedanceOffsetRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::setImpedanceOffsetRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_setImpedanceOffsetRaw",1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setImpedanceOffsetRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IImpedanceControlRaw_getImpedanceOffsetRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControlRaw::getImpedanceOffsetRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getImpedanceOffsetRaw",1,"yarp::dev::IImpedanceControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getImpedanceOffsetRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getImpedanceOffsetRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getImpedanceOffsetRaw",1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getImpedanceOffsetRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getImpedanceOffsetRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IImpedanceControlRaw_getCurrentImpedanceLimitRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControlRaw::getCurrentImpedanceLimitRaw",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getCurrentImpedanceLimitRaw",1,"yarp::dev::IImpedanceControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getCurrentImpedanceLimitRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getCurrentImpedanceLimitRaw",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getCurrentImpedanceLimitRaw",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getCurrentImpedanceLimitRaw",5,"double *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("yarp::dev::IImpedanceControlRaw::getCurrentImpedanceLimitRaw",6,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getCurrentImpedanceLimitRaw",1,SWIGTYPE_p_yarp__dev__IImpedanceControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getCurrentImpedanceLimitRaw",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getCurrentImpedanceLimitRaw",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getCurrentImpedanceLimitRaw",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControlRaw_getCurrentImpedanceLimitRaw",6,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getCurrentImpedanceLimitRaw(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IImpedanceControlRaw(void *obj) {
yarp::dev::IImpedanceControlRaw *arg1 = (yarp::dev::IImpedanceControlRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IImpedanceControlRaw_methods[] = {
    {"getAxes", _wrap_IImpedanceControlRaw_getAxes}, 
    {"getImpedanceRaw", _wrap_IImpedanceControlRaw_getImpedanceRaw}, 
    {"setImpedanceRaw", _wrap_IImpedanceControlRaw_setImpedanceRaw}, 
    {"setImpedanceOffsetRaw", _wrap_IImpedanceControlRaw_setImpedanceOffsetRaw}, 
    {"getImpedanceOffsetRaw", _wrap_IImpedanceControlRaw_getImpedanceOffsetRaw}, 
    {"getCurrentImpedanceLimitRaw", _wrap_IImpedanceControlRaw_getCurrentImpedanceLimitRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IImpedanceControlRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IImpedanceControlRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IImpedanceControlRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IImpedanceControlRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IImpedanceControlRaw_bases[] = {0};
static const char *swig_yarp_dev_IImpedanceControlRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IImpedanceControlRaw = { "IImpedanceControlRaw", &SWIGTYPE_p_yarp__dev__IImpedanceControlRaw,0, swig_delete_IImpedanceControlRaw, swig_yarp_dev_IImpedanceControlRaw_methods, swig_yarp_dev_IImpedanceControlRaw_attributes, { "IImpedanceControlRaw", swig_yarp_dev_IImpedanceControlRaw_cls_methods, swig_yarp_dev_IImpedanceControlRaw_cls_attributes, swig_yarp_dev_IImpedanceControlRaw_cls_constants }, swig_yarp_dev_IImpedanceControlRaw_bases, swig_yarp_dev_IImpedanceControlRaw_base_names };

static int _wrap_IImpedanceControl_getAxes(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControl::getAxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getAxes",1,"yarp::dev::IImpedanceControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getAxes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControl,0))){
    SWIG_fail_ptr("IImpedanceControl_getAxes",1,SWIGTYPE_p_yarp__dev__IImpedanceControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IImpedanceControl_getAxes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAxes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IImpedanceControl_getImpedance(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControl::getImpedance",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getImpedance",1,"yarp::dev::IImpedanceControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getImpedance",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getImpedance",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getImpedance",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControl,0))){
    SWIG_fail_ptr("IImpedanceControl_getImpedance",1,SWIGTYPE_p_yarp__dev__IImpedanceControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControl_getImpedance",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControl_getImpedance",4,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getImpedance(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IImpedanceControl_setImpedance(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControl::setImpedance",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControl::setImpedance",1,"yarp::dev::IImpedanceControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControl::setImpedance",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IImpedanceControl::setImpedance",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::dev::IImpedanceControl::setImpedance",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControl,0))){
    SWIG_fail_ptr("IImpedanceControl_setImpedance",1,SWIGTYPE_p_yarp__dev__IImpedanceControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (bool)(arg1)->setImpedance(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IImpedanceControl_setImpedanceOffset(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControl::setImpedanceOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControl::setImpedanceOffset",1,"yarp::dev::IImpedanceControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControl::setImpedanceOffset",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IImpedanceControl::setImpedanceOffset",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControl,0))){
    SWIG_fail_ptr("IImpedanceControl_setImpedanceOffset",1,SWIGTYPE_p_yarp__dev__IImpedanceControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setImpedanceOffset(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IImpedanceControl_getImpedanceOffset(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControl::getImpedanceOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getImpedanceOffset",1,"yarp::dev::IImpedanceControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getImpedanceOffset",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getImpedanceOffset",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControl,0))){
    SWIG_fail_ptr("IImpedanceControl_getImpedanceOffset",1,SWIGTYPE_p_yarp__dev__IImpedanceControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControl_getImpedanceOffset",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getImpedanceOffset(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IImpedanceControl_getCurrentImpedanceLimit(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IImpedanceControl::getCurrentImpedanceLimit",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getCurrentImpedanceLimit",1,"yarp::dev::IImpedanceControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getCurrentImpedanceLimit",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getCurrentImpedanceLimit",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getCurrentImpedanceLimit",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getCurrentImpedanceLimit",5,"double *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("yarp::dev::IImpedanceControl::getCurrentImpedanceLimit",6,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IImpedanceControl,0))){
    SWIG_fail_ptr("IImpedanceControl_getCurrentImpedanceLimit",1,SWIGTYPE_p_yarp__dev__IImpedanceControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControl_getCurrentImpedanceLimit",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControl_getCurrentImpedanceLimit",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControl_getCurrentImpedanceLimit",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IImpedanceControl_getCurrentImpedanceLimit",6,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getCurrentImpedanceLimit(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IImpedanceControl(void *obj) {
yarp::dev::IImpedanceControl *arg1 = (yarp::dev::IImpedanceControl *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IImpedanceControl_methods[] = {
    {"getAxes", _wrap_IImpedanceControl_getAxes}, 
    {"getImpedance", _wrap_IImpedanceControl_getImpedance}, 
    {"setImpedance", _wrap_IImpedanceControl_setImpedance}, 
    {"setImpedanceOffset", _wrap_IImpedanceControl_setImpedanceOffset}, 
    {"getImpedanceOffset", _wrap_IImpedanceControl_getImpedanceOffset}, 
    {"getCurrentImpedanceLimit", _wrap_IImpedanceControl_getCurrentImpedanceLimit}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IImpedanceControl_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IImpedanceControl_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IImpedanceControl_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IImpedanceControl_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IImpedanceControl_bases[] = {0};
static const char *swig_yarp_dev_IImpedanceControl_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IImpedanceControl = { "IImpedanceControl", &SWIGTYPE_p_yarp__dev__IImpedanceControl,0, swig_delete_IImpedanceControl, swig_yarp_dev_IImpedanceControl_methods, swig_yarp_dev_IImpedanceControl_attributes, { "IImpedanceControl", swig_yarp_dev_IImpedanceControl_cls_methods, swig_yarp_dev_IImpedanceControl_cls_attributes, swig_yarp_dev_IImpedanceControl_cls_constants }, swig_yarp_dev_IImpedanceControl_bases, swig_yarp_dev_IImpedanceControl_base_names };

static int _wrap_IVelocityControlRaw_getAxes(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControlRaw::getAxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::getAxes",1,"yarp::dev::IVelocityControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::getAxes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0))){
    SWIG_fail_ptr("IVelocityControlRaw_getAxes",1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IVelocityControlRaw_getAxes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAxes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControlRaw_setVelocityModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControlRaw::setVelocityModeRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::setVelocityModeRaw",1,"yarp::dev::IVelocityControlRaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0))){
    SWIG_fail_ptr("IVelocityControlRaw_setVelocityModeRaw",1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw);
  }
  
  result = (bool)(arg1)->setVelocityModeRaw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControlRaw_velocityMoveRaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControlRaw::velocityMoveRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::velocityMoveRaw",1,"yarp::dev::IVelocityControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::velocityMoveRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::velocityMoveRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0))){
    SWIG_fail_ptr("IVelocityControlRaw_velocityMoveRaw",1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->velocityMoveRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControlRaw_velocityMoveRaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControlRaw::velocityMoveRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::velocityMoveRaw",1,"yarp::dev::IVelocityControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::velocityMoveRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0))){
    SWIG_fail_ptr("IVelocityControlRaw_velocityMoveRaw",1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IVelocityControlRaw_velocityMoveRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->velocityMoveRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControlRaw_velocityMoveRaw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IVelocityControlRaw_velocityMoveRaw__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IVelocityControlRaw_velocityMoveRaw__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IVelocityControlRaw_velocityMoveRaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IVelocityControlRaw::velocityMoveRaw(int,double)\n"
    "    yarp::dev::IVelocityControlRaw::velocityMoveRaw(double const *)\n");
  lua_error(L);return 0;
}


static int _wrap_IVelocityControlRaw_setRefAccelerationRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControlRaw::setRefAccelerationRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::setRefAccelerationRaw",1,"yarp::dev::IVelocityControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::setRefAccelerationRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::setRefAccelerationRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0))){
    SWIG_fail_ptr("IVelocityControlRaw_setRefAccelerationRaw",1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setRefAccelerationRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControlRaw_setRefAccelerationsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControlRaw::setRefAccelerationsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::setRefAccelerationsRaw",1,"yarp::dev::IVelocityControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::setRefAccelerationsRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0))){
    SWIG_fail_ptr("IVelocityControlRaw_setRefAccelerationsRaw",1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IVelocityControlRaw_setRefAccelerationsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefAccelerationsRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControlRaw_getRefAccelerationRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControlRaw::getRefAccelerationRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::getRefAccelerationRaw",1,"yarp::dev::IVelocityControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::getRefAccelerationRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::getRefAccelerationRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0))){
    SWIG_fail_ptr("IVelocityControlRaw_getRefAccelerationRaw",1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IVelocityControlRaw_getRefAccelerationRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefAccelerationRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControlRaw_getRefAccelerationsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControlRaw::getRefAccelerationsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::getRefAccelerationsRaw",1,"yarp::dev::IVelocityControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::getRefAccelerationsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0))){
    SWIG_fail_ptr("IVelocityControlRaw_getRefAccelerationsRaw",1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IVelocityControlRaw_getRefAccelerationsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefAccelerationsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControlRaw_stopRaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControlRaw::stopRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::stopRaw",1,"yarp::dev::IVelocityControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::stopRaw",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0))){
    SWIG_fail_ptr("IVelocityControlRaw_stopRaw",1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->stopRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControlRaw_stopRaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControlRaw::stopRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControlRaw::stopRaw",1,"yarp::dev::IVelocityControlRaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0))){
    SWIG_fail_ptr("IVelocityControlRaw_stopRaw",1,SWIGTYPE_p_yarp__dev__IVelocityControlRaw);
  }
  
  result = (bool)(arg1)->stopRaw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControlRaw_stopRaw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IVelocityControlRaw_stopRaw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControlRaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IVelocityControlRaw_stopRaw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IVelocityControlRaw_stopRaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IVelocityControlRaw::stopRaw(int)\n"
    "    yarp::dev::IVelocityControlRaw::stopRaw()\n");
  lua_error(L);return 0;
}


static void swig_delete_IVelocityControlRaw(void *obj) {
yarp::dev::IVelocityControlRaw *arg1 = (yarp::dev::IVelocityControlRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IVelocityControlRaw_methods[] = {
    {"getAxes", _wrap_IVelocityControlRaw_getAxes}, 
    {"setVelocityModeRaw", _wrap_IVelocityControlRaw_setVelocityModeRaw}, 
    {"velocityMoveRaw", _wrap_IVelocityControlRaw_velocityMoveRaw}, 
    {"setRefAccelerationRaw", _wrap_IVelocityControlRaw_setRefAccelerationRaw}, 
    {"setRefAccelerationsRaw", _wrap_IVelocityControlRaw_setRefAccelerationsRaw}, 
    {"getRefAccelerationRaw", _wrap_IVelocityControlRaw_getRefAccelerationRaw}, 
    {"getRefAccelerationsRaw", _wrap_IVelocityControlRaw_getRefAccelerationsRaw}, 
    {"stopRaw", _wrap_IVelocityControlRaw_stopRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IVelocityControlRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IVelocityControlRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IVelocityControlRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IVelocityControlRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IVelocityControlRaw_bases[] = {0};
static const char *swig_yarp_dev_IVelocityControlRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IVelocityControlRaw = { "IVelocityControlRaw", &SWIGTYPE_p_yarp__dev__IVelocityControlRaw,0, swig_delete_IVelocityControlRaw, swig_yarp_dev_IVelocityControlRaw_methods, swig_yarp_dev_IVelocityControlRaw_attributes, { "IVelocityControlRaw", swig_yarp_dev_IVelocityControlRaw_cls_methods, swig_yarp_dev_IVelocityControlRaw_cls_attributes, swig_yarp_dev_IVelocityControlRaw_cls_constants }, swig_yarp_dev_IVelocityControlRaw_bases, swig_yarp_dev_IVelocityControlRaw_base_names };

static int _wrap_IVelocityControl_getAxes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::getAxes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::getAxes",1,"yarp::dev::IVelocityControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::getAxes",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_getAxes",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("IVelocityControl_getAxes",2,SWIGTYPE_p_int);
  }
  
  result = (bool)(arg1)->getAxes(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_setVelocityMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::setVelocityMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::setVelocityMode",1,"yarp::dev::IVelocityControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_setVelocityMode",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  result = (bool)(arg1)->setVelocityMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_velocityMove__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::velocityMove",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::velocityMove",1,"yarp::dev::IVelocityControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::velocityMove",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IVelocityControl::velocityMove",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_velocityMove",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->velocityMove(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_velocityMove__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::velocityMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::velocityMove",1,"yarp::dev::IVelocityControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::velocityMove",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_velocityMove",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IVelocityControl_velocityMove",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->velocityMove((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_setRefAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::setRefAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::setRefAcceleration",1,"yarp::dev::IVelocityControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::setRefAcceleration",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IVelocityControl::setRefAcceleration",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_setRefAcceleration",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setRefAcceleration(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_setRefAccelerations__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::setRefAccelerations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::setRefAccelerations",1,"yarp::dev::IVelocityControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::setRefAccelerations",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_setRefAccelerations",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IVelocityControl_setRefAccelerations",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefAccelerations((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_getRefAcceleration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::getRefAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::getRefAcceleration",1,"yarp::dev::IVelocityControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::getRefAcceleration",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IVelocityControl::getRefAcceleration",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_getRefAcceleration",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IVelocityControl_getRefAcceleration",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefAcceleration(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_getRefAccelerations__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::getRefAccelerations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::getRefAccelerations",1,"yarp::dev::IVelocityControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::getRefAccelerations",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_getRefAccelerations",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IVelocityControl_getRefAccelerations",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefAccelerations(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_stop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::stop",1,"yarp::dev::IVelocityControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::stop",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_stop",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->stop(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_stop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::stop",1,"yarp::dev::IVelocityControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_stop",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  result = (bool)(arg1)->stop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_stop(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IVelocityControl_stop__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IVelocityControl_stop__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IVelocityControl_stop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IVelocityControl::stop(int)\n"
    "    yarp::dev::IVelocityControl::stop()\n");
  lua_error(L);return 0;
}


static int _wrap_IVelocityControl_getAxes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::getAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::getAxes",1,"yarp::dev::IVelocityControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_getAxes",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  result = (int)yarp_dev_IVelocityControl_getAxes__SWIG_1(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_getAxes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IVelocityControl_getAxes__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IVelocityControl_getAxes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IVelocityControl_getAxes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IVelocityControl::getAxes(int *)\n"
    "    yarp::dev::IVelocityControl::getAxes()\n");
  lua_error(L);return 0;
}


static int _wrap_IVelocityControl_velocityMove__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::velocityMove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::velocityMove",1,"yarp::dev::IVelocityControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::velocityMove",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_velocityMove",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IVelocityControl_velocityMove",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IVelocityControl_velocityMove__SWIG_2(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_velocityMove(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IVelocityControl_velocityMove__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IVelocityControl_velocityMove__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IVelocityControl_velocityMove__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IVelocityControl_velocityMove'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IVelocityControl::velocityMove(int,double)\n"
    "    yarp::dev::IVelocityControl::velocityMove(double const *)\n"
    "    yarp::dev::IVelocityControl::velocityMove(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IVelocityControl_setRefAccelerations__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::setRefAccelerations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::setRefAccelerations",1,"yarp::dev::IVelocityControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::setRefAccelerations",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_setRefAccelerations",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IVelocityControl_setRefAccelerations",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IVelocityControl_setRefAccelerations__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_setRefAccelerations(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IVelocityControl_setRefAccelerations__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IVelocityControl_setRefAccelerations__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IVelocityControl_setRefAccelerations'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IVelocityControl::setRefAccelerations(double const *)\n"
    "    yarp::dev::IVelocityControl::setRefAccelerations(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IVelocityControl_getRefAcceleration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::getRefAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::getRefAcceleration",1,"yarp::dev::IVelocityControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::getRefAcceleration",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::dev::IVelocityControl::getRefAcceleration",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_getRefAcceleration",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IVelocityControl_getRefAcceleration",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IVelocityControl_getRefAcceleration__SWIG_1(arg1,arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_getRefAcceleration(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IVelocityControl_getRefAcceleration__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IVelocityControl_getRefAcceleration__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IVelocityControl_getRefAcceleration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IVelocityControl::getRefAcceleration(int,double *)\n"
    "    yarp::dev::IVelocityControl::getRefAcceleration(int,std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_IVelocityControl_getRefAccelerations__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) 0 ;
  std::vector< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IVelocityControl::getRefAccelerations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IVelocityControl::getRefAccelerations",1,"yarp::dev::IVelocityControl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::dev::IVelocityControl::getRefAccelerations",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IVelocityControl,0))){
    SWIG_fail_ptr("IVelocityControl_getRefAccelerations",1,SWIGTYPE_p_yarp__dev__IVelocityControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("IVelocityControl_getRefAccelerations",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)yarp_dev_IVelocityControl_getRefAccelerations__SWIG_1(arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVelocityControl_getRefAccelerations(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IVelocityControl_getRefAccelerations__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__dev__IVelocityControl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IVelocityControl_getRefAccelerations__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IVelocityControl_getRefAccelerations'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::dev::IVelocityControl::getRefAccelerations(double *)\n"
    "    yarp::dev::IVelocityControl::getRefAccelerations(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_IVelocityControl(void *obj) {
yarp::dev::IVelocityControl *arg1 = (yarp::dev::IVelocityControl *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IVelocityControl_methods[] = {
    {"setVelocityMode", _wrap_IVelocityControl_setVelocityMode}, 
    {"setRefAcceleration", _wrap_IVelocityControl_setRefAcceleration}, 
    {"stop", _wrap_IVelocityControl_stop}, 
    {"getAxes", _wrap_IVelocityControl_getAxes}, 
    {"velocityMove", _wrap_IVelocityControl_velocityMove}, 
    {"setRefAccelerations", _wrap_IVelocityControl_setRefAccelerations}, 
    {"getRefAcceleration", _wrap_IVelocityControl_getRefAcceleration}, 
    {"getRefAccelerations", _wrap_IVelocityControl_getRefAccelerations}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IVelocityControl_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IVelocityControl_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IVelocityControl_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IVelocityControl_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IVelocityControl_bases[] = {0};
static const char *swig_yarp_dev_IVelocityControl_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IVelocityControl = { "IVelocityControl", &SWIGTYPE_p_yarp__dev__IVelocityControl,0, swig_delete_IVelocityControl, swig_yarp_dev_IVelocityControl_methods, swig_yarp_dev_IVelocityControl_attributes, { "IVelocityControl", swig_yarp_dev_IVelocityControl_cls_methods, swig_yarp_dev_IVelocityControl_cls_attributes, swig_yarp_dev_IVelocityControl_cls_constants }, swig_yarp_dev_IVelocityControl_bases, swig_yarp_dev_IVelocityControl_base_names };

static int _wrap_IOpenLoopControlRaw_setRefOutputRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControlRaw::setRefOutputRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::setRefOutputRaw",1,"yarp::dev::IOpenLoopControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::setRefOutputRaw",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::setRefOutputRaw",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_setRefOutputRaw",1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setRefOutputRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControlRaw_setRefOutputsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControlRaw::setRefOutputsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::setRefOutputsRaw",1,"yarp::dev::IOpenLoopControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::setRefOutputsRaw",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_setRefOutputsRaw",1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_setRefOutputsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefOutputsRaw((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControlRaw_getRefOutputRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControlRaw::getRefOutputRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::getRefOutputRaw",1,"yarp::dev::IOpenLoopControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::getRefOutputRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::getRefOutputRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_getRefOutputRaw",1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_getRefOutputRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefOutputRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControlRaw_getRefOutputsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControlRaw::getRefOutputsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::getRefOutputsRaw",1,"yarp::dev::IOpenLoopControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::getRefOutputsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_getRefOutputsRaw",1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_getRefOutputsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefOutputsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControlRaw_getOutputRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControlRaw::getOutputRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::getOutputRaw",1,"yarp::dev::IOpenLoopControlRaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::getOutputRaw",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::getOutputRaw",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_getOutputRaw",1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_getOutputRaw",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getOutputRaw(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControlRaw_getOutputsRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControlRaw::getOutputsRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::getOutputsRaw",1,"yarp::dev::IOpenLoopControlRaw *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::getOutputsRaw",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_getOutputsRaw",1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_getOutputsRaw",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getOutputsRaw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControlRaw_setOpenLoopModeRaw(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControlRaw::setOpenLoopModeRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControlRaw::setOpenLoopModeRaw",1,"yarp::dev::IOpenLoopControlRaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw,0))){
    SWIG_fail_ptr("IOpenLoopControlRaw_setOpenLoopModeRaw",1,SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw);
  }
  
  result = (bool)(arg1)->setOpenLoopModeRaw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOpenLoopControlRaw(void *obj) {
yarp::dev::IOpenLoopControlRaw *arg1 = (yarp::dev::IOpenLoopControlRaw *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IOpenLoopControlRaw_methods[] = {
    {"setRefOutputRaw", _wrap_IOpenLoopControlRaw_setRefOutputRaw}, 
    {"setRefOutputsRaw", _wrap_IOpenLoopControlRaw_setRefOutputsRaw}, 
    {"getRefOutputRaw", _wrap_IOpenLoopControlRaw_getRefOutputRaw}, 
    {"getRefOutputsRaw", _wrap_IOpenLoopControlRaw_getRefOutputsRaw}, 
    {"getOutputRaw", _wrap_IOpenLoopControlRaw_getOutputRaw}, 
    {"getOutputsRaw", _wrap_IOpenLoopControlRaw_getOutputsRaw}, 
    {"setOpenLoopModeRaw", _wrap_IOpenLoopControlRaw_setOpenLoopModeRaw}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IOpenLoopControlRaw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IOpenLoopControlRaw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IOpenLoopControlRaw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IOpenLoopControlRaw_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IOpenLoopControlRaw_bases[] = {0};
static const char *swig_yarp_dev_IOpenLoopControlRaw_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IOpenLoopControlRaw = { "IOpenLoopControlRaw", &SWIGTYPE_p_yarp__dev__IOpenLoopControlRaw,0, swig_delete_IOpenLoopControlRaw, swig_yarp_dev_IOpenLoopControlRaw_methods, swig_yarp_dev_IOpenLoopControlRaw_attributes, { "IOpenLoopControlRaw", swig_yarp_dev_IOpenLoopControlRaw_cls_methods, swig_yarp_dev_IOpenLoopControlRaw_cls_attributes, swig_yarp_dev_IOpenLoopControlRaw_cls_constants }, swig_yarp_dev_IOpenLoopControlRaw_bases, swig_yarp_dev_IOpenLoopControlRaw_base_names };

static int _wrap_IOpenLoopControl_setRefOutput(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  int arg2 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControl::setRefOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::setRefOutput",1,"yarp::dev::IOpenLoopControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::setRefOutput",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::setRefOutput",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControl,0))){
    SWIG_fail_ptr("IOpenLoopControl_setRefOutput",1,SWIGTYPE_p_yarp__dev__IOpenLoopControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->setRefOutput(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControl_setRefOutputs(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControl::setRefOutputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::setRefOutputs",1,"yarp::dev::IOpenLoopControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::setRefOutputs",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControl,0))){
    SWIG_fail_ptr("IOpenLoopControl_setRefOutputs",1,SWIGTYPE_p_yarp__dev__IOpenLoopControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IOpenLoopControl_setRefOutputs",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->setRefOutputs((double const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControl_getRefOutput(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControl::getRefOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::getRefOutput",1,"yarp::dev::IOpenLoopControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::getRefOutput",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::getRefOutput",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControl,0))){
    SWIG_fail_ptr("IOpenLoopControl_getRefOutput",1,SWIGTYPE_p_yarp__dev__IOpenLoopControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IOpenLoopControl_getRefOutput",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefOutput(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControl_getRefOutputs(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControl::getRefOutputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::getRefOutputs",1,"yarp::dev::IOpenLoopControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::getRefOutputs",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControl,0))){
    SWIG_fail_ptr("IOpenLoopControl_getRefOutputs",1,SWIGTYPE_p_yarp__dev__IOpenLoopControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IOpenLoopControl_getRefOutputs",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getRefOutputs(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControl_getOutput(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControl::getOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::getOutput",1,"yarp::dev::IOpenLoopControl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::getOutput",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::getOutput",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControl,0))){
    SWIG_fail_ptr("IOpenLoopControl_getOutput",1,SWIGTYPE_p_yarp__dev__IOpenLoopControl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IOpenLoopControl_getOutput",3,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getOutput(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControl_getOutputs(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControl::getOutputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::getOutputs",1,"yarp::dev::IOpenLoopControl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::getOutputs",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControl,0))){
    SWIG_fail_ptr("IOpenLoopControl_getOutputs",1,SWIGTYPE_p_yarp__dev__IOpenLoopControl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IOpenLoopControl_getOutputs",2,SWIGTYPE_p_double);
  }
  
  result = (bool)(arg1)->getOutputs(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOpenLoopControl_setOpenLoopMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::dev::IOpenLoopControl::setOpenLoopMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::dev::IOpenLoopControl::setOpenLoopMode",1,"yarp::dev::IOpenLoopControl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__dev__IOpenLoopControl,0))){
    SWIG_fail_ptr("IOpenLoopControl_setOpenLoopMode",1,SWIGTYPE_p_yarp__dev__IOpenLoopControl);
  }
  
  result = (bool)(arg1)->setOpenLoopMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOpenLoopControl(void *obj) {
yarp::dev::IOpenLoopControl *arg1 = (yarp::dev::IOpenLoopControl *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_dev_IOpenLoopControl_methods[] = {
    {"setRefOutput", _wrap_IOpenLoopControl_setRefOutput}, 
    {"setRefOutputs", _wrap_IOpenLoopControl_setRefOutputs}, 
    {"getRefOutput", _wrap_IOpenLoopControl_getRefOutput}, 
    {"getRefOutputs", _wrap_IOpenLoopControl_getRefOutputs}, 
    {"getOutput", _wrap_IOpenLoopControl_getOutput}, 
    {"getOutputs", _wrap_IOpenLoopControl_getOutputs}, 
    {"setOpenLoopMode", _wrap_IOpenLoopControl_setOpenLoopMode}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_dev_IOpenLoopControl_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_dev_IOpenLoopControl_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_dev_IOpenLoopControl_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_dev_IOpenLoopControl_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_dev_IOpenLoopControl_bases[] = {0};
static const char *swig_yarp_dev_IOpenLoopControl_base_names[] = {0};
static swig_lua_class _wrap_class_yarp_dev_IOpenLoopControl = { "IOpenLoopControl", &SWIGTYPE_p_yarp__dev__IOpenLoopControl,0, swig_delete_IOpenLoopControl, swig_yarp_dev_IOpenLoopControl_methods, swig_yarp_dev_IOpenLoopControl_attributes, { "IOpenLoopControl", swig_yarp_dev_IOpenLoopControl_cls_methods, swig_yarp_dev_IOpenLoopControl_cls_attributes, swig_yarp_dev_IOpenLoopControl_cls_constants }, swig_yarp_dev_IOpenLoopControl_bases, swig_yarp_dev_IOpenLoopControl_base_names };

static int _wrap_new_DVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",0,0)
  result = (std::vector< double > *)new std::vector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_DVector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (std::vector< double > *)new std::vector< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(unsigned int)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(unsigned int,double)\n");
  lua_error(L);return 0;
}


static int _wrap_DVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DVector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DVector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< double > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DVector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DVector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DVector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DVector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DVector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< double > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DVector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< double > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem__",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DVector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (double)std_vector_Sl_double_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem__",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DVector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  try {
    std_vector_Sl_double_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DVector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_double_Sg__methods[] = {
    {"size", _wrap_DVector_size}, 
    {"max_size", _wrap_DVector_max_size}, 
    {"empty", _wrap_DVector_empty}, 
    {"clear", _wrap_DVector_clear}, 
    {"push_back", _wrap_DVector_push_back}, 
    {"pop_back", _wrap_DVector_pop_back}, 
    {"front", _wrap_DVector_front}, 
    {"back", _wrap_DVector_back}, 
    {"__getitem", _wrap_DVector___getitem}, 
    {"__setitem", _wrap_DVector___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_double_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_vector_Sl_double_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_Sl_double_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_vector_Sl_double_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_double_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_double_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_double_Sg_ = { "DVector", &SWIGTYPE_p_std__vectorT_double_t,_wrap_new_DVector, swig_delete_DVector, swig_std_vector_Sl_double_Sg__methods, swig_std_vector_Sl_double_Sg__attributes, { "DVector", swig_std_vector_Sl_double_Sg__cls_methods, swig_std_vector_Sl_double_Sg__cls_attributes, swig_std_vector_Sl_double_Sg__cls_constants }, swig_std_vector_Sl_double_Sg__bases, swig_std_vector_Sl_double_Sg__base_names };

static int _wrap_new_BVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *result = 0 ;
  
  SWIG_check_num_args("std::vector< bool >::vector",0,0)
  result = (std::vector< bool > *)new std::vector< bool >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_bool_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< bool > *result = 0 ;
  
  SWIG_check_num_args("std::vector< bool >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< bool >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< bool > *)new std::vector< bool >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_bool_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = 0 ;
  std::vector< bool > *result = 0 ;
  
  SWIG_check_num_args("std::vector< bool >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< bool >::vector",1,"std::vector< bool > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("new_BVector",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  result = (std::vector< bool > *)new std::vector< bool >((std::vector< bool > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_bool_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  bool arg2 ;
  std::vector< bool > *result = 0 ;
  
  SWIG_check_num_args("std::vector< bool >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< bool >::vector",1,"unsigned int");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("std::vector< bool >::vector",2,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (std::vector< bool > *)new std::vector< bool >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_bool_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_bool_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bool >::vector()\n"
    "    std::vector< bool >::vector(unsigned int)\n"
    "    std::vector< bool >::vector(std::vector< bool > const &)\n"
    "    std::vector< bool >::vector(unsigned int,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_BVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< bool >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< bool >::size",1,"std::vector< bool > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BVector_size",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  result = (unsigned int)((std::vector< bool > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< bool >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< bool >::max_size",1,"std::vector< bool > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BVector_max_size",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  result = (unsigned int)((std::vector< bool > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< bool >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< bool >::empty",1,"std::vector< bool > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BVector_empty",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  result = (bool)((std::vector< bool > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  SWIG_check_num_args("std::vector< bool >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< bool >::clear",1,"std::vector< bool > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BVector_clear",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("std::vector< bool >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< bool >::push_back",1,"std::vector< bool > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("std::vector< bool >::push_back",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BVector_push_back",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  SWIG_check_num_args("std::vector< bool >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< bool >::pop_back",1,"std::vector< bool > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BVector_pop_back",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< bool >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< bool >::front",1,"std::vector< bool > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BVector_front",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  result = (bool)((std::vector< bool > const *)arg1)->front();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< bool >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< bool >::back",1,"std::vector< bool > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BVector_back",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  result = (bool)((std::vector< bool > const *)arg1)->back();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("std::vector< bool >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< bool >::__getitem__",1,"std::vector< bool > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< bool >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BVector___getitem",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (bool)std_vector_Sl_bool_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("std::vector< bool >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< bool >::__setitem__",1,"std::vector< bool > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< bool >::__setitem__",2,"unsigned int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("std::vector< bool >::__setitem__",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BVector___setitem",1,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    std_vector_Sl_bool_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BVector(void *obj) {
std::vector< bool > *arg1 = (std::vector< bool > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_bool_Sg__methods[] = {
    {"size", _wrap_BVector_size}, 
    {"max_size", _wrap_BVector_max_size}, 
    {"empty", _wrap_BVector_empty}, 
    {"clear", _wrap_BVector_clear}, 
    {"push_back", _wrap_BVector_push_back}, 
    {"pop_back", _wrap_BVector_pop_back}, 
    {"front", _wrap_BVector_front}, 
    {"back", _wrap_BVector_back}, 
    {"__getitem", _wrap_BVector___getitem}, 
    {"__setitem", _wrap_BVector___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_bool_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_vector_Sl_bool_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_Sl_bool_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_vector_Sl_bool_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_bool_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_bool_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_bool_Sg_ = { "BVector", &SWIGTYPE_p_std__vectorT_bool_t,_wrap_new_BVector, swig_delete_BVector, swig_std_vector_Sl_bool_Sg__methods, swig_std_vector_Sl_bool_Sg__attributes, { "BVector", swig_std_vector_Sl_bool_Sg__cls_methods, swig_std_vector_Sl_bool_Sg__cls_attributes, swig_std_vector_Sl_bool_Sg__cls_constants }, swig_std_vector_Sl_bool_Sg__bases, swig_std_vector_Sl_bool_Sg__base_names };

static int _wrap_new_SVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",0,0)
  result = (std::vector< std::string > *)new std::vector< std::string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"std::vector< std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("new_SVector",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::string arg2 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"unsigned int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< std::string >::vector",2,"std::string");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(unsigned int)\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(unsigned int,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_SVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< std::string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::size",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SVector_size",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (unsigned int)((std::vector< std::string > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< std::string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::max_size",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SVector_max_size",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (unsigned int)((std::vector< std::string > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::empty",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SVector_empty",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::clear",1,"std::vector< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SVector_clear",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("std::vector< std::string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::push_back",1,"std::vector< std::string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< std::string >::push_back",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SVector_push_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::pop_back",1,"std::vector< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SVector_pop_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< std::string >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::front",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SVector_front",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = ((std::vector< std::string > const *)arg1)->front();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< std::string >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::back",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SVector_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = ((std::vector< std::string > const *)arg1)->back();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int arg2 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< std::string >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::__getitem__",1,"std::vector< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::string >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SVector___getitem",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_std_string_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  
  SWIG_check_num_args("std::vector< std::string >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::__setitem__",1,"std::vector< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::string >::__setitem__",2,"unsigned int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("std::vector< std::string >::__setitem__",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("SVector___setitem",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  try {
    std_vector_Sl_std_string_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SVector(void *obj) {
std::vector< std::string > *arg1 = (std::vector< std::string > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_std_string_Sg__methods[] = {
    {"size", _wrap_SVector_size}, 
    {"max_size", _wrap_SVector_max_size}, 
    {"empty", _wrap_SVector_empty}, 
    {"clear", _wrap_SVector_clear}, 
    {"push_back", _wrap_SVector_push_back}, 
    {"pop_back", _wrap_SVector_pop_back}, 
    {"front", _wrap_SVector_front}, 
    {"back", _wrap_SVector_back}, 
    {"__getitem", _wrap_SVector___getitem}, 
    {"__setitem", _wrap_SVector___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_std_string_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_vector_Sl_std_string_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_Sl_std_string_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_vector_Sl_std_string_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_std_string_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_std_string_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_std_string_Sg_ = { "SVector", &SWIGTYPE_p_std__vectorT_std__string_t,_wrap_new_SVector, swig_delete_SVector, swig_std_vector_Sl_std_string_Sg__methods, swig_std_vector_Sl_std_string_Sg__attributes, { "SVector", swig_std_vector_Sl_std_string_Sg__cls_methods, swig_std_vector_Sl_std_string_Sg__cls_attributes, swig_std_vector_Sl_std_string_Sg__cls_constants }, swig_std_vector_Sl_std_string_Sg__bases, swig_std_vector_Sl_std_string_Sg__base_names };

static int _wrap_new_IVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",0,0)
  result = (std::vector< int > *)new std::vector< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"std::vector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_IVector",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  int arg2 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::vector",2,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (std::vector< int > *)new std::vector< int >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_IVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(unsigned int)\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(unsigned int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_IVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::size",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IVector_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< int > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::max_size",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IVector_max_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< int > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::empty",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IVector_empty",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (bool)((std::vector< int > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::clear",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IVector_clear",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("std::vector< int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::push_back",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::push_back",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IVector_push_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::pop_back",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IVector_pop_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::front",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IVector_front",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< int > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::back",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IVector_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< int > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__getitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IVector___getitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (int)std_vector_Sl_int_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("std::vector< int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__setitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::__setitem__",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IVector___setitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_int_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IVector(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_int_Sg__methods[] = {
    {"size", _wrap_IVector_size}, 
    {"max_size", _wrap_IVector_max_size}, 
    {"empty", _wrap_IVector_empty}, 
    {"clear", _wrap_IVector_clear}, 
    {"push_back", _wrap_IVector_push_back}, 
    {"pop_back", _wrap_IVector_pop_back}, 
    {"front", _wrap_IVector_front}, 
    {"back", _wrap_IVector_back}, 
    {"__getitem", _wrap_IVector___getitem}, 
    {"__setitem", _wrap_IVector___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_vector_Sl_int_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_Sl_int_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_vector_Sl_int_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_int_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_int_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_int_Sg_ = { "IVector", &SWIGTYPE_p_std__vectorT_int_t,_wrap_new_IVector, swig_delete_IVector, swig_std_vector_Sl_int_Sg__methods, swig_std_vector_Sl_int_Sg__attributes, { "IVector", swig_std_vector_Sl_int_Sg__cls_methods, swig_std_vector_Sl_int_Sg__cls_attributes, swig_std_vector_Sl_int_Sg__cls_constants }, swig_std_vector_Sl_int_Sg__bases, swig_std_vector_Sl_int_Sg__base_names };

static int _wrap_new_PidVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::vector",0,0)
  result = (std::vector< yarp::dev::Pid > *)new std::vector< yarp::dev::Pid >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PidVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< yarp::dev::Pid > *)new std::vector< yarp::dev::Pid >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PidVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = 0 ;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::vector",1,"std::vector< yarp::dev::Pid > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("new_PidVector",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  result = (std::vector< yarp::dev::Pid > *)new std::vector< yarp::dev::Pid >((std::vector< yarp::dev::Pid > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PidVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  yarp::dev::Pid arg2 ;
  yarp::dev::Pid *argp2 ;
  std::vector< yarp::dev::Pid > *result = 0 ;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::vector",2,"yarp::dev::Pid");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("new_PidVector",2,SWIGTYPE_p_yarp__dev__Pid);
  }
  arg2 = *argp2;
  
  result = (std::vector< yarp::dev::Pid > *)new std::vector< yarp::dev::Pid >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PidVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PidVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PidVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PidVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__dev__Pid, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_PidVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PidVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< yarp::dev::Pid >::vector()\n"
    "    std::vector< yarp::dev::Pid >::vector(unsigned int)\n"
    "    std::vector< yarp::dev::Pid >::vector(std::vector< yarp::dev::Pid > const &)\n"
    "    std::vector< yarp::dev::Pid >::vector(unsigned int,yarp::dev::Pid)\n");
  lua_error(L);return 0;
}


static int _wrap_PidVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::size",1,"std::vector< yarp::dev::Pid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("PidVector_size",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  result = (unsigned int)((std::vector< yarp::dev::Pid > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PidVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::max_size",1,"std::vector< yarp::dev::Pid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("PidVector_max_size",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  result = (unsigned int)((std::vector< yarp::dev::Pid > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PidVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::empty",1,"std::vector< yarp::dev::Pid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("PidVector_empty",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  result = (bool)((std::vector< yarp::dev::Pid > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PidVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::clear",1,"std::vector< yarp::dev::Pid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("PidVector_clear",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PidVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  yarp::dev::Pid arg2 ;
  yarp::dev::Pid *argp2 ;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::push_back",1,"std::vector< yarp::dev::Pid > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::push_back",2,"yarp::dev::Pid");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("PidVector_push_back",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("PidVector_push_back",2,SWIGTYPE_p_yarp__dev__Pid);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PidVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::pop_back",1,"std::vector< yarp::dev::Pid > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("PidVector_pop_back",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PidVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  yarp::dev::Pid result;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::front",1,"std::vector< yarp::dev::Pid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("PidVector_front",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  result = ((std::vector< yarp::dev::Pid > const *)arg1)->front();
  {
    yarp::dev::Pid * resultptr = new yarp::dev::Pid((const yarp::dev::Pid &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__dev__Pid,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PidVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  yarp::dev::Pid result;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::back",1,"std::vector< yarp::dev::Pid > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("PidVector_back",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  result = ((std::vector< yarp::dev::Pid > const *)arg1)->back();
  {
    yarp::dev::Pid * resultptr = new yarp::dev::Pid((const yarp::dev::Pid &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__dev__Pid,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PidVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  unsigned int arg2 ;
  yarp::dev::Pid result;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::__getitem__",1,"std::vector< yarp::dev::Pid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("PidVector___getitem",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_yarp_dev_Pid_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  {
    yarp::dev::Pid * resultptr = new yarp::dev::Pid((const yarp::dev::Pid &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__dev__Pid,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PidVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) 0 ;
  unsigned int arg2 ;
  yarp::dev::Pid arg3 ;
  yarp::dev::Pid *argp3 ;
  
  SWIG_check_num_args("std::vector< yarp::dev::Pid >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::__setitem__",1,"std::vector< yarp::dev::Pid > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< yarp::dev::Pid >::__setitem__",3,"yarp::dev::Pid");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,0))){
    SWIG_fail_ptr("PidVector___setitem",1,SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_yarp__dev__Pid,0))){
    SWIG_fail_ptr("PidVector___setitem",3,SWIGTYPE_p_yarp__dev__Pid);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_yarp_dev_Pid_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PidVector(void *obj) {
std::vector< yarp::dev::Pid > *arg1 = (std::vector< yarp::dev::Pid > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_yarp_dev_Pid_Sg__methods[] = {
    {"size", _wrap_PidVector_size}, 
    {"max_size", _wrap_PidVector_max_size}, 
    {"empty", _wrap_PidVector_empty}, 
    {"clear", _wrap_PidVector_clear}, 
    {"push_back", _wrap_PidVector_push_back}, 
    {"pop_back", _wrap_PidVector_pop_back}, 
    {"front", _wrap_PidVector_front}, 
    {"back", _wrap_PidVector_back}, 
    {"__getitem", _wrap_PidVector___getitem}, 
    {"__setitem", _wrap_PidVector___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_yarp_dev_Pid_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_vector_Sl_yarp_dev_Pid_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_Sl_yarp_dev_Pid_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_vector_Sl_yarp_dev_Pid_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_yarp_dev_Pid_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_yarp_dev_Pid_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_yarp_dev_Pid_Sg_ = { "PidVector", &SWIGTYPE_p_std__vectorT_yarp__dev__Pid_t,_wrap_new_PidVector, swig_delete_PidVector, swig_std_vector_Sl_yarp_dev_Pid_Sg__methods, swig_std_vector_Sl_yarp_dev_Pid_Sg__attributes, { "PidVector", swig_std_vector_Sl_yarp_dev_Pid_Sg__cls_methods, swig_std_vector_Sl_yarp_dev_Pid_Sg__cls_attributes, swig_std_vector_Sl_yarp_dev_Pid_Sg__cls_constants }, swig_std_vector_Sl_yarp_dev_Pid_Sg__bases, swig_std_vector_Sl_yarp_dev_Pid_Sg__base_names };

static int _wrap_ImageRgb_getPixelSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgb >::getPixelSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::getPixelSize",1,"yarp::sig::ImageOf< yarp::sig::PixelRgb > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("ImageRgb_getPixelSize",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgb > const *)arg1)->getPixelSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgb_getPixelCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgb >::getPixelCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::getPixelCode",1,"yarp::sig::ImageOf< yarp::sig::PixelRgb > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("ImageRgb_getPixelCode",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgb > const *)arg1)->getPixelCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgb_pixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgb >::pixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::pixel",1,"yarp::sig::ImageOf< yarp::sig::PixelRgb > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::pixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::pixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("ImageRgb_pixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgb *) &(arg1)->pixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgb,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgb_access(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgb >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::operator ()",1,"yarp::sig::ImageOf< yarp::sig::PixelRgb > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("ImageRgb_access",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgb *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgb,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgb_safePixel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgb >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelRgb > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("ImageRgb_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgb *) &(arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgb,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgb_safePixel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgb *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgb >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelRgb > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgb >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("ImageRgb_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgb *) &((yarp::sig::ImageOf< yarp::sig::PixelRgb > const *)arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgb,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgb_safePixel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRgb_safePixel__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRgb_safePixel__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImageRgb_safePixel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelRgb >::safePixel(int,int)\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelRgb >::safePixel(int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_new_ImageRgb(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgb >::ImageOf",0,0)
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)new yarp::sig::ImageOf< yarp::sig::PixelRgb >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImageRgb(void *obj) {
yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__methods[] = {
    {"getPixelSize", _wrap_ImageRgb_getPixelSize}, 
    {"getPixelCode", _wrap_ImageRgb_getPixelCode}, 
    {"pixel", _wrap_ImageRgb_pixel}, 
    {"access", _wrap_ImageRgb_access}, 
    {"safePixel", _wrap_ImageRgb_safePixel}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__bases[] = {0,0};
static const char *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__base_names[] = {"yarp::sig::Image *",0};
static swig_lua_class _wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg_ = { "ImageRgb", &SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,_wrap_new_ImageRgb, swig_delete_ImageRgb, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__attributes, { "ImageRgb", swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__cls_methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__cls_attributes, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__cls_constants }, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__bases, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__base_names };

static int _wrap_TypedReaderImageRgb_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageRgb_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageRgb_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageRgb_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageRgb_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageRgb_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageRgb_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageRgb_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageRgb_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::interrupt",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_interrupt",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::lastRead",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_lastRead",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::isClosed",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_isClosed",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_useCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::useCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_useCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::disableCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_disableCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getPendingReads",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_getPendingReads",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getName",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_getName",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReplier",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_setReplier",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::acquire",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_acquire",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::release",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_release",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TypedReaderImageRgb_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgb_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setTargetPeriod",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgb_setTargetPeriod",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderImageRgb(void *obj) {
yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__methods[] = {
    {"setStrict", _wrap_TypedReaderImageRgb_setStrict}, 
    {"read", _wrap_TypedReaderImageRgb_read}, 
    {"interrupt", _wrap_TypedReaderImageRgb_interrupt}, 
    {"lastRead", _wrap_TypedReaderImageRgb_lastRead}, 
    {"isClosed", _wrap_TypedReaderImageRgb_isClosed}, 
    {"useCallback", _wrap_TypedReaderImageRgb_useCallback}, 
    {"disableCallback", _wrap_TypedReaderImageRgb_disableCallback}, 
    {"getPendingReads", _wrap_TypedReaderImageRgb_getPendingReads}, 
    {"getName", _wrap_TypedReaderImageRgb_getName}, 
    {"setReplier", _wrap_TypedReaderImageRgb_setReplier}, 
    {"acquire", _wrap_TypedReaderImageRgb_acquire}, 
    {"release", _wrap_TypedReaderImageRgb_release}, 
    {"setTargetPeriod", _wrap_TypedReaderImageRgb_setTargetPeriod}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg_ = { "TypedReaderImageRgb", &SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0, swig_delete_TypedReaderImageRgb, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__attributes, { "TypedReaderImageRgb", swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_attributes, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_constants }, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__bases, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__base_names };

static int _wrap_TypedReaderCallbackImageRgb_onRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgb > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgb_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgb_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageRgb_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgb > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgb_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgb_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgb_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageRgb_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TypedReaderCallbackImageRgb_onRead__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TypedReaderCallbackImageRgb_onRead__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderCallbackImageRgb_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelRgb > &)\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelRgb > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_TypedReaderCallbackImageRgb(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::TypedReaderCallback",0,0)
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderCallbackImageRgb(void *obj) {
yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__methods[] = {
    {"onRead", _wrap_TypedReaderCallbackImageRgb_onRead}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg_ = { "TypedReaderCallbackImageRgb", &SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,_wrap_new_TypedReaderCallbackImageRgb, swig_delete_TypedReaderCallbackImageRgb, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__attributes, { "TypedReaderCallbackImageRgb", swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_attributes, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_constants }, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__bases, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__base_names };

static int _wrap_BufferedPortImageRgb_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgb > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageRgb__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::BufferedPort",0,0)
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageRgb__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::BufferedPort",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::BufferedPort",1,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("new_BufferedPortImageRgb",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageRgb(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BufferedPortImageRgb__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BufferedPortImageRgb__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BufferedPortImageRgb'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::BufferedPort()\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::BufferedPort(yarp::os::Port &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgb_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageRgb_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgb_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BufferedPortImageRgb_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgb_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgb_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::close",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_close",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::interrupt",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_interrupt",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::resume",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_resume",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getPendingReads",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_getPendingReads",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::where",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_where",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_getName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_prepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::prepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_prepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *) &(arg1)->prepare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_unprepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::unprepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::unprepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_unprepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (bool)(arg1)->unprepare();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->write();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgb_write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgb_write__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgb_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::write(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::write()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgb_writeStrict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::writeStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::writeStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_writeStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->writeStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::waitForWrite",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_waitForWrite",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgb_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgb_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgb_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgb_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgb_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgb_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgb_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgb_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::lastRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_lastRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgb > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::isClosed",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_isClosed",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReplier",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setReplier",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setAdminReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setAdminReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgb > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgb > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageRgb_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BufferedPortImageRgb_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgb_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::sig::ImageOf< yarp::sig::PixelRgb > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelRgb > &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgb_useCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_useCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::useCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->useCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_useCallback(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgb_useCallback__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageRgb_useCallback__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgb_useCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::useCallback(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::useCallback()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgb_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::disableCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_disableCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_getEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getInputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_getInputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getOutputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_getOutputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::isWriting",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_isWriting",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getReport",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_getReport",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReporter",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setReporter",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::acquire",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_acquire",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::release",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_release",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BufferedPortImageRgb_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setTargetPeriod",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setTargetPeriod",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::getType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_getType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::promiseType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_promiseType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setInputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setInputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setOutputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setOutputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setRpcMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setRpcMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::acquireProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_acquireProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::releaseProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_releaseProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::includeNodeInName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_includeNodeInName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_setCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::removeCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_removeCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::lockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_lockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::tryLockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_tryLockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgb_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > >::unlockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgb_unlockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferedPortImageRgb(void *obj) {
yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__methods[] = {
    {"addOutput", _wrap_BufferedPortImageRgb_addOutput}, 
    {"close", _wrap_BufferedPortImageRgb_close}, 
    {"interrupt", _wrap_BufferedPortImageRgb_interrupt}, 
    {"resume", _wrap_BufferedPortImageRgb_resume}, 
    {"getPendingReads", _wrap_BufferedPortImageRgb_getPendingReads}, 
    {"where", _wrap_BufferedPortImageRgb_where}, 
    {"getName", _wrap_BufferedPortImageRgb_getName}, 
    {"prepare", _wrap_BufferedPortImageRgb_prepare}, 
    {"unprepare", _wrap_BufferedPortImageRgb_unprepare}, 
    {"write", _wrap_BufferedPortImageRgb_write}, 
    {"writeStrict", _wrap_BufferedPortImageRgb_writeStrict}, 
    {"waitForWrite", _wrap_BufferedPortImageRgb_waitForWrite}, 
    {"setStrict", _wrap_BufferedPortImageRgb_setStrict}, 
    {"read", _wrap_BufferedPortImageRgb_read}, 
    {"lastRead", _wrap_BufferedPortImageRgb_lastRead}, 
    {"isClosed", _wrap_BufferedPortImageRgb_isClosed}, 
    {"setReplier", _wrap_BufferedPortImageRgb_setReplier}, 
    {"setReader", _wrap_BufferedPortImageRgb_setReader}, 
    {"setAdminReader", _wrap_BufferedPortImageRgb_setAdminReader}, 
    {"onRead", _wrap_BufferedPortImageRgb_onRead}, 
    {"useCallback", _wrap_BufferedPortImageRgb_useCallback}, 
    {"disableCallback", _wrap_BufferedPortImageRgb_disableCallback}, 
    {"setEnvelope", _wrap_BufferedPortImageRgb_setEnvelope}, 
    {"getEnvelope", _wrap_BufferedPortImageRgb_getEnvelope}, 
    {"getInputCount", _wrap_BufferedPortImageRgb_getInputCount}, 
    {"getOutputCount", _wrap_BufferedPortImageRgb_getOutputCount}, 
    {"isWriting", _wrap_BufferedPortImageRgb_isWriting}, 
    {"getReport", _wrap_BufferedPortImageRgb_getReport}, 
    {"setReporter", _wrap_BufferedPortImageRgb_setReporter}, 
    {"acquire", _wrap_BufferedPortImageRgb_acquire}, 
    {"release", _wrap_BufferedPortImageRgb_release}, 
    {"setTargetPeriod", _wrap_BufferedPortImageRgb_setTargetPeriod}, 
    {"getType", _wrap_BufferedPortImageRgb_getType}, 
    {"promiseType", _wrap_BufferedPortImageRgb_promiseType}, 
    {"setInputMode", _wrap_BufferedPortImageRgb_setInputMode}, 
    {"setOutputMode", _wrap_BufferedPortImageRgb_setOutputMode}, 
    {"setRpcMode", _wrap_BufferedPortImageRgb_setRpcMode}, 
    {"acquireProperties", _wrap_BufferedPortImageRgb_acquireProperties}, 
    {"releaseProperties", _wrap_BufferedPortImageRgb_releaseProperties}, 
    {"includeNodeInName", _wrap_BufferedPortImageRgb_includeNodeInName}, 
    {"setCallbackLock", _wrap_BufferedPortImageRgb_setCallbackLock}, 
    {"removeCallbackLock", _wrap_BufferedPortImageRgb_removeCallbackLock}, 
    {"lockCallback", _wrap_BufferedPortImageRgb_lockCallback}, 
    {"tryLockCallback", _wrap_BufferedPortImageRgb_tryLockCallback}, 
    {"unlockCallback", _wrap_BufferedPortImageRgb_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__bases[] = {0,0,0,0};
static const char *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__base_names[] = {"yarp::os::Contactable *","yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *","yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *",0};
static swig_lua_class _wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg_ = { "BufferedPortImageRgb", &SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,_wrap_new_BufferedPortImageRgb, swig_delete_BufferedPortImageRgb, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__attributes, { "BufferedPortImageRgb", swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_attributes, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__cls_constants }, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__bases, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg__base_names };

static int _wrap_ImageRgba_getPixelSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgba >::getPixelSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::getPixelSize",1,"yarp::sig::ImageOf< yarp::sig::PixelRgba > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("ImageRgba_getPixelSize",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgba > const *)arg1)->getPixelSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgba_getPixelCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgba >::getPixelCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::getPixelCode",1,"yarp::sig::ImageOf< yarp::sig::PixelRgba > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("ImageRgba_getPixelCode",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgba > const *)arg1)->getPixelCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgba_pixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgba >::pixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::pixel",1,"yarp::sig::ImageOf< yarp::sig::PixelRgba > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::pixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::pixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("ImageRgba_pixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgba *) &(arg1)->pixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgba,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgba_access(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgba >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::operator ()",1,"yarp::sig::ImageOf< yarp::sig::PixelRgba > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("ImageRgba_access",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgba *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgba,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgba_safePixel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgba >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelRgba > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("ImageRgba_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgba *) &(arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgba,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgba_safePixel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgba *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgba >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelRgba > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgba >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("ImageRgba_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgba *) &((yarp::sig::ImageOf< yarp::sig::PixelRgba > const *)arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgba,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgba_safePixel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRgba_safePixel__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRgba_safePixel__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImageRgba_safePixel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelRgba >::safePixel(int,int)\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelRgba >::safePixel(int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_new_ImageRgba(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgba >::ImageOf",0,0)
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)new yarp::sig::ImageOf< yarp::sig::PixelRgba >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImageRgba(void *obj) {
yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__methods[] = {
    {"getPixelSize", _wrap_ImageRgba_getPixelSize}, 
    {"getPixelCode", _wrap_ImageRgba_getPixelCode}, 
    {"pixel", _wrap_ImageRgba_pixel}, 
    {"access", _wrap_ImageRgba_access}, 
    {"safePixel", _wrap_ImageRgba_safePixel}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__bases[] = {0,0};
static const char *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__base_names[] = {"yarp::sig::Image *",0};
static swig_lua_class _wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg_ = { "ImageRgba", &SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,_wrap_new_ImageRgba, swig_delete_ImageRgba, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__attributes, { "ImageRgba", swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__cls_methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__cls_attributes, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__cls_constants }, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__bases, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__base_names };

static int _wrap_TypedReaderImageRgba_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageRgba_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageRgba_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageRgba_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageRgba_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageRgba_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageRgba_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageRgba_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageRgba_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::interrupt",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_interrupt",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::lastRead",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_lastRead",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::isClosed",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_isClosed",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_useCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::useCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_useCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::disableCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_disableCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getPendingReads",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_getPendingReads",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getName",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_getName",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReplier",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_setReplier",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::acquire",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_acquire",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::release",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_release",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TypedReaderImageRgba_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgba_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setTargetPeriod",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgba_setTargetPeriod",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderImageRgba(void *obj) {
yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__methods[] = {
    {"setStrict", _wrap_TypedReaderImageRgba_setStrict}, 
    {"read", _wrap_TypedReaderImageRgba_read}, 
    {"interrupt", _wrap_TypedReaderImageRgba_interrupt}, 
    {"lastRead", _wrap_TypedReaderImageRgba_lastRead}, 
    {"isClosed", _wrap_TypedReaderImageRgba_isClosed}, 
    {"useCallback", _wrap_TypedReaderImageRgba_useCallback}, 
    {"disableCallback", _wrap_TypedReaderImageRgba_disableCallback}, 
    {"getPendingReads", _wrap_TypedReaderImageRgba_getPendingReads}, 
    {"getName", _wrap_TypedReaderImageRgba_getName}, 
    {"setReplier", _wrap_TypedReaderImageRgba_setReplier}, 
    {"acquire", _wrap_TypedReaderImageRgba_acquire}, 
    {"release", _wrap_TypedReaderImageRgba_release}, 
    {"setTargetPeriod", _wrap_TypedReaderImageRgba_setTargetPeriod}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg_ = { "TypedReaderImageRgba", &SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0, swig_delete_TypedReaderImageRgba, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__attributes, { "TypedReaderImageRgba", swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_attributes, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_constants }, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__bases, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__base_names };

static int _wrap_TypedReaderCallbackImageRgba_onRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgba > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgba_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgba_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageRgba_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgba > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgba_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgba_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgba_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageRgba_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TypedReaderCallbackImageRgba_onRead__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TypedReaderCallbackImageRgba_onRead__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderCallbackImageRgba_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelRgba > &)\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelRgba > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_TypedReaderCallbackImageRgba(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::TypedReaderCallback",0,0)
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderCallbackImageRgba(void *obj) {
yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__methods[] = {
    {"onRead", _wrap_TypedReaderCallbackImageRgba_onRead}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg_ = { "TypedReaderCallbackImageRgba", &SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,_wrap_new_TypedReaderCallbackImageRgba, swig_delete_TypedReaderCallbackImageRgba, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__attributes, { "TypedReaderCallbackImageRgba", swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_attributes, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_constants }, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__bases, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__base_names };

static int _wrap_BufferedPortImageRgba_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgba > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageRgba__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::BufferedPort",0,0)
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageRgba__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::BufferedPort",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::BufferedPort",1,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("new_BufferedPortImageRgba",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageRgba(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BufferedPortImageRgba__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BufferedPortImageRgba__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BufferedPortImageRgba'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::BufferedPort()\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::BufferedPort(yarp::os::Port &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgba_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageRgba_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgba_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BufferedPortImageRgba_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgba_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgba_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::close",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_close",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::interrupt",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_interrupt",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::resume",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_resume",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getPendingReads",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_getPendingReads",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::where",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_where",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_getName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_prepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::prepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_prepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *) &(arg1)->prepare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_unprepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::unprepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::unprepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_unprepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (bool)(arg1)->unprepare();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->write();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgba_write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgba_write__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgba_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::write(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::write()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgba_writeStrict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::writeStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::writeStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_writeStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->writeStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::waitForWrite",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_waitForWrite",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgba_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgba_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgba_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgba_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgba_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgba_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgba_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgba_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::lastRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_lastRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgba > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::isClosed",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_isClosed",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReplier",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setReplier",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setAdminReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setAdminReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgba > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgba > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageRgba_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BufferedPortImageRgba_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgba_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::sig::ImageOf< yarp::sig::PixelRgba > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelRgba > &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgba_useCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_useCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::useCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->useCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_useCallback(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgba_useCallback__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageRgba_useCallback__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgba_useCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::useCallback(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::useCallback()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgba_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::disableCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_disableCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_getEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getInputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_getInputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getOutputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_getOutputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::isWriting",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_isWriting",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getReport",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_getReport",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReporter",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setReporter",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::acquire",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_acquire",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::release",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_release",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BufferedPortImageRgba_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setTargetPeriod",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setTargetPeriod",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::getType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_getType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::promiseType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_promiseType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setInputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setInputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setOutputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setOutputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setRpcMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setRpcMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::acquireProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_acquireProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::releaseProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_releaseProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::includeNodeInName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_includeNodeInName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_setCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::removeCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_removeCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::lockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_lockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::tryLockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_tryLockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgba_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > >::unlockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgba_unlockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferedPortImageRgba(void *obj) {
yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__methods[] = {
    {"addOutput", _wrap_BufferedPortImageRgba_addOutput}, 
    {"close", _wrap_BufferedPortImageRgba_close}, 
    {"interrupt", _wrap_BufferedPortImageRgba_interrupt}, 
    {"resume", _wrap_BufferedPortImageRgba_resume}, 
    {"getPendingReads", _wrap_BufferedPortImageRgba_getPendingReads}, 
    {"where", _wrap_BufferedPortImageRgba_where}, 
    {"getName", _wrap_BufferedPortImageRgba_getName}, 
    {"prepare", _wrap_BufferedPortImageRgba_prepare}, 
    {"unprepare", _wrap_BufferedPortImageRgba_unprepare}, 
    {"write", _wrap_BufferedPortImageRgba_write}, 
    {"writeStrict", _wrap_BufferedPortImageRgba_writeStrict}, 
    {"waitForWrite", _wrap_BufferedPortImageRgba_waitForWrite}, 
    {"setStrict", _wrap_BufferedPortImageRgba_setStrict}, 
    {"read", _wrap_BufferedPortImageRgba_read}, 
    {"lastRead", _wrap_BufferedPortImageRgba_lastRead}, 
    {"isClosed", _wrap_BufferedPortImageRgba_isClosed}, 
    {"setReplier", _wrap_BufferedPortImageRgba_setReplier}, 
    {"setReader", _wrap_BufferedPortImageRgba_setReader}, 
    {"setAdminReader", _wrap_BufferedPortImageRgba_setAdminReader}, 
    {"onRead", _wrap_BufferedPortImageRgba_onRead}, 
    {"useCallback", _wrap_BufferedPortImageRgba_useCallback}, 
    {"disableCallback", _wrap_BufferedPortImageRgba_disableCallback}, 
    {"setEnvelope", _wrap_BufferedPortImageRgba_setEnvelope}, 
    {"getEnvelope", _wrap_BufferedPortImageRgba_getEnvelope}, 
    {"getInputCount", _wrap_BufferedPortImageRgba_getInputCount}, 
    {"getOutputCount", _wrap_BufferedPortImageRgba_getOutputCount}, 
    {"isWriting", _wrap_BufferedPortImageRgba_isWriting}, 
    {"getReport", _wrap_BufferedPortImageRgba_getReport}, 
    {"setReporter", _wrap_BufferedPortImageRgba_setReporter}, 
    {"acquire", _wrap_BufferedPortImageRgba_acquire}, 
    {"release", _wrap_BufferedPortImageRgba_release}, 
    {"setTargetPeriod", _wrap_BufferedPortImageRgba_setTargetPeriod}, 
    {"getType", _wrap_BufferedPortImageRgba_getType}, 
    {"promiseType", _wrap_BufferedPortImageRgba_promiseType}, 
    {"setInputMode", _wrap_BufferedPortImageRgba_setInputMode}, 
    {"setOutputMode", _wrap_BufferedPortImageRgba_setOutputMode}, 
    {"setRpcMode", _wrap_BufferedPortImageRgba_setRpcMode}, 
    {"acquireProperties", _wrap_BufferedPortImageRgba_acquireProperties}, 
    {"releaseProperties", _wrap_BufferedPortImageRgba_releaseProperties}, 
    {"includeNodeInName", _wrap_BufferedPortImageRgba_includeNodeInName}, 
    {"setCallbackLock", _wrap_BufferedPortImageRgba_setCallbackLock}, 
    {"removeCallbackLock", _wrap_BufferedPortImageRgba_removeCallbackLock}, 
    {"lockCallback", _wrap_BufferedPortImageRgba_lockCallback}, 
    {"tryLockCallback", _wrap_BufferedPortImageRgba_tryLockCallback}, 
    {"unlockCallback", _wrap_BufferedPortImageRgba_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__bases[] = {0,0,0,0};
static const char *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__base_names[] = {"yarp::os::Contactable *","yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *","yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *",0};
static swig_lua_class _wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg_ = { "BufferedPortImageRgba", &SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,_wrap_new_BufferedPortImageRgba, swig_delete_BufferedPortImageRgba, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__attributes, { "BufferedPortImageRgba", swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_attributes, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__cls_constants }, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__bases, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg__base_names };

static int _wrap_ImageMono_getPixelSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono >::getPixelSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::getPixelSize",1,"yarp::sig::ImageOf< yarp::sig::PixelMono > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("ImageMono_getPixelSize",1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono > const *)arg1)->getPixelSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono_getPixelCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono >::getPixelCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::getPixelCode",1,"yarp::sig::ImageOf< yarp::sig::PixelMono > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("ImageMono_getPixelCode",1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono > const *)arg1)->getPixelCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono_pixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono >::pixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::pixel",1,"yarp::sig::ImageOf< yarp::sig::PixelMono > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::pixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::pixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("ImageMono_pixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelMono *) &(arg1)->pixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono_access(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::operator ()",1,"yarp::sig::ImageOf< yarp::sig::PixelMono > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("ImageMono_access",1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelMono *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono_safePixel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelMono > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("ImageMono_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelMono *) &(arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono_safePixel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelMono > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("ImageMono_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelMono *) &((yarp::sig::ImageOf< yarp::sig::PixelMono > const *)arg1)->safePixel(arg2,arg3);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono_safePixel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageMono_safePixel__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageMono_safePixel__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImageMono_safePixel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelMono >::safePixel(int,int)\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelMono >::safePixel(int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_new_ImageMono(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono >::ImageOf",0,0)
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)new yarp::sig::ImageOf< yarp::sig::PixelMono >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImageMono(void *obj) {
yarp::sig::ImageOf< yarp::sig::PixelMono > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__methods[] = {
    {"getPixelSize", _wrap_ImageMono_getPixelSize}, 
    {"getPixelCode", _wrap_ImageMono_getPixelCode}, 
    {"pixel", _wrap_ImageMono_pixel}, 
    {"access", _wrap_ImageMono_access}, 
    {"safePixel", _wrap_ImageMono_safePixel}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__bases[] = {0,0};
static const char *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__base_names[] = {"yarp::sig::Image *",0};
static swig_lua_class _wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg_ = { "ImageMono", &SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,_wrap_new_ImageMono, swig_delete_ImageMono, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__attributes, { "ImageMono", swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__cls_methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__cls_attributes, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__cls_constants }, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__bases, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__base_names };

static int _wrap_TypedReaderImageMono_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageMono_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageMono_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageMono_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageMono_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageMono_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageMono_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageMono_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageMono_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::interrupt",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_interrupt",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::lastRead",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_lastRead",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::isClosed",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_isClosed",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_useCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::useCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_useCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::disableCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_disableCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getPendingReads",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_getPendingReads",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getName",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_getName",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReplier",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_setReplier",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("TypedReaderImageMono_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::acquire",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_acquire",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::release",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_release",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TypedReaderImageMono_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setTargetPeriod",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono_setTargetPeriod",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderImageMono(void *obj) {
yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__methods[] = {
    {"setStrict", _wrap_TypedReaderImageMono_setStrict}, 
    {"read", _wrap_TypedReaderImageMono_read}, 
    {"interrupt", _wrap_TypedReaderImageMono_interrupt}, 
    {"lastRead", _wrap_TypedReaderImageMono_lastRead}, 
    {"isClosed", _wrap_TypedReaderImageMono_isClosed}, 
    {"useCallback", _wrap_TypedReaderImageMono_useCallback}, 
    {"disableCallback", _wrap_TypedReaderImageMono_disableCallback}, 
    {"getPendingReads", _wrap_TypedReaderImageMono_getPendingReads}, 
    {"getName", _wrap_TypedReaderImageMono_getName}, 
    {"setReplier", _wrap_TypedReaderImageMono_setReplier}, 
    {"acquire", _wrap_TypedReaderImageMono_acquire}, 
    {"release", _wrap_TypedReaderImageMono_release}, 
    {"setTargetPeriod", _wrap_TypedReaderImageMono_setTargetPeriod}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg_ = { "TypedReaderImageMono", &SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0, swig_delete_TypedReaderImageMono, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__attributes, { "TypedReaderImageMono", swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_attributes, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_constants }, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__bases, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__base_names };

static int _wrap_TypedReaderCallbackImageMono_onRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelMono > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageMono_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageMono_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageMono_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelMono > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageMono_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageMono_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageMono_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageMono_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TypedReaderCallbackImageMono_onRead__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TypedReaderCallbackImageMono_onRead__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderCallbackImageMono_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelMono > &)\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelMono > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_TypedReaderCallbackImageMono(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >::TypedReaderCallback",0,0)
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderCallbackImageMono(void *obj) {
yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__methods[] = {
    {"onRead", _wrap_TypedReaderCallbackImageMono_onRead}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg_ = { "TypedReaderCallbackImageMono", &SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,_wrap_new_TypedReaderCallbackImageMono, swig_delete_TypedReaderCallbackImageMono, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__attributes, { "TypedReaderCallbackImageMono", swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_attributes, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_constants }, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__bases, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__base_names };

static int _wrap_BufferedPortImageMono_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelMono > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageMono__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::BufferedPort",0,0)
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageMono__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::BufferedPort",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::BufferedPort",1,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("new_BufferedPortImageMono",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageMono(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BufferedPortImageMono__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BufferedPortImageMono__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BufferedPortImageMono'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::BufferedPort()\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::BufferedPort(yarp::os::Port &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("BufferedPortImageMono_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageMono_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageMono_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BufferedPortImageMono_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::close",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_close",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::interrupt",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_interrupt",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::resume",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_resume",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getPendingReads",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_getPendingReads",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::where",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_where",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_getName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_prepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::prepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_prepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *) &(arg1)->prepare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_unprepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::unprepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::unprepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_unprepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (bool)(arg1)->unprepare();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->write();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageMono_write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageMono_write__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::write(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::write()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono_writeStrict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::writeStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::writeStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_writeStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->writeStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::waitForWrite",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_waitForWrite",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageMono_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageMono_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageMono_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageMono_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::lastRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_lastRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::isClosed",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_isClosed",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReplier",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setReplier",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setAdminReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setAdminReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelMono > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageMono_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_unsigned_char_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BufferedPortImageMono_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::sig::ImageOf< yarp::sig::PixelMono > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelMono > &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono_useCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_useCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::useCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->useCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_useCallback(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageMono_useCallback__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageMono_useCallback__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono_useCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::useCallback(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::useCallback()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::disableCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_disableCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_getEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageMono_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getInputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_getInputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getOutputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_getOutputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::isWriting",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_isWriting",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getReport",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_getReport",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageMono_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReporter",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setReporter",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::acquire",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_acquire",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::release",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_release",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BufferedPortImageMono_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setTargetPeriod",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setTargetPeriod",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::getType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_getType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::promiseType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_promiseType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("BufferedPortImageMono_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setInputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setInputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setOutputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setOutputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setRpcMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setRpcMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::acquireProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_acquireProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::releaseProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_releaseProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortImageMono_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::includeNodeInName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_includeNodeInName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_setCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("BufferedPortImageMono_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::removeCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_removeCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::lockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_lockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::tryLockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_tryLockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > >::unlockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono_unlockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferedPortImageMono(void *obj) {
yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__methods[] = {
    {"addOutput", _wrap_BufferedPortImageMono_addOutput}, 
    {"close", _wrap_BufferedPortImageMono_close}, 
    {"interrupt", _wrap_BufferedPortImageMono_interrupt}, 
    {"resume", _wrap_BufferedPortImageMono_resume}, 
    {"getPendingReads", _wrap_BufferedPortImageMono_getPendingReads}, 
    {"where", _wrap_BufferedPortImageMono_where}, 
    {"getName", _wrap_BufferedPortImageMono_getName}, 
    {"prepare", _wrap_BufferedPortImageMono_prepare}, 
    {"unprepare", _wrap_BufferedPortImageMono_unprepare}, 
    {"write", _wrap_BufferedPortImageMono_write}, 
    {"writeStrict", _wrap_BufferedPortImageMono_writeStrict}, 
    {"waitForWrite", _wrap_BufferedPortImageMono_waitForWrite}, 
    {"setStrict", _wrap_BufferedPortImageMono_setStrict}, 
    {"read", _wrap_BufferedPortImageMono_read}, 
    {"lastRead", _wrap_BufferedPortImageMono_lastRead}, 
    {"isClosed", _wrap_BufferedPortImageMono_isClosed}, 
    {"setReplier", _wrap_BufferedPortImageMono_setReplier}, 
    {"setReader", _wrap_BufferedPortImageMono_setReader}, 
    {"setAdminReader", _wrap_BufferedPortImageMono_setAdminReader}, 
    {"onRead", _wrap_BufferedPortImageMono_onRead}, 
    {"useCallback", _wrap_BufferedPortImageMono_useCallback}, 
    {"disableCallback", _wrap_BufferedPortImageMono_disableCallback}, 
    {"setEnvelope", _wrap_BufferedPortImageMono_setEnvelope}, 
    {"getEnvelope", _wrap_BufferedPortImageMono_getEnvelope}, 
    {"getInputCount", _wrap_BufferedPortImageMono_getInputCount}, 
    {"getOutputCount", _wrap_BufferedPortImageMono_getOutputCount}, 
    {"isWriting", _wrap_BufferedPortImageMono_isWriting}, 
    {"getReport", _wrap_BufferedPortImageMono_getReport}, 
    {"setReporter", _wrap_BufferedPortImageMono_setReporter}, 
    {"acquire", _wrap_BufferedPortImageMono_acquire}, 
    {"release", _wrap_BufferedPortImageMono_release}, 
    {"setTargetPeriod", _wrap_BufferedPortImageMono_setTargetPeriod}, 
    {"getType", _wrap_BufferedPortImageMono_getType}, 
    {"promiseType", _wrap_BufferedPortImageMono_promiseType}, 
    {"setInputMode", _wrap_BufferedPortImageMono_setInputMode}, 
    {"setOutputMode", _wrap_BufferedPortImageMono_setOutputMode}, 
    {"setRpcMode", _wrap_BufferedPortImageMono_setRpcMode}, 
    {"acquireProperties", _wrap_BufferedPortImageMono_acquireProperties}, 
    {"releaseProperties", _wrap_BufferedPortImageMono_releaseProperties}, 
    {"includeNodeInName", _wrap_BufferedPortImageMono_includeNodeInName}, 
    {"setCallbackLock", _wrap_BufferedPortImageMono_setCallbackLock}, 
    {"removeCallbackLock", _wrap_BufferedPortImageMono_removeCallbackLock}, 
    {"lockCallback", _wrap_BufferedPortImageMono_lockCallback}, 
    {"tryLockCallback", _wrap_BufferedPortImageMono_tryLockCallback}, 
    {"unlockCallback", _wrap_BufferedPortImageMono_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__bases[] = {0,0,0,0};
static const char *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__base_names[] = {"yarp::os::Contactable *","yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *","yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *",0};
static swig_lua_class _wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg_ = { "BufferedPortImageMono", &SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,_wrap_new_BufferedPortImageMono, swig_delete_BufferedPortImageMono, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__attributes, { "BufferedPortImageMono", swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_attributes, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__cls_constants }, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__bases, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg__base_names };

static int _wrap_ImageMono16_getPixelSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::getPixelSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::getPixelSize",1,"yarp::sig::ImageOf< yarp::sig::PixelMono16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0))){
    SWIG_fail_ptr("ImageMono16_getPixelSize",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono16 > const *)arg1)->getPixelSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono16_getPixelCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::getPixelCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::getPixelCode",1,"yarp::sig::ImageOf< yarp::sig::PixelMono16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0))){
    SWIG_fail_ptr("ImageMono16_getPixelCode",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelMono16 > const *)arg1)->getPixelCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono16_pixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono16 *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::pixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::pixel",1,"yarp::sig::ImageOf< yarp::sig::PixelMono16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::pixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::pixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0))){
    SWIG_fail_ptr("ImageMono16_pixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelMono16 *) &(arg1)->pixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__NetUint16,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono16_access(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono16 *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::operator ()",1,"yarp::sig::ImageOf< yarp::sig::PixelMono16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0))){
    SWIG_fail_ptr("ImageMono16_access",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelMono16 *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__NetUint16,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono16_safePixel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono16 *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelMono16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0))){
    SWIG_fail_ptr("ImageMono16_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelMono16 *) &(arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__NetUint16,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono16_safePixel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelMono16 *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelMono16 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0))){
    SWIG_fail_ptr("ImageMono16_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelMono16 *) &((yarp::sig::ImageOf< yarp::sig::PixelMono16 > const *)arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__NetUint16,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageMono16_safePixel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageMono16_safePixel__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageMono16_safePixel__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImageMono16_safePixel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelMono16 >::safePixel(int,int)\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelMono16 >::safePixel(int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_new_ImageMono16(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelMono16 >::ImageOf",0,0)
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)new yarp::sig::ImageOf< yarp::sig::PixelMono16 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImageMono16(void *obj) {
yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__methods[] = {
    {"getPixelSize", _wrap_ImageMono16_getPixelSize}, 
    {"getPixelCode", _wrap_ImageMono16_getPixelCode}, 
    {"pixel", _wrap_ImageMono16_pixel}, 
    {"access", _wrap_ImageMono16_access}, 
    {"safePixel", _wrap_ImageMono16_safePixel}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__bases[] = {0,0};
static const char *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__base_names[] = {"yarp::sig::Image *",0};
static swig_lua_class _wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg_ = { "ImageMono16", &SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,_wrap_new_ImageMono16, swig_delete_ImageMono16, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__attributes, { "ImageMono16", swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__cls_methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__cls_attributes, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__cls_constants }, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__bases, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__base_names };

static int _wrap_TypedReaderImageMono16_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageMono16_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageMono16_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageMono16_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageMono16_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageMono16_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageMono16_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageMono16_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageMono16_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::interrupt",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_interrupt",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::lastRead",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_lastRead",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::isClosed",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_isClosed",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_useCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::useCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_useCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::disableCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_disableCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getPendingReads",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_getPendingReads",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getName",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_getName",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReplier",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_setReplier",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::acquire",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_acquire",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::release",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_release",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TypedReaderImageMono16_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageMono16_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setTargetPeriod",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageMono16_setTargetPeriod",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderImageMono16(void *obj) {
yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__methods[] = {
    {"setStrict", _wrap_TypedReaderImageMono16_setStrict}, 
    {"read", _wrap_TypedReaderImageMono16_read}, 
    {"interrupt", _wrap_TypedReaderImageMono16_interrupt}, 
    {"lastRead", _wrap_TypedReaderImageMono16_lastRead}, 
    {"isClosed", _wrap_TypedReaderImageMono16_isClosed}, 
    {"useCallback", _wrap_TypedReaderImageMono16_useCallback}, 
    {"disableCallback", _wrap_TypedReaderImageMono16_disableCallback}, 
    {"getPendingReads", _wrap_TypedReaderImageMono16_getPendingReads}, 
    {"getName", _wrap_TypedReaderImageMono16_getName}, 
    {"setReplier", _wrap_TypedReaderImageMono16_setReplier}, 
    {"acquire", _wrap_TypedReaderImageMono16_acquire}, 
    {"release", _wrap_TypedReaderImageMono16_release}, 
    {"setTargetPeriod", _wrap_TypedReaderImageMono16_setTargetPeriod}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg_ = { "TypedReaderImageMono16", &SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0, swig_delete_TypedReaderImageMono16, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__attributes, { "TypedReaderImageMono16", swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_attributes, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_constants }, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__bases, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__base_names };

static int _wrap_TypedReaderCallbackImageMono16_onRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelMono16 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageMono16_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageMono16_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageMono16_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelMono16 > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageMono16_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageMono16_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageMono16_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageMono16_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TypedReaderCallbackImageMono16_onRead__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TypedReaderCallbackImageMono16_onRead__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderCallbackImageMono16_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelMono16 > &)\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelMono16 > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_TypedReaderCallbackImageMono16(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::TypedReaderCallback",0,0)
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderCallbackImageMono16(void *obj) {
yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__methods[] = {
    {"onRead", _wrap_TypedReaderCallbackImageMono16_onRead}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg_ = { "TypedReaderCallbackImageMono16", &SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,_wrap_new_TypedReaderCallbackImageMono16, swig_delete_TypedReaderCallbackImageMono16, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__attributes, { "TypedReaderCallbackImageMono16", swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_attributes, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_constants }, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__bases, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__base_names };

static int _wrap_BufferedPortImageMono16_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelMono16 > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageMono16__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::BufferedPort",0,0)
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageMono16__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::BufferedPort",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::BufferedPort",1,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("new_BufferedPortImageMono16",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageMono16(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BufferedPortImageMono16__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BufferedPortImageMono16__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BufferedPortImageMono16'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::BufferedPort()\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::BufferedPort(yarp::os::Port &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono16_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageMono16_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageMono16_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BufferedPortImageMono16_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono16_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono16_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::close",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_close",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::interrupt",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_interrupt",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::resume",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_resume",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getPendingReads",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_getPendingReads",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::where",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_where",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_getName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_prepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::prepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_prepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *) &(arg1)->prepare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_unprepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::unprepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::unprepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_unprepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (bool)(arg1)->unprepare();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->write();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageMono16_write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageMono16_write__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono16_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::write(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::write()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono16_writeStrict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::writeStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::writeStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_writeStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->writeStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::waitForWrite",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_waitForWrite",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageMono16_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageMono16_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono16_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono16_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageMono16_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageMono16_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono16_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono16_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::lastRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_lastRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelMono16 > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::isClosed",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_isClosed",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReplier",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setReplier",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setAdminReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setAdminReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelMono16 > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelMono16 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageMono16_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BufferedPortImageMono16_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono16_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::sig::ImageOf< yarp::sig::PixelMono16 > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelMono16 > &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono16_useCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_useCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::useCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->useCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_useCallback(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageMono16_useCallback__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageMono16_useCallback__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageMono16_useCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::useCallback(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::useCallback()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageMono16_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::disableCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_disableCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_getEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getInputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_getInputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getOutputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_getOutputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::isWriting",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_isWriting",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getReport",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_getReport",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReporter",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setReporter",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::acquire",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_acquire",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::release",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_release",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BufferedPortImageMono16_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setTargetPeriod",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setTargetPeriod",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::getType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_getType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::promiseType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_promiseType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setInputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setInputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setOutputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setOutputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setRpcMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setRpcMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::acquireProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_acquireProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::releaseProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_releaseProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::includeNodeInName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_includeNodeInName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_setCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::removeCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_removeCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::lockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_lockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::tryLockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_tryLockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageMono16_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > >::unlockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageMono16_unlockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferedPortImageMono16(void *obj) {
yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__methods[] = {
    {"addOutput", _wrap_BufferedPortImageMono16_addOutput}, 
    {"close", _wrap_BufferedPortImageMono16_close}, 
    {"interrupt", _wrap_BufferedPortImageMono16_interrupt}, 
    {"resume", _wrap_BufferedPortImageMono16_resume}, 
    {"getPendingReads", _wrap_BufferedPortImageMono16_getPendingReads}, 
    {"where", _wrap_BufferedPortImageMono16_where}, 
    {"getName", _wrap_BufferedPortImageMono16_getName}, 
    {"prepare", _wrap_BufferedPortImageMono16_prepare}, 
    {"unprepare", _wrap_BufferedPortImageMono16_unprepare}, 
    {"write", _wrap_BufferedPortImageMono16_write}, 
    {"writeStrict", _wrap_BufferedPortImageMono16_writeStrict}, 
    {"waitForWrite", _wrap_BufferedPortImageMono16_waitForWrite}, 
    {"setStrict", _wrap_BufferedPortImageMono16_setStrict}, 
    {"read", _wrap_BufferedPortImageMono16_read}, 
    {"lastRead", _wrap_BufferedPortImageMono16_lastRead}, 
    {"isClosed", _wrap_BufferedPortImageMono16_isClosed}, 
    {"setReplier", _wrap_BufferedPortImageMono16_setReplier}, 
    {"setReader", _wrap_BufferedPortImageMono16_setReader}, 
    {"setAdminReader", _wrap_BufferedPortImageMono16_setAdminReader}, 
    {"onRead", _wrap_BufferedPortImageMono16_onRead}, 
    {"useCallback", _wrap_BufferedPortImageMono16_useCallback}, 
    {"disableCallback", _wrap_BufferedPortImageMono16_disableCallback}, 
    {"setEnvelope", _wrap_BufferedPortImageMono16_setEnvelope}, 
    {"getEnvelope", _wrap_BufferedPortImageMono16_getEnvelope}, 
    {"getInputCount", _wrap_BufferedPortImageMono16_getInputCount}, 
    {"getOutputCount", _wrap_BufferedPortImageMono16_getOutputCount}, 
    {"isWriting", _wrap_BufferedPortImageMono16_isWriting}, 
    {"getReport", _wrap_BufferedPortImageMono16_getReport}, 
    {"setReporter", _wrap_BufferedPortImageMono16_setReporter}, 
    {"acquire", _wrap_BufferedPortImageMono16_acquire}, 
    {"release", _wrap_BufferedPortImageMono16_release}, 
    {"setTargetPeriod", _wrap_BufferedPortImageMono16_setTargetPeriod}, 
    {"getType", _wrap_BufferedPortImageMono16_getType}, 
    {"promiseType", _wrap_BufferedPortImageMono16_promiseType}, 
    {"setInputMode", _wrap_BufferedPortImageMono16_setInputMode}, 
    {"setOutputMode", _wrap_BufferedPortImageMono16_setOutputMode}, 
    {"setRpcMode", _wrap_BufferedPortImageMono16_setRpcMode}, 
    {"acquireProperties", _wrap_BufferedPortImageMono16_acquireProperties}, 
    {"releaseProperties", _wrap_BufferedPortImageMono16_releaseProperties}, 
    {"includeNodeInName", _wrap_BufferedPortImageMono16_includeNodeInName}, 
    {"setCallbackLock", _wrap_BufferedPortImageMono16_setCallbackLock}, 
    {"removeCallbackLock", _wrap_BufferedPortImageMono16_removeCallbackLock}, 
    {"lockCallback", _wrap_BufferedPortImageMono16_lockCallback}, 
    {"tryLockCallback", _wrap_BufferedPortImageMono16_tryLockCallback}, 
    {"unlockCallback", _wrap_BufferedPortImageMono16_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__bases[] = {0,0,0,0};
static const char *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__base_names[] = {"yarp::os::Contactable *","yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *","yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *",0};
static swig_lua_class _wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg_ = { "BufferedPortImageMono16", &SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,_wrap_new_BufferedPortImageMono16, swig_delete_BufferedPortImageMono16, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__attributes, { "BufferedPortImageMono16", swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_attributes, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__cls_constants }, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__bases, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg__base_names };

static int _wrap_ImageInt_getPixelSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelInt >::getPixelSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::getPixelSize",1,"yarp::sig::ImageOf< yarp::sig::PixelInt > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("ImageInt_getPixelSize",1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelInt > const *)arg1)->getPixelSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageInt_getPixelCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelInt >::getPixelCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::getPixelCode",1,"yarp::sig::ImageOf< yarp::sig::PixelInt > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("ImageInt_getPixelCode",1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelInt > const *)arg1)->getPixelCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageInt_pixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelInt *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelInt >::pixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::pixel",1,"yarp::sig::ImageOf< yarp::sig::PixelInt > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::pixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::pixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("ImageInt_pixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelInt *) &(arg1)->pixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageInt_access(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelInt *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelInt >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::operator ()",1,"yarp::sig::ImageOf< yarp::sig::PixelInt > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("ImageInt_access",1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelInt *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageInt_safePixel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelInt *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelInt >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelInt > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("ImageInt_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelInt *) &(arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageInt_safePixel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelInt *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelInt >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelInt > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("ImageInt_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelInt *) &((yarp::sig::ImageOf< yarp::sig::PixelInt > const *)arg1)->safePixel(arg2,arg3);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageInt_safePixel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageInt_safePixel__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageInt_safePixel__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImageInt_safePixel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelInt >::safePixel(int,int)\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelInt >::safePixel(int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_ImageInt_getPixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelInt >::getPixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::getPixel",1,"yarp::sig::ImageOf< yarp::sig::PixelInt > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::getPixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::getPixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("ImageInt_getPixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__getPixel(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageInt_setPixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelInt >::setPixel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::setPixel",1,"yarp::sig::ImageOf< yarp::sig::PixelInt > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::setPixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::setPixel",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelInt >::setPixel",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("ImageInt_setPixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__setPixel(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImageInt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelInt >::ImageOf",0,0)
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)new yarp::sig::ImageOf< yarp::sig::PixelInt >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImageInt(void *obj) {
yarp::sig::ImageOf< yarp::sig::PixelInt > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__methods[] = {
    {"getPixelSize", _wrap_ImageInt_getPixelSize}, 
    {"getPixelCode", _wrap_ImageInt_getPixelCode}, 
    {"pixel", _wrap_ImageInt_pixel}, 
    {"access", _wrap_ImageInt_access}, 
    {"safePixel", _wrap_ImageInt_safePixel}, 
    {"getPixel", _wrap_ImageInt_getPixel}, 
    {"setPixel", _wrap_ImageInt_setPixel}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__bases[] = {0,0};
static const char *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__base_names[] = {"yarp::sig::Image *",0};
static swig_lua_class _wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg_ = { "ImageInt", &SWIGTYPE_p_yarp__sig__ImageOfT_int_t,_wrap_new_ImageInt, swig_delete_ImageInt, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__attributes, { "ImageInt", swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__cls_methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__cls_attributes, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__cls_constants }, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__bases, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__base_names };

static int _wrap_TypedReaderImageInt_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageInt_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageInt_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageInt_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageInt_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageInt_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageInt_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageInt_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageInt_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::interrupt",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_interrupt",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::lastRead",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_lastRead",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::isClosed",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_isClosed",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_useCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::useCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_useCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::disableCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_disableCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getPendingReads",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_getPendingReads",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getName",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_getName",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReplier",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_setReplier",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("TypedReaderImageInt_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::acquire",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_acquire",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::release",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_release",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TypedReaderImageInt_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageInt_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setTargetPeriod",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageInt_setTargetPeriod",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderImageInt(void *obj) {
yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__methods[] = {
    {"setStrict", _wrap_TypedReaderImageInt_setStrict}, 
    {"read", _wrap_TypedReaderImageInt_read}, 
    {"interrupt", _wrap_TypedReaderImageInt_interrupt}, 
    {"lastRead", _wrap_TypedReaderImageInt_lastRead}, 
    {"isClosed", _wrap_TypedReaderImageInt_isClosed}, 
    {"useCallback", _wrap_TypedReaderImageInt_useCallback}, 
    {"disableCallback", _wrap_TypedReaderImageInt_disableCallback}, 
    {"getPendingReads", _wrap_TypedReaderImageInt_getPendingReads}, 
    {"getName", _wrap_TypedReaderImageInt_getName}, 
    {"setReplier", _wrap_TypedReaderImageInt_setReplier}, 
    {"acquire", _wrap_TypedReaderImageInt_acquire}, 
    {"release", _wrap_TypedReaderImageInt_release}, 
    {"setTargetPeriod", _wrap_TypedReaderImageInt_setTargetPeriod}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg_ = { "TypedReaderImageInt", &SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0, swig_delete_TypedReaderImageInt, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__attributes, { "TypedReaderImageInt", swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_attributes, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_constants }, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__bases, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__base_names };

static int _wrap_TypedReaderCallbackImageInt_onRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelInt > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageInt_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageInt_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageInt_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelInt > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageInt_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageInt_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageInt_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageInt_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TypedReaderCallbackImageInt_onRead__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TypedReaderCallbackImageInt_onRead__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderCallbackImageInt_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelInt > &)\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelInt > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_TypedReaderCallbackImageInt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >::TypedReaderCallback",0,0)
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderCallbackImageInt(void *obj) {
yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__methods[] = {
    {"onRead", _wrap_TypedReaderCallbackImageInt_onRead}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg_ = { "TypedReaderCallbackImageInt", &SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,_wrap_new_TypedReaderCallbackImageInt, swig_delete_TypedReaderCallbackImageInt, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__attributes, { "TypedReaderCallbackImageInt", swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_attributes, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_constants }, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__bases, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__base_names };

static int _wrap_BufferedPortImageInt_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelInt > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::BufferedPort",0,0)
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::BufferedPort",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::BufferedPort",1,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("new_BufferedPortImageInt",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageInt(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BufferedPortImageInt__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BufferedPortImageInt__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BufferedPortImageInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::BufferedPort()\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::BufferedPort(yarp::os::Port &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageInt_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("BufferedPortImageInt_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageInt_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageInt_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BufferedPortImageInt_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageInt_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageInt_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::close",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_close",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::interrupt",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_interrupt",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::resume",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_resume",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getPendingReads",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_getPendingReads",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::where",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_where",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_getName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_prepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::prepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_prepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *) &(arg1)->prepare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_unprepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::unprepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::unprepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_unprepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (bool)(arg1)->unprepare();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->write();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageInt_write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageInt_write__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageInt_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::write(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::write()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageInt_writeStrict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::writeStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::writeStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_writeStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->writeStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::waitForWrite",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_waitForWrite",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageInt_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageInt_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageInt_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageInt_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageInt_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageInt_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageInt_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageInt_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::lastRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_lastRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelInt > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::isClosed",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_isClosed",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReplier",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setReplier",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setAdminReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setAdminReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelInt > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelInt > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_int_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_int_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageInt_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_int_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BufferedPortImageInt_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageInt_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::sig::ImageOf< yarp::sig::PixelInt > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelInt > &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageInt_useCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_useCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::useCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->useCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_useCallback(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageInt_useCallback__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageInt_useCallback__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageInt_useCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::useCallback(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::useCallback()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageInt_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::disableCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_disableCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_getEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageInt_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getInputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_getInputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getOutputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_getOutputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::isWriting",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_isWriting",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getReport",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_getReport",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageInt_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReporter",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setReporter",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::acquire",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_acquire",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::release",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_release",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BufferedPortImageInt_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setTargetPeriod",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setTargetPeriod",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::getType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_getType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::promiseType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_promiseType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("BufferedPortImageInt_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setInputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setInputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setOutputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setOutputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setRpcMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setRpcMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::acquireProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_acquireProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::releaseProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_releaseProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortImageInt_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::includeNodeInName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_includeNodeInName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_setCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("BufferedPortImageInt_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::removeCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_removeCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::lockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_lockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::tryLockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_tryLockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageInt_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > >::unlockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageInt_unlockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferedPortImageInt(void *obj) {
yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__methods[] = {
    {"addOutput", _wrap_BufferedPortImageInt_addOutput}, 
    {"close", _wrap_BufferedPortImageInt_close}, 
    {"interrupt", _wrap_BufferedPortImageInt_interrupt}, 
    {"resume", _wrap_BufferedPortImageInt_resume}, 
    {"getPendingReads", _wrap_BufferedPortImageInt_getPendingReads}, 
    {"where", _wrap_BufferedPortImageInt_where}, 
    {"getName", _wrap_BufferedPortImageInt_getName}, 
    {"prepare", _wrap_BufferedPortImageInt_prepare}, 
    {"unprepare", _wrap_BufferedPortImageInt_unprepare}, 
    {"write", _wrap_BufferedPortImageInt_write}, 
    {"writeStrict", _wrap_BufferedPortImageInt_writeStrict}, 
    {"waitForWrite", _wrap_BufferedPortImageInt_waitForWrite}, 
    {"setStrict", _wrap_BufferedPortImageInt_setStrict}, 
    {"read", _wrap_BufferedPortImageInt_read}, 
    {"lastRead", _wrap_BufferedPortImageInt_lastRead}, 
    {"isClosed", _wrap_BufferedPortImageInt_isClosed}, 
    {"setReplier", _wrap_BufferedPortImageInt_setReplier}, 
    {"setReader", _wrap_BufferedPortImageInt_setReader}, 
    {"setAdminReader", _wrap_BufferedPortImageInt_setAdminReader}, 
    {"onRead", _wrap_BufferedPortImageInt_onRead}, 
    {"useCallback", _wrap_BufferedPortImageInt_useCallback}, 
    {"disableCallback", _wrap_BufferedPortImageInt_disableCallback}, 
    {"setEnvelope", _wrap_BufferedPortImageInt_setEnvelope}, 
    {"getEnvelope", _wrap_BufferedPortImageInt_getEnvelope}, 
    {"getInputCount", _wrap_BufferedPortImageInt_getInputCount}, 
    {"getOutputCount", _wrap_BufferedPortImageInt_getOutputCount}, 
    {"isWriting", _wrap_BufferedPortImageInt_isWriting}, 
    {"getReport", _wrap_BufferedPortImageInt_getReport}, 
    {"setReporter", _wrap_BufferedPortImageInt_setReporter}, 
    {"acquire", _wrap_BufferedPortImageInt_acquire}, 
    {"release", _wrap_BufferedPortImageInt_release}, 
    {"setTargetPeriod", _wrap_BufferedPortImageInt_setTargetPeriod}, 
    {"getType", _wrap_BufferedPortImageInt_getType}, 
    {"promiseType", _wrap_BufferedPortImageInt_promiseType}, 
    {"setInputMode", _wrap_BufferedPortImageInt_setInputMode}, 
    {"setOutputMode", _wrap_BufferedPortImageInt_setOutputMode}, 
    {"setRpcMode", _wrap_BufferedPortImageInt_setRpcMode}, 
    {"acquireProperties", _wrap_BufferedPortImageInt_acquireProperties}, 
    {"releaseProperties", _wrap_BufferedPortImageInt_releaseProperties}, 
    {"includeNodeInName", _wrap_BufferedPortImageInt_includeNodeInName}, 
    {"setCallbackLock", _wrap_BufferedPortImageInt_setCallbackLock}, 
    {"removeCallbackLock", _wrap_BufferedPortImageInt_removeCallbackLock}, 
    {"lockCallback", _wrap_BufferedPortImageInt_lockCallback}, 
    {"tryLockCallback", _wrap_BufferedPortImageInt_tryLockCallback}, 
    {"unlockCallback", _wrap_BufferedPortImageInt_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__bases[] = {0,0,0,0};
static const char *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__base_names[] = {"yarp::os::Contactable *","yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *","yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *",0};
static swig_lua_class _wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg_ = { "BufferedPortImageInt", &SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,_wrap_new_BufferedPortImageInt, swig_delete_BufferedPortImageInt, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__attributes, { "BufferedPortImageInt", swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_attributes, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__cls_constants }, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__bases, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg__base_names };

static int _wrap_TypedReaderSound_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::setStrict",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::setStrict",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderSound_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderSound_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderSound_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::Sound >::setStrict(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::Sound >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderSound_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  yarp::sig::Sound *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::read",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::Sound *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Sound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::read",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  result = (yarp::sig::Sound *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Sound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderSound_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderSound_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderSound_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::Sound >::read(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::Sound >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderSound_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::interrupt",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_interrupt",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::lastRead",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_lastRead",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  result = (yarp::sig::Sound *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Sound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::isClosed",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_isClosed",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_useCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::Sound > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::useCallback",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::Sound > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_useCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::disableCallback",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_disableCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::getPendingReads",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_getPendingReads",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::getName",1,"yarp::os::TypedReader< yarp::sig::Sound > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_getName",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  result = ((yarp::os::TypedReader< yarp::sig::Sound > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::setReplier",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_setReplier",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("TypedReaderSound_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::acquire",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_acquire",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::release",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_release",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TypedReaderSound_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderSound_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::Sound >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::setTargetPeriod",1,"yarp::os::TypedReader< yarp::sig::Sound > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::Sound >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("TypedReaderSound_setTargetPeriod",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderSound(void *obj) {
yarp::os::TypedReader< yarp::sig::Sound > *arg1 = (yarp::os::TypedReader< yarp::sig::Sound > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__methods[] = {
    {"setStrict", _wrap_TypedReaderSound_setStrict}, 
    {"read", _wrap_TypedReaderSound_read}, 
    {"interrupt", _wrap_TypedReaderSound_interrupt}, 
    {"lastRead", _wrap_TypedReaderSound_lastRead}, 
    {"isClosed", _wrap_TypedReaderSound_isClosed}, 
    {"useCallback", _wrap_TypedReaderSound_useCallback}, 
    {"disableCallback", _wrap_TypedReaderSound_disableCallback}, 
    {"getPendingReads", _wrap_TypedReaderSound_getPendingReads}, 
    {"getName", _wrap_TypedReaderSound_getName}, 
    {"setReplier", _wrap_TypedReaderSound_setReplier}, 
    {"acquire", _wrap_TypedReaderSound_acquire}, 
    {"release", _wrap_TypedReaderSound_release}, 
    {"setTargetPeriod", _wrap_TypedReaderSound_setTargetPeriod}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg_ = { "TypedReaderSound", &SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0, swig_delete_TypedReaderSound, swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__methods, swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__attributes, { "TypedReaderSound", swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__cls_methods, swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__cls_attributes, swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__cls_constants }, swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__bases, swig_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg__base_names };

static int _wrap_BufferedPortSound_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::Sound > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::sig::Sound &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::sig::Sound > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("BufferedPortSound_onRead",2,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::Sound > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortSound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::BufferedPort",0,0)
  result = (yarp::os::BufferedPort< yarp::sig::Sound > *)new yarp::os::BufferedPort< yarp::sig::Sound >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortSound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::Sound > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::BufferedPort",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::BufferedPort",1,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("new_BufferedPortSound",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (yarp::os::BufferedPort< yarp::sig::Sound > *)new yarp::os::BufferedPort< yarp::sig::Sound >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortSound(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BufferedPortSound__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BufferedPortSound__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BufferedPortSound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::BufferedPort()\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::BufferedPort(yarp::os::Port &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortSound_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("BufferedPortSound_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortSound_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortSound_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BufferedPortSound_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortSound_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortSound_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::close",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_close",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::interrupt",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_interrupt",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::resume",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_resume",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::getPendingReads",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_getPendingReads",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::where",1,"yarp::os::BufferedPort< yarp::sig::Sound > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_where",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::Sound > const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::getName",1,"yarp::os::BufferedPort< yarp::sig::Sound > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_getName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::Sound > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_prepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::prepare",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_prepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (yarp::sig::Sound *) &(arg1)->prepare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Sound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_unprepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::unprepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::unprepare",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_unprepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (bool)(arg1)->unprepare();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::write",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::write",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  (arg1)->write();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortSound_write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortSound_write__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortSound_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::write(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::write()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortSound_writeStrict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::writeStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::writeStrict",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_writeStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  (arg1)->writeStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::waitForWrite",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_waitForWrite",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortSound_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortSound_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortSound_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::setStrict(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortSound_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  yarp::sig::Sound *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::read",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::Sound *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Sound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::read",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (yarp::sig::Sound *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Sound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortSound_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortSound_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortSound_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::read(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortSound_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::lastRead",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_lastRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (yarp::sig::Sound *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__Sound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::isClosed",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_isClosed",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setReplier",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setReplier",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortSound_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setReader",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortSound_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setAdminReader",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setAdminReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortSound_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::sig::Sound *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::onRead",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::onRead",2,"yarp::sig::Sound &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__Sound,0))){
    SWIG_fail_ptr("BufferedPortSound_onRead",2,SWIGTYPE_p_yarp__sig__Sound);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortSound_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__Sound, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__Sound_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BufferedPortSound_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortSound_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::sig::Sound &,yarp::os::TypedReader< yarp::sig::Sound > const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::onRead(yarp::sig::Sound &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortSound_useCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::Sound > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::Sound > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_useCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::useCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  (arg1)->useCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_useCallback(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortSound_useCallback__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortSound_useCallback__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortSound_useCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::useCallback(yarp::os::TypedReaderCallback< yarp::sig::Sound > &)\n"
    "    yarp::os::BufferedPort< yarp::sig::Sound >::useCallback()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortSound_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::disableCallback",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_disableCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setEnvelope",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("BufferedPortSound_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::getEnvelope",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_getEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortSound_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::getInputCount",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_getInputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::getOutputCount",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_getOutputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::isWriting",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_isWriting",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::getReport",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_getReport",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortSound_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setReporter",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setReporter",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortSound_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::acquire",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_acquire",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::release",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_release",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BufferedPortSound_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setTargetPeriod",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setTargetPeriod",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::getType",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_getType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::promiseType",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_promiseType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("BufferedPortSound_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setInputMode",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setInputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setOutputMode",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setOutputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setRpcMode",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setRpcMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::acquireProperties",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_acquireProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::releaseProperties",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_releaseProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortSound_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::includeNodeInName",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_includeNodeInName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_setCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_setCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("BufferedPortSound_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::removeCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_removeCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::lockCallback",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_lockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::tryLockCallback",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_tryLockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortSound_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::Sound >::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::Sound >::unlockCallback",1,"yarp::os::BufferedPort< yarp::sig::Sound > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,0))){
    SWIG_fail_ptr("BufferedPortSound_unlockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferedPortSound(void *obj) {
yarp::os::BufferedPort< yarp::sig::Sound > *arg1 = (yarp::os::BufferedPort< yarp::sig::Sound > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__methods[] = {
    {"addOutput", _wrap_BufferedPortSound_addOutput}, 
    {"close", _wrap_BufferedPortSound_close}, 
    {"interrupt", _wrap_BufferedPortSound_interrupt}, 
    {"resume", _wrap_BufferedPortSound_resume}, 
    {"getPendingReads", _wrap_BufferedPortSound_getPendingReads}, 
    {"where", _wrap_BufferedPortSound_where}, 
    {"getName", _wrap_BufferedPortSound_getName}, 
    {"prepare", _wrap_BufferedPortSound_prepare}, 
    {"unprepare", _wrap_BufferedPortSound_unprepare}, 
    {"write", _wrap_BufferedPortSound_write}, 
    {"writeStrict", _wrap_BufferedPortSound_writeStrict}, 
    {"waitForWrite", _wrap_BufferedPortSound_waitForWrite}, 
    {"setStrict", _wrap_BufferedPortSound_setStrict}, 
    {"read", _wrap_BufferedPortSound_read}, 
    {"lastRead", _wrap_BufferedPortSound_lastRead}, 
    {"isClosed", _wrap_BufferedPortSound_isClosed}, 
    {"setReplier", _wrap_BufferedPortSound_setReplier}, 
    {"setReader", _wrap_BufferedPortSound_setReader}, 
    {"setAdminReader", _wrap_BufferedPortSound_setAdminReader}, 
    {"onRead", _wrap_BufferedPortSound_onRead}, 
    {"useCallback", _wrap_BufferedPortSound_useCallback}, 
    {"disableCallback", _wrap_BufferedPortSound_disableCallback}, 
    {"setEnvelope", _wrap_BufferedPortSound_setEnvelope}, 
    {"getEnvelope", _wrap_BufferedPortSound_getEnvelope}, 
    {"getInputCount", _wrap_BufferedPortSound_getInputCount}, 
    {"getOutputCount", _wrap_BufferedPortSound_getOutputCount}, 
    {"isWriting", _wrap_BufferedPortSound_isWriting}, 
    {"getReport", _wrap_BufferedPortSound_getReport}, 
    {"setReporter", _wrap_BufferedPortSound_setReporter}, 
    {"acquire", _wrap_BufferedPortSound_acquire}, 
    {"release", _wrap_BufferedPortSound_release}, 
    {"setTargetPeriod", _wrap_BufferedPortSound_setTargetPeriod}, 
    {"getType", _wrap_BufferedPortSound_getType}, 
    {"promiseType", _wrap_BufferedPortSound_promiseType}, 
    {"setInputMode", _wrap_BufferedPortSound_setInputMode}, 
    {"setOutputMode", _wrap_BufferedPortSound_setOutputMode}, 
    {"setRpcMode", _wrap_BufferedPortSound_setRpcMode}, 
    {"acquireProperties", _wrap_BufferedPortSound_acquireProperties}, 
    {"releaseProperties", _wrap_BufferedPortSound_releaseProperties}, 
    {"includeNodeInName", _wrap_BufferedPortSound_includeNodeInName}, 
    {"setCallbackLock", _wrap_BufferedPortSound_setCallbackLock}, 
    {"removeCallbackLock", _wrap_BufferedPortSound_removeCallbackLock}, 
    {"lockCallback", _wrap_BufferedPortSound_lockCallback}, 
    {"tryLockCallback", _wrap_BufferedPortSound_tryLockCallback}, 
    {"unlockCallback", _wrap_BufferedPortSound_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__bases[] = {0,0,0};
static const char *swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__base_names[] = {"yarp::os::Contactable *","yarp::os::TypedReader< yarp::sig::Sound > *",0};
static swig_lua_class _wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg_ = { "BufferedPortSound", &SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__Sound_t,_wrap_new_BufferedPortSound, swig_delete_BufferedPortSound, swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__attributes, { "BufferedPortSound", swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__cls_methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__cls_attributes, swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__cls_constants }, swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__bases, swig_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg__base_names };

static int _wrap_ImageFloat_getPixelSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelFloat >::getPixelSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::getPixelSize",1,"yarp::sig::ImageOf< yarp::sig::PixelFloat > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("ImageFloat_getPixelSize",1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelFloat > const *)arg1)->getPixelSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageFloat_getPixelCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelFloat >::getPixelCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::getPixelCode",1,"yarp::sig::ImageOf< yarp::sig::PixelFloat > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("ImageFloat_getPixelCode",1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelFloat > const *)arg1)->getPixelCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageFloat_pixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelFloat >::pixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::pixel",1,"yarp::sig::ImageOf< yarp::sig::PixelFloat > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::pixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::pixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("ImageFloat_pixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelFloat *) &(arg1)->pixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageFloat_access(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelFloat >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::operator ()",1,"yarp::sig::ImageOf< yarp::sig::PixelFloat > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("ImageFloat_access",1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelFloat *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageFloat_safePixel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelFloat >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelFloat > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("ImageFloat_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelFloat *) &(arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageFloat_safePixel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelFloat >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelFloat > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("ImageFloat_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelFloat *) &((yarp::sig::ImageOf< yarp::sig::PixelFloat > const *)arg1)->safePixel(arg2,arg3);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageFloat_safePixel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageFloat_safePixel__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageFloat_safePixel__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImageFloat_safePixel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelFloat >::safePixel(int,int)\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelFloat >::safePixel(int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_ImageFloat_getPixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelFloat >::getPixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::getPixel",1,"yarp::sig::ImageOf< yarp::sig::PixelFloat > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::getPixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::getPixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("ImageFloat_getPixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__getPixel(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageFloat_setPixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelFloat >::setPixel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::setPixel",1,"yarp::sig::ImageOf< yarp::sig::PixelFloat > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::setPixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::setPixel",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelFloat >::setPixel",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("ImageFloat_setPixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__setPixel(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImageFloat(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelFloat >::ImageOf",0,0)
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)new yarp::sig::ImageOf< yarp::sig::PixelFloat >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImageFloat(void *obj) {
yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__methods[] = {
    {"getPixelSize", _wrap_ImageFloat_getPixelSize}, 
    {"getPixelCode", _wrap_ImageFloat_getPixelCode}, 
    {"pixel", _wrap_ImageFloat_pixel}, 
    {"access", _wrap_ImageFloat_access}, 
    {"safePixel", _wrap_ImageFloat_safePixel}, 
    {"getPixel", _wrap_ImageFloat_getPixel}, 
    {"setPixel", _wrap_ImageFloat_setPixel}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__bases[] = {0,0};
static const char *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__base_names[] = {"yarp::sig::Image *",0};
static swig_lua_class _wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg_ = { "ImageFloat", &SWIGTYPE_p_yarp__sig__ImageOfT_float_t,_wrap_new_ImageFloat, swig_delete_ImageFloat, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__attributes, { "ImageFloat", swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__cls_methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__cls_attributes, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__cls_constants }, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__bases, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__base_names };

static int _wrap_TypedReaderImageFloat_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageFloat_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageFloat_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageFloat_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageFloat_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageFloat_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageFloat_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageFloat_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageFloat_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::interrupt",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_interrupt",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::lastRead",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_lastRead",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::isClosed",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_isClosed",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_useCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::useCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_useCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::disableCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_disableCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getPendingReads",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_getPendingReads",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getName",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_getName",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReplier",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_setReplier",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::acquire",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_acquire",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::release",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_release",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TypedReaderImageFloat_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageFloat_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setTargetPeriod",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageFloat_setTargetPeriod",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderImageFloat(void *obj) {
yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__methods[] = {
    {"setStrict", _wrap_TypedReaderImageFloat_setStrict}, 
    {"read", _wrap_TypedReaderImageFloat_read}, 
    {"interrupt", _wrap_TypedReaderImageFloat_interrupt}, 
    {"lastRead", _wrap_TypedReaderImageFloat_lastRead}, 
    {"isClosed", _wrap_TypedReaderImageFloat_isClosed}, 
    {"useCallback", _wrap_TypedReaderImageFloat_useCallback}, 
    {"disableCallback", _wrap_TypedReaderImageFloat_disableCallback}, 
    {"getPendingReads", _wrap_TypedReaderImageFloat_getPendingReads}, 
    {"getName", _wrap_TypedReaderImageFloat_getName}, 
    {"setReplier", _wrap_TypedReaderImageFloat_setReplier}, 
    {"acquire", _wrap_TypedReaderImageFloat_acquire}, 
    {"release", _wrap_TypedReaderImageFloat_release}, 
    {"setTargetPeriod", _wrap_TypedReaderImageFloat_setTargetPeriod}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg_ = { "TypedReaderImageFloat", &SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0, swig_delete_TypedReaderImageFloat, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__attributes, { "TypedReaderImageFloat", swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_attributes, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_constants }, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__bases, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__base_names };

static int _wrap_TypedReaderCallbackImageFloat_onRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageFloat_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageFloat_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageFloat_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelFloat > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageFloat_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageFloat_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageFloat_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageFloat_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TypedReaderCallbackImageFloat_onRead__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TypedReaderCallbackImageFloat_onRead__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderCallbackImageFloat_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelFloat > &)\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelFloat > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_TypedReaderCallbackImageFloat(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::TypedReaderCallback",0,0)
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderCallbackImageFloat(void *obj) {
yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__methods[] = {
    {"onRead", _wrap_TypedReaderCallbackImageFloat_onRead}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg_ = { "TypedReaderCallbackImageFloat", &SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,_wrap_new_TypedReaderCallbackImageFloat, swig_delete_TypedReaderCallbackImageFloat, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__attributes, { "TypedReaderCallbackImageFloat", swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_attributes, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_constants }, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__bases, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__base_names };

static int _wrap_BufferedPortImageFloat_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelFloat > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::BufferedPort",0,0)
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::BufferedPort",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::BufferedPort",1,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("new_BufferedPortImageFloat",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageFloat(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BufferedPortImageFloat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BufferedPortImageFloat__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BufferedPortImageFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::BufferedPort()\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::BufferedPort(yarp::os::Port &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageFloat_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageFloat_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageFloat_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BufferedPortImageFloat_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageFloat_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageFloat_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::close",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_close",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::interrupt",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_interrupt",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::resume",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_resume",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getPendingReads",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_getPendingReads",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::where",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_where",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_getName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_prepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::prepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_prepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *) &(arg1)->prepare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_unprepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::unprepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::unprepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_unprepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (bool)(arg1)->unprepare();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->write();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageFloat_write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageFloat_write__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageFloat_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::write(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::write()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageFloat_writeStrict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::writeStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::writeStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_writeStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->writeStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::waitForWrite",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_waitForWrite",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageFloat_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageFloat_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageFloat_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageFloat_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageFloat_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageFloat_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageFloat_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageFloat_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::lastRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_lastRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelFloat > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::isClosed",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_isClosed",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReplier",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setReplier",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setAdminReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setAdminReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelFloat > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_float_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_float_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageFloat_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BufferedPortImageFloat_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageFloat_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::sig::ImageOf< yarp::sig::PixelFloat > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelFloat > &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageFloat_useCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_useCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::useCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->useCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_useCallback(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageFloat_useCallback__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageFloat_useCallback__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageFloat_useCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::useCallback(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::useCallback()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageFloat_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::disableCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_disableCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_getEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getInputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_getInputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getOutputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_getOutputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::isWriting",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_isWriting",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getReport",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_getReport",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReporter",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setReporter",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::acquire",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_acquire",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::release",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_release",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BufferedPortImageFloat_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setTargetPeriod",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setTargetPeriod",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::getType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_getType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::promiseType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_promiseType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setInputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setInputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setOutputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setOutputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setRpcMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setRpcMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::acquireProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_acquireProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::releaseProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_releaseProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::includeNodeInName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_includeNodeInName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_setCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::removeCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_removeCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::lockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_lockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::tryLockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_tryLockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageFloat_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > >::unlockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageFloat_unlockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferedPortImageFloat(void *obj) {
yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__methods[] = {
    {"addOutput", _wrap_BufferedPortImageFloat_addOutput}, 
    {"close", _wrap_BufferedPortImageFloat_close}, 
    {"interrupt", _wrap_BufferedPortImageFloat_interrupt}, 
    {"resume", _wrap_BufferedPortImageFloat_resume}, 
    {"getPendingReads", _wrap_BufferedPortImageFloat_getPendingReads}, 
    {"where", _wrap_BufferedPortImageFloat_where}, 
    {"getName", _wrap_BufferedPortImageFloat_getName}, 
    {"prepare", _wrap_BufferedPortImageFloat_prepare}, 
    {"unprepare", _wrap_BufferedPortImageFloat_unprepare}, 
    {"write", _wrap_BufferedPortImageFloat_write}, 
    {"writeStrict", _wrap_BufferedPortImageFloat_writeStrict}, 
    {"waitForWrite", _wrap_BufferedPortImageFloat_waitForWrite}, 
    {"setStrict", _wrap_BufferedPortImageFloat_setStrict}, 
    {"read", _wrap_BufferedPortImageFloat_read}, 
    {"lastRead", _wrap_BufferedPortImageFloat_lastRead}, 
    {"isClosed", _wrap_BufferedPortImageFloat_isClosed}, 
    {"setReplier", _wrap_BufferedPortImageFloat_setReplier}, 
    {"setReader", _wrap_BufferedPortImageFloat_setReader}, 
    {"setAdminReader", _wrap_BufferedPortImageFloat_setAdminReader}, 
    {"onRead", _wrap_BufferedPortImageFloat_onRead}, 
    {"useCallback", _wrap_BufferedPortImageFloat_useCallback}, 
    {"disableCallback", _wrap_BufferedPortImageFloat_disableCallback}, 
    {"setEnvelope", _wrap_BufferedPortImageFloat_setEnvelope}, 
    {"getEnvelope", _wrap_BufferedPortImageFloat_getEnvelope}, 
    {"getInputCount", _wrap_BufferedPortImageFloat_getInputCount}, 
    {"getOutputCount", _wrap_BufferedPortImageFloat_getOutputCount}, 
    {"isWriting", _wrap_BufferedPortImageFloat_isWriting}, 
    {"getReport", _wrap_BufferedPortImageFloat_getReport}, 
    {"setReporter", _wrap_BufferedPortImageFloat_setReporter}, 
    {"acquire", _wrap_BufferedPortImageFloat_acquire}, 
    {"release", _wrap_BufferedPortImageFloat_release}, 
    {"setTargetPeriod", _wrap_BufferedPortImageFloat_setTargetPeriod}, 
    {"getType", _wrap_BufferedPortImageFloat_getType}, 
    {"promiseType", _wrap_BufferedPortImageFloat_promiseType}, 
    {"setInputMode", _wrap_BufferedPortImageFloat_setInputMode}, 
    {"setOutputMode", _wrap_BufferedPortImageFloat_setOutputMode}, 
    {"setRpcMode", _wrap_BufferedPortImageFloat_setRpcMode}, 
    {"acquireProperties", _wrap_BufferedPortImageFloat_acquireProperties}, 
    {"releaseProperties", _wrap_BufferedPortImageFloat_releaseProperties}, 
    {"includeNodeInName", _wrap_BufferedPortImageFloat_includeNodeInName}, 
    {"setCallbackLock", _wrap_BufferedPortImageFloat_setCallbackLock}, 
    {"removeCallbackLock", _wrap_BufferedPortImageFloat_removeCallbackLock}, 
    {"lockCallback", _wrap_BufferedPortImageFloat_lockCallback}, 
    {"tryLockCallback", _wrap_BufferedPortImageFloat_tryLockCallback}, 
    {"unlockCallback", _wrap_BufferedPortImageFloat_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__bases[] = {0,0,0,0};
static const char *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__base_names[] = {"yarp::os::Contactable *","yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *","yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *",0};
static swig_lua_class _wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg_ = { "BufferedPortImageFloat", &SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,_wrap_new_BufferedPortImageFloat, swig_delete_BufferedPortImageFloat, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__attributes, { "BufferedPortImageFloat", swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_attributes, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__cls_constants }, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__bases, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg__base_names };

static int _wrap_ImageRgbFloat_getPixelSize(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::getPixelSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::getPixelSize",1,"yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0))){
    SWIG_fail_ptr("ImageRgbFloat_getPixelSize",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > const *)arg1)->getPixelSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgbFloat_getPixelCode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::getPixelCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::getPixelCode",1,"yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0))){
    SWIG_fail_ptr("ImageRgbFloat_getPixelCode",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t);
  }
  
  result = (int)((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > const *)arg1)->getPixelCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgbFloat_pixel(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::pixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::pixel",1,"yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::pixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::pixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0))){
    SWIG_fail_ptr("ImageRgbFloat_pixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgbFloat *) &(arg1)->pixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgbFloat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgbFloat_access(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::operator ()",1,"yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0))){
    SWIG_fail_ptr("ImageRgbFloat_access",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgbFloat *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgbFloat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgbFloat_safePixel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0))){
    SWIG_fail_ptr("ImageRgbFloat_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgbFloat *) &(arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgbFloat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgbFloat_safePixel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) 0 ;
  int arg2 ;
  int arg3 ;
  yarp::sig::PixelRgbFloat *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::safePixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::safePixel",1,"yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::safePixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::safePixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0))){
    SWIG_fail_ptr("ImageRgbFloat_safePixel",1,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (yarp::sig::PixelRgbFloat *) &((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > const *)arg1)->safePixel(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__PixelRgbFloat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRgbFloat_safePixel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRgbFloat_safePixel__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRgbFloat_safePixel__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImageRgbFloat_safePixel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::safePixel(int,int)\n"
    "    yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::safePixel(int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_new_ImageRgbFloat(lua_State* L) {
  int SWIG_arg = 0;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >::ImageOf",0,0)
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)new yarp::sig::ImageOf< yarp::sig::PixelRgbFloat >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImageRgbFloat(void *obj) {
yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg1 = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__methods[] = {
    {"getPixelSize", _wrap_ImageRgbFloat_getPixelSize}, 
    {"getPixelCode", _wrap_ImageRgbFloat_getPixelCode}, 
    {"pixel", _wrap_ImageRgbFloat_pixel}, 
    {"access", _wrap_ImageRgbFloat_access}, 
    {"safePixel", _wrap_ImageRgbFloat_safePixel}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__bases[] = {0,0};
static const char *swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__base_names[] = {"yarp::sig::Image *",0};
static swig_lua_class _wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg_ = { "ImageRgbFloat", &SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,_wrap_new_ImageRgbFloat, swig_delete_ImageRgbFloat, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__attributes, { "ImageRgbFloat", swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__cls_methods, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__cls_attributes, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__cls_constants }, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__bases, swig_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__base_names };

static int _wrap_TypedReaderImageRgbFloat_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_setStrict",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageRgbFloat_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageRgbFloat_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageRgbFloat_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageRgbFloat_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_read",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TypedReaderImageRgbFloat_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypedReaderImageRgbFloat_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderImageRgbFloat_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read(bool)\n"
    "    yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_TypedReaderImageRgbFloat_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::interrupt",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_interrupt",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::lastRead",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_lastRead",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::isClosed",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_isClosed",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_useCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::useCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_useCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::disableCallback",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_disableCallback",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getPendingReads",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_getPendingReads",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getName",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_getName",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = ((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReplier",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_setReplier",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::acquire",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_acquire",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::release",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_release",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TypedReaderImageRgbFloat_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderImageRgbFloat_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setTargetPeriod",1,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderImageRgbFloat_setTargetPeriod",1,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderImageRgbFloat(void *obj) {
yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__methods[] = {
    {"setStrict", _wrap_TypedReaderImageRgbFloat_setStrict}, 
    {"read", _wrap_TypedReaderImageRgbFloat_read}, 
    {"interrupt", _wrap_TypedReaderImageRgbFloat_interrupt}, 
    {"lastRead", _wrap_TypedReaderImageRgbFloat_lastRead}, 
    {"isClosed", _wrap_TypedReaderImageRgbFloat_isClosed}, 
    {"useCallback", _wrap_TypedReaderImageRgbFloat_useCallback}, 
    {"disableCallback", _wrap_TypedReaderImageRgbFloat_disableCallback}, 
    {"getPendingReads", _wrap_TypedReaderImageRgbFloat_getPendingReads}, 
    {"getName", _wrap_TypedReaderImageRgbFloat_getName}, 
    {"setReplier", _wrap_TypedReaderImageRgbFloat_setReplier}, 
    {"acquire", _wrap_TypedReaderImageRgbFloat_acquire}, 
    {"release", _wrap_TypedReaderImageRgbFloat_release}, 
    {"setTargetPeriod", _wrap_TypedReaderImageRgbFloat_setTargetPeriod}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg_ = { "TypedReaderImageRgbFloat", &SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0, swig_delete_TypedReaderImageRgbFloat, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__attributes, { "TypedReaderImageRgbFloat", swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_methods, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_attributes, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_constants }, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__bases, swig_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__base_names };

static int _wrap_TypedReaderCallbackImageRgbFloat_onRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgbFloat_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgbFloat_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageRgbFloat_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg3 = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead",1,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgbFloat_onRead",1,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgbFloat_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("TypedReaderCallbackImageRgbFloat_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypedReaderCallbackImageRgbFloat_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TypedReaderCallbackImageRgbFloat_onRead__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TypedReaderCallbackImageRgbFloat_onRead__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TypedReaderCallbackImageRgbFloat_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > &)\n"
    "    yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_TypedReaderCallbackImageRgbFloat(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::TypedReaderCallback",0,0)
  result = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)new yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypedReaderCallbackImageRgbFloat(void *obj) {
yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__methods[] = {
    {"onRead", _wrap_TypedReaderCallbackImageRgbFloat_onRead}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__bases[] = {0};
static const char *swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg_ = { "TypedReaderCallbackImageRgbFloat", &SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,_wrap_new_TypedReaderCallbackImageRgbFloat, swig_delete_TypedReaderCallbackImageRgbFloat, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__attributes, { "TypedReaderCallbackImageRgbFloat", swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_methods, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_attributes, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_constants }, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__bases, swig_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__base_names };

static int _wrap_BufferedPortImageRgbFloat_onRead__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg3 = 0 ;
  
  SWIG_check_num_args("onRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("onRead",3,"yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_onRead",3,SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->onRead(*arg2,(yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageRgbFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::BufferedPort",0,0)
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageRgbFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::Port *arg1 = 0 ;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::BufferedPort",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::BufferedPort",1,"yarp::os::Port &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__Port,0))){
    SWIG_fail_ptr("new_BufferedPortImageRgbFloat",1,SWIGTYPE_p_yarp__os__Port);
  }
  
  result = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)new yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BufferedPortImageRgbFloat(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BufferedPortImageRgbFloat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__Port, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BufferedPortImageRgbFloat__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BufferedPortImageRgbFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::BufferedPort()\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::BufferedPort(yarp::os::Port &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgbFloat_addOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString temp2 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput",2,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_addOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString *arg2 = 0 ;
  yarp::os::ConstString *arg3 = 0 ;
  yarp::os::ConstString temp2 ;
  yarp::os::ConstString temp3 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput",2,"yarp::os::ConstString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput",3,"yarp::os::ConstString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->addOutput((yarp::os::ConstString const &)*arg2,(yarp::os::ConstString const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_addOutput__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Contact *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput",2,"yarp::os::Contact const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_addOutput",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Contact,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_addOutput",2,SWIGTYPE_p_yarp__os__Contact);
  }
  
  result = (bool)(arg1)->addOutput((yarp::os::Contact const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_addOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__Contact, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageRgbFloat_addOutput__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgbFloat_addOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_BufferedPortImageRgbFloat_addOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgbFloat_addOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput(yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput(yarp::os::ConstString const &,yarp::os::ConstString const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::addOutput(yarp::os::Contact const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgbFloat_close(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::close",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_close",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::interrupt",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_interrupt",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_resume(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::resume",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_resume",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_getPendingReads(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getPendingReads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getPendingReads",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_getPendingReads",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (int)(arg1)->getPendingReads();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_where(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Contact result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::where",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::where",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_where",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *)arg1)->where();
  {
    yarp::os::Contact * resultptr = new yarp::os::Contact((const yarp::os::Contact &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_yarp__os__Contact,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_getName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::ConstString result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_getName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_prepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::prepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_prepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) &(arg1)->prepare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_unprepare(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::unprepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::unprepare",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_unprepare",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (bool)(arg1)->unprepare();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::write",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::write",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::write",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_write",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->write();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgbFloat_write__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgbFloat_write__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgbFloat_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::write(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::write()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgbFloat_writeStrict(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::writeStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::writeStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_writeStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->writeStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_waitForWrite(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::waitForWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::waitForWrite",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_waitForWrite",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->waitForWrite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setStrict__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStrict(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setStrict__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setStrict",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->setStrict();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setStrict(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgbFloat_setStrict__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgbFloat_setStrict__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgbFloat_setStrict'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setStrict()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgbFloat_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_read",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgbFloat_read__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BufferedPortImageRgbFloat_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgbFloat_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read(bool)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::read()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgbFloat_lastRead(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::lastRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::lastRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_lastRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *)(arg1)->lastRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_isClosed(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::isClosed",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_isClosed",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (bool)(arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setReplier(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReplier",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReplier",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setReplier",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setReplier",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReplier(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setAdminReader(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setAdminReader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setAdminReader",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setAdminReader",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setAdminReader",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setAdminReader",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  (arg1)->setAdminReader(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_onRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead",2,"yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_onRead",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_onRead",2,SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t);
  }
  
  (arg1)->onRead(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_onRead(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageRgbFloat_onRead__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BufferedPortImageRgbFloat_onRead__SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgbFloat_onRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    onRead(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > &,yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > const &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::onRead(yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > &)\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgbFloat_useCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::useCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::useCallback",2,"yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_useCallback",2,SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->useCallback(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_useCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::useCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::useCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_useCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->useCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_useCallback(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BufferedPortImageRgbFloat_useCallback__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BufferedPortImageRgbFloat_useCallback__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BufferedPortImageRgbFloat_useCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::useCallback(yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > &)\n"
    "    yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::useCallback()\n");
  lua_error(L);return 0;
}


static int _wrap_BufferedPortImageRgbFloat_disableCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::disableCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::disableCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_disableCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->disableCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortWriter *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setEnvelope",2,"yarp::os::PortWriter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortWriter,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setEnvelope",2,SWIGTYPE_p_yarp__os__PortWriter);
  }
  
  result = (bool)(arg1)->setEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReader *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getEnvelope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getEnvelope",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getEnvelope",2,"yarp::os::PortReader &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_getEnvelope",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReader,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_getEnvelope",2,SWIGTYPE_p_yarp__os__PortReader);
  }
  
  result = (bool)(arg1)->getEnvelope(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_getInputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getInputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getInputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_getInputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (int)(arg1)->getInputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_getOutputCount(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  int result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getOutputCount",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_getOutputCount",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (int)(arg1)->getOutputCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_isWriting(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::isWriting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::isWriting",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_isWriting",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (bool)(arg1)->isWriting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_getReport(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getReport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getReport",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getReport",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_getReport",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_getReport",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->getReport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setReporter(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::PortReport *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReporter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReporter",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setReporter",2,"yarp::os::PortReport &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setReporter",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__PortReport,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setReporter",2,SWIGTYPE_p_yarp__os__PortReport);
  }
  
  (arg1)->setReporter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_acquire(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::acquire",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::acquire",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_acquire",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (void *)(arg1)->acquire();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_release(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::release",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::release",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::release",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_release",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BufferedPortImageRgbFloat_release");
  (arg1)->release(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setTargetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setTargetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setTargetPeriod",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setTargetPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setTargetPeriod",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setTargetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_getType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  Type result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::getType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_getType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (arg1)->getType();
  {
    Type * resultptr = new Type((const Type &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Type,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_promiseType(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  Type *arg2 = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::promiseType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::promiseType",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::promiseType",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_promiseType",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_promiseType",2,SWIGTYPE_p_Type);
  }
  
  (arg1)->promiseType((Type const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setInputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setInputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setInputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setInputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setInputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setOutputMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setOutputMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setOutputMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setOutputMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setOutputMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOutputMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setRpcMode(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setRpcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setRpcMode",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setRpcMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setRpcMode",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRpcMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_acquireProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  yarp::os::Property *result = 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::acquireProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::acquireProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::acquireProperties",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_acquireProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (yarp::os::Property *)(arg1)->acquireProperties(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_yarp__os__Property,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_releaseProperties(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Property *arg2 = (yarp::os::Property *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::releaseProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::releaseProperties",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::releaseProperties",2,"yarp::os::Property *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_releaseProperties",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Property,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_releaseProperties",2,SWIGTYPE_p_yarp__os__Property);
  }
  
  (arg1)->releaseProperties(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_includeNodeInName(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::includeNodeInName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::includeNodeInName",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::includeNodeInName",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_includeNodeInName",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->includeNodeInName(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_setCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  yarp::os::Mutex *arg2 = (yarp::os::Mutex *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setCallbackLock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::setCallbackLock",2,"yarp::os::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_yarp__os__Mutex,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_setCallbackLock",2,SWIGTYPE_p_yarp__os__Mutex);
  }
  
  result = (bool)(arg1)->setCallbackLock(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_removeCallbackLock(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::removeCallbackLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::removeCallbackLock",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_removeCallbackLock",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (bool)(arg1)->removeCallbackLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_lockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::lockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::lockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_lockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (bool)(arg1)->lockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_tryLockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::tryLockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::tryLockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_tryLockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  result = (bool)(arg1)->tryLockCallback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BufferedPortImageRgbFloat_unlockCallback(lua_State* L) {
  int SWIG_arg = 0;
  yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) 0 ;
  
  SWIG_check_num_args("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::unlockCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > >::unlockCallback",1,"yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,0))){
    SWIG_fail_ptr("BufferedPortImageRgbFloat_unlockCallback",1,SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t);
  }
  
  (arg1)->unlockCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferedPortImageRgbFloat(void *obj) {
yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *arg1 = (yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) obj;
delete arg1;
}
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__methods[] = {
    {"addOutput", _wrap_BufferedPortImageRgbFloat_addOutput}, 
    {"close", _wrap_BufferedPortImageRgbFloat_close}, 
    {"interrupt", _wrap_BufferedPortImageRgbFloat_interrupt}, 
    {"resume", _wrap_BufferedPortImageRgbFloat_resume}, 
    {"getPendingReads", _wrap_BufferedPortImageRgbFloat_getPendingReads}, 
    {"where", _wrap_BufferedPortImageRgbFloat_where}, 
    {"getName", _wrap_BufferedPortImageRgbFloat_getName}, 
    {"prepare", _wrap_BufferedPortImageRgbFloat_prepare}, 
    {"unprepare", _wrap_BufferedPortImageRgbFloat_unprepare}, 
    {"write", _wrap_BufferedPortImageRgbFloat_write}, 
    {"writeStrict", _wrap_BufferedPortImageRgbFloat_writeStrict}, 
    {"waitForWrite", _wrap_BufferedPortImageRgbFloat_waitForWrite}, 
    {"setStrict", _wrap_BufferedPortImageRgbFloat_setStrict}, 
    {"read", _wrap_BufferedPortImageRgbFloat_read}, 
    {"lastRead", _wrap_BufferedPortImageRgbFloat_lastRead}, 
    {"isClosed", _wrap_BufferedPortImageRgbFloat_isClosed}, 
    {"setReplier", _wrap_BufferedPortImageRgbFloat_setReplier}, 
    {"setReader", _wrap_BufferedPortImageRgbFloat_setReader}, 
    {"setAdminReader", _wrap_BufferedPortImageRgbFloat_setAdminReader}, 
    {"onRead", _wrap_BufferedPortImageRgbFloat_onRead}, 
    {"useCallback", _wrap_BufferedPortImageRgbFloat_useCallback}, 
    {"disableCallback", _wrap_BufferedPortImageRgbFloat_disableCallback}, 
    {"setEnvelope", _wrap_BufferedPortImageRgbFloat_setEnvelope}, 
    {"getEnvelope", _wrap_BufferedPortImageRgbFloat_getEnvelope}, 
    {"getInputCount", _wrap_BufferedPortImageRgbFloat_getInputCount}, 
    {"getOutputCount", _wrap_BufferedPortImageRgbFloat_getOutputCount}, 
    {"isWriting", _wrap_BufferedPortImageRgbFloat_isWriting}, 
    {"getReport", _wrap_BufferedPortImageRgbFloat_getReport}, 
    {"setReporter", _wrap_BufferedPortImageRgbFloat_setReporter}, 
    {"acquire", _wrap_BufferedPortImageRgbFloat_acquire}, 
    {"release", _wrap_BufferedPortImageRgbFloat_release}, 
    {"setTargetPeriod", _wrap_BufferedPortImageRgbFloat_setTargetPeriod}, 
    {"getType", _wrap_BufferedPortImageRgbFloat_getType}, 
    {"promiseType", _wrap_BufferedPortImageRgbFloat_promiseType}, 
    {"setInputMode", _wrap_BufferedPortImageRgbFloat_setInputMode}, 
    {"setOutputMode", _wrap_BufferedPortImageRgbFloat_setOutputMode}, 
    {"setRpcMode", _wrap_BufferedPortImageRgbFloat_setRpcMode}, 
    {"acquireProperties", _wrap_BufferedPortImageRgbFloat_acquireProperties}, 
    {"releaseProperties", _wrap_BufferedPortImageRgbFloat_releaseProperties}, 
    {"includeNodeInName", _wrap_BufferedPortImageRgbFloat_includeNodeInName}, 
    {"setCallbackLock", _wrap_BufferedPortImageRgbFloat_setCallbackLock}, 
    {"removeCallbackLock", _wrap_BufferedPortImageRgbFloat_removeCallbackLock}, 
    {"lockCallback", _wrap_BufferedPortImageRgbFloat_lockCallback}, 
    {"tryLockCallback", _wrap_BufferedPortImageRgbFloat_tryLockCallback}, 
    {"unlockCallback", _wrap_BufferedPortImageRgbFloat_unlockCallback}, 
    {0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__bases[] = {0,0,0,0};
static const char *swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__base_names[] = {"yarp::os::Contactable *","yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *","yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *",0};
static swig_lua_class _wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg_ = { "BufferedPortImageRgbFloat", &SWIGTYPE_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,_wrap_new_BufferedPortImageRgbFloat, swig_delete_BufferedPortImageRgbFloat, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__attributes, { "BufferedPortImageRgbFloat", swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_methods, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_attributes, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__cls_constants }, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__bases, swig_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg__base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "Contact_empty", _wrap_Contact_empty},
    { "Contact_invalid", _wrap_Contact_invalid},
    { "Contact_byName", _wrap_Contact_byName},
    { "Contact_byCarrier", _wrap_Contact_byCarrier},
    { "Contact_byConfig", _wrap_Contact_byConfig},
    { "Contact_bySocket", _wrap_Contact_bySocket},
    { "Contact_convertHostToIp", _wrap_Contact_convertHostToIp},
    { "Contact_fromString", _wrap_Contact_fromString},
    { "ConnectionReader_createConnectionReader", _wrap_ConnectionReader_createConnectionReader},
    { "ConnectionReader_readFromStream", _wrap_ConnectionReader_readFromStream},
    { "ConnectionWriter_createBufferedConnectionWriter", _wrap_ConnectionWriter_createBufferedConnectionWriter},
    { "ConnectionWriter_writeToStream", _wrap_ConnectionWriter_writeToStream},
    { "Portable_copyPortable", _wrap_Portable_copyPortable},
    { "Value_makeInt", _wrap_Value_makeInt},
    { "Value_makeDouble", _wrap_Value_makeDouble},
    { "Value_makeString", _wrap_Value_makeString},
    { "Value_makeVocab",_wrap_Value_makeVocab},
    { "Value_makeBlob", _wrap_Value_makeBlob},
    { "Value_makeList",_wrap_Value_makeList},
    { "Value_makeValue", _wrap_Value_makeValue},
    { "Value_getNullValue", _wrap_Value_getNullValue},
    { "Vocab_encode", _wrap_Vocab_encode},
    { "Vocab_decode", _wrap_Vocab_decode},
    { "NetworkBase_initMinimum", _wrap_NetworkBase_initMinimum},
    { "NetworkBase_autoInitMinimum", _wrap_NetworkBase_autoInitMinimum},
    { "NetworkBase_finiMinimum", _wrap_NetworkBase_finiMinimum},
    { "NetworkBase_connect",_wrap_NetworkBase_connect},
    { "NetworkBase_disconnect",_wrap_NetworkBase_disconnect},
    { "NetworkBase_isConnected",_wrap_NetworkBase_isConnected},
    { "NetworkBase_exists",_wrap_NetworkBase_exists},
    { "NetworkBase_sync",_wrap_NetworkBase_sync},
    { "NetworkBase_main", _wrap_NetworkBase_main},
    { "NetworkBase_runNameServer", _wrap_NetworkBase_runNameServer},
    { "NetworkBase_assertion", _wrap_NetworkBase_assertion},
    { "NetworkBase_queryName", _wrap_NetworkBase_queryName},
    { "NetworkBase_registerName", _wrap_NetworkBase_registerName},
    { "NetworkBase_registerContact", _wrap_NetworkBase_registerContact},
    { "NetworkBase_unregisterName", _wrap_NetworkBase_unregisterName},
    { "NetworkBase_unregisterContact", _wrap_NetworkBase_unregisterContact},
    { "NetworkBase_setProperty", _wrap_NetworkBase_setProperty},
    { "NetworkBase_getProperty", _wrap_NetworkBase_getProperty},
    { "NetworkBase_getNameServerName", _wrap_NetworkBase_getNameServerName},
    { "NetworkBase_getNameServerContact", _wrap_NetworkBase_getNameServerContact},
    { "NetworkBase_setNameServerName", _wrap_NetworkBase_setNameServerName},
    { "NetworkBase_setLocalMode", _wrap_NetworkBase_setLocalMode},
    { "NetworkBase_getLocalMode", _wrap_NetworkBase_getLocalMode},
    { "NetworkBase_readString",_wrap_NetworkBase_readString},
    { "NetworkBase_writeToNameServer", _wrap_NetworkBase_writeToNameServer},
    { "NetworkBase_write",_wrap_NetworkBase_write},
    { "NetworkBase_checkNetwork",_wrap_NetworkBase_checkNetwork},
    { "NetworkBase_initialized", _wrap_NetworkBase_initialized},
    { "NetworkBase_setVerbosity", _wrap_NetworkBase_setVerbosity},
    { "NetworkBase_queryBypass", _wrap_NetworkBase_queryBypass},
    { "NetworkBase_getQueryBypass", _wrap_NetworkBase_getQueryBypass},
    { "NetworkBase_getEnvironment",_wrap_NetworkBase_getEnvironment},
    { "NetworkBase_setEnvironment", _wrap_NetworkBase_setEnvironment},
    { "NetworkBase_unsetEnvironment", _wrap_NetworkBase_unsetEnvironment},
    { "NetworkBase_getDirectorySeparator", _wrap_NetworkBase_getDirectorySeparator},
    { "NetworkBase_getPathSeparator", _wrap_NetworkBase_getPathSeparator},
    { "NetworkBase_registerCarrier", _wrap_NetworkBase_registerCarrier},
    { "NetworkBase_lock", _wrap_NetworkBase_lock},
    { "NetworkBase_unlock", _wrap_NetworkBase_unlock},
    { "NetworkBase_localNetworkAllocation", _wrap_NetworkBase_localNetworkAllocation},
    { "NetworkBase_detectNameServer", _wrap_NetworkBase_detectNameServer},
    { "NetworkBase_setNameServerContact", _wrap_NetworkBase_setNameServerContact},
    { "NetworkBase_getConfigFile", _wrap_NetworkBase_getConfigFile},
    { "NetworkBase_getDefaultPortRange", _wrap_NetworkBase_getDefaultPortRange},
    { "NetworkBase_setConnectionQos",_wrap_NetworkBase_setConnectionQos},
    { "NetworkBase_getConnectionQos",_wrap_NetworkBase_getConnectionQos},
    { "Network_init", _wrap_Network_init},
    { "Network_fini", _wrap_Network_fini},
    { "PortablePairBase_readPair", _wrap_PortablePairBase_readPair},
    { "PortablePairBase_writePair", _wrap_PortablePairBase_writePair},
    { "Bottle_getNullBottle", _wrap_Bottle_getNullBottle},
    { "Bottle_describeBottleCode", _wrap_Bottle_describeBottleCode},
    { "typedReaderMissingCallback", _wrap_typedReaderMissingCallback},
    { "Random_seed_c", _wrap_Random_seed_c},
    { "Random_normal",_wrap_Random_normal},
    { "Random_uniform",_wrap_Random_uniform},
    { "Thread_getCount", _wrap_Thread_getCount},
    { "Thread_getKeyOfCaller", _wrap_Thread_getKeyOfCaller},
    { "Thread_setDefaultStackSize", _wrap_Thread_setDefaultStackSize},
    { "Time_delay", _wrap_Time_delay},
    { "Time_now", _wrap_Time_now},
    { "Time_yield", _wrap_Time_yield},
    { "Time_turboBoost", _wrap_Time_turboBoost},
    { "Time_useSystemClock", _wrap_Time_useSystemClock},
    { "Time_useNetworkClock", _wrap_Time_useNetworkClock},
    { "Time_useCustomClock", _wrap_Time_useCustomClock},
    { "Time_isSystemClock", _wrap_Time_isSystemClock},
    { "Time_isValid", _wrap_Time_isValid},
    { "ResourceFinder_getResourceFinderSingleton", _wrap_ResourceFinder_getResourceFinderSingleton},
    { "ResourceFinder_getDataHome", _wrap_ResourceFinder_getDataHome},
    { "ResourceFinder_getDataHomeNoCreate", _wrap_ResourceFinder_getDataHomeNoCreate},
    { "ResourceFinder_getConfigHome", _wrap_ResourceFinder_getConfigHome},
    { "ResourceFinder_getConfigHomeNoCreate", _wrap_ResourceFinder_getConfigHomeNoCreate},
    { "ResourceFinder_getDataDirs", _wrap_ResourceFinder_getDataDirs},
    { "ResourceFinder_getConfigDirs", _wrap_ResourceFinder_getConfigDirs},
    { "QosStyle_getDSCPByVocab", _wrap_QosStyle_getDSCPByVocab},
    { "QosStyle_getLevelByVocab", _wrap_QosStyle_getLevelByVocab},
    { "PAD_BYTES", _wrap_PAD_BYTES},
    { "read",_wrap_read},
    { "write",_wrap_write},
    { "Drivers_factory", _wrap_Drivers_factory},
    { "Drivers_yarpdev", _wrap_Drivers_yarpdev},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("YARP_CONSTSTRING_IS_STD_STRING", 1)},
    {SWIG_LUA_CONSTTAB_INT("BOTTLE_TAG_INT", 1)},
    {SWIG_LUA_CONSTTAB_INT("BOTTLE_TAG_VOCAB", (1+8))},
    {SWIG_LUA_CONSTTAB_INT("BOTTLE_TAG_DOUBLE", (2+8))},
    {SWIG_LUA_CONSTTAB_INT("BOTTLE_TAG_STRING", (4))},
    {SWIG_LUA_CONSTTAB_INT("BOTTLE_TAG_BLOB", (4+8))},
    {SWIG_LUA_CONSTTAB_INT("BOTTLE_TAG_INT64", (1+16))},
    {SWIG_LUA_CONSTTAB_INT("BOTTLE_TAG_LIST", 256)},
    {SWIG_LUA_CONSTTAB_INT("BOTTLE_TAG_DICT", 512)},
    {SWIG_LUA_CONSTTAB_INT("ContactStyle_OPENENDED", yarp::os::ContactStyle::OPENENDED)},
    {SWIG_LUA_CONSTTAB_INT("ContactStyle_END_WITH_FROM_PORT", yarp::os::ContactStyle::END_WITH_FROM_PORT)},
    {SWIG_LUA_CONSTTAB_INT("ContactStyle_END_WITH_TO_PORT", yarp::os::ContactStyle::END_WITH_TO_PORT)},
    {SWIG_LUA_CONSTTAB_INT("ContactStyle_NO_PERSISTENCE", yarp::os::ContactStyle::NO_PERSISTENCE)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_PacketPriorityInvalid", yarp::os::QosStyle::PacketPriorityInvalid)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_PacketPriorityNormal", yarp::os::QosStyle::PacketPriorityNormal)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_PacketPriorityLow", yarp::os::QosStyle::PacketPriorityLow)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_PacketPriorityHigh", yarp::os::QosStyle::PacketPriorityHigh)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_PacketPriorityCritical", yarp::os::QosStyle::PacketPriorityCritical)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_PacketPriorityUndefined", yarp::os::QosStyle::PacketPriorityUndefined)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_Invalid", yarp::os::QosStyle::DSCP_Invalid)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_CS0", yarp::os::QosStyle::DSCP_CS0)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_CS1", yarp::os::QosStyle::DSCP_CS1)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_CS2", yarp::os::QosStyle::DSCP_CS2)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_CS3", yarp::os::QosStyle::DSCP_CS3)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_CS4", yarp::os::QosStyle::DSCP_CS4)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_CS5", yarp::os::QosStyle::DSCP_CS5)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_CS6", yarp::os::QosStyle::DSCP_CS6)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_CS7", yarp::os::QosStyle::DSCP_CS7)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF11", yarp::os::QosStyle::DSCP_AF11)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF12", yarp::os::QosStyle::DSCP_AF12)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF13", yarp::os::QosStyle::DSCP_AF13)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF21", yarp::os::QosStyle::DSCP_AF21)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF22", yarp::os::QosStyle::DSCP_AF22)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF23", yarp::os::QosStyle::DSCP_AF23)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF31", yarp::os::QosStyle::DSCP_AF31)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF32", yarp::os::QosStyle::DSCP_AF32)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF33", yarp::os::QosStyle::DSCP_AF33)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF41", yarp::os::QosStyle::DSCP_AF41)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF42", yarp::os::QosStyle::DSCP_AF42)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_AF43", yarp::os::QosStyle::DSCP_AF43)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_VA", yarp::os::QosStyle::DSCP_VA)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_EF", yarp::os::QosStyle::DSCP_EF)},
    {SWIG_LUA_CONSTTAB_INT("QosStyle_DSCP_Undefined", yarp::os::QosStyle::DSCP_Undefined)},
    {SWIG_LUA_CONSTTAB_INT("VOCAB_PIXEL_INVALID", VOCAB_PIXEL_INVALID)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_MONO", VOCAB_PIXEL_MONO)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_MONO16", VOCAB_PIXEL_MONO16)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_RGB", VOCAB_PIXEL_RGB)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_RGBA", VOCAB_PIXEL_RGBA)},
    {SWIG_LUA_CONSTTAB_INT("VOCAB_PIXEL_BGRA", VOCAB_PIXEL_BGRA)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_INT", VOCAB_PIXEL_INT)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_HSV", VOCAB_PIXEL_HSV)},
    {SWIG_LUA_CONSTTAB_INT("VOCAB_PIXEL_BGR", VOCAB_PIXEL_BGR)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_MONO_SIGNED", VOCAB_PIXEL_MONO_SIGNED)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_RGB_SIGNED", VOCAB_PIXEL_RGB_SIGNED)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_RGB_INT", VOCAB_PIXEL_RGB_INT)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_MONO_FLOAT", VOCAB_PIXEL_MONO_FLOAT)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_RGB_FLOAT", VOCAB_PIXEL_RGB_FLOAT)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_HSV_FLOAT", VOCAB_PIXEL_HSV_FLOAT)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_ENCODING_BAYER_GRBG8", VOCAB_PIXEL_ENCODING_BAYER_GRBG8)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_ENCODING_BAYER_GRBG16", VOCAB_PIXEL_ENCODING_BAYER_GRBG16)},
    {SWIG_LUA_CONSTTAB_INT("VOCAB_PIXEL_ENCODING_BAYER_BGGR8", VOCAB_PIXEL_ENCODING_BAYER_BGGR8)},
    {SWIG_LUA_CONSTTAB_INT("VOCAB_PIXEL_ENCODING_BAYER_BGGR16", VOCAB_PIXEL_ENCODING_BAYER_BGGR16)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_ENCODING_BAYER_GBRG8", VOCAB_PIXEL_ENCODING_BAYER_GBRG8)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_ENCODING_BAYER_GBRG16", VOCAB_PIXEL_ENCODING_BAYER_GBRG16)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_ENCODING_BAYER_RGGB8", VOCAB_PIXEL_ENCODING_BAYER_RGGB8)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_PIXEL_ENCODING_BAYER_RGGB16", VOCAB_PIXEL_ENCODING_BAYER_RGGB16)},
    {SWIG_LUA_CONSTTAB_INT("FORMAT_NULL", yarp::sig::file::FORMAT_NULL)},
    {SWIG_LUA_CONSTTAB_INT("FORMAT_ANY", yarp::sig::file::FORMAT_ANY)},
    {SWIG_LUA_CONSTTAB_INT("FORMAT_PGM", yarp::sig::file::FORMAT_PGM)},
    {SWIG_LUA_CONSTTAB_INT("FORMAT_PPM", yarp::sig::file::FORMAT_PPM)},
    {SWIG_LUA_CONSTTAB_INT("FORMAT_NUMERIC", yarp::sig::file::FORMAT_NUMERIC)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_BRIGHTNESS", YARP_FEATURE_BRIGHTNESS)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_EXPOSURE", YARP_FEATURE_EXPOSURE)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_SHARPNESS", YARP_FEATURE_SHARPNESS)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_WHITE_BALANCE", YARP_FEATURE_WHITE_BALANCE)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_HUE", YARP_FEATURE_HUE)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_SATURATION", YARP_FEATURE_SATURATION)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_GAMMA", YARP_FEATURE_GAMMA)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_SHUTTER", YARP_FEATURE_SHUTTER)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_GAIN", YARP_FEATURE_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_IRIS", YARP_FEATURE_IRIS)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_FOCUS", YARP_FEATURE_FOCUS)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_TEMPERATURE", YARP_FEATURE_TEMPERATURE)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_TRIGGER", YARP_FEATURE_TRIGGER)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_TRIGGER_DELAY", YARP_FEATURE_TRIGGER_DELAY)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_WHITE_SHADING", YARP_FEATURE_WHITE_SHADING)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_FRAME_RATE", YARP_FEATURE_FRAME_RATE)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_ZOOM", YARP_FEATURE_ZOOM)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_PAN", YARP_FEATURE_PAN)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_TILT", YARP_FEATURE_TILT)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_OPTICAL_FILTER", YARP_FEATURE_OPTICAL_FILTER)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_CAPTURE_SIZE", YARP_FEATURE_CAPTURE_SIZE)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_CAPTURE_QUALITY", YARP_FEATURE_CAPTURE_QUALITY)},
    {SWIG_LUA_CONSTTAB_INT("YARP_FEATURE_NUMEBR_OF", YARP_FEATURE_NUMEBR_OF)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_JOINTTYPE_REVOLUTE", yarp::dev::VOCAB_JOINTTYPE_REVOLUTE)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_JOINTTYPE_PRISMATIC", yarp::dev::VOCAB_JOINTTYPE_PRISMATIC)},
    {SWIG_LUA_CONSTTAB_CHAR("VOCAB_JOINTTYPE_UNKNOWN", yarp::dev::VOCAB_JOINTTYPE_UNKNOWN)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_yarp__os__NetworkTo_p_yarp__os__NetworkBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::NetworkBase *)  ((yarp::os::Network *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__Sound_tTo_p_yarp__os__TypedReaderT_yarp__sig__Sound_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReader< yarp::sig::Sound > *)  ((yarp::os::BufferedPort< yarp::sig::Sound > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_tTo_p_yarp__sig__Image(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::sig::Image *)  ((yarp::sig::ImageOf< yarp::sig::PixelRgba > *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__os__NetUint16_tTo_p_yarp__sig__Image(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::sig::Image *)  ((yarp::sig::ImageOf< yarp::os::NetUint16 > *) x));
}
static void *_p_yarp__sig__FlexImageTo_p_yarp__sig__Image(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::sig::Image *)  ((yarp::sig::FlexImage *) x));
}
static void *_p_yarp__sig__ImageOfT_unsigned_char_tTo_p_yarp__sig__Image(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::sig::Image *)  ((yarp::sig::ImageOf< unsigned char > *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_tTo_p_yarp__sig__Image(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::sig::Image *)  ((yarp::sig::ImageOf< yarp::sig::PixelRgb > *) x));
}
static void *_p_yarp__sig__ImageOfT_float_tTo_p_yarp__sig__Image(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::sig::Image *)  ((yarp::sig::ImageOf< float > *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_tTo_p_yarp__sig__Image(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::sig::Image *)  ((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) x));
}
static void *_p_yarp__sig__ImageOfT_int_tTo_p_yarp__sig__Image(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::sig::Image *)  ((yarp::sig::ImageOf< int > *) x));
}
static void *_p_yarp__os__RateThreadWrapperTo_p_yarp__os__RateThread(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::RateThread *)  ((yarp::os::RateThreadWrapper *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__os__Property_tTo_p_yarp__os__TypedReaderT_yarp__os__Property_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReader< yarp::os::Property > *)  ((yarp::os::BufferedPort< yarp::os::Property > *) x));
}
static void *_p_yarp__sig__VectorBaseTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *) ((yarp::sig::VectorBase *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_tTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::sig::PixelRgb > *) x));
}
static void *_p_yarp__sig__VectorTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *) ((yarp::sig::Vector *) x));
}
static void *_p_yarp__sig__ImageOfT_unsigned_char_tTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< unsigned char > *) x));
}
static void *_p_yarp__sig__ImageOfT_float_tTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< float > *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_tTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) x));
}
static void *_p_yarp__sig__SoundTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *) ((yarp::sig::Sound *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__os__NetUint16_tTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::os::NetUint16 > *) x));
}
static void *_p_yarp__os__PortablePairBaseTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *) ((yarp::os::PortablePairBase *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_tTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::sig::PixelRgba > *) x));
}
static void *_p_yarp__os__BottleTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *) ((yarp::os::Bottle *) x));
}
static void *_p_yarp__os__ValueTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *) ((yarp::os::Value *) x));
}
static void *_p_yarp__os__PropertyTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *) ((yarp::os::Property *) x));
}
static void *_p_yarp__os__impl__PortReaderBufferBaseTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *)  ((yarp::os::impl::PortReaderBufferBase *) x));
}
static void *_p_yarp__sig__ImageTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *) ((yarp::sig::Image *) x));
}
static void *_p_yarp__sig__FlexImageTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::FlexImage *) x));
}
static void *_p_yarp__sig__ImageOfT_int_tTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< int > *) x));
}
static void *_p_yarp__os__StampTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *) (yarp::os::Portable *) ((yarp::os::Stamp *) x));
}
static void *_p_yarp__os__PortableTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *)  ((yarp::os::Portable *) x));
}
static void *_p_yarp__dev__DeviceResponderTo_p_yarp__os__PortReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortReader *)  ((yarp::dev::DeviceResponder *) x));
}
static void *_p_yarp__dev__DeviceResponderTo_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReaderCallback< yarp::os::Bottle > *)  ((yarp::dev::DeviceResponder *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__os__Bottle_tTo_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReaderCallback< yarp::os::Bottle > *)  ((yarp::os::BufferedPort< yarp::os::Bottle > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__os__Bottle_tTo_p_yarp__os__TypedReaderT_yarp__os__Bottle_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReader< yarp::os::Bottle > *)  ((yarp::os::BufferedPort< yarp::os::Bottle > *) x));
}
static void *_p_yarp__dev__IFrameGrabberControlsDC1394To_p_yarp__dev__IFrameGrabberControls(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::dev::IFrameGrabberControls *)  ((yarp::dev::IFrameGrabberControlsDC1394 *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__os__Property_tTo_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReaderCallback< yarp::os::Property > *)  ((yarp::os::BufferedPort< yarp::os::Property > *) x));
}
static void *_p_yarp__os__RpcServerTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *) (yarp::os::UnbufferedContactable *)(yarp::os::AbstractContactable *) ((yarp::os::RpcServer *) x));
}
static void *_p_yarp__os__RpcClientTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *) (yarp::os::UnbufferedContactable *)(yarp::os::AbstractContactable *) ((yarp::os::RpcClient *) x));
}
static void *_p_yarp__os__AbstractContactableTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *) (yarp::os::UnbufferedContactable *) ((yarp::os::AbstractContactable *) x));
}
static void *_p_yarp__os__UnbufferedContactableTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::UnbufferedContactable *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__os__Bottle_tTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::BufferedPort< yarp::os::Bottle > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_tTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_tTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_tTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_tTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_tTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_tTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_tTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__os__Property_tTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::BufferedPort< yarp::os::Property > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__Sound_tTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *)  ((yarp::os::BufferedPort< yarp::sig::Sound > *) x));
}
static void *_p_yarp__os__PortTo_p_yarp__os__Contactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Contactable *) (yarp::os::UnbufferedContactable *) ((yarp::os::Port *) x));
}
static void *_p_yarp__os__RpcClientTo_p_yarp__os__UnbufferedContactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::UnbufferedContactable *) (yarp::os::AbstractContactable *) ((yarp::os::RpcClient *) x));
}
static void *_p_yarp__os__AbstractContactableTo_p_yarp__os__UnbufferedContactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::UnbufferedContactable *)  ((yarp::os::AbstractContactable *) x));
}
static void *_p_yarp__os__RpcServerTo_p_yarp__os__UnbufferedContactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::UnbufferedContactable *) (yarp::os::AbstractContactable *) ((yarp::os::RpcServer *) x));
}
static void *_p_yarp__os__PortTo_p_yarp__os__UnbufferedContactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::UnbufferedContactable *)  ((yarp::os::Port *) x));
}
static void *_p_yarp__os__RpcClientTo_p_yarp__os__AbstractContactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::AbstractContactable *)  ((yarp::os::RpcClient *) x));
}
static void *_p_yarp__os__RpcServerTo_p_yarp__os__AbstractContactable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::AbstractContactable *)  ((yarp::os::RpcServer *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *) x));
}
static void *_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *)  ((yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *) x));
}
static void *_p_yarp__sig__VectorBaseTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *)  ((yarp::sig::VectorBase *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_tTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *) (yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::sig::PixelRgb > *) x));
}
static void *_p_yarp__sig__ImageOfT_unsigned_char_tTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *) (yarp::sig::Image *) ((yarp::sig::ImageOf< unsigned char > *) x));
}
static void *_p_yarp__sig__VectorTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *)  ((yarp::sig::Vector *) x));
}
static void *_p_yarp__sig__ImageOfT_float_tTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *) (yarp::sig::Image *) ((yarp::sig::ImageOf< float > *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_tTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *) (yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) x));
}
static void *_p_yarp__sig__SoundTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *)  ((yarp::sig::Sound *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__os__NetUint16_tTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *) (yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::os::NetUint16 > *) x));
}
static void *_p_yarp__os__PortablePairBaseTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *)  ((yarp::os::PortablePairBase *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_tTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *) (yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::sig::PixelRgba > *) x));
}
static void *_p_yarp__os__BottleTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *)  ((yarp::os::Bottle *) x));
}
static void *_p_yarp__os__ValueTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *)  ((yarp::os::Value *) x));
}
static void *_p_yarp__os__PropertyTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *)  ((yarp::os::Property *) x));
}
static void *_p_yarp__sig__ImageTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *)  ((yarp::sig::Image *) x));
}
static void *_p_yarp__sig__FlexImageTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *) (yarp::sig::Image *) ((yarp::sig::FlexImage *) x));
}
static void *_p_yarp__sig__ImageOfT_int_tTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *) (yarp::sig::Image *) ((yarp::sig::ImageOf< int > *) x));
}
static void *_p_yarp__os__StampTo_p_yarp__os__Portable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Portable *)  ((yarp::os::Stamp *) x));
}
static void *_p_yarp__dev__StubDriverCreatorTo_p_yarp__dev__DriverCreator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::dev::DriverCreator *)  ((yarp::dev::StubDriverCreator *) x));
}
static void *_p_yarp__dev__DeviceDriverTo_p_yarp__os__IConfig(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::IConfig *)  ((yarp::dev::DeviceDriver *) x));
}
static void *_p_yarp__dev__PolyDriverTo_p_yarp__os__IConfig(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::IConfig *) (yarp::dev::DeviceDriver *) ((yarp::dev::PolyDriver *) x));
}
static void *_p_yarp__dev__PolyDriverTo_p_yarp__dev__DeviceDriver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::dev::DeviceDriver *)  ((yarp::dev::PolyDriver *) x));
}
static void *_p_yarp__sig__VectorBaseTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *) ((yarp::sig::VectorBase *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_tTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::sig::PixelRgb > *) x));
}
static void *_p_yarp__sig__VectorTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *) ((yarp::sig::Vector *) x));
}
static void *_p_yarp__sig__ImageOfT_unsigned_char_tTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< unsigned char > *) x));
}
static void *_p_yarp__sig__ImageOfT_float_tTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< float > *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_tTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *) x));
}
static void *_p_yarp__sig__SoundTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *) ((yarp::sig::Sound *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__os__NetUint16_tTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::os::NetUint16 > *) x));
}
static void *_p_yarp__os__PortablePairBaseTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *) ((yarp::os::PortablePairBase *) x));
}
static void *_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_tTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< yarp::sig::PixelRgba > *) x));
}
static void *_p_yarp__os__BottleTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *) ((yarp::os::Bottle *) x));
}
static void *_p_yarp__os__ValueTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *) ((yarp::os::Value *) x));
}
static void *_p_yarp__os__PropertyTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *) ((yarp::os::Property *) x));
}
static void *_p_yarp__sig__ImageTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *) ((yarp::sig::Image *) x));
}
static void *_p_yarp__os__PortWriterWrapperTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *)  ((yarp::os::PortWriterWrapper *) x));
}
static void *_p_yarp__sig__FlexImageTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::FlexImage *) x));
}
static void *_p_yarp__sig__ImageOfT_int_tTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *)(yarp::sig::Image *) ((yarp::sig::ImageOf< int > *) x));
}
static void *_p_yarp__os__StampTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *) (yarp::os::Portable *) ((yarp::os::Stamp *) x));
}
static void *_p_yarp__os__PortableTo_p_yarp__os__PortWriter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::PortWriter *)  ((yarp::os::Portable *) x));
}
static void *_p_yarp__os__PropertyTo_p_yarp__os__Searchable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Searchable *)  ((yarp::os::Property *) x));
}
static void *_p_yarp__os__ResourceFinderTo_p_yarp__os__Searchable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Searchable *)  ((yarp::os::ResourceFinder *) x));
}
static void *_p_yarp__os__ValueTo_p_yarp__os__Searchable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Searchable *)  ((yarp::os::Value *) x));
}
static void *_p_yarp__os__BottleTo_p_yarp__os__Searchable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((yarp::os::Searchable *)  ((yarp::os::Bottle *) x));
}
static swig_type_info _swigt__p_Bytes = {"_p_Bytes", "Bytes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Clock = {"_p_Clock", "Clock *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ContentType = {"_p_ContentType", "ContentType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ICalibrator = {"_p_ICalibrator", "ICalibrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NameStore = {"_p_NameStore", "NameStore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NestedContact = {"_p_NestedContact", "NestedContact *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Pid = {"_p_Pid", "Pid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PortReaderCreator = {"_p_PortReaderCreator", "PortReaderCreator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ResourceFinderOptions = {"_p_ResourceFinderOptions", "ResourceFinderOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Runnable = {"_p_Runnable", "Runnable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Searchable = {"_p_Searchable", "Searchable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Type = {"_p_Type", "Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_YARP_INT64 = {"_p_YARP_INT64", "YARP_INT64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cameraFeature_id_t = {"_p_cameraFeature_id_t", "enum cameraFeature_id_t *|cameraFeature_id_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|yarp::sig::PixelMonoSigned *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_v_______int = {"_p_f_p_q_const__char_v_______int", "int (*)(char const *,...)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|yarp::sig::PixelFloat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|yarp::os::NetInt32 *|yarp::sig::PixelInt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|yarp::os::ConstString *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__vectorT_bool_t = {"_p_std__vectorT_bool_t", "std::vector< bool > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_bool_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_double_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_std_string_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_yarp__dev__Pid_t = {"_p_std__vectorT_yarp__dev__Pid_t", "std::vector< yarp::dev::Pid > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_yarp_dev_Pid_Sg_, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|yarp::sig::PixelMono *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__dev__CalibrationParameters = {"_p_yarp__dev__CalibrationParameters", "yarp::dev::CalibrationParameters *", 0, 0, (void*)&_wrap_class_yarp_dev_CalibrationParameters, 0};
static swig_type_info _swigt__p_yarp__dev__CartesianEvent = {"_p_yarp__dev__CartesianEvent", "yarp::dev::CartesianEvent *", 0, 0, (void*)&_wrap_class_yarp_dev_CartesianEvent, 0};
static swig_type_info _swigt__p_yarp__dev__CartesianEventParameters = {"_p_yarp__dev__CartesianEventParameters", "yarp::dev::CartesianEventParameters *", 0, 0, (void*)&_wrap_class_yarp_dev_CartesianEventParameters, 0};
static swig_type_info _swigt__p_yarp__dev__CartesianEventVariables = {"_p_yarp__dev__CartesianEventVariables", "yarp::dev::CartesianEventVariables *", 0, 0, (void*)&_wrap_class_yarp_dev_CartesianEventVariables, 0};
static swig_type_info _swigt__p_yarp__dev__DeviceDriver = {"_p_yarp__dev__DeviceDriver", "yarp::dev::DeviceDriver *", 0, 0, (void*)&_wrap_class_yarp_dev_DeviceDriver, 0};
static swig_type_info _swigt__p_yarp__dev__DeviceResponder = {"_p_yarp__dev__DeviceResponder", "yarp::dev::DeviceResponder *", 0, 0, (void*)&_wrap_class_yarp_dev_DeviceResponder, 0};
static swig_type_info _swigt__p_yarp__dev__DriverCreator = {"_p_yarp__dev__DriverCreator", "yarp::dev::DriverCreator *", 0, 0, (void*)&_wrap_class_yarp_dev_DriverCreator, 0};
static swig_type_info _swigt__p_yarp__dev__Drivers = {"_p_yarp__dev__Drivers", "yarp::dev::Drivers *", 0, 0, (void*)&_wrap_class_yarp_dev_Drivers, 0};
static swig_type_info _swigt__p_yarp__dev__GazeEvent = {"_p_yarp__dev__GazeEvent", "yarp::dev::GazeEvent *", 0, 0, (void*)&_wrap_class_yarp_dev_GazeEvent, 0};
static swig_type_info _swigt__p_yarp__dev__GazeEventParameters = {"_p_yarp__dev__GazeEventParameters", "yarp::dev::GazeEventParameters *", 0, 0, (void*)&_wrap_class_yarp_dev_GazeEventParameters, 0};
static swig_type_info _swigt__p_yarp__dev__GazeEventVariables = {"_p_yarp__dev__GazeEventVariables", "yarp::dev::GazeEventVariables *", 0, 0, (void*)&_wrap_class_yarp_dev_GazeEventVariables, 0};
static swig_type_info _swigt__p_yarp__dev__IAmplifierControl = {"_p_yarp__dev__IAmplifierControl", "yarp::dev::IAmplifierControl *", 0, 0, (void*)&_wrap_class_yarp_dev_IAmplifierControl, 0};
static swig_type_info _swigt__p_yarp__dev__IAmplifierControlRaw = {"_p_yarp__dev__IAmplifierControlRaw", "yarp::dev::IAmplifierControlRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IAmplifierControlRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IAudioVisualGrabber = {"_p_yarp__dev__IAudioVisualGrabber", "yarp::dev::IAudioVisualGrabber *", 0, 0, (void*)&_wrap_class_yarp_dev_IAudioVisualGrabber, 0};
static swig_type_info _swigt__p_yarp__dev__IAudioVisualStream = {"_p_yarp__dev__IAudioVisualStream", "yarp::dev::IAudioVisualStream *", 0, 0, (void*)&_wrap_class_yarp_dev_IAudioVisualStream, 0};
static swig_type_info _swigt__p_yarp__dev__IAxisInfo = {"_p_yarp__dev__IAxisInfo", "yarp::dev::IAxisInfo *", 0, 0, (void*)&_wrap_class_yarp_dev_IAxisInfo, 0};
static swig_type_info _swigt__p_yarp__dev__IAxisInfoRaw = {"_p_yarp__dev__IAxisInfoRaw", "yarp::dev::IAxisInfoRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IAxisInfoRaw, 0};
static swig_type_info _swigt__p_yarp__dev__ICalibrator = {"_p_yarp__dev__ICalibrator", "yarp::dev::ICalibrator *", 0, 0, (void*)&_wrap_class_yarp_dev_ICalibrator, 0};
static swig_type_info _swigt__p_yarp__dev__ICartesianControl = {"_p_yarp__dev__ICartesianControl", "yarp::dev::ICartesianControl *", 0, 0, (void*)&_wrap_class_yarp_dev_ICartesianControl, 0};
static swig_type_info _swigt__p_yarp__dev__IControlCalibration = {"_p_yarp__dev__IControlCalibration", "yarp::dev::IControlCalibration *", 0, 0, (void*)&_wrap_class_yarp_dev_IControlCalibration, 0};
static swig_type_info _swigt__p_yarp__dev__IControlCalibration2 = {"_p_yarp__dev__IControlCalibration2", "yarp::dev::IControlCalibration2 *", 0, 0, (void*)&_wrap_class_yarp_dev_IControlCalibration2, 0};
static swig_type_info _swigt__p_yarp__dev__IControlCalibration2Raw = {"_p_yarp__dev__IControlCalibration2Raw", "yarp::dev::IControlCalibration2Raw *", 0, 0, (void*)&_wrap_class_yarp_dev_IControlCalibration2Raw, 0};
static swig_type_info _swigt__p_yarp__dev__IControlCalibrationRaw = {"_p_yarp__dev__IControlCalibrationRaw", "yarp::dev::IControlCalibrationRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IControlCalibrationRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IControlDebug = {"_p_yarp__dev__IControlDebug", "yarp::dev::IControlDebug *", 0, 0, (void*)&_wrap_class_yarp_dev_IControlDebug, 0};
static swig_type_info _swigt__p_yarp__dev__IControlLimits = {"_p_yarp__dev__IControlLimits", "yarp::dev::IControlLimits *", 0, 0, (void*)&_wrap_class_yarp_dev_IControlLimits, 0};
static swig_type_info _swigt__p_yarp__dev__IControlLimitsRaw = {"_p_yarp__dev__IControlLimitsRaw", "yarp::dev::IControlLimitsRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IControlLimitsRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IControlMode = {"_p_yarp__dev__IControlMode", "yarp::dev::IControlMode *", 0, 0, (void*)&_wrap_class_yarp_dev_IControlMode, 0};
static swig_type_info _swigt__p_yarp__dev__IControlModeRaw = {"_p_yarp__dev__IControlModeRaw", "yarp::dev::IControlModeRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IControlModeRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IEncoders = {"_p_yarp__dev__IEncoders", "yarp::dev::IEncoders *", 0, 0, (void*)&_wrap_class_yarp_dev_IEncoders, 0};
static swig_type_info _swigt__p_yarp__dev__IEncodersRaw = {"_p_yarp__dev__IEncodersRaw", "yarp::dev::IEncodersRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IEncodersRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IFrameGrabber = {"_p_yarp__dev__IFrameGrabber", "yarp::dev::IFrameGrabber *", 0, 0, (void*)&_wrap_class_yarp_dev_IFrameGrabber, 0};
static swig_type_info _swigt__p_yarp__dev__IFrameGrabberControls = {"_p_yarp__dev__IFrameGrabberControls", "yarp::dev::IFrameGrabberControls *", 0, 0, (void*)&_wrap_class_yarp_dev_IFrameGrabberControls, 0};
static swig_type_info _swigt__p_yarp__dev__IFrameGrabberControlsDC1394 = {"_p_yarp__dev__IFrameGrabberControlsDC1394", "yarp::dev::IFrameGrabberControlsDC1394 *", 0, 0, (void*)&_wrap_class_yarp_dev_IFrameGrabberControlsDC1394, 0};
static swig_type_info _swigt__p_yarp__dev__IFrameGrabberImage = {"_p_yarp__dev__IFrameGrabberImage", "yarp::dev::IFrameGrabberImage *", 0, 0, (void*)&_wrap_class_yarp_dev_IFrameGrabberImage, 0};
static swig_type_info _swigt__p_yarp__dev__IFrameGrabberImageRaw = {"_p_yarp__dev__IFrameGrabberImageRaw", "yarp::dev::IFrameGrabberImageRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IFrameGrabberImageRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IFrameGrabberRgb = {"_p_yarp__dev__IFrameGrabberRgb", "yarp::dev::IFrameGrabberRgb *", 0, 0, (void*)&_wrap_class_yarp_dev_IFrameGrabberRgb, 0};
static swig_type_info _swigt__p_yarp__dev__IFrameWriterAudioVisual = {"_p_yarp__dev__IFrameWriterAudioVisual", "yarp::dev::IFrameWriterAudioVisual *", 0, 0, (void*)&_wrap_class_yarp_dev_IFrameWriterAudioVisual, 0};
static swig_type_info _swigt__p_yarp__dev__IFrameWriterImage = {"_p_yarp__dev__IFrameWriterImage", "yarp::dev::IFrameWriterImage *", 0, 0, (void*)&_wrap_class_yarp_dev_IFrameWriterImage, 0};
static swig_type_info _swigt__p_yarp__dev__IGazeControl = {"_p_yarp__dev__IGazeControl", "yarp::dev::IGazeControl *", 0, 0, (void*)&_wrap_class_yarp_dev_IGazeControl, 0};
static swig_type_info _swigt__p_yarp__dev__IImpedanceControl = {"_p_yarp__dev__IImpedanceControl", "yarp::dev::IImpedanceControl *", 0, 0, (void*)&_wrap_class_yarp_dev_IImpedanceControl, 0};
static swig_type_info _swigt__p_yarp__dev__IImpedanceControlRaw = {"_p_yarp__dev__IImpedanceControlRaw", "yarp::dev::IImpedanceControlRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IImpedanceControlRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IOpenLoopControl = {"_p_yarp__dev__IOpenLoopControl", "yarp::dev::IOpenLoopControl *", 0, 0, (void*)&_wrap_class_yarp_dev_IOpenLoopControl, 0};
static swig_type_info _swigt__p_yarp__dev__IOpenLoopControlRaw = {"_p_yarp__dev__IOpenLoopControlRaw", "yarp::dev::IOpenLoopControlRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IOpenLoopControlRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IPidControl = {"_p_yarp__dev__IPidControl", "yarp::dev::IPidControl *", 0, 0, (void*)&_wrap_class_yarp_dev_IPidControl, 0};
static swig_type_info _swigt__p_yarp__dev__IPidControlRaw = {"_p_yarp__dev__IPidControlRaw", "yarp::dev::IPidControlRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IPidControlRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IPositionControl = {"_p_yarp__dev__IPositionControl", "yarp::dev::IPositionControl *", 0, 0, (void*)&_wrap_class_yarp_dev_IPositionControl, 0};
static swig_type_info _swigt__p_yarp__dev__IPositionControlRaw = {"_p_yarp__dev__IPositionControlRaw", "yarp::dev::IPositionControlRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IPositionControlRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IRemoteCalibrator = {"_p_yarp__dev__IRemoteCalibrator", "yarp::dev::IRemoteCalibrator *", 0, 0, (void*)&_wrap_class_yarp_dev_IRemoteCalibrator, 0};
static swig_type_info _swigt__p_yarp__dev__ITorqueControl = {"_p_yarp__dev__ITorqueControl", "yarp::dev::ITorqueControl *", 0, 0, (void*)&_wrap_class_yarp_dev_ITorqueControl, 0};
static swig_type_info _swigt__p_yarp__dev__ITorqueControlRaw = {"_p_yarp__dev__ITorqueControlRaw", "yarp::dev::ITorqueControlRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_ITorqueControlRaw, 0};
static swig_type_info _swigt__p_yarp__dev__IVelocityControl = {"_p_yarp__dev__IVelocityControl", "yarp::dev::IVelocityControl *", 0, 0, (void*)&_wrap_class_yarp_dev_IVelocityControl, 0};
static swig_type_info _swigt__p_yarp__dev__IVelocityControlRaw = {"_p_yarp__dev__IVelocityControlRaw", "yarp::dev::IVelocityControlRaw *", 0, 0, (void*)&_wrap_class_yarp_dev_IVelocityControlRaw, 0};
static swig_type_info _swigt__p_yarp__dev__JointTypeEnum = {"_p_yarp__dev__JointTypeEnum", "enum yarp::dev::JointTypeEnum *|yarp::dev::JointTypeEnum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__dev__MotorTorqueParameters = {"_p_yarp__dev__MotorTorqueParameters", "yarp::dev::MotorTorqueParameters *", 0, 0, (void*)&_wrap_class_yarp_dev_MotorTorqueParameters, 0};
static swig_type_info _swigt__p_yarp__dev__Pid = {"_p_yarp__dev__Pid", "yarp::dev::Pid *", 0, 0, (void*)&_wrap_class_yarp_dev_Pid, 0};
static swig_type_info _swigt__p_yarp__dev__PolyDriver = {"_p_yarp__dev__PolyDriver", "yarp::dev::PolyDriver *", 0, 0, (void*)&_wrap_class_yarp_dev_PolyDriver, 0};
static swig_type_info _swigt__p_yarp__dev__StubDriverCreator = {"_p_yarp__dev__StubDriverCreator", "yarp::dev::StubDriverCreator *", 0, 0, (void*)&_wrap_class_yarp_dev_StubDriverCreator, 0};
static swig_type_info _swigt__p_yarp__os__AbstractContactable = {"_p_yarp__os__AbstractContactable", "yarp::os::AbstractContactable *", 0, 0, (void*)&_wrap_class_yarp_os_AbstractContactable, 0};
static swig_type_info _swigt__p_yarp__os__Bottle = {"_p_yarp__os__Bottle", "yarp::os::Bottle *", 0, 0, (void*)&_wrap_class_yarp_os_Bottle, 0};
static swig_type_info _swigt__p_yarp__os__BufferedPortT_yarp__os__Bottle_t = {"_p_yarp__os__BufferedPortT_yarp__os__Bottle_t", "yarp::os::BufferedPort< Bottle > *|yarp::os::BufferedPort< yarp::os::Bottle > *", 0, 0, (void*)&_wrap_class_yarp_os_BufferedPort_Sl_Bottle_Sg_, 0};
static swig_type_info _swigt__p_yarp__os__BufferedPortT_yarp__os__Property_t = {"_p_yarp__os__BufferedPortT_yarp__os__Property_t", "yarp::os::BufferedPort< Property > *|yarp::os::BufferedPort< yarp::os::Property > *", 0, 0, (void*)&_wrap_class_yarp_os_BufferedPort_Sl_Property_Sg_, 0};
static swig_type_info _swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t = {"_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t", "yarp::os::BufferedPort< yarp::sig::ImageOf< float > > *|yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *", 0, 0, (void*)&_wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t = {"_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t", "yarp::os::BufferedPort< yarp::sig::ImageOf< int > > *|yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelInt > > *", 0, 0, (void*)&_wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t = {"_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t", "yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::os::NetUint16 > > *|yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *", 0, 0, (void*)&_wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t = {"_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t", "yarp::os::BufferedPort< yarp::sig::ImageOf< unsigned char > > *|yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelMono > > *", 0, 0, (void*)&_wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t = {"_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t", "yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *", 0, 0, (void*)&_wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t = {"_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t", "yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *", 0, 0, (void*)&_wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t = {"_p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t", "yarp::os::BufferedPort< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *", 0, 0, (void*)&_wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__BufferedPortT_yarp__sig__Sound_t = {"_p_yarp__os__BufferedPortT_yarp__sig__Sound_t", "yarp::os::BufferedPort< yarp::sig::Sound > *", 0, 0, (void*)&_wrap_class_yarp_os_BufferedPort_Sl_yarp_sig_Sound_Sg_, 0};
static swig_type_info _swigt__p_yarp__os__ConnectionReader = {"_p_yarp__os__ConnectionReader", "yarp::os::ConnectionReader *", 0, 0, (void*)&_wrap_class_yarp_os_ConnectionReader, 0};
static swig_type_info _swigt__p_yarp__os__ConnectionWriter = {"_p_yarp__os__ConnectionWriter", "yarp::os::ConnectionWriter *", 0, 0, (void*)&_wrap_class_yarp_os_ConnectionWriter, 0};
static swig_type_info _swigt__p_yarp__os__Contact = {"_p_yarp__os__Contact", "yarp::os::Contact *", 0, 0, (void*)&_wrap_class_yarp_os_Contact, 0};
static swig_type_info _swigt__p_yarp__os__ContactStyle = {"_p_yarp__os__ContactStyle", "yarp::os::ContactStyle *", 0, 0, (void*)&_wrap_class_yarp_os_ContactStyle, 0};
static swig_type_info _swigt__p_yarp__os__Contactable = {"_p_yarp__os__Contactable", "yarp::os::Contactable *", 0, 0, (void*)&_wrap_class_yarp_os_Contactable, 0};
static swig_type_info _swigt__p_yarp__os__DummyConnector = {"_p_yarp__os__DummyConnector", "yarp::os::DummyConnector *", 0, 0, (void*)&_wrap_class_yarp_os_DummyConnector, 0};
static swig_type_info _swigt__p_yarp__os__IConfig = {"_p_yarp__os__IConfig", "yarp::os::IConfig *", 0, 0, (void*)&_wrap_class_yarp_os_IConfig, 0};
static swig_type_info _swigt__p_yarp__os__InputStream = {"_p_yarp__os__InputStream", "yarp::os::InputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__os__Mutex = {"_p_yarp__os__Mutex", "yarp::os::Mutex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__os__NameStore = {"_p_yarp__os__NameStore", "yarp::os::NameStore *", 0, 0, (void*)&_wrap_class_yarp_os_NameStore, 0};
static swig_type_info _swigt__p_yarp__os__NestedContact = {"_p_yarp__os__NestedContact", "yarp::os::NestedContact *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__os__NetUint16 = {"_p_yarp__os__NetUint16", "yarp::os::NetUint16 *|yarp::sig::PixelMono16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__os__Network = {"_p_yarp__os__Network", "yarp::os::Network *", 0, 0, (void*)&_wrap_class_yarp_os_Network, 0};
static swig_type_info _swigt__p_yarp__os__NetworkBase = {"_p_yarp__os__NetworkBase", "yarp::os::NetworkBase *", 0, 0, (void*)&_wrap_class_yarp_os_NetworkBase, 0};
static swig_type_info _swigt__p_yarp__os__OutputStream = {"_p_yarp__os__OutputStream", "yarp::os::OutputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__os__Port = {"_p_yarp__os__Port", "yarp::os::Port *", 0, 0, (void*)&_wrap_class_yarp_os_Port, 0};
static swig_type_info _swigt__p_yarp__os__PortInfo = {"_p_yarp__os__PortInfo", "yarp::os::PortInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__os__PortReader = {"_p_yarp__os__PortReader", "yarp::os::PortReader *", 0, 0, (void*)&_wrap_class_yarp_os_PortReader, 0};
static swig_type_info _swigt__p_yarp__os__PortReaderCreator = {"_p_yarp__os__PortReaderCreator", "yarp::os::PortReaderCreator *", 0, 0, (void*)&_wrap_class_yarp_os_PortReaderCreator, 0};
static swig_type_info _swigt__p_yarp__os__PortReport = {"_p_yarp__os__PortReport", "yarp::os::PortReport *", 0, 0, (void*)&_wrap_class_yarp_os_PortReport, 0};
static swig_type_info _swigt__p_yarp__os__PortWriter = {"_p_yarp__os__PortWriter", "yarp::os::PortWriter *", 0, 0, (void*)&_wrap_class_yarp_os_PortWriter, 0};
static swig_type_info _swigt__p_yarp__os__PortWriterBufferBase = {"_p_yarp__os__PortWriterBufferBase", "yarp::os::PortWriterBufferBase *", 0, 0, (void*)&_wrap_class_yarp_os_PortWriterBufferBase, 0};
static swig_type_info _swigt__p_yarp__os__PortWriterBufferManager = {"_p_yarp__os__PortWriterBufferManager", "yarp::os::PortWriterBufferManager *", 0, 0, (void*)&_wrap_class_yarp_os_PortWriterBufferManager, 0};
static swig_type_info _swigt__p_yarp__os__PortWriterWrapper = {"_p_yarp__os__PortWriterWrapper", "yarp::os::PortWriterWrapper *", 0, 0, (void*)&_wrap_class_yarp_os_PortWriterWrapper, 0};
static swig_type_info _swigt__p_yarp__os__Portable = {"_p_yarp__os__Portable", "yarp::os::Portable *", 0, 0, (void*)&_wrap_class_yarp_os_Portable, 0};
static swig_type_info _swigt__p_yarp__os__PortablePairBase = {"_p_yarp__os__PortablePairBase", "yarp::os::PortablePairBase *", 0, 0, (void*)&_wrap_class_yarp_os_PortablePairBase, 0};
static swig_type_info _swigt__p_yarp__os__PortablePairT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_yarp__sig__Sound_t = {"_p_yarp__os__PortablePairT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_yarp__sig__Sound_t", "yarp::os::PortablePair< yarp::sig::ImageOf< yarp::sig::PixelRgb >,yarp::sig::Sound > *|yarp::dev::ImageRgbSound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__os__Property = {"_p_yarp__os__Property", "yarp::os::Property *", 0, 0, (void*)&_wrap_class_yarp_os_Property, 0};
static swig_type_info _swigt__p_yarp__os__QosStyle = {"_p_yarp__os__QosStyle", "yarp::os::QosStyle *", 0, 0, (void*)&_wrap_class_yarp_os_QosStyle, 0};
static swig_type_info _swigt__p_yarp__os__RFModule = {"_p_yarp__os__RFModule", "yarp::os::RFModule *", 0, 0, (void*)&_wrap_class_yarp_os_RFModule, 0};
static swig_type_info _swigt__p_yarp__os__Random = {"_p_yarp__os__Random", "yarp::os::Random *", 0, 0, (void*)&_wrap_class_yarp_os_Random, 0};
static swig_type_info _swigt__p_yarp__os__RateThread = {"_p_yarp__os__RateThread", "yarp::os::RateThread *", 0, 0, (void*)&_wrap_class_yarp_os_RateThread, 0};
static swig_type_info _swigt__p_yarp__os__RateThreadWrapper = {"_p_yarp__os__RateThreadWrapper", "yarp::os::RateThreadWrapper *", 0, 0, (void*)&_wrap_class_yarp_os_RateThreadWrapper, 0};
static swig_type_info _swigt__p_yarp__os__ResourceFinder = {"_p_yarp__os__ResourceFinder", "yarp::os::ResourceFinder *", 0, 0, (void*)&_wrap_class_yarp_os_ResourceFinder, 0};
static swig_type_info _swigt__p_yarp__os__RpcClient = {"_p_yarp__os__RpcClient", "yarp::os::RpcClient *", 0, 0, (void*)&_wrap_class_yarp_os_RpcClient, 0};
static swig_type_info _swigt__p_yarp__os__RpcServer = {"_p_yarp__os__RpcServer", "yarp::os::RpcServer *", 0, 0, (void*)&_wrap_class_yarp_os_RpcServer, 0};
static swig_type_info _swigt__p_yarp__os__SearchMonitor = {"_p_yarp__os__SearchMonitor", "yarp::os::SearchMonitor *", 0, 0, (void*)&_wrap_class_yarp_os_SearchMonitor, 0};
static swig_type_info _swigt__p_yarp__os__SearchReport = {"_p_yarp__os__SearchReport", "yarp::os::SearchReport *", 0, 0, (void*)&_wrap_class_yarp_os_SearchReport, 0};
static swig_type_info _swigt__p_yarp__os__Searchable = {"_p_yarp__os__Searchable", "yarp::os::Searchable *", 0, 0, (void*)&_wrap_class_yarp_os_Searchable, 0};
static swig_type_info _swigt__p_yarp__os__Semaphore = {"_p_yarp__os__Semaphore", "yarp::os::Semaphore *", 0, 0, (void*)&_wrap_class_yarp_os_Semaphore, 0};
static swig_type_info _swigt__p_yarp__os__SizedWriter = {"_p_yarp__os__SizedWriter", "yarp::os::SizedWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__os__Stamp = {"_p_yarp__os__Stamp", "yarp::os::Stamp *", 0, 0, (void*)&_wrap_class_yarp_os_Stamp, 0};
static swig_type_info _swigt__p_yarp__os__Stamped = {"_p_yarp__os__Stamped", "yarp::os::Stamped *", 0, 0, (void*)&_wrap_class_yarp_os_Stamped, 0};
static swig_type_info _swigt__p_yarp__os__Things = {"_p_yarp__os__Things", "yarp::os::Things *", 0, 0, (void*)&_wrap_class_yarp_os_Things, 0};
static swig_type_info _swigt__p_yarp__os__Thread = {"_p_yarp__os__Thread", "yarp::os::Thread *", 0, 0, (void*)&_wrap_class_yarp_os_Thread, 0};
static swig_type_info _swigt__p_yarp__os__Time = {"_p_yarp__os__Time", "yarp::os::Time *", 0, 0, (void*)&_wrap_class_yarp_os_Time, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t = {"_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t", "yarp::os::TypedReaderCallback< yarp::os::Bottle > *|yarp::os::TypedReaderCallback< Bottle > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReaderCallback_Sl_Bottle_Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t = {"_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t", "yarp::os::TypedReaderCallback< yarp::os::Property > *|yarp::os::TypedReaderCallback< Property > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReaderCallback_Sl_Property_Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t = {"_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t", "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< float > > *|yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t = {"_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t", "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< int > > *|yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelInt > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t = {"_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t", "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::os::NetUint16 > > *|yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t = {"_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t", "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< unsigned char > > *|yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelMono > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t = {"_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t", "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t = {"_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t", "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t = {"_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t", "yarp::os::TypedReaderCallback< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReaderCallback_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t = {"_p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t", "yarp::os::TypedReaderCallback< yarp::sig::Sound > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderT_yarp__os__Bottle_t = {"_p_yarp__os__TypedReaderT_yarp__os__Bottle_t", "yarp::os::TypedReader< Bottle > *|yarp::os::TypedReader< yarp::os::Bottle > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReader_Sl_Bottle_Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderT_yarp__os__Property_t = {"_p_yarp__os__TypedReaderT_yarp__os__Property_t", "yarp::os::TypedReader< Property > *|yarp::os::TypedReader< yarp::os::Property > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReader_Sl_Property_Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t = {"_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t", "yarp::os::TypedReader< yarp::sig::ImageOf< float > > *|yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelFloat > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t = {"_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t", "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelInt > > *|yarp::os::TypedReader< yarp::sig::ImageOf< int > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t = {"_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t", "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::os::NetUint16 > > *|yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono16 > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t = {"_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t", "yarp::os::TypedReader< yarp::sig::ImageOf< unsigned char > > *|yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelMono > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t = {"_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t", "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t = {"_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t", "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgb > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t = {"_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t", "yarp::os::TypedReader< yarp::sig::ImageOf< yarp::sig::PixelRgba > > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReader_Sl_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg__Sg_, 0};
static swig_type_info _swigt__p_yarp__os__TypedReaderT_yarp__sig__Sound_t = {"_p_yarp__os__TypedReaderT_yarp__sig__Sound_t", "yarp::os::TypedReader< yarp::sig::Sound > *", 0, 0, (void*)&_wrap_class_yarp_os_TypedReader_Sl_yarp_sig_Sound_Sg_, 0};
static swig_type_info _swigt__p_yarp__os__UnbufferedContactable = {"_p_yarp__os__UnbufferedContactable", "yarp::os::UnbufferedContactable *", 0, 0, (void*)&_wrap_class_yarp_os_UnbufferedContactable, 0};
static swig_type_info _swigt__p_yarp__os__Value = {"_p_yarp__os__Value", "yarp::os::Value *", 0, 0, (void*)&_wrap_class_yarp_os_Value, 0};
static swig_type_info _swigt__p_yarp__os__Vocab = {"_p_yarp__os__Vocab", "yarp::os::Vocab *", 0, 0, (void*)&_wrap_class_yarp_os_Vocab, 0};
static swig_type_info _swigt__p_yarp__os__impl__PortReaderBufferBase = {"_p_yarp__os__impl__PortReaderBufferBase", "yarp::os::impl::PortReaderBufferBase *", 0, 0, (void*)&_wrap_class_yarp_os_impl_PortReaderBufferBase, 0};
static swig_type_info _swigt__p_yarp__os__impl__PortReaderBufferBaseCreator = {"_p_yarp__os__impl__PortReaderBufferBaseCreator", "yarp::os::impl::PortReaderBufferBaseCreator *", 0, 0, (void*)&_wrap_class_yarp_os_impl_PortReaderBufferBaseCreator, 0};
static swig_type_info _swigt__p_yarp__sig__FlexImage = {"_p_yarp__sig__FlexImage", "yarp::sig::FlexImage *", 0, 0, (void*)&_wrap_class_yarp_sig_FlexImage, 0};
static swig_type_info _swigt__p_yarp__sig__Image = {"_p_yarp__sig__Image", "yarp::sig::Image *", 0, 0, (void*)&_wrap_class_yarp_sig_Image, 0};
static swig_type_info _swigt__p_yarp__sig__ImageOfT_float_t = {"_p_yarp__sig__ImageOfT_float_t", "yarp::sig::ImageOf< float > *|yarp::sig::ImageOf< yarp::sig::PixelFloat > *", 0, 0, (void*)&_wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelFloat_Sg_, 0};
static swig_type_info _swigt__p_yarp__sig__ImageOfT_int_t = {"_p_yarp__sig__ImageOfT_int_t", "yarp::sig::ImageOf< int > *|yarp::sig::ImageOf< yarp::sig::PixelInt > *", 0, 0, (void*)&_wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelInt_Sg_, 0};
static swig_type_info _swigt__p_yarp__sig__ImageOfT_unsigned_char_t = {"_p_yarp__sig__ImageOfT_unsigned_char_t", "yarp::sig::ImageOf< yarp::sig::PixelMono > *|yarp::sig::ImageOf< unsigned char > *", 0, 0, (void*)&_wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono_Sg_, 0};
static swig_type_info _swigt__p_yarp__sig__ImageOfT_yarp__os__NetUint16_t = {"_p_yarp__sig__ImageOfT_yarp__os__NetUint16_t", "yarp::sig::ImageOf< yarp::sig::PixelMono16 > *|yarp::sig::ImageOf< yarp::os::NetUint16 > *", 0, 0, (void*)&_wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelMono16_Sg_, 0};
static swig_type_info _swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t = {"_p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t", "yarp::sig::ImageOf< yarp::sig::PixelBgr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t = {"_p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t", "yarp::sig::ImageOf< yarp::sig::PixelRgbFloat > *", 0, 0, (void*)&_wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgbFloat_Sg_, 0};
static swig_type_info _swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t = {"_p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t", "yarp::sig::ImageOf< yarp::sig::PixelRgb > *", 0, 0, (void*)&_wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgb_Sg_, 0};
static swig_type_info _swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t = {"_p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t", "yarp::sig::ImageOf< yarp::sig::PixelRgba > *", 0, 0, (void*)&_wrap_class_yarp_sig_ImageOf_Sl_yarp_sig_PixelRgba_Sg_, 0};
static swig_type_info _swigt__p_yarp__sig__Matrix = {"_p_yarp__sig__Matrix", "yarp::sig::Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_yarp__sig__PixelBgr = {"_p_yarp__sig__PixelBgr", "yarp::sig::PixelBgr *", 0, 0, (void*)&_wrap_class_yarp_sig_PixelBgr, 0};
static swig_type_info _swigt__p_yarp__sig__PixelBgra = {"_p_yarp__sig__PixelBgra", "yarp::sig::PixelBgra *", 0, 0, (void*)&_wrap_class_yarp_sig_PixelBgra, 0};
static swig_type_info _swigt__p_yarp__sig__PixelHsv = {"_p_yarp__sig__PixelHsv", "yarp::sig::PixelHsv *", 0, 0, (void*)&_wrap_class_yarp_sig_PixelHsv, 0};
static swig_type_info _swigt__p_yarp__sig__PixelHsvFloat = {"_p_yarp__sig__PixelHsvFloat", "yarp::sig::PixelHsvFloat *", 0, 0, (void*)&_wrap_class_yarp_sig_PixelHsvFloat, 0};
static swig_type_info _swigt__p_yarp__sig__PixelRgb = {"_p_yarp__sig__PixelRgb", "yarp::sig::PixelRgb *", 0, 0, (void*)&_wrap_class_yarp_sig_PixelRgb, 0};
static swig_type_info _swigt__p_yarp__sig__PixelRgbFloat = {"_p_yarp__sig__PixelRgbFloat", "yarp::sig::PixelRgbFloat *", 0, 0, (void*)&_wrap_class_yarp_sig_PixelRgbFloat, 0};
static swig_type_info _swigt__p_yarp__sig__PixelRgbInt = {"_p_yarp__sig__PixelRgbInt", "yarp::sig::PixelRgbInt *", 0, 0, (void*)&_wrap_class_yarp_sig_PixelRgbInt, 0};
static swig_type_info _swigt__p_yarp__sig__PixelRgbSigned = {"_p_yarp__sig__PixelRgbSigned", "yarp::sig::PixelRgbSigned *", 0, 0, (void*)&_wrap_class_yarp_sig_PixelRgbSigned, 0};
static swig_type_info _swigt__p_yarp__sig__PixelRgba = {"_p_yarp__sig__PixelRgba", "yarp::sig::PixelRgba *", 0, 0, (void*)&_wrap_class_yarp_sig_PixelRgba, 0};
static swig_type_info _swigt__p_yarp__sig__Sound = {"_p_yarp__sig__Sound", "yarp::sig::Sound *", 0, 0, (void*)&_wrap_class_yarp_sig_Sound, 0};
static swig_type_info _swigt__p_yarp__sig__Vector = {"_p_yarp__sig__Vector", "yarp::sig::Vector *", 0, 0, (void*)&_wrap_class_yarp_sig_Vector, 0};
static swig_type_info _swigt__p_yarp__sig__VectorBase = {"_p_yarp__sig__VectorBase", "yarp::sig::VectorBase *", 0, 0, (void*)&_wrap_class_yarp_sig_VectorBase, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Bytes,
  &_swigt__p_Clock,
  &_swigt__p_ContentType,
  &_swigt__p_ICalibrator,
  &_swigt__p_NameStore,
  &_swigt__p_NestedContact,
  &_swigt__p_Pid,
  &_swigt__p_PortReaderCreator,
  &_swigt__p_ResourceFinderOptions,
  &_swigt__p_Runnable,
  &_swigt__p_Searchable,
  &_swigt__p_Type,
  &_swigt__p_YARP_INT64,
  &_swigt__p_bool,
  &_swigt__p_cameraFeature_id_t,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_p_q_const__char_v_______int,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_p_char,
  &_swigt__p_size_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_bool_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_yarp__dev__Pid_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_void,
  &_swigt__p_yarp__dev__CalibrationParameters,
  &_swigt__p_yarp__dev__CartesianEvent,
  &_swigt__p_yarp__dev__CartesianEventParameters,
  &_swigt__p_yarp__dev__CartesianEventVariables,
  &_swigt__p_yarp__dev__DeviceDriver,
  &_swigt__p_yarp__dev__DeviceResponder,
  &_swigt__p_yarp__dev__DriverCreator,
  &_swigt__p_yarp__dev__Drivers,
  &_swigt__p_yarp__dev__GazeEvent,
  &_swigt__p_yarp__dev__GazeEventParameters,
  &_swigt__p_yarp__dev__GazeEventVariables,
  &_swigt__p_yarp__dev__IAmplifierControl,
  &_swigt__p_yarp__dev__IAmplifierControlRaw,
  &_swigt__p_yarp__dev__IAudioVisualGrabber,
  &_swigt__p_yarp__dev__IAudioVisualStream,
  &_swigt__p_yarp__dev__IAxisInfo,
  &_swigt__p_yarp__dev__IAxisInfoRaw,
  &_swigt__p_yarp__dev__ICalibrator,
  &_swigt__p_yarp__dev__ICartesianControl,
  &_swigt__p_yarp__dev__IControlCalibration,
  &_swigt__p_yarp__dev__IControlCalibration2,
  &_swigt__p_yarp__dev__IControlCalibration2Raw,
  &_swigt__p_yarp__dev__IControlCalibrationRaw,
  &_swigt__p_yarp__dev__IControlDebug,
  &_swigt__p_yarp__dev__IControlLimits,
  &_swigt__p_yarp__dev__IControlLimitsRaw,
  &_swigt__p_yarp__dev__IControlMode,
  &_swigt__p_yarp__dev__IControlModeRaw,
  &_swigt__p_yarp__dev__IEncoders,
  &_swigt__p_yarp__dev__IEncodersRaw,
  &_swigt__p_yarp__dev__IFrameGrabber,
  &_swigt__p_yarp__dev__IFrameGrabberControls,
  &_swigt__p_yarp__dev__IFrameGrabberControlsDC1394,
  &_swigt__p_yarp__dev__IFrameGrabberImage,
  &_swigt__p_yarp__dev__IFrameGrabberImageRaw,
  &_swigt__p_yarp__dev__IFrameGrabberRgb,
  &_swigt__p_yarp__dev__IFrameWriterAudioVisual,
  &_swigt__p_yarp__dev__IFrameWriterImage,
  &_swigt__p_yarp__dev__IGazeControl,
  &_swigt__p_yarp__dev__IImpedanceControl,
  &_swigt__p_yarp__dev__IImpedanceControlRaw,
  &_swigt__p_yarp__dev__IOpenLoopControl,
  &_swigt__p_yarp__dev__IOpenLoopControlRaw,
  &_swigt__p_yarp__dev__IPidControl,
  &_swigt__p_yarp__dev__IPidControlRaw,
  &_swigt__p_yarp__dev__IPositionControl,
  &_swigt__p_yarp__dev__IPositionControlRaw,
  &_swigt__p_yarp__dev__IRemoteCalibrator,
  &_swigt__p_yarp__dev__ITorqueControl,
  &_swigt__p_yarp__dev__ITorqueControlRaw,
  &_swigt__p_yarp__dev__IVelocityControl,
  &_swigt__p_yarp__dev__IVelocityControlRaw,
  &_swigt__p_yarp__dev__JointTypeEnum,
  &_swigt__p_yarp__dev__MotorTorqueParameters,
  &_swigt__p_yarp__dev__Pid,
  &_swigt__p_yarp__dev__PolyDriver,
  &_swigt__p_yarp__dev__StubDriverCreator,
  &_swigt__p_yarp__os__AbstractContactable,
  &_swigt__p_yarp__os__Bottle,
  &_swigt__p_yarp__os__BufferedPortT_yarp__os__Bottle_t,
  &_swigt__p_yarp__os__BufferedPortT_yarp__os__Property_t,
  &_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,
  &_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,
  &_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,
  &_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,
  &_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,
  &_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,
  &_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,
  &_swigt__p_yarp__os__BufferedPortT_yarp__sig__Sound_t,
  &_swigt__p_yarp__os__ConnectionReader,
  &_swigt__p_yarp__os__ConnectionWriter,
  &_swigt__p_yarp__os__Contact,
  &_swigt__p_yarp__os__ContactStyle,
  &_swigt__p_yarp__os__Contactable,
  &_swigt__p_yarp__os__DummyConnector,
  &_swigt__p_yarp__os__IConfig,
  &_swigt__p_yarp__os__InputStream,
  &_swigt__p_yarp__os__Mutex,
  &_swigt__p_yarp__os__NameStore,
  &_swigt__p_yarp__os__NestedContact,
  &_swigt__p_yarp__os__NetUint16,
  &_swigt__p_yarp__os__Network,
  &_swigt__p_yarp__os__NetworkBase,
  &_swigt__p_yarp__os__OutputStream,
  &_swigt__p_yarp__os__Port,
  &_swigt__p_yarp__os__PortInfo,
  &_swigt__p_yarp__os__PortReader,
  &_swigt__p_yarp__os__PortReaderCreator,
  &_swigt__p_yarp__os__PortReport,
  &_swigt__p_yarp__os__PortWriter,
  &_swigt__p_yarp__os__PortWriterBufferBase,
  &_swigt__p_yarp__os__PortWriterBufferManager,
  &_swigt__p_yarp__os__PortWriterWrapper,
  &_swigt__p_yarp__os__Portable,
  &_swigt__p_yarp__os__PortablePairBase,
  &_swigt__p_yarp__os__PortablePairT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_yarp__sig__Sound_t,
  &_swigt__p_yarp__os__Property,
  &_swigt__p_yarp__os__QosStyle,
  &_swigt__p_yarp__os__RFModule,
  &_swigt__p_yarp__os__Random,
  &_swigt__p_yarp__os__RateThread,
  &_swigt__p_yarp__os__RateThreadWrapper,
  &_swigt__p_yarp__os__ResourceFinder,
  &_swigt__p_yarp__os__RpcClient,
  &_swigt__p_yarp__os__RpcServer,
  &_swigt__p_yarp__os__SearchMonitor,
  &_swigt__p_yarp__os__SearchReport,
  &_swigt__p_yarp__os__Searchable,
  &_swigt__p_yarp__os__Semaphore,
  &_swigt__p_yarp__os__SizedWriter,
  &_swigt__p_yarp__os__Stamp,
  &_swigt__p_yarp__os__Stamped,
  &_swigt__p_yarp__os__Things,
  &_swigt__p_yarp__os__Thread,
  &_swigt__p_yarp__os__Time,
  &_swigt__p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t,
  &_swigt__p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t,
  &_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,
  &_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,
  &_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,
  &_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,
  &_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,
  &_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,
  &_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,
  &_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t,
  &_swigt__p_yarp__os__TypedReaderT_yarp__os__Bottle_t,
  &_swigt__p_yarp__os__TypedReaderT_yarp__os__Property_t,
  &_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,
  &_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,
  &_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,
  &_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,
  &_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,
  &_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,
  &_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,
  &_swigt__p_yarp__os__TypedReaderT_yarp__sig__Sound_t,
  &_swigt__p_yarp__os__UnbufferedContactable,
  &_swigt__p_yarp__os__Value,
  &_swigt__p_yarp__os__Vocab,
  &_swigt__p_yarp__os__impl__PortReaderBufferBase,
  &_swigt__p_yarp__os__impl__PortReaderBufferBaseCreator,
  &_swigt__p_yarp__sig__FlexImage,
  &_swigt__p_yarp__sig__Image,
  &_swigt__p_yarp__sig__ImageOfT_float_t,
  &_swigt__p_yarp__sig__ImageOfT_int_t,
  &_swigt__p_yarp__sig__ImageOfT_unsigned_char_t,
  &_swigt__p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,
  &_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t,
  &_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,
  &_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,
  &_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,
  &_swigt__p_yarp__sig__Matrix,
  &_swigt__p_yarp__sig__PixelBgr,
  &_swigt__p_yarp__sig__PixelBgra,
  &_swigt__p_yarp__sig__PixelHsv,
  &_swigt__p_yarp__sig__PixelHsvFloat,
  &_swigt__p_yarp__sig__PixelRgb,
  &_swigt__p_yarp__sig__PixelRgbFloat,
  &_swigt__p_yarp__sig__PixelRgbInt,
  &_swigt__p_yarp__sig__PixelRgbSigned,
  &_swigt__p_yarp__sig__PixelRgba,
  &_swigt__p_yarp__sig__Sound,
  &_swigt__p_yarp__sig__Vector,
  &_swigt__p_yarp__sig__VectorBase,
};

static swig_cast_info _swigc__p_Bytes[] = {  {&_swigt__p_Bytes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Clock[] = {  {&_swigt__p_Clock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ContentType[] = {  {&_swigt__p_ContentType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ICalibrator[] = {  {&_swigt__p_ICalibrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NameStore[] = {  {&_swigt__p_NameStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NestedContact[] = {  {&_swigt__p_NestedContact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pid[] = {  {&_swigt__p_Pid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PortReaderCreator[] = {  {&_swigt__p_PortReaderCreator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ResourceFinderOptions[] = {  {&_swigt__p_ResourceFinderOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Runnable[] = {  {&_swigt__p_Runnable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Searchable[] = {  {&_swigt__p_Searchable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Type[] = {  {&_swigt__p_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_YARP_INT64[] = {  {&_swigt__p_YARP_INT64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cameraFeature_id_t[] = {  {&_swigt__p_cameraFeature_id_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_v_______int[] = {  {&_swigt__p_f_p_q_const__char_v_______int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bool_t[] = {  {&_swigt__p_std__vectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_yarp__dev__Pid_t[] = {  {&_swigt__p_std__vectorT_yarp__dev__Pid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__CalibrationParameters[] = {  {&_swigt__p_yarp__dev__CalibrationParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__CartesianEvent[] = {  {&_swigt__p_yarp__dev__CartesianEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__CartesianEventParameters[] = {  {&_swigt__p_yarp__dev__CartesianEventParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__CartesianEventVariables[] = {  {&_swigt__p_yarp__dev__CartesianEventVariables, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__DeviceDriver[] = {  {&_swigt__p_yarp__dev__DeviceDriver, 0, 0, 0},  {&_swigt__p_yarp__dev__PolyDriver, _p_yarp__dev__PolyDriverTo_p_yarp__dev__DeviceDriver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__DeviceResponder[] = {  {&_swigt__p_yarp__dev__DeviceResponder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__DriverCreator[] = {  {&_swigt__p_yarp__dev__DriverCreator, 0, 0, 0},  {&_swigt__p_yarp__dev__StubDriverCreator, _p_yarp__dev__StubDriverCreatorTo_p_yarp__dev__DriverCreator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__Drivers[] = {  {&_swigt__p_yarp__dev__Drivers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__GazeEvent[] = {  {&_swigt__p_yarp__dev__GazeEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__GazeEventParameters[] = {  {&_swigt__p_yarp__dev__GazeEventParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__GazeEventVariables[] = {  {&_swigt__p_yarp__dev__GazeEventVariables, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IAmplifierControl[] = {  {&_swigt__p_yarp__dev__IAmplifierControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IAmplifierControlRaw[] = {  {&_swigt__p_yarp__dev__IAmplifierControlRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IAudioVisualGrabber[] = {  {&_swigt__p_yarp__dev__IAudioVisualGrabber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IAudioVisualStream[] = {  {&_swigt__p_yarp__dev__IAudioVisualStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IAxisInfo[] = {  {&_swigt__p_yarp__dev__IAxisInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IAxisInfoRaw[] = {  {&_swigt__p_yarp__dev__IAxisInfoRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__ICalibrator[] = {  {&_swigt__p_yarp__dev__ICalibrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__ICartesianControl[] = {  {&_swigt__p_yarp__dev__ICartesianControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IControlCalibration[] = {  {&_swigt__p_yarp__dev__IControlCalibration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IControlCalibration2[] = {  {&_swigt__p_yarp__dev__IControlCalibration2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IControlCalibration2Raw[] = {  {&_swigt__p_yarp__dev__IControlCalibration2Raw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IControlCalibrationRaw[] = {  {&_swigt__p_yarp__dev__IControlCalibrationRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IControlDebug[] = {  {&_swigt__p_yarp__dev__IControlDebug, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IControlLimits[] = {  {&_swigt__p_yarp__dev__IControlLimits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IControlLimitsRaw[] = {  {&_swigt__p_yarp__dev__IControlLimitsRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IControlMode[] = {  {&_swigt__p_yarp__dev__IControlMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IControlModeRaw[] = {  {&_swigt__p_yarp__dev__IControlModeRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IEncoders[] = {  {&_swigt__p_yarp__dev__IEncoders, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IEncodersRaw[] = {  {&_swigt__p_yarp__dev__IEncodersRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IFrameGrabber[] = {  {&_swigt__p_yarp__dev__IFrameGrabber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IFrameGrabberControls[] = {  {&_swigt__p_yarp__dev__IFrameGrabberControlsDC1394, _p_yarp__dev__IFrameGrabberControlsDC1394To_p_yarp__dev__IFrameGrabberControls, 0, 0},  {&_swigt__p_yarp__dev__IFrameGrabberControls, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IFrameGrabberControlsDC1394[] = {  {&_swigt__p_yarp__dev__IFrameGrabberControlsDC1394, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IFrameGrabberImage[] = {  {&_swigt__p_yarp__dev__IFrameGrabberImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IFrameGrabberImageRaw[] = {  {&_swigt__p_yarp__dev__IFrameGrabberImageRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IFrameGrabberRgb[] = {  {&_swigt__p_yarp__dev__IFrameGrabberRgb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IFrameWriterAudioVisual[] = {  {&_swigt__p_yarp__dev__IFrameWriterAudioVisual, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IFrameWriterImage[] = {  {&_swigt__p_yarp__dev__IFrameWriterImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IGazeControl[] = {  {&_swigt__p_yarp__dev__IGazeControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IImpedanceControl[] = {  {&_swigt__p_yarp__dev__IImpedanceControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IImpedanceControlRaw[] = {  {&_swigt__p_yarp__dev__IImpedanceControlRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IOpenLoopControl[] = {  {&_swigt__p_yarp__dev__IOpenLoopControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IOpenLoopControlRaw[] = {  {&_swigt__p_yarp__dev__IOpenLoopControlRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IPidControl[] = {  {&_swigt__p_yarp__dev__IPidControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IPidControlRaw[] = {  {&_swigt__p_yarp__dev__IPidControlRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IPositionControl[] = {  {&_swigt__p_yarp__dev__IPositionControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IPositionControlRaw[] = {  {&_swigt__p_yarp__dev__IPositionControlRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IRemoteCalibrator[] = {  {&_swigt__p_yarp__dev__IRemoteCalibrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__ITorqueControl[] = {  {&_swigt__p_yarp__dev__ITorqueControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__ITorqueControlRaw[] = {  {&_swigt__p_yarp__dev__ITorqueControlRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IVelocityControl[] = {  {&_swigt__p_yarp__dev__IVelocityControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__IVelocityControlRaw[] = {  {&_swigt__p_yarp__dev__IVelocityControlRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__JointTypeEnum[] = {  {&_swigt__p_yarp__dev__JointTypeEnum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__MotorTorqueParameters[] = {  {&_swigt__p_yarp__dev__MotorTorqueParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__Pid[] = {  {&_swigt__p_yarp__dev__Pid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__PolyDriver[] = {  {&_swigt__p_yarp__dev__PolyDriver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__dev__StubDriverCreator[] = {  {&_swigt__p_yarp__dev__StubDriverCreator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__AbstractContactable[] = {  {&_swigt__p_yarp__os__RpcClient, _p_yarp__os__RpcClientTo_p_yarp__os__AbstractContactable, 0, 0},  {&_swigt__p_yarp__os__AbstractContactable, 0, 0, 0},  {&_swigt__p_yarp__os__RpcServer, _p_yarp__os__RpcServerTo_p_yarp__os__AbstractContactable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Bottle[] = {  {&_swigt__p_yarp__os__Bottle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__BufferedPortT_yarp__os__Bottle_t[] = {  {&_swigt__p_yarp__os__BufferedPortT_yarp__os__Bottle_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__BufferedPortT_yarp__os__Property_t[] = {  {&_swigt__p_yarp__os__BufferedPortT_yarp__os__Property_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t[] = {  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t[] = {  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t[] = {  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t[] = {  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t[] = {  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t[] = {  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t[] = {  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__BufferedPortT_yarp__sig__Sound_t[] = {  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__Sound_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__ConnectionReader[] = {  {&_swigt__p_yarp__os__ConnectionReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__ConnectionWriter[] = {  {&_swigt__p_yarp__os__ConnectionWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Contact[] = {  {&_swigt__p_yarp__os__Contact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__ContactStyle[] = {  {&_swigt__p_yarp__os__ContactStyle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Contactable[] = {  {&_swigt__p_yarp__os__RpcServer, _p_yarp__os__RpcServerTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__RpcClient, _p_yarp__os__RpcClientTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__os__Bottle_t, _p_yarp__os__BufferedPortT_yarp__os__Bottle_tTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__Port, _p_yarp__os__PortTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__os__Property_t, _p_yarp__os__BufferedPortT_yarp__os__Property_tTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__AbstractContactable, _p_yarp__os__AbstractContactableTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__UnbufferedContactable, _p_yarp__os__UnbufferedContactableTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__Contactable, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__Sound_t, _p_yarp__os__BufferedPortT_yarp__sig__Sound_tTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_tTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_tTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_tTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_tTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_tTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_tTo_p_yarp__os__Contactable, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_tTo_p_yarp__os__Contactable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__DummyConnector[] = {  {&_swigt__p_yarp__os__DummyConnector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__IConfig[] = {  {&_swigt__p_yarp__os__IConfig, 0, 0, 0},  {&_swigt__p_yarp__dev__DeviceDriver, _p_yarp__dev__DeviceDriverTo_p_yarp__os__IConfig, 0, 0},  {&_swigt__p_yarp__dev__PolyDriver, _p_yarp__dev__PolyDriverTo_p_yarp__os__IConfig, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__InputStream[] = {  {&_swigt__p_yarp__os__InputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Mutex[] = {  {&_swigt__p_yarp__os__Mutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__NameStore[] = {  {&_swigt__p_yarp__os__NameStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__NestedContact[] = {  {&_swigt__p_yarp__os__NestedContact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__NetUint16[] = {  {&_swigt__p_yarp__os__NetUint16, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Network[] = {  {&_swigt__p_yarp__os__Network, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__NetworkBase[] = {  {&_swigt__p_yarp__os__Network, _p_yarp__os__NetworkTo_p_yarp__os__NetworkBase, 0, 0},  {&_swigt__p_yarp__os__NetworkBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__OutputStream[] = {  {&_swigt__p_yarp__os__OutputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Port[] = {  {&_swigt__p_yarp__os__Port, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__PortInfo[] = {  {&_swigt__p_yarp__os__PortInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__PortReader[] = {  {&_swigt__p_yarp__sig__VectorBase, _p_yarp__sig__VectorBaseTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__os__Stamp, _p_yarp__os__StampTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_unsigned_char_t, _p_yarp__sig__ImageOfT_unsigned_char_tTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, _p_yarp__sig__ImageOfT_yarp__os__NetUint16_tTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__sig__Sound, _p_yarp__sig__SoundTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_tTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__os__Bottle, _p_yarp__os__BottleTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__os__PortablePairBase, _p_yarp__os__PortablePairBaseTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_int_t, _p_yarp__sig__ImageOfT_int_tTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__os__Property, _p_yarp__os__PropertyTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__os__Value, _p_yarp__os__ValueTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__sig__Vector, _p_yarp__sig__VectorTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_tTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__os__impl__PortReaderBufferBase, _p_yarp__os__impl__PortReaderBufferBaseTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__os__PortReader, 0, 0, 0},  {&_swigt__p_yarp__sig__FlexImage, _p_yarp__sig__FlexImageTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_tTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_float_t, _p_yarp__sig__ImageOfT_float_tTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__sig__Image, _p_yarp__sig__ImageTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__os__Portable, _p_yarp__os__PortableTo_p_yarp__os__PortReader, 0, 0},  {&_swigt__p_yarp__dev__DeviceResponder, _p_yarp__dev__DeviceResponderTo_p_yarp__os__PortReader, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__PortReaderCreator[] = {  {&_swigt__p_yarp__os__PortReaderCreator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__PortReport[] = {  {&_swigt__p_yarp__os__PortReport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__PortWriter[] = {  {&_swigt__p_yarp__sig__VectorBase, _p_yarp__sig__VectorBaseTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__os__Stamp, _p_yarp__os__StampTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_unsigned_char_t, _p_yarp__sig__ImageOfT_unsigned_char_tTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, _p_yarp__sig__ImageOfT_yarp__os__NetUint16_tTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__Sound, _p_yarp__sig__SoundTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_tTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__os__Bottle, _p_yarp__os__BottleTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__os__PortablePairBase, _p_yarp__os__PortablePairBaseTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_int_t, _p_yarp__sig__ImageOfT_int_tTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__os__PortWriter, 0, 0, 0},  {&_swigt__p_yarp__os__Property, _p_yarp__os__PropertyTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__os__Value, _p_yarp__os__ValueTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__Vector, _p_yarp__sig__VectorTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_tTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__os__PortWriterWrapper, _p_yarp__os__PortWriterWrapperTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__FlexImage, _p_yarp__sig__FlexImageTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_tTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_float_t, _p_yarp__sig__ImageOfT_float_tTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__sig__Image, _p_yarp__sig__ImageTo_p_yarp__os__PortWriter, 0, 0},  {&_swigt__p_yarp__os__Portable, _p_yarp__os__PortableTo_p_yarp__os__PortWriter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__PortWriterBufferBase[] = {  {&_swigt__p_yarp__os__PortWriterBufferBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__PortWriterBufferManager[] = {  {&_swigt__p_yarp__os__PortWriterBufferManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__PortWriterWrapper[] = {  {&_swigt__p_yarp__os__PortWriterWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Portable[] = {  {&_swigt__p_yarp__sig__VectorBase, _p_yarp__sig__VectorBaseTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__os__Stamp, _p_yarp__os__StampTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_unsigned_char_t, _p_yarp__sig__ImageOfT_unsigned_char_tTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, _p_yarp__sig__ImageOfT_yarp__os__NetUint16_tTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__sig__Sound, _p_yarp__sig__SoundTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_tTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__os__Bottle, _p_yarp__os__BottleTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__os__PortablePairBase, _p_yarp__os__PortablePairBaseTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_int_t, _p_yarp__sig__ImageOfT_int_tTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__os__Property, _p_yarp__os__PropertyTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__os__Value, _p_yarp__os__ValueTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__sig__Vector, _p_yarp__sig__VectorTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_tTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__sig__FlexImage, _p_yarp__sig__FlexImageTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__os__Portable, 0, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_tTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_float_t, _p_yarp__sig__ImageOfT_float_tTo_p_yarp__os__Portable, 0, 0},  {&_swigt__p_yarp__sig__Image, _p_yarp__sig__ImageTo_p_yarp__os__Portable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__PortablePairBase[] = {  {&_swigt__p_yarp__os__PortablePairBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__PortablePairT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_yarp__sig__Sound_t[] = {  {&_swigt__p_yarp__os__PortablePairT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_yarp__sig__Sound_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Property[] = {  {&_swigt__p_yarp__os__Property, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__QosStyle[] = {  {&_swigt__p_yarp__os__QosStyle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__RFModule[] = {  {&_swigt__p_yarp__os__RFModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Random[] = {  {&_swigt__p_yarp__os__Random, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__RateThread[] = {  {&_swigt__p_yarp__os__RateThread, 0, 0, 0},  {&_swigt__p_yarp__os__RateThreadWrapper, _p_yarp__os__RateThreadWrapperTo_p_yarp__os__RateThread, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__RateThreadWrapper[] = {  {&_swigt__p_yarp__os__RateThreadWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__ResourceFinder[] = {  {&_swigt__p_yarp__os__ResourceFinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__RpcClient[] = {  {&_swigt__p_yarp__os__RpcClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__RpcServer[] = {  {&_swigt__p_yarp__os__RpcServer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__SearchMonitor[] = {  {&_swigt__p_yarp__os__SearchMonitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__SearchReport[] = {  {&_swigt__p_yarp__os__SearchReport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Searchable[] = {  {&_swigt__p_yarp__os__Property, _p_yarp__os__PropertyTo_p_yarp__os__Searchable, 0, 0},  {&_swigt__p_yarp__os__Bottle, _p_yarp__os__BottleTo_p_yarp__os__Searchable, 0, 0},  {&_swigt__p_yarp__os__ResourceFinder, _p_yarp__os__ResourceFinderTo_p_yarp__os__Searchable, 0, 0},  {&_swigt__p_yarp__os__Searchable, 0, 0, 0},  {&_swigt__p_yarp__os__Value, _p_yarp__os__ValueTo_p_yarp__os__Searchable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Semaphore[] = {  {&_swigt__p_yarp__os__Semaphore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__SizedWriter[] = {  {&_swigt__p_yarp__os__SizedWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Stamp[] = {  {&_swigt__p_yarp__os__Stamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Stamped[] = {  {&_swigt__p_yarp__os__Stamped, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Things[] = {  {&_swigt__p_yarp__os__Things, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Thread[] = {  {&_swigt__p_yarp__os__Thread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Time[] = {  {&_swigt__p_yarp__os__Time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t[] = {  {&_swigt__p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__os__Bottle_t, _p_yarp__os__BufferedPortT_yarp__os__Bottle_tTo_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t, 0, 0},  {&_swigt__p_yarp__dev__DeviceResponder, _p_yarp__dev__DeviceResponderTo_p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t[] = {  {&_swigt__p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__os__Property_t, _p_yarp__os__BufferedPortT_yarp__os__Property_tTo_p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_tTo_p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t[] = {  {&_swigt__p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderT_yarp__os__Bottle_t[] = {  {&_swigt__p_yarp__os__TypedReaderT_yarp__os__Bottle_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__os__Bottle_t, _p_yarp__os__BufferedPortT_yarp__os__Bottle_tTo_p_yarp__os__TypedReaderT_yarp__os__Bottle_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderT_yarp__os__Property_t[] = {  {&_swigt__p_yarp__os__TypedReaderT_yarp__os__Property_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__os__Property_t, _p_yarp__os__BufferedPortT_yarp__os__Property_tTo_p_yarp__os__TypedReaderT_yarp__os__Property_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t[] = {  {&_swigt__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, _p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_tTo_p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__TypedReaderT_yarp__sig__Sound_t[] = {  {&_swigt__p_yarp__os__TypedReaderT_yarp__sig__Sound_t, 0, 0, 0},  {&_swigt__p_yarp__os__BufferedPortT_yarp__sig__Sound_t, _p_yarp__os__BufferedPortT_yarp__sig__Sound_tTo_p_yarp__os__TypedReaderT_yarp__sig__Sound_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__UnbufferedContactable[] = {  {&_swigt__p_yarp__os__RpcClient, _p_yarp__os__RpcClientTo_p_yarp__os__UnbufferedContactable, 0, 0},  {&_swigt__p_yarp__os__UnbufferedContactable, 0, 0, 0},  {&_swigt__p_yarp__os__AbstractContactable, _p_yarp__os__AbstractContactableTo_p_yarp__os__UnbufferedContactable, 0, 0},  {&_swigt__p_yarp__os__RpcServer, _p_yarp__os__RpcServerTo_p_yarp__os__UnbufferedContactable, 0, 0},  {&_swigt__p_yarp__os__Port, _p_yarp__os__PortTo_p_yarp__os__UnbufferedContactable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Value[] = {  {&_swigt__p_yarp__os__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__Vocab[] = {  {&_swigt__p_yarp__os__Vocab, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__impl__PortReaderBufferBase[] = {  {&_swigt__p_yarp__os__impl__PortReaderBufferBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__os__impl__PortReaderBufferBaseCreator[] = {  {&_swigt__p_yarp__os__impl__PortReaderBufferBaseCreator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__FlexImage[] = {  {&_swigt__p_yarp__sig__FlexImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__Image[] = {  {&_swigt__p_yarp__sig__Image, 0, 0, 0},  {&_swigt__p_yarp__sig__FlexImage, _p_yarp__sig__FlexImageTo_p_yarp__sig__Image, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_tTo_p_yarp__sig__Image, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, _p_yarp__sig__ImageOfT_yarp__os__NetUint16_tTo_p_yarp__sig__Image, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_unsigned_char_t, _p_yarp__sig__ImageOfT_unsigned_char_tTo_p_yarp__sig__Image, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_int_t, _p_yarp__sig__ImageOfT_int_tTo_p_yarp__sig__Image, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_tTo_p_yarp__sig__Image, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_float_t, _p_yarp__sig__ImageOfT_float_tTo_p_yarp__sig__Image, 0, 0},  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, _p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_tTo_p_yarp__sig__Image, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__ImageOfT_float_t[] = {  {&_swigt__p_yarp__sig__ImageOfT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__ImageOfT_int_t[] = {  {&_swigt__p_yarp__sig__ImageOfT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__ImageOfT_unsigned_char_t[] = {  {&_swigt__p_yarp__sig__ImageOfT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__ImageOfT_yarp__os__NetUint16_t[] = {  {&_swigt__p_yarp__sig__ImageOfT_yarp__os__NetUint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t[] = {  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t[] = {  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t[] = {  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t[] = {  {&_swigt__p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__Matrix[] = {  {&_swigt__p_yarp__sig__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__PixelBgr[] = {  {&_swigt__p_yarp__sig__PixelBgr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__PixelBgra[] = {  {&_swigt__p_yarp__sig__PixelBgra, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__PixelHsv[] = {  {&_swigt__p_yarp__sig__PixelHsv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__PixelHsvFloat[] = {  {&_swigt__p_yarp__sig__PixelHsvFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__PixelRgb[] = {  {&_swigt__p_yarp__sig__PixelRgb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__PixelRgbFloat[] = {  {&_swigt__p_yarp__sig__PixelRgbFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__PixelRgbInt[] = {  {&_swigt__p_yarp__sig__PixelRgbInt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__PixelRgbSigned[] = {  {&_swigt__p_yarp__sig__PixelRgbSigned, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__PixelRgba[] = {  {&_swigt__p_yarp__sig__PixelRgba, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__Sound[] = {  {&_swigt__p_yarp__sig__Sound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__Vector[] = {  {&_swigt__p_yarp__sig__Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_yarp__sig__VectorBase[] = {  {&_swigt__p_yarp__sig__VectorBase, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Bytes,
  _swigc__p_Clock,
  _swigc__p_ContentType,
  _swigc__p_ICalibrator,
  _swigc__p_NameStore,
  _swigc__p_NestedContact,
  _swigc__p_Pid,
  _swigc__p_PortReaderCreator,
  _swigc__p_ResourceFinderOptions,
  _swigc__p_Runnable,
  _swigc__p_Searchable,
  _swigc__p_Type,
  _swigc__p_YARP_INT64,
  _swigc__p_bool,
  _swigc__p_cameraFeature_id_t,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_p_q_const__char_v_______int,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_p_char,
  _swigc__p_size_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_bool_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_yarp__dev__Pid_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_void,
  _swigc__p_yarp__dev__CalibrationParameters,
  _swigc__p_yarp__dev__CartesianEvent,
  _swigc__p_yarp__dev__CartesianEventParameters,
  _swigc__p_yarp__dev__CartesianEventVariables,
  _swigc__p_yarp__dev__DeviceDriver,
  _swigc__p_yarp__dev__DeviceResponder,
  _swigc__p_yarp__dev__DriverCreator,
  _swigc__p_yarp__dev__Drivers,
  _swigc__p_yarp__dev__GazeEvent,
  _swigc__p_yarp__dev__GazeEventParameters,
  _swigc__p_yarp__dev__GazeEventVariables,
  _swigc__p_yarp__dev__IAmplifierControl,
  _swigc__p_yarp__dev__IAmplifierControlRaw,
  _swigc__p_yarp__dev__IAudioVisualGrabber,
  _swigc__p_yarp__dev__IAudioVisualStream,
  _swigc__p_yarp__dev__IAxisInfo,
  _swigc__p_yarp__dev__IAxisInfoRaw,
  _swigc__p_yarp__dev__ICalibrator,
  _swigc__p_yarp__dev__ICartesianControl,
  _swigc__p_yarp__dev__IControlCalibration,
  _swigc__p_yarp__dev__IControlCalibration2,
  _swigc__p_yarp__dev__IControlCalibration2Raw,
  _swigc__p_yarp__dev__IControlCalibrationRaw,
  _swigc__p_yarp__dev__IControlDebug,
  _swigc__p_yarp__dev__IControlLimits,
  _swigc__p_yarp__dev__IControlLimitsRaw,
  _swigc__p_yarp__dev__IControlMode,
  _swigc__p_yarp__dev__IControlModeRaw,
  _swigc__p_yarp__dev__IEncoders,
  _swigc__p_yarp__dev__IEncodersRaw,
  _swigc__p_yarp__dev__IFrameGrabber,
  _swigc__p_yarp__dev__IFrameGrabberControls,
  _swigc__p_yarp__dev__IFrameGrabberControlsDC1394,
  _swigc__p_yarp__dev__IFrameGrabberImage,
  _swigc__p_yarp__dev__IFrameGrabberImageRaw,
  _swigc__p_yarp__dev__IFrameGrabberRgb,
  _swigc__p_yarp__dev__IFrameWriterAudioVisual,
  _swigc__p_yarp__dev__IFrameWriterImage,
  _swigc__p_yarp__dev__IGazeControl,
  _swigc__p_yarp__dev__IImpedanceControl,
  _swigc__p_yarp__dev__IImpedanceControlRaw,
  _swigc__p_yarp__dev__IOpenLoopControl,
  _swigc__p_yarp__dev__IOpenLoopControlRaw,
  _swigc__p_yarp__dev__IPidControl,
  _swigc__p_yarp__dev__IPidControlRaw,
  _swigc__p_yarp__dev__IPositionControl,
  _swigc__p_yarp__dev__IPositionControlRaw,
  _swigc__p_yarp__dev__IRemoteCalibrator,
  _swigc__p_yarp__dev__ITorqueControl,
  _swigc__p_yarp__dev__ITorqueControlRaw,
  _swigc__p_yarp__dev__IVelocityControl,
  _swigc__p_yarp__dev__IVelocityControlRaw,
  _swigc__p_yarp__dev__JointTypeEnum,
  _swigc__p_yarp__dev__MotorTorqueParameters,
  _swigc__p_yarp__dev__Pid,
  _swigc__p_yarp__dev__PolyDriver,
  _swigc__p_yarp__dev__StubDriverCreator,
  _swigc__p_yarp__os__AbstractContactable,
  _swigc__p_yarp__os__Bottle,
  _swigc__p_yarp__os__BufferedPortT_yarp__os__Bottle_t,
  _swigc__p_yarp__os__BufferedPortT_yarp__os__Property_t,
  _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,
  _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,
  _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,
  _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,
  _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,
  _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,
  _swigc__p_yarp__os__BufferedPortT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,
  _swigc__p_yarp__os__BufferedPortT_yarp__sig__Sound_t,
  _swigc__p_yarp__os__ConnectionReader,
  _swigc__p_yarp__os__ConnectionWriter,
  _swigc__p_yarp__os__Contact,
  _swigc__p_yarp__os__ContactStyle,
  _swigc__p_yarp__os__Contactable,
  _swigc__p_yarp__os__DummyConnector,
  _swigc__p_yarp__os__IConfig,
  _swigc__p_yarp__os__InputStream,
  _swigc__p_yarp__os__Mutex,
  _swigc__p_yarp__os__NameStore,
  _swigc__p_yarp__os__NestedContact,
  _swigc__p_yarp__os__NetUint16,
  _swigc__p_yarp__os__Network,
  _swigc__p_yarp__os__NetworkBase,
  _swigc__p_yarp__os__OutputStream,
  _swigc__p_yarp__os__Port,
  _swigc__p_yarp__os__PortInfo,
  _swigc__p_yarp__os__PortReader,
  _swigc__p_yarp__os__PortReaderCreator,
  _swigc__p_yarp__os__PortReport,
  _swigc__p_yarp__os__PortWriter,
  _swigc__p_yarp__os__PortWriterBufferBase,
  _swigc__p_yarp__os__PortWriterBufferManager,
  _swigc__p_yarp__os__PortWriterWrapper,
  _swigc__p_yarp__os__Portable,
  _swigc__p_yarp__os__PortablePairBase,
  _swigc__p_yarp__os__PortablePairT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_yarp__sig__Sound_t,
  _swigc__p_yarp__os__Property,
  _swigc__p_yarp__os__QosStyle,
  _swigc__p_yarp__os__RFModule,
  _swigc__p_yarp__os__Random,
  _swigc__p_yarp__os__RateThread,
  _swigc__p_yarp__os__RateThreadWrapper,
  _swigc__p_yarp__os__ResourceFinder,
  _swigc__p_yarp__os__RpcClient,
  _swigc__p_yarp__os__RpcServer,
  _swigc__p_yarp__os__SearchMonitor,
  _swigc__p_yarp__os__SearchReport,
  _swigc__p_yarp__os__Searchable,
  _swigc__p_yarp__os__Semaphore,
  _swigc__p_yarp__os__SizedWriter,
  _swigc__p_yarp__os__Stamp,
  _swigc__p_yarp__os__Stamped,
  _swigc__p_yarp__os__Things,
  _swigc__p_yarp__os__Thread,
  _swigc__p_yarp__os__Time,
  _swigc__p_yarp__os__TypedReaderCallbackT_yarp__os__Bottle_t,
  _swigc__p_yarp__os__TypedReaderCallbackT_yarp__os__Property_t,
  _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,
  _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,
  _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,
  _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,
  _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,
  _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,
  _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,
  _swigc__p_yarp__os__TypedReaderCallbackT_yarp__sig__Sound_t,
  _swigc__p_yarp__os__TypedReaderT_yarp__os__Bottle_t,
  _swigc__p_yarp__os__TypedReaderT_yarp__os__Property_t,
  _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelFloat_t_t,
  _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelInt_t_t,
  _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono16_t_t,
  _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelMono_t_t,
  _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t_t,
  _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t_t,
  _swigc__p_yarp__os__TypedReaderT_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t_t,
  _swigc__p_yarp__os__TypedReaderT_yarp__sig__Sound_t,
  _swigc__p_yarp__os__UnbufferedContactable,
  _swigc__p_yarp__os__Value,
  _swigc__p_yarp__os__Vocab,
  _swigc__p_yarp__os__impl__PortReaderBufferBase,
  _swigc__p_yarp__os__impl__PortReaderBufferBaseCreator,
  _swigc__p_yarp__sig__FlexImage,
  _swigc__p_yarp__sig__Image,
  _swigc__p_yarp__sig__ImageOfT_float_t,
  _swigc__p_yarp__sig__ImageOfT_int_t,
  _swigc__p_yarp__sig__ImageOfT_unsigned_char_t,
  _swigc__p_yarp__sig__ImageOfT_yarp__os__NetUint16_t,
  _swigc__p_yarp__sig__ImageOfT_yarp__sig__PixelBgr_t,
  _swigc__p_yarp__sig__ImageOfT_yarp__sig__PixelRgbFloat_t,
  _swigc__p_yarp__sig__ImageOfT_yarp__sig__PixelRgb_t,
  _swigc__p_yarp__sig__ImageOfT_yarp__sig__PixelRgba_t,
  _swigc__p_yarp__sig__Matrix,
  _swigc__p_yarp__sig__PixelBgr,
  _swigc__p_yarp__sig__PixelBgra,
  _swigc__p_yarp__sig__PixelHsv,
  _swigc__p_yarp__sig__PixelHsvFloat,
  _swigc__p_yarp__sig__PixelRgb,
  _swigc__p_yarp__sig__PixelRgbFloat,
  _swigc__p_yarp__sig__PixelRgbInt,
  _swigc__p_yarp__sig__PixelRgbSigned,
  _swigc__p_yarp__sig__PixelRgba,
  _swigc__p_yarp__sig__Sound,
  _swigc__p_yarp__sig__Vector,
  _swigc__p_yarp__sig__VectorBase,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

