/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class AbstractContactable : UnbufferedContactable {
  private HandleRef swigCPtr;

  internal AbstractContactable(IntPtr cPtr, bool cMemoryOwn) : base(yarpPINVOKE.AbstractContactable_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(AbstractContactable obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~AbstractContactable() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_AbstractContactable(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new bool open() {
    bool ret = yarpPINVOKE.AbstractContactable_open__SWIG_0_0(swigCPtr);
    return ret;
  }

  public override bool open(string name) {
    bool ret = yarpPINVOKE.AbstractContactable_open__SWIG_0_1(swigCPtr, name);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool open(Contact contact, bool registerName) {
    bool ret = yarpPINVOKE.AbstractContactable_open__SWIG_0_2(swigCPtr, Contact.getCPtr(contact), registerName);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool open(Contact contact) {
    bool ret = yarpPINVOKE.AbstractContactable_open__SWIG_0_3(swigCPtr, Contact.getCPtr(contact));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Port asPort() {
    Port ret = new Port(yarpPINVOKE.AbstractContactable_asPort__SWIG_0(swigCPtr), false);
    return ret;
  }

  public override bool addOutput(string name) {
    bool ret = yarpPINVOKE.AbstractContactable_addOutput__SWIG_0(swigCPtr, name);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool addOutput(string name, string carrier) {
    bool ret = yarpPINVOKE.AbstractContactable_addOutput__SWIG_1(swigCPtr, name, carrier);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool addOutput(Contact contact) {
    bool ret = yarpPINVOKE.AbstractContactable_addOutput__SWIG_2(swigCPtr, Contact.getCPtr(contact));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void close() {
    yarpPINVOKE.AbstractContactable_close(swigCPtr);
  }

  public override void interrupt() {
    yarpPINVOKE.AbstractContactable_interrupt(swigCPtr);
  }

  public override void resume() {
    yarpPINVOKE.AbstractContactable_resume(swigCPtr);
  }

  public override Contact where() {
    Contact ret = new Contact(yarpPINVOKE.AbstractContactable_where(swigCPtr), true);
    return ret;
  }

  public override string getName() {
    string ret = yarpPINVOKE.AbstractContactable_getName(swigCPtr);
    return ret;
  }

  public override bool setEnvelope(PortWriter envelope) {
    bool ret = yarpPINVOKE.AbstractContactable_setEnvelope(swigCPtr, PortWriter.getCPtr(envelope));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool getEnvelope(PortReader envelope) {
    bool ret = yarpPINVOKE.AbstractContactable_getEnvelope(swigCPtr, PortReader.getCPtr(envelope));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int getInputCount() {
    int ret = yarpPINVOKE.AbstractContactable_getInputCount(swigCPtr);
    return ret;
  }

  public override int getOutputCount() {
    int ret = yarpPINVOKE.AbstractContactable_getOutputCount(swigCPtr);
    return ret;
  }

  public override void getReport(PortReport reporter) {
    yarpPINVOKE.AbstractContactable_getReport(swigCPtr, PortReport.getCPtr(reporter));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void setReporter(PortReport reporter) {
    yarpPINVOKE.AbstractContactable_setReporter(swigCPtr, PortReport.getCPtr(reporter));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool isWriting() {
    bool ret = yarpPINVOKE.AbstractContactable_isWriting(swigCPtr);
    return ret;
  }

  public override void setReader(PortReader reader) {
    yarpPINVOKE.AbstractContactable_setReader(swigCPtr, PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void setAdminReader(PortReader reader) {
    yarpPINVOKE.AbstractContactable_setAdminReader(swigCPtr, PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void setInputMode(bool expectInput) {
    yarpPINVOKE.AbstractContactable_setInputMode(swigCPtr, expectInput);
  }

  public override void setOutputMode(bool expectOutput) {
    yarpPINVOKE.AbstractContactable_setOutputMode(swigCPtr, expectOutput);
  }

  public override void setRpcMode(bool expectRpc) {
    yarpPINVOKE.AbstractContactable_setRpcMode(swigCPtr, expectRpc);
  }

  public override SWIGTYPE_p_Type getType() {
    SWIGTYPE_p_Type ret = new SWIGTYPE_p_Type(yarpPINVOKE.AbstractContactable_getType(swigCPtr), true);
    return ret;
  }

  public override void promiseType(SWIGTYPE_p_Type typ) {
    yarpPINVOKE.AbstractContactable_promiseType(swigCPtr, SWIGTYPE_p_Type.getCPtr(typ));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Property acquireProperties(bool readOnly) {
    IntPtr cPtr = yarpPINVOKE.AbstractContactable_acquireProperties(swigCPtr, readOnly);
    Property ret = (cPtr == IntPtr.Zero) ? null : new Property(cPtr, false);
    return ret;
  }

  public override void releaseProperties(Property prop) {
    yarpPINVOKE.AbstractContactable_releaseProperties(swigCPtr, Property.getCPtr(prop));
  }

  public new bool write(PortWriter writer, PortWriter callback) {
    bool ret = yarpPINVOKE.AbstractContactable_write__SWIG_0(swigCPtr, PortWriter.getCPtr(writer), PortWriter.getCPtr(callback));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(PortWriter writer) {
    bool ret = yarpPINVOKE.AbstractContactable_write__SWIG_1(swigCPtr, PortWriter.getCPtr(writer));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(PortWriter writer, PortReader reader, PortWriter callback) {
    bool ret = yarpPINVOKE.AbstractContactable_write__SWIG_2(swigCPtr, PortWriter.getCPtr(writer), PortReader.getCPtr(reader), PortWriter.getCPtr(callback));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool write(PortWriter writer, PortReader reader) {
    bool ret = yarpPINVOKE.AbstractContactable_write__SWIG_3(swigCPtr, PortWriter.getCPtr(writer), PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool read(PortReader reader, bool willReply) {
    bool ret = yarpPINVOKE.AbstractContactable_read__SWIG_0(swigCPtr, PortReader.getCPtr(reader), willReply);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new bool read(PortReader reader) {
    bool ret = yarpPINVOKE.AbstractContactable_read__SWIG_1(swigCPtr, PortReader.getCPtr(reader));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool reply(PortWriter writer) {
    bool ret = yarpPINVOKE.AbstractContactable_reply(swigCPtr, PortWriter.getCPtr(writer));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool replyAndDrop(PortWriter writer) {
    bool ret = yarpPINVOKE.AbstractContactable_replyAndDrop(swigCPtr, PortWriter.getCPtr(writer));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void includeNodeInName(bool flag) {
    yarpPINVOKE.AbstractContactable_includeNodeInName(swigCPtr, flag);
  }

  public override bool setCallbackLock(SWIGTYPE_p_yarp__os__Mutex mutex) {
    bool ret = yarpPINVOKE.AbstractContactable_setCallbackLock__SWIG_0(swigCPtr, SWIGTYPE_p_yarp__os__Mutex.getCPtr(mutex));
    return ret;
  }

  public override bool setCallbackLock() {
    bool ret = yarpPINVOKE.AbstractContactable_setCallbackLock__SWIG_1(swigCPtr);
    return ret;
  }

  public override bool removeCallbackLock() {
    bool ret = yarpPINVOKE.AbstractContactable_removeCallbackLock(swigCPtr);
    return ret;
  }

  public override bool lockCallback() {
    bool ret = yarpPINVOKE.AbstractContactable_lockCallback(swigCPtr);
    return ret;
  }

  public override bool tryLockCallback() {
    bool ret = yarpPINVOKE.AbstractContactable_tryLockCallback(swigCPtr);
    return ret;
  }

  public override void unlockCallback() {
    yarpPINVOKE.AbstractContactable_unlockCallback(swigCPtr);
  }

}
