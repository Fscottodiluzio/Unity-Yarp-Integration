//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IAmplifierControlRaw : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IAmplifierControlRaw(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IAmplifierControlRaw obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IAmplifierControlRaw() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_IAmplifierControlRaw(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual bool enableAmpRaw(int j) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_enableAmpRaw(swigCPtr, j);
    return ret;
  }

  public virtual bool disableAmpRaw(int j) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_disableAmpRaw(swigCPtr, j);
    return ret;
  }

  public virtual bool getAmpStatusRaw(SWIGTYPE_p_int st) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_getAmpStatusRaw__SWIG_0(swigCPtr, SWIGTYPE_p_int.getCPtr(st));
    return ret;
  }

  public virtual bool getAmpStatusRaw(int j, SWIGTYPE_p_int st) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_getAmpStatusRaw__SWIG_1(swigCPtr, j, SWIGTYPE_p_int.getCPtr(st));
    return ret;
  }

  public virtual bool getCurrentsRaw(SWIGTYPE_p_double vals) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_getCurrentsRaw(swigCPtr, SWIGTYPE_p_double.getCPtr(vals));
    return ret;
  }

  public virtual bool getCurrentRaw(int j, SWIGTYPE_p_double val) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_getCurrentRaw(swigCPtr, j, SWIGTYPE_p_double.getCPtr(val));
    return ret;
  }

  public virtual bool setMaxCurrentRaw(int j, double v) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_setMaxCurrentRaw(swigCPtr, j, v);
    return ret;
  }

  public virtual bool getMaxCurrentRaw(int j, SWIGTYPE_p_double v) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_getMaxCurrentRaw(swigCPtr, j, SWIGTYPE_p_double.getCPtr(v));
    return ret;
  }

  public virtual bool getNominalCurrentRaw(int m, SWIGTYPE_p_double val) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_getNominalCurrentRaw(swigCPtr, m, SWIGTYPE_p_double.getCPtr(val));
    return ret;
  }

  public virtual bool getPeakCurrentRaw(int m, SWIGTYPE_p_double val) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_getPeakCurrentRaw(swigCPtr, m, SWIGTYPE_p_double.getCPtr(val));
    return ret;
  }

  public virtual bool setPeakCurrentRaw(int m, double val) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_setPeakCurrentRaw(swigCPtr, m, val);
    return ret;
  }

  public virtual bool getPWMRaw(int j, SWIGTYPE_p_double val) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_getPWMRaw(swigCPtr, j, SWIGTYPE_p_double.getCPtr(val));
    return ret;
  }

  public virtual bool getPWMLimitRaw(int j, SWIGTYPE_p_double val) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_getPWMLimitRaw(swigCPtr, j, SWIGTYPE_p_double.getCPtr(val));
    return ret;
  }

  public virtual bool setPWMLimitRaw(int j, double val) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_setPWMLimitRaw(swigCPtr, j, val);
    return ret;
  }

  public virtual bool getPowerSupplyVoltageRaw(int j, SWIGTYPE_p_double val) {
    bool ret = yarpPINVOKE.IAmplifierControlRaw_getPowerSupplyVoltageRaw(swigCPtr, j, SWIGTYPE_p_double.getCPtr(val));
    return ret;
  }

}
